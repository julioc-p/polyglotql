[
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Riemannian geometry\": \"Q761383\"}, \"relationships\": {\"named after\": \"P138\"}}<|im_end|>\n<|im_start|>user\nAfter whom is the Riemannian geometry named?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE { wd:Q761383 wdt:P138 ?result. }",
        "generated_sparql": "select distinct ?answer where { wd:Q761383 wdt:P138 ?answer}",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql select distinct ?answer where { wd:Q761383 wdt:P138 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q761383 wdt:P138 ?answer}``` , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n md:Q107110 wdt:P161 ?x0 . wd:Q107110 wdt:P161 wd:Q107110 . wd:Q107110 wdt:P161 wd:Q107110 . wd:Q107110 wdt:P161 wd:Q107110 . wd:Q107110 wdt:P161 wd:Q107110 . wd:Q107110 wdt:P161 wd:Q107110 . wd:Q107110 wdt:P161 wd:Q107110 }"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"animal\": \"Q16521\", \"military operation\": \"Q645883\", \"Australian Defence Force\": \"Q625657\"}, \"relationships\": {\"instance of\": \"P31\", \"part of\": \"P710\"}}<|im_end|>\n<|im_start|>user\nWhich animal participated in a military operation with the Australian Defence Force?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q16521. ?mop wdt:P31 wd:Q645883; wdt:P710 ?result, wd:Q625657.}",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P710 wd:Q16521 . ?sbj wdt:P31 wd:Q645883 . ?sbj wdt:P31 wd:Q625657 }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P710 wd:Q16521 . ?sbj wdt:P31 wd:Q645883 . ?sbj wdt:P31 wd:Q625657 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n md:Q106506 wdt:P108 ?x0 . ?x0 wdt:P127 wd:Q106506 . ?x0 wdt:P127 wd:Q1082580 . ?x0 wdt:P127 wd:Q127552 . ?x0 wdt:P127 wd:Q1082582 . ?x0 wdt:P127 wd:Q1082584 . ?x0 wdt:P127 wd:Q1082587 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Geralt of Rivia\": \"Q11835640\", \"Yennefer of Vengerberg\": \"Q4205826\", \"Triss Merigold\": \"Q4463198\"}, \"relationships\": {\"portrayed by\": \"P674\", \"spouse\": \"P451\"}}<|im_end|>\n<|im_start|>user\namong the characters in the witcher, who has two unmarried partners, Yennefer of Vengerberg and Triss Merigold?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q11835640 wdt:P674 ?result. ?result wdt:P451 ?p1, ?p2. FILTER(?p1 != ?p2 &&(?result IN (wd:Q4205826, wd:Q4463198)))}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q11835640 wdt:P674 ?answer . ?answer wdt:P451 wd:Q4205826 . ?answer wdt:P451 wd:Q4463198}",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q11835640 wdt:P674 ?answer . ?answer wdt:P451 wd:Q4205826 . ?answer wdt:P451 wd:Q4463198}``` , \n 's spouse\": \"P26\"}} , \n , and \n 's spouse\": \"P26\"}} 's actor 's spouse marry Yennefer of Vengerberg and marry Triss Merigold 's actor 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse '"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Tencent\": \"Q860580\", \"National People's Congress\": \"Q10891456\"}, \"relationships\": {\"founder\": \"P112\", \"member of\": \"P39\"}}<|im_end|>\n<|im_start|>user\namong the founders of tencent company, who has been member of national people\u2019s congress?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q860580 wdt:P112 ?result. ?result wdt:P39 wd:Q10891456.}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q860580 wdt:P112 ?answer . ?answer wdt:P39 wd:Q10891456}",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q860580 wdt:P112 ?answer . ?answer wdt:P39 wd:Q10891456}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q860580 wdt:P112 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q860580 wdt:P112 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q860580 wdt:P112 ?answer}``` , \n , \n , \n , \n wd:Q860580 wdt:P112 ?answer}``` , \n , \n , \n wd:Q860580 wdt:P112 ?answer}``` , \n , \n , \n wd:Q860580 wdt:P112 ?answer}``` , \n , \n , \n wd:Q860580 wdt:P112 ?answer}``` , \n , \n wd:Q860580 wdt:P112 ?answer}``` , \n , \n wd:Q860580 wdt:P112 ?answer}``` , \n , \n wd:Q860580 wdt:P112 ?answer}``` , \n , \n wd:Q860580 wdt:P112 ?answer }``` , \n , \n , \n wd:Q860580 wdt:P112 ?answer }``` , \n , \n wd:Q860580 wdt:P112 ?answer }``` , \n , \n wd:Q860580 wdt:P112 ?"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Hunter \u00d7 Hunter\": \"Q696071\", \"middle school student\": \"Q16003532\"}, \"relationships\": {\"author\": \"P50\", \"notable work\": \"P800\", \"main character\": \"P921\"}}<|im_end|>\n<|im_start|>user\namong the other representative work of the author of hunter x hunter, which one is talking about middle school student?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q696071 wdt:P50 ?author. ?author wdt:P800 ?result. ?result wdt:P921 wd:Q16003532 FILTER(?result != wd:Q69071)}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q696071 wdt:P50 ?answer . ?answer wdt:P800 wd:Q16003532}",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q696071 wdt:P50 ?answer . ?answer wdt:P800 wd:Q16003532}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q16003532 wdt:P921 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q16003532 wdt:P921 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q16003532 wdt:P921 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q16003532 wdt:P921 ?answer}``` , \n , \n , \n , \n , \n wd:Q16003532 wdt:P921 ?answer}``` , \n , \n , \n , \n wd:Q16003532 wdt:P921 ?answer}``` , \n , \n , \n , \n wd:Q16003532 wdt:P921 ?answer}``` , \n , \n , \n wd:Q16003532 wdt:P921 ?answer}``` , \n , \n , \n wd:Q16003532 wdt:P921 ?answer}``` , \n , \n , \n wd:Q16003532 wdt:P921 ?answer}``` , \n , \n , \n wd:Q16003532 wdt:P921 ?answer}``` , \n , \n wd:Q1600353"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Siemens AG\": \"Q81230\"}, \"relationships\": {\"stock exchange\": \"P414\"}}<|im_end|>\n<|im_start|>user\nOn which stock exchanges are Siemens AG shares traded?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q81230 wdt:P414 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P414 wd:Q81230 }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P414 wd:Q81230 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8f8l wdt:P112 ?x0 . ?x0 wdt:P108 wd:Q1372258 . ?x0 wdt:P108 wd:Q1372258 . ?x0 wdt:P108 wd:Q1372258 . ?x0 wdt:P108 wd:Q1372258 . ?x0 wdt:P108 wd:Q1372258 . ?x0 wdt:P108 wd:Q1372258 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n \n \n \n \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"The Witcher\": \"Q11835640\"}, \"relationships\": {\"author\": \"P50\", \"notable work\": \"P800\"}}<|im_end|>\n<|im_start|>user\nApart from the book series the witcher, name all of the author\u2019s notable work.<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q11835640 wdt:P50 ?author. ?author wdt:P800 ?result. FILTER(?result != wd:Q11835640)}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q11835640 wdt:P50 ?X . ?X wdt:P800 ?answer}",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q11835640 wdt:P50 ?X . ?X wdt:P800 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q11835640 wdt:P50 ?answer}``` , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n md:Q108377711 wdt:P1040 ?x0 . wd:Q108377711 wdt:P1431 ?x0 . wd:Q108377711 wdt:P162|wdt:P272 ?x0 . wd:Q108377711 wdt:P58 ?x0 . wd:Q1084400 wdt:P1040 ?x0 . wd:Q1084400 wdt:P1431 ?x0 . wd:Q1084400 wdt:P162|wdt:P272 ?"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Brooke Raboutou\": \"Q2926117\", \"Colin Duffy\": \"Q87192979\", \"United States of America\": \"Q35657\"}, \"relationships\": {\"place of birth\": \"P19\", \"located in the administrative territorial entity\": \"P131\"}}<|im_end|>\n<|im_start|>user\nare brooke raboutou and colin duffy from same state of the usa?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q2926117 wdt:P19 ?b1. wd:Q87192979 wdt:P19 ?b2. ?b1 wdt:P131* ?state. ?b2 wdt:P131* ?state. ?state wdt:P31 wd:Q35657 .}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q2926117 wdt:P19 ?answer . ?answer wdt:P131 wd:Q35657}",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q2926117 wdt:P19 ?answer . ?answer wdt:P131 wd:Q35657}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q87192929 wdt:P112 ?x0 . ?x0 wdt:P108 wd:Q87192929 . ?x0 wdt:P108 wd:Q108478114 . ?x0 wdt:P108 wd:Q108478119 . ?x0 wdt:P108 wd:Q108478123 . ?x0 wdt:P108 wd:Q108478133 . ?x0 wdt:P108 wd:Q108478137 . ?x0 wdt:P108 wd:Q108478139 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q87192929 wdt:P112 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q87192929 wdt:P112 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q87192929 wdt:P112 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q87192929 wdt:P112 ?x0 }``` , \n , \n ,"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"water\": \"Q283\"}, \"relationships\": {\"boiling point\": \"P2102\"}}<|im_end|>\n<|im_start|>user\nWhat is the boiling point of water?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q283 wdt:P2102 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P2102 wd:Q283 }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P2102 wd:Q283 }``` , \n , 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Yayoi Kusama\": \"Q231121\"}, \"relationships\": {\"educated at\": \"P69\"}}<|im_end|>\n<|im_start|>user\nAt which school was Yayoi Kusama educated at?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result {wd:Q231121 wdt:P69 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P69 wd:Q231121 }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P69 wd:Q231121 }``` , \n , \n , \n , \n , \n , \n , \n , and \n were written by Yayoi Kusama? , written by Y\u014dko Yaguchi 's spouse , and written by Y\u014dko Yaguchi 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse 's spouse ?x0 . ?x0 wdt:P26 ?x1 . ?x1 wdt:P26 ?x2 . ?x2 wdt:P26 ?x3 . ?x3 wdt:P26 ?x4 . ?x4 wdt:P26 ?x5 . ?x5 wdt:P26 ?x6 . ?x6 wdt:P26 wd:Q11463010 . FILTER ( ?x0 != ?x1 ) . FILTER ( ?x1 != ?x2 ) . FILTER ( ?x2 != ?x3 ) . FILTER ( ?x3 != ?x4 ) . FILTER ( ?x4 != ?x5 ) . FILTER ( ?x5 != ?x6 ) . wd:Q11463010 wdt:P58 ?x0 . wd:Q11463010 wdt:P58 ?x1 . wd:Q11463010 wdt:P58 ?x2 . wd:Q11463010 wdt:P58 ?x3 . wd:Q11463010 wdt:P58 ?x4 . wd:Q11463010 wdt:P58 ?x5 . wd:Q"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Allen Ginsberg\": \"Q6711\", \"high school\": \"Q9826\"}, \"relationships\": {\"alma mater\": \"P69\"}}<|im_end|>\n<|im_start|>user\nWhich High School did Allen Ginsberg attend?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result {wd:Q6711 wdt:P69 ?result. ?result wdt:P31 wd:Q9826}",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P69 wd:Q6711 . ?sbj wdt:P31 wd:Q9826 }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P69 wd:Q6711 . ?sbj wdt:P31 wd:Q9826 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n md:Q108627920 wdt:P161 ?x0 . wd:Q108627920 wdt:P344 ?x0 . wd:Q108627920 wdt:P1040 ?x0 . wd:Q108627920 wdt:P1431 ?x0 . wd:Q108627920 wdt:P58 ?x0 . wd:Q108627920 wdt:P58 ?x0 . wd:Q108627920 wdt:P58 ?x0 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Indonesia\": \"Q252\", \"Java\": \"Q23442\"}, \"relationships\": {\"capital\": \"P36\", \"located on island\": \"P706\", \"instance of\": \"P31\"}}<|im_end|>\n<|im_start|>user\nOn which island is the Indonesian capital located?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result {wd:Q252 wdt:P36 ?capital. ?capital wdt:P706 ?result. ?result wdt:P31 wd:Q23442}",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P36 wd:Q252 . ?sbj wdt:P706 wd:Q23442 . ?sbj wdt:P31 wd:Q3624078 }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P36 wd:Q252 . ?sbj wdt:P706 wd:Q23442 . ?sbj wdt:P31 wd:Q3624078 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n and \n are different from the Indonesian capital? , \n , \n , \n , \n , \n , \n , \n and \n are different from the Indonesian capital? , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n ,"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Don't Starve\": \"Q3208174\", \"PlayStation 4\": \"Q5014725\"}, \"relationships\": {\"platform\": \"P400\"}}<|im_end|>\n<|im_start|>user\ncan i play don't starve on play station 4?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASk {wd:Q3208174 wdt:P400 wd:Q5014725.}",
        "generated_sparql": "SELECT ?obj WHERE { wd:Q3208174 p:P400 ?s . ?s ps:P400 ?obj . ?s pq:P400 wd:Q5014725 }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT ?obj WHERE { wd:Q3208174 p:P400 ?s . ?s ps:P400 ?obj . ?s pq:P400 wd:Q5014725 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n , \n \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l\": \"Q1062912\"}, \"relationships\": {\"uses\": \"P1056\", \"uses\": \"P1057\"}} , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n m.0f8l\": \"P1056\", \"uses\": \"P1057\"}} , \n , \n , \n , \n , \n , \n , \n , \n , \n m.0f8l\": \"P1056\", \"uses\": \"P1057\"}} , \n , \n , \n , \n , \n , \n , \n , \n m.0f8l\": \"P1056\", \"uses\": \"P105"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"General Secretary of the CPSU\": \"Q1048744\", \"Leonid Brezhnev\": \"Q765165\"}, \"relationships\": {\"held position\": \"P39\", \"start time\": \"P580\"}}<|im_end|>\n<|im_start|>user\nHow many General Secretaries of the CPSU were there before Leonid Brezhnev?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT (COUNT(?gensec) as ?result) WHERE{wd:Q765165 p:P39 ?pos. ?pos ps:P39 wd:Q1048744; pq:P580 ?st. ?gensec p:P39 ?pos2. ?pos2 ps:P39 wd:Q1048744; pq:P580 ?st2. FILTER(?st2 < ?st)}",
        "generated_sparql": "SELECT ?value WHERE { wd:Q1048744 p:P39 ?s . ?s ps:P39 wd:Q765165 . ?s pq:P580 ?value}",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT ?value WHERE { wd:Q1048744 p:P39 ?s . ?s ps:P39 wd:Q765165 . ?s pq:P580 ?value}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n p:P39 wd:Q765165 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n ,"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"President of Russia\": \"Q218295\"}, \"relationships\": {\"holds position\": \"P39\", \"start time\": \"P580\"}}<|im_end|>\n<|im_start|>user\nHow many different presidents of Russia have there been that took the position after 1990?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?president) AS ?result) WHERE{?president p:P39 ?pos. ?pos ps:P39 wd:Q218295. ?pos pq:P580 ?start. FILTER((YEAR(?start)> 1990))}",
        "generated_sparql": "SELECT ?obj WHERE { wd:Q159 p:P39 ?s . ?s ps:P39 ?obj . ?s pq:P580 ?x filter(contains(YEAR(?x),'1990')) }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT ?obj WHERE { wd:Q159 p:P39 ?s . ?s ps:P39 ?obj . ?s pq:P580 ?x filter(contains(YEAR(?x),'1990')) }``` , \n , \n , \n , \n , \n , \n , \n , \n , and \n p:P39 ?obj }``` , \n , \n , \n , \n , \n , \n , \n , \n p:P39 ?obj }``` , \n , \n , \n , \n , \n p:P39 ?obj }``` , \n , \n , \n p:P39 ?obj }``` , \n , \n , \n p:P39 ?obj }``` , \n , \n , \n p:P39 ?obj }``` , \n , \n , \n p:P39 ?obj }``` , \n , \n , \n p:P39 ?obj }``` , \n , \n , \n p:P39 ?obj }``` , \n , \n , \n p:P39 ?obj }``` , \n , \n , \n p:P39 ?obj }``` , \n , \n , \n p:P39 ?obj }``` , \n , \n , \n p:P39 ?obj }``` , \n , \n , \n p:P39 ?obj }``` , \n , \n , \n p:P39 ?obj }``` , \n , \n , \n p:P39 ?obj }``` , \n , \n , \n p:P39 ?obj }``` , \n , \n , \n p:P39 ?obj }``` , \n , \n , \n p:P39 ?obj }``` , \n , \n , \n p:P39 ?obj }``` , \n , \n , \n p:P39 ?obj }``` , \n , \n ,"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Adam Ondra\": \"Q350568\", \"2020 Summer Olympics\": \"Q181278\"}, \"relationships\": {\"participant\": \"P1344\", \"medal ranking\": \"P1352\"}}<|im_end|>\n<|im_start|>user\nDid adam ondra win a medal in the 2020 summer olympics?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK{wd:Q350568 p:P1344 ?event. ?event ps:P1344 ?eventStatement. ?eventStatement wdt:P361* wd:Q181278. ?event pq:P1352 ?ranking. FILTER(?ranking <= 3)}",
        "generated_sparql": "SELECT ?value WHERE { wd:Q350568 p:P1344 ?s . ?s ps:P1344 wd:Q181278 . ?s pq:P1352 ?value}",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT ?value WHERE { wd:Q350568 p:P1344 ?s . ?s ps:P1344 wd:Q181278 . ?s pq:P1352 ?value}``` , 2020 Summer Olympics\": \"Q181278\"}, \n , 2020 Summer Olympics\": \"Q181278\"}, \"relationships\": {\"participant\": \"P1344\", \"medal ranking\": \"P1352\"}} , 2020 Summer Olympics\": \"P1344\"}} , 2020 Summer Olympics\": \"P1344\"}} , 2020 Summer Olympics\": \"P1344\"}} , 2020 Summer Olympics\": \"P1344\"}} , 2020 Summer Olympics\": \"P1344\"}} , 2020 Summer Olympics\": \"P1344\"}} , 2020 Summer Olympics\": \"P1344\"}} , 2020 Summer Olympics\": \"P1344\"}} , 2020 Summer Olympics\": \"P1344\"}} , 2020 Summer Olympics\": \"P1344\"}} , 2020 Summer Olympics\": \"P1344\"}} , 2020 Summer Olympics\": \"P1344\"}} , 2020 Summer Olympics\": \"P1344\"}} , 2020 Summer Olympics\": \"P1344\"}} , 2020 Summer Olympics\": \"P1344\"}} , 2020 Summer Olympics\": \"P1344\"}} , 2020 Summer Olympics\": \"P1344\"}} , 2020 Summer Olympics\": \"P1344\"}} , 2020 Summer Olympics\": \"P1344\"}} , 2020 Summer Olympics\": \"P1344\"}} , 2020 Summer Olympics\": \"P1344\"}} , 2020 Summer Olympics\": \"P1344\"}} , 202"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Chicago Bulls\": \"Q155223\", \"NBA championship\": \"Q128109\"}, \"relationships\": {\"participant of\": \"P1346\", \"winner\": \"P1346\", \"season of\": \"P3450\"}}<|im_end|>\n<|im_start|>user\nDid the Chicago Bulls win at least two seasons of the NBA championship?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK{{SELECT (COUNT (?season) AS ?count) WHERE {?season wdt:P3450 wd:Q155223. ?season wdt:P1346 wd:Q128109}} FILTER(?count >= 2)}",
        "generated_sparql": "ASK WHERE { wd:Q155223 wdt:P1346 wd:Q128109 . wd:Q155223 wdt:P3450 wd:Q128109 }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql ASK WHERE { wd:Q155223 wdt:P1346 wd:Q128109 . wd:Q155223 wdt:P3450 wd:Q128109 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q155223 wdt:P1346 wd:Q128109 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q155223 wdt:P1346 wd:Q128109 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q155223 wdt:P1346 wd:Q128109 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q155223 wdt:P1346 wd:Q128109 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q155223 wdt:P1346 wd:Q128109 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q155223 wdt:P1346 wd:Q128109 }``` , \n , \n , \n , \n , \n , \n wd:Q155223 wdt:P1346 wd:Q128109 }``` , \n , \n , \n , \n , \n , \n wd:Q15"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Haruki Murakami\": \"Q37922\", \"Nobel Prize in Literature\": \"Q134798\"}, \"relationships\": {\"recipient of\": \"P1346\"}}<|im_end|>\n<|im_start|>user\nDid Haruki Murakami receive the Nobel Prize in Literature?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q37922 wdt:P1346 wd:Q134798}",
        "generated_sparql": "ASK WHERE { wd:Q37922 wdt:P1346 wd:Q134798 }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql ASK WHERE { wd:Q37922 wdt:P1346 wd:Q134798 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q37922 wdt:P1346 wd:Q134798 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q37922 wdt:P1346 wd:Q134798 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q37922 wdt:P1346 wd:Q134798 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q37922 wdt:P1346 wd:Q134798 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q37922 wdt:P1346 wd:Q134798 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q37922 wdt:P1346 wd:Q134798 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q37922 wdt:P1346 wd:Q134798 }``` , \n , \n , \n , \n , \n , \n wd:Q37922 wdt:P1346 wd:Q134798 }``` , \n , \n , \n , "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Kobe Bryant\": \"Q25369\", \"Los Angeles Lakers\": \"Q121783\", \"LeBron James\": \"Q36159\"}, \"relationships\": {\"team\": \"P54\", \"left\": \"P582\", \"joined\": \"P580\"}}<|im_end|>\n<|im_start|>user\nDid Kobe Bryant leave the Lakers when LeBron James joined that team?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK{wd:Q25369 p:P54 ?teamStatement. ?teamStatement ps:P54 wd:Q121783; pq:P582 ?leave. wd:Q36159 p:P54 ?teamStatement2. ?teamStatement2 ps:P54 wd:Q121783; pq:P580 ?join. FILTER(?leave = ?join)}",
        "generated_sparql": "SELECT ?value1 ?value2 WHERE { wd:Q25369 p:P54 ?s . ?s ps:P54 wd:Q121783 . ?s pq:P582 ?value1 . ?s pq:P580 ?value2 }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT ?value1 ?value2 WHERE { wd:Q25369 p:P54 ?s . ?s ps:P54 wd:Q121783 . ?s pq:P582 ?value1 . ?s pq:P580 ?value2 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n p:P54 wd:Q36159 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P54 wd:Q6305766 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P54 wd:Q10837 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P54 wd:Q10837 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P54 wd:Q10837 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P54 wd:Q10837 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P54 wd:Q10837 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P54 wd:Q10837 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P54 wd:Q10837 }``"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Rawson Marshall Thurber\": \"Q2745616\", \"Red Notice\": \"Q58815001\", \"Titanic\": \"Q44578\"}, \"relationships\": {\"director\": \"P57\"}}<|im_end|>\n<|im_start|>user\nDid Rawson Marshall Thurber, the director of Red Notice also direct Titanic?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q58815001 wdt:P57 ?director. wd:Q44578 wdt:P57 ?director. FILTER(wd:Q2745616 = ?director)}",
        "generated_sparql": "ASK WHERE { wd:Q2745616 wdt:P57 wd:Q58815001 . wd:Q2745616 wdt:P57 wd:Q44578 }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql ASK WHERE { wd:Q2745616 wdt:P57 wd:Q58815001 . wd:Q2745616 wdt:P57 wd:Q44578 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n wd:Q73627 wdt:P57 wd:Q58815001 . wd:Q73627 wdt:P57 wd:Q44578 . wd:Q73627 wdt:P57 wd:Q2745616 . wd:Q73627 wdt:P57 wd:Q110397 . wd:Q73627 wdt:P57 wd:Q110397 . wd:Q73627 wdt:P57 wd:Q110397 . wd:Q73627 wdt:P57 wd:Q110397 . wd:Q73627 wdt:P57 wd:Q110397 . wd:Q73627 wdt:P57 wd:Q110397 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q73627 wdt:P57 wd:Q110397 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q73627 wdt:P57 wd:Q110397 }``` , \n , \n , \n , \n , \n , \n ,"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Venice\": \"Q641\", \"Austrian Empire\": \"Q131964\"}, \"relationships\": {\"country\": \"P17\"}}<|im_end|>\n<|im_start|>user\nDid Venice at any point belong to the Austrian Empire?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q641 p:P17/ps:P17 wd:Q131964}",
        "generated_sparql": "ASK WHERE { wd:Q641 wdt:P17 wd:Q131964 }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql ASK WHERE { wd:Q641 wdt:P17 wd:Q131964 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n and \n wdt:P17 wd:Q131964 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q641 wdt:P17 wd:Q131964 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q641 wdt:P17 wd:Q131964 }``` , \n , \n , \n , \n , \n , \n wd:Q641 wdt:P17 wd:Q131964 }``` , \n , \n , \n , \n , \n wd:Q641 wdt:P17 wd:Q131964 }``` , \n , \n , \n , \n wd:Q641 wdt:P17 wd:Q131964 }``` , \n , \n , \n , \n wd:Q641 wdt:P17 wd:Q131964 }``` , \n , \n , \n , \n wd:Q641 wdt:P17 wd:Q131964 }``` , \n , \n , \n wd:Q641 wdt:P17 wd:Q131964 }``` , \n , \n , \n wd:Q641 wdt:P17 wd:Q131964 }``` , \n , \n , \n wd:Q641 wdt:P17 wd:Q131964 }``` , \n , \n , \n wd:Q641 wdt:P17 wd"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Tencent\": \"Q860580\"}, \"relationships\": {\"founder\": \"P112\", \"educated at\": \"P69\"}}<|im_end|>\n<|im_start|>user\nWere at least two of the founders of tencent educated at the same university?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q860580 wdt:P112 ?founder. ?founder wdt:P69 ?uni. wd:Q860580 wdt:P112 ?founder2. ?founder2 wdt:P69 ?uni. FILTER(?founder != ?founder2)}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q860580 wdt:P112 ?X . ?X wdt:P69 ?answer}",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q860580 wdt:P112 ?X . ?X wdt:P69 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n wd:Q860580 wdt:P112 ?answer}``` , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n md:Q1084400 wdt:P112 ?x0 . ?x0 wdt:P108 wd:Q1084400 . ?x0 wdt:P27 wd:Q148 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q1084400 wdt:P112 ?x0 . ?x0 wdt:P108 wd:Q1084400 . ?x0 wdt:P27 wd:Q148 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q10844"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Batman\": \"Q2695156\", \"English language\": \"Q1860\"}, \"relationships\": {\"partner\": \"P451\", \"native language\": \"P103\"}}<|im_end|>\n<|im_start|>user\nDo all of batman\u2019s partner speak english as native language?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK{{SELECT (COUNT(DISTINCT ?partner) AS ?pnum) WHERE {wd:Q2695156 wdt:P451 ?partner. ?partner wdt:P103 ?lang. MINUS{?lang wdt:P279* wd:Q1860}}} FILTER(?pnum = 0)}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q2695156 wdt:P451 ?answer . ?answer wdt:P103 wd:Q1860}",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q2695156 wdt:P451 ?answer . ?answer wdt:P103 wd:Q1860}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q2695156 wdt:P451 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q2695156 wdt:P451 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q2695156 wdt:P451 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q2695156 wdt:P451 ?answer}``` , \n , \n , \n , \n , \n wd:Q2695156 wdt:P451 ?answer}``` , \n , \n , \n , \n wd:Q2695156 wdt:P451 ?answer}``` , \n , \n , \n , \n wd:Q2695156 wdt:P451 ?answer}``` , \n , \n , \n wd:Q2695156 wdt:P451 ?answer}``` , \n , \n , \n wd:Q2695156 wdt:P451 ?answer}``` , \n , \n , \n wd:Q2695156 wdt:P451 ?answer}``` , \n , \n , \n wd:Q2695156 wdt:P451 ?answer}``` , \n , \n wd:Q2695156 wdt:P451 ?answer}``` , "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"head of state\": \"Q82955\", \"country\": \"Q6256\"}, \"relationships\": {\"head of government\": \"P35\", \"spouse\": \"P26\"}}<|im_end|>\n<|im_start|>user\nHow many spouses do head of states have on average?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (AVG(?spouseCount) AS ?result) WHERE {{SELECT (COUNT(DISTINCT ?spouse) AS ?spouseCount) WHERE{?country wdt:P31 wd:Q6256. ?country p:P35/ps:P35 ?hos. OPTIONAL {?hos wdt:P26 ?spouse}} GROUP BY ?hos }}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q82955 wdt:P35 ?answer . ?answer wdt:P26 wd:Q6256}",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q82955 wdt:P35 ?answer . ?answer wdt:P26 wd:Q6256}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q82955 wdt:P35 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q82955 wdt:P35 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q82955 wdt:P35 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q82955 wdt:P35 ?answer}``` , \n , \n , \n , \n , \n , \n , \n wd:Q82955 wdt:P35 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q82955 wdt:P35 ?answer}``` , \n , \n , \n , \n , \n wd:Q82955 wdt:P35 ?answer}``` , \n , \n , \n , \n wd:Q82955 wdt:P35 ?answer}``` , \n , \n , \n , \n wd:Q82955 wdt:P35 ?answer}``` , \n , \n , \n wd:Q82955 wdt:P35 ?answer}``` , \n , \n , \n wd:Q82955 wdt:P35 ?answer}``` , \n , \n wd:Q82955 wdt:P35 ?answer}```"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"AVUS\": \"Q155810\", \"Formula 1\": \"Q108886259\"}, \"relationships\": {\"location\": \"P793\", \"instance of\": \"P31\"}}<|im_end|>\n<|im_start|>user\nWas there at least one Formula 1 event on the AVUS?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK{wd:Q155810 wdt:P793 ?event. ?event wdt:P31 wd:Q108886259}",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P793 wd:Q155810 . ?sbj wdt:P31 wd:Q108886259 }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P793 wd:Q155810 . ?sbj wdt:P31 wd:Q108886259 }``` , \n , \n , \n , \n , \n , \n , \n , \n and \n wdt:P31 wd:Q108886259 }``` , \n , \n , \n , \n , \n , \n wd:Q155810 wdt:P31 wd:Q108886259 }``` , \n , \n , \n , \n , \n , \n wd:Q155810 wdt:P31 wd:Q108886259 }``` , \n , \n , \n , \n , \n wd:Q155810 wdt:P31 wd:Q108886259 }``` , \n , \n , \n , \n wd:Q155810 wdt:P31 wd:Q108886259 }``` , \n , \n , \n , \n wd:Q155810 wdt:P31 wd:Q108886259 }``` , \n , \n , \n , \n wd:Q155810 wdt:P31 wd:Q108886259 }``` , \n , \n , \n wd:Q155810 wdt:P31 wd:Q108886259 }``` , \n , \n , \n wd:Q155810 wdt:P31 wd:Q108886259 }``` , \n , \n , \n wd:Q155810 wdt:P31 wd:Q108886259 }``` , \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Turkish\": \"Q9129\"}, \"relationships\": {\"lexical category\": \"wdt:P518\", \"language\": \"P218\", \"lemma\": \"wikibase:lemma\"}}<|im_end|>\n<|im_start|>user\nFind all Turkish verbs ending with \u201cu\u015f\u201d with their lemma.<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {?result wikibase:lexicalCategory wd:Q24905; dct:language/wdt:P218 'tr'; wikibase:lemma ?lemma. FILTER(regex(?lemma, \"u\u015f$\"))}",
        "generated_sparql": "SELECT DISTINCT ?sbj ?sbj_label WHERE { ?sbj wdt:P31 wd:Q9129 . ?sbj wdt:P518 wd:Q9129 . ?sbj rdfs:label ?sbj_label . FILTER(CONTAINS(lcase(?sbj_label), 'u\u015f')) . FILTER (lang(?sbj_label) = 'en') } LIMIT 25",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT DISTINCT ?sbj ?sbj_label WHERE { ?sbj wdt:P31 wd:Q9129 . ?sbj wdt:P518 wd:Q9129 . ?sbj rdfs:label ?sbj_label . FILTER(CONTAINS(lcase(?sbj_label), 'u\u015f')) . FILTER (lang(?sbj_label) = 'en') } LIMIT 25``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Beagle\": \"Q21102\"}, \"relationships\": {\"country of origin\": \"P495\"}}<|im_end|>\n<|im_start|>user\nFrom which country are the beagles originally from?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q21102 wdt:P495 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P495 wd:Q21102 }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P495 wd:Q21102 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n  }``` , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Emmy Award\": \"Q123737\"}, \"relationships\": {\"award received\": \"P166\", \"country of citizenship\": \"P27\"}}<|im_end|>\n<|im_start|>user\nFrom which country came the 2nd most winners of the Emmy Award ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {?person wdt:P166 wd:Q123737; wdt:P27 ?result} GROUP BY ?result ORDER BY DESC(COUNT (?result)) OFFSET 1 LIMIT 1",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q123737 wdt:P166 ?X . ?X wdt:P27 ?answer}",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q123737 wdt:P166 ?X . ?X wdt:P27 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q123737 wdt:P166 ?X . ?X wdt:P27 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q123737 wdt:P166 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q123737 wdt:P166 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q123737 wdt:P166 ?answer}``` , \n , \n , \n , \n , \n wd:Q123737 wdt:P166 ?answer}``` , \n , \n , \n , \n wd:Q123737 wdt:P166 ?answer}``` , \n , \n , \n , \n wd:Q123737 wdt:P166 ?answer}``` , \n , \n , \n wd:Q123737 wdt:P166 ?answer}``` , \n , \n , \n wd:Q123737 wdt:P166 ?answer}``` , \n , \n , \n wd:Q123737 wdt:P166 ?answer}``` , \n , \n wd:Q123737 wdt:P166 ?answer}``` , \n , \n wd:Q123737 wdt:P166 ?answer}``` , \n , \n wd:Q1"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Helloween\": \"Q158895\", \"rock music\": \"Q11399\"}, \"relationships\": {\"genre\": \"P136\"}}<|im_end|>\n<|im_start|>user\nDoes the music style of Helloween belong to rock music?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q158895 wdt:P136/wdt:P279* wd:Q11399}",
        "generated_sparql": "ASK WHERE { wd:Q158895 wdt:P136 wd:Q11399 }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql ASK WHERE { wd:Q158895 wdt:P136 wd:Q11399 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q158895 wdt:P136 wd:Q11399 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q158895 wdt:P136 wd:Q11399 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q158895 wdt:P136 wd:Q11399 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q158895 wdt:P136 wd:Q11399 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q158895 wdt:P136 wd:Q11399 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q158895 wdt:P136 wd:Q11399 }``` , \n , \n , \n , \n , \n , \n wd:Q158895 wdt:P136 wd:Q11399 }``` , \n , \n , \n , \n , \n , \n wd:Q158895 wdt:P136 wd:Q11399 }``` , \n , \n , \n , \n , \n wd:Q158895"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Minden\": \"Q3846\"}, \"relationships\": {\"postal code\": \"P281\"}}<|im_end|>\n<|im_start|>user\nDoes the postal code 32423 belong to Minden?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q3846 wdt:P281 \"32423\"}",
        "generated_sparql": "SELECT ?value WHERE { wd:Q3846 p:P281 ?s . ?s ps:P281 ?x filter(contains(?x,'32423')) . ?s pq:P281 ?value}",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT ?value WHERE { wd:Q3846 p:P281 ?s . ?s ps:P281 ?x filter(contains(?x,'32423')) . ?s pq:P281 ?value}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n md:Q10837 wdt:P161 ?x0 . wd:Q10837 wdt:P161 ?x1 . wd:Q10837 wdt:P161 wd:Q107602841 . wd:Q10837 wdt:P161 wd:Q107603010 . wd:Q10837 wdt:P161 wd:Q107603017 . wd:Q10837 wdt:P161 wd:Q107603018 . wd:Q10837 wdt:P161 wd:Q10760301"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Adam Ondra\": \"Q350568\", \"IFSC Climbing World Cup\": \"Q1774251\"}, \"relationships\": {\"winner\": \"P1344\", \"award winner\": \"P166\", \"ranking\": \"P1352\", \"gold medal\": \"P3450\"}}<|im_end|>\n<|im_start|>user\nhas adam ondra been a winner of IFSC climbing world cup?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q350568 p:P1344 ?ps. ?ps ps:P1344/wdt:P3450* wd:Q1774251. {?ps pq:P1352 ?rank.} UNION {?ps pq:P166 ?gold.} FILTER(?rank = 1 || sameTerm(?gold,wd:Q406039))}",
        "generated_sparql": "SELECT ?value1 ?value2 WHERE { wd:Q350568 p:P1344 ?s . ?s ps:P1344 wd:Q1774251 . ?s pq:P1352 ?value1 . ?s pq:P3450 ?value2 }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT ?value1 ?value2 WHERE { wd:Q350568 p:P1344 ?s . ?s ps:P1344 wd:Q1774251 . ?s pq:P1352 ?value1 . ?s pq:P3450 ?value2 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n , \n \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Iran\": \"Q794\"}, \"relationships\": {\"life expectancy\": \"P2250\", \"point in time\": \"P585\"}}<|im_end|>\n<|im_start|>user\nhas life expectancy in iran grown in any year after 1999?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q794 p:P2250 ?ols. ?ols pq:P585 ?otime. ?ols ps:P2250 ?ol.  wd:Q794 p:P2250 ?nls. ?nls pq:P585 ?ntime. ?nls ps:P2250 ?nl. FILTER((YEAR(?otime)=1999) && (YEAR(?ntime) > YEAR(?otime)) && (?nl > ?ol))}",
        "generated_sparql": "SELECT ?obj WHERE { wd:Q794 p:P2250 ?s . ?s ps:P2250 ?obj . ?s pq:P585 ?x filter(contains(YEAR(?x),'1999')) }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT ?obj WHERE { wd:Q794 p:P2250 ?s . ?s ps:P2250 ?obj . ?s pq:P585 ?x filter(contains(YEAR(?x),'1999')) }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l97 wdt:P1040 ?x0 . wd:Q11424 wdt:P1040 ?x0 . wd:Q11424 wdt:P1040 ?x0 . wd:Q11424 wdt:P1040 ?x0 . wd:Q11424 wdt:P1040 ?x0 . wd:Q11424 wdt:P1040 ?x0 . wd:Q11424 wdt:P1"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Isfahan\": \"Q42053\"}, \"relationships\": {\"population\": \"P1082\", \"point in time\": \"P585\"}}<|im_end|>\n<|im_start|>user\nhas population of Isfahan increased at any point after 2006?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q42053 p:P1082 ?ops. ?ops pq:P585 ?otime. ?ops ps:P1082 ?op.  wd:Q42053 p:P1082 ?nps. ?nps pq:P585 ?ntime. ?nps ps:P1082 ?np. FILTER((YEAR(?otime)=2006) && (YEAR(?ntime) > YEAR(?otime)) && (?np > ?op))}",
        "generated_sparql": "SELECT ?obj WHERE { wd:Q42053 p:P1082 ?s . ?s ps:P1082 ?obj . ?s pq:P585 ?x filter(contains(YEAR(?x),'2006')) }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT ?obj WHERE { wd:Q42053 p:P1082 ?s . ?s ps:P1082 ?obj . ?s pq:P585 ?x filter(contains(YEAR(?x),'2006')) }``` , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8w97 wdt:P108 ?x0 . ?x0 wdt:P127 wd:Q108258001 . ?x0 wdt:P127 wd:Q108258007 . ?x0 wdt:P127 wd:Q108258009 . ?x0 wdt:P127 wd:Q108258010 . ?x0 wdt:P127 wd:Q108258007 . ?x0 wdt:P127 wd:Q108258009 . ?x0 wdt:P"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Joe Cocker\": \"Q164815\", \"Woodstock festival\": \"Q190076\"}, \"relationships\": {\"performer\": \"P710\"}}<|im_end|>\n<|im_start|>user\nDid Joe Cocker play at the Woodstock festival?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q164815 wdt:P710 wd:Q190076}",
        "generated_sparql": "ASK WHERE { wd:Q164815 wdt:P710 wd:Q190076 }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql ASK WHERE { wd:Q164815 wdt:P710 wd:Q190076 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q164815 wdt:P710 wd:Q190076 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q164815 wdt:P710 wd:Q190076 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q164815 wdt:P710 wd:Q190076 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q164815 wdt:P710 wd:Q190076 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q164815 wdt:P710 wd:Q190076 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q164815 wdt:P710 wd:Q190076 }``` , \n , \n , \n , \n , \n , \n wd:Q164815 wdt:P710 wd:Q190076 }``` , \n , \n , \n , \n , \n , \n wd:Q164815 wdt:P710 wd:Q190076 }``` , \n , \n , \n , \n , "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Udo B\u00f6lts\": \"Q66432\", \"Tour de France\": \"Q33881\"}, \"relationships\": {\"participant\": \"P1344\"}}<|im_end|>\n<|im_start|>user\nDid Udo B\u00f6lts participate in the Tour de France?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q66432 wdt:P1344/wdt:P31 wd:Q33881}",
        "generated_sparql": "ASK WHERE { wd:Q66432 wdt:P1344 wd:Q33881 }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql ASK WHERE { wd:Q66432 wdt:P1344 wd:Q33881 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q66432 wdt:P1344 wd:Q1938718 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q66432 wdt:P1344 wd:Q1938718 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q66432 wdt:P1344 wd:Q1938718 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q66432 wdt:P1344 wd:Q1938718 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q66432 wdt:P1344 wd:Q1938718 }``` , \n , \n , \n , \n , \n , \n wd:Q66432 wdt:P1344 wd:Q1938718 }``` , \n , \n , \n , \n , \n , \n wd:Q66432 wdt:P1344 wd:Q1938718 }``` , \n , \n , \n , \n , \n wd:Q66432 wdt:P1344 wd:Q1938718 }``` , \n , \n , \n , \n , \n wd:Q66432 wdt:P"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Reinhold Messner\": \"Q189307\", \"brother\": \"Q6581097\"}, \"relationships\": {\"sibling\": \"P3373\", \"gender\": \"P21\", \"date of death\": \"P570\"}}<|im_end|>\n<|im_start|>user\nHow many of Reinhold Messner's brothers still live?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?brother) AS ?result) WHERE {wd:Q189307 wdt:P3373 ?brother. ?brother wdt:P21 wd:Q6581097. FILTER(NOT EXISTS{?brother wdt:P570 ?dod})}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q189307 wdt:P3373 ?answer . ?answer wdt:P21 wd:Q6581097}",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q189307 wdt:P3373 ?answer . ?answer wdt:P21 wd:Q6581097}``` 's male sibling 's sibling 's sibling 's male sibling Reinhold Messner 's sibling 's sibling 's sibling 's male sibling 's sibling 's sibling 's sibling 's sibling 's male sibling 's sibling 's sibling 's sibling 's sibling 's male sibling 's sibling 's male sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's male sibling 's sibling 's male sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's male sibling 's sibling 's sibling 's sibling 's sibling 's male sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's male sibling 's sibling 's sibling 's sibling 's sibling 's male sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's male sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's male sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's male sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's male sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's male sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's male sibling 's sibling 's sibling 's sibling 's sibling 's male sibling 's sibling 's sibling 's sibling 's sibling 's male sibling 's sibling 's sibling 's sibling 's sibling 's male sibling 's sibling 's sibling 's sibling 's sibling 's male sibling 's sibling 's sibling '"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Hemingway\": \"Q23434\"}, \"relationships\": {\"manner of death\": \"P1196\"}}<|im_end|>\n<|im_start|>user\nIn which manner did Hemingway die?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q23434 wdt:P1196 ?result.}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1196 wd:Q23434 }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1196 wd:Q23434 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"House of Medici\": \"Q170022\"}, \"relationships\": {\"owns\": \"P1830\", \"industry\": \"P452\"}}<|im_end|>\n<|im_start|>user\nIn which industry does the House of Medici own a business?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q170022 wdt:P1830/wdt:P452 ?result}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q170022 wdt:P1830 ?X . ?X wdt:P452 ?answer}",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q170022 wdt:P1830 ?X . ?X wdt:P452 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q170022 wdt:P1830 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q170022 wdt:P1830 ?answer}``` , \n , \n , \n , \n , \n , \n , \n wd:Q170022 wdt:P1830 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q170022 wdt:P1830 ?answer}``` , \n , \n , \n , \n , \n wd:Q170022 wdt:P1830 ?answer}``` , \n , \n , \n , \n wd:Q170022 wdt:P1830 ?answer}``` , \n , \n , \n wd:Q170022 wdt:P1830 ?answer}``` , \n , \n , \n wd:Q170022 wdt:P1830 ?answer}``` , \n , \n , \n wd:Q170022 wdt:P1830 ?answer}``` , \n , \n wd:Q170022 wdt:P1830 ?answer}``` , \n , \n wd:Q170022 wdt:P1830 ?answer}``` , \n , \n wd:Q170022 wdt:P1830 ?answer}``` , \n , \n wd:Q170022 wdt:P183"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"United States of America\": \"Q30\"}, \"relationships\": {\"official name\": \"P1448\", \"language of name\": \"tr\"}}<|im_end|>\n<|im_start|>user\nHow do people from Turkey call the official name of the united states of america?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {wd:Q30 wdt:P1448 ?result FILTER(langMatches(lang(?result),\"tr\"))}",
        "generated_sparql": "SELECT ?obj WHERE { wd:Q43 p:P1448 ?s . ?s ps:P1448 ?obj . ?s pq:P407 wd:Q30 }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT ?obj WHERE { wd:Q43 p:P1448 ?s . ?s ps:P1448 ?obj . ?s pq:P407 wd:Q30 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n p:P1448 ?obj }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n ,"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Cologne Cathedral\": \"Q4176\"}, \"relationships\": {\"height\": \"P2048\"}}<|im_end|>\n<|im_start|>user\nHow high is the Cologne Cathedral ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {wd:Q4176 wdt:P2048 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P2048 wd:Q4176 }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P2048 wd:Q4176 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n }```sparql SELECT (?obj WHERE { wd:Q4176 p:P2048 ?s . ?s ps:P2048 ?obj . ?s pq:P1545 ?x filter(contains(?x,'105.0')) }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n ,"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Harz\": \"Q4186\"}, \"relationships\": {\"label\": \"rdfs:label\", \"language\": \"langMatches\"}}<|im_end|>\n<|im_start|>user\nHow is the Harz called in Mandarin Chinese?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q4186 rdfs:label ?result FILTER(langMatches(lang(?result),\"zh-cn\")) }",
        "generated_sparql": "SELECT ?obj WHERE { wd:Q4186 p:P1705 ?s . ?s ps:P1705 ?obj . ?s pq:P407 wd:Q148 }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT ?obj WHERE { wd:Q4186 p:P1705 ?s . ?s ps:P1705 ?obj . ?s pq:P407 wd:Q148 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n and \n p:P1705 ?obj }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P1705 ?obj }``` , \n , \n , \n , \n , \n , \n , \n , \n p:P1705 ?obj }``` , \n , \n , \n , \n , \n , \n , \n p:P1705 ?obj }``` , \n , \n , \n , \n , \n , \n , \n p:P1705 ?obj }``` , \n , \n , \n , \n , \n , \n p:P1705 ?obj }``` , \n , \n , \n , \n , \n p:P1705 ?obj }``` , \n , \n , \n , \n , \n p:P1705 ?obj }``` , \n , \n , \n , \n , \n p:P1705 ?obj }``` , \n , \n , \n , \n , \n p:P1705 ?obj }``` , \n , \n , \n , \n , \n p:P1705 ?obj }``` , \n , \n , \n , \n , \n p:P1705 ?obj }``` , \n , \n , \n , \n , \n p:P1705 ?obj }``` , \n , \n , \n , \n , \n p:P1705 ?obj }``` , \n , \n , \n , \n , \n p:P1705 ?"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"international airport\": \"Q644371\", \"Hamburg\": \"Q1055\"}, \"relationships\": {\"instance of\": \"P31\", \"located in the administrative territorial entity\": \"P131\"}}<|im_end|>\n<|im_start|>user\nHow many international airports are located within the city of Hamburg ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?ap) AS ?result) WHERE {?ap wdt:P31 wd:Q644371. ?ap wdt:P131* wd:Q1055}",
        "generated_sparql": "SELECT DISTINCT ?sbj ?sbj_label WHERE { ?sbj wdt:P31 wd:Q644371 . ?sbj wdt:P131 wd:Q1055 . ?sbj rdfs:label ?sbj_label . FILTER(CONTAINS(lcase(?sbj_label), 'hamburg')) . FILTER (lang(?sbj_label) = 'en') } LIMIT 25",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT DISTINCT ?sbj ?sbj_label WHERE { ?sbj wdt:P31 wd:Q644371 . ?sbj wdt:P131 wd:Q1055 . ?sbj rdfs:label ?sbj_label . FILTER(CONTAINS(lcase(?sbj_label), 'hamburg')) . FILTER (lang(?sbj_label) = 'en') } LIMIT 25``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l9c wdt:P112 ?x0 . ?x0 wdt:P108 wd:Q1054807 . ?x0 wdt:P108 wd:Q1054807 . ?x0 wdt:P1"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Madonna\": \"Q1744\", \"album\": null}, \"relationships\": {\"genre\": \"P31\", \"performer\": \"P175\"}}<|im_end|>\n<|im_start|>user\nOn how many albums does Madonna perform?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?album) AS ?result) WHERE {?album wdt:P31 wd:Q482994. ?album wdt:P175 wd:Q1744. }",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P31 wd:Q208569 . ?sbj wdt:P175 wd:Q1744 }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P31 wd:Q208569 . ?sbj wdt:P175 wd:Q1744 }``` , \n , ?sbj wdt:P31 wd:Q208569 }``` , \n , ?sbj wdt:P31 wd:Q208569 }``` , \n , ?sbj wdt:P31 wd:Q208569 }``` , \n , ?sbj wdt:P31 wd:Q208569 }``` , \n , ?sbj wdt:P31 wd:Q208569 }``` , \n , ?sbj wdt:P31 wd:Q208569 }``` , \n , ?sbj wdt:P31 wd:Q208569 }``` , \n , ?sbj wdt:P31 wd:Q208569 }``` , \n , ?sbj wdt:P31 wd:Q208569 }``` , \n , ?sbj wdt:P31 wd:Q208569 }``` , \n , ?sbj wdt:P31 wd:Q208569 }``` , \n , ?sbj wdt:P31 wd:Q208569 }``` , \n , ?sbj wdt:P31 wd:Q208569 }``` , \n , ?sbj wdt:P31 wd:Q208569 }``` , \n , ?sbj wdt:P31 wd:Q208569 }``` , \n , ?sbj wdt:P31 wd:Q208569 }``` , \n , ?sbj wdt:P31 wd:Q208569 }``` , \n , ?sbj wdt:P31 wd:Q"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Mariah Carey\": \"Q41076\", \"album\": \"Q482994\"}, \"relationships\": {\"instance of\": \"P31\", \"performer\": \"P175\"}}<|im_end|>\n<|im_start|>user\nOn how many albums does Mariah Carey perform?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?album) AS ?result) WHERE {?album wdt:P31 wd:Q482994. ?album wdt:P175 wd:Q41076. }",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P175 wd:Q41076 . ?sbj wdt:P31 wd:Q482994 }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P175 wd:Q41076 . ?sbj wdt:P31 wd:Q482994 }``` , \n , \n , \n , \n , \n , \n , \n , and \n wdt:P31 wd:Q482994 }``` , \n , \n , \n , \n , \n , \n wdt:P31 wd:Q482994 }``` , \n , \n , \n , \n wdt:P31 wd:Q482994 }``` , \n , \n , \n wdt:P31 wd:Q482994 }``` , \n , \n wdt:P31 wd:Q482994 }``` , \n , \n wdt:P31 wd:Q482994 }``` , \n , \n wdt:P31 wd:Q482994 }``` , \n , \n wdt:P31 wd:Q482994 }``` , \n , \n wdt:P31 wd:Q482994 }``` , \n , \n wdt:P31 wd:Q482994 }``` , \n , \n wdt:P31 wd:Q482994 }``` , \n , \n wdt:P31 wd:Q482994 }``` , \n , \n wdt:P31 wd:Q482994 }``` , \n , \n wdt:P31 wd:Q482994 }``` , \n , \n wdt:P31 wd:Q482994 }``` , \n , \n wdt:P31 wd:Q482994 }``` , \n , \n wdt:P31 wd:Q48"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Lana Del Rey\": \"Q208569\", \"studio album\": \"Q37150\"}, \"relationships\": {\"performer\": \"P7937\", \"genre\": \"P175\"}}<|im_end|>\n<|im_start|>user\nHow many studio albums has Lana Del Rey have?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?album) AS ?result) WHERE {?album wdt:P7937 wd:Q208569. ?album wdt:P175 wd:Q37150. }",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q208569 wdt:P7937 ?answer . ?answer wdt:P175 wd:Q37150}",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q208569 wdt:P7937 ?answer . ?answer wdt:P175 wd:Q37150}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q208569 wdt:P175 wd:Q37150 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q208569 wdt:P175 wd:Q37150 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q208569 wdt:P175 wd:Q37150 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q208569 wdt:P175 wd:Q37150 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q208569 wdt:P175 wd:Q37150 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q208569 wdt:P175 wd:Q37150 }``` , \n , \n , \n , \n , \n , \n wd:Q208569 wdt:P175 wd:Q37150 }``` , \n , \n , \n , \n , \n wd:Q208569 wdt:P175 wd:Q37150 }``` , \n , \n , \n , \n , \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"ancient civilization\": \"Q28171280\"}, \"relationships\": {\"instance of\": \"P31\"}}<|im_end|>\n<|im_start|>user\nHow many ancient civilizations are there?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?civ) AS ?result) WHERE {?civ wdt:P31 wd:Q28171280}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P31 wd:Q28171280 }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P31 wd:Q28171280 }``` , \n 's parent\": \"P40\", 'child\": \"P355\"}} 's parent 's parent 's parent 's parent 's parent 's parent is ancient civilization? 's parent? 's parent? 's parent? 's parent? 's parent? 's parent? 's parent? 's parent? 's parent? 's parent? 's parent? 's parent ?x0 . ?x0 wdt:P108 ?x1 . ?x1 wdt:P40|wdt:P355 ?x2 . ?x2 wdt:P40|wdt:P355 ?x3 . ?x3 wdt:P40|wdt:P355 ?x4 . ?x4 wdt:P40|wdt:P355 ?x5 . ?x5 wdt:P31 wd:Q28171280 }``` , \n 's parent 's parent 's parent 's parent 's parent ?x0 . ?x0 wdt:P108 ?x1 . ?x1 wdt:P40|wdt:P355 ?x2 . ?x2 wdt:P40|wdt:P355 ?x3 . ?x3 wdt:P31 wd:Q28171280 }``` , \n 's parent 's parent 's parent 's parent ?x0 . ?x0 wdt:P108 ?x1 . ?x2 wdt:P40|wdt:P355 ?x3 . ?x3 wdt:P40|wdt:P355 ?x4 . ?x4 wdt:P31 wd:Q1762059 }``` , \n 's parent 's parent 's parent 's parent ?x0 . ?x0 wdt:P108 ?x1 . ?x2 wdt:P40|wdt:P355 ?x3 ."
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Kobe Bryant\": \"Q25369\", \"NBA All-Defensive Team\": \"Q1465181\"}, \"relationships\": {\"award recipient\": \"P166\", \"point in time\": \"P585\"}}<|im_end|>\n<|im_start|>user\nIn how many years did Kobe Bryant receive an NBA All-Defensive Team award?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?time) AS ?result) WHERE {wd:Q25369 p:P166 ?as. ?as ps:P166 wd:Q1465181; pq:P585 ?time.}",
        "generated_sparql": "SELECT ?value WHERE { wd:Q25369 p:P166 ?s . ?s ps:P166 wd:Q1465181 . ?s pq:P585 ?value}",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT ?value WHERE { wd:Q25369 p:P166 ?s . ?s ps:P166 wd:Q1465181 . ?s pq:P585 ?value}``` , \n 2003-2004 NBA All-Defensive Team? , 2003-2004 NBA All-Defensive Team? , 2003-2004 NBA All-Defensive Team? , 2003-2004 NBA All-Defensive Team? , 2003-2004 NBA All-Defensive Team? , 2003-2004 NBA All-Defensive Team? , 2003-2004 NBA All-Defensive Team? , 2003-2004 NBA All-Defensive Team? }``` , 2003-2004 NBA All-Defensive Team ?x0 }``` , 2003-2004 NBA All-Defensive Team ?x0 }``` , 2003-2004 NBA All-Defensive Team ?x0 . wd:Q25369 wdt:P166 ?x0 . wd:Q25369 wdt:P166 wd:Q1465181 }``` , wd:Q25369 wdt:P166 wd:Q1465181 }``` , wd:Q25369 wdt:P166 wd:Q1465181 }``` , wd:Q25369 wdt:P166 wd:Q1465181 }``` , wd:Q25369 wdt:P166 wd:Q1465181 }``` , wd:Q25369 wdt:P166 wd:Q1465181 }``` , wd:Q25369 wdt:P166 wd:Q1465181 }"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Shaquille O'Neal\": \"Q25369\", \"Kobe Bryant\": \"Q169452\", \"All-NBA Team\": \"Q674359\"}, \"relationships\": {\"award recipient\": \"P166\", \"point in time\": \"P585\"}}<|im_end|>\n<|im_start|>user\nHow many All-NBA Team awards have Shaquille O'Neal and Kobe Bryant received in the same year?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?time) AS ?result) WHERE {wd:Q25369 p:P166 ?as. ?as ps:P166 wd:Q674359; pq:P585 ?time. wd:Q169452 p:P166 ?as2. ?as2 ps:P166 wd:Q674359; pq:P585 ?time}",
        "generated_sparql": "SELECT ?value WHERE { wd:Q25369 p:P166 ?s . ?s ps:P166 wd:Q169452 . ?s pq:P585 ?value}",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT ?value WHERE { wd:Q25369 p:P166 ?s . ?s ps:P166 wd:Q169452 . ?s pq:P585 ?value}``` , \n 2003-2004 All-NBA Team\": \"Q674359\"}} , \n , 2003-2004 All-NBA Team\": \"Q674359\"}} , \n , 2003-2004 All-NBA Team\": \"Q674359\"}} , \n , 2003-2004 All-NBA Team\": \"Q674359\"}} , \n , 2003-2004 All-NBA Team\": \"Q674359\"}} , \n , 2003-2004 All-NBA Team\": \"Q674359\"}} , \n , 2003-2004 All-NBA Team\": \"Q674359\"}} , \n , 2003-2004 All-NBA Team\": \"Q674359\"}} , \n , 2003-2004 All-NBA Team\": \"Q674359\"}} , \n , 2003-2004 All-NBA Team\": \"Q674359\"}} , \n , 2003-2004 All-NBA Team\": \"Q674359\"}} , \n , 2003-2004 All-NBA Team\": \"Q674359\"}} , \n , 2003-2004 All-NBA Team\": \"Q674359\"}} , \n , 2003-2004 All-NBA Team\": \"Q674359\"}} , \n , 2003-2004 All-NBA Team\": \"Q674359\"}} , "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Richard Bachman\": \"Q39829\", \"literary work\": \"Q7725634\"}, \"relationships\": {\"author\": \"P50\", \"instance of\": \"P31\"}}<|im_end|>\n<|im_start|>user\nHow many literary works did Richard Bachman write?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?book) AS ?result) WHERE {?book wdt:P50 wd:Q39829; wdt:P31 wd:Q7725634}",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P50 wd:Q39829 . ?sbj wdt:P31 wd:Q7725634 }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P50 wd:Q39829 . ?sbj wdt:P31 wd:Q7725634 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n md:Q105315526 wdt:P1040 ?x0 . wd:Q105315526 wdt:P1431 ?x0 . wd:Q105315526 wdt:P162|wdt:P272 ?x0 . wd:Q105315526 wdt:P58 ?x0 . wd:Q2086445 wdt:P1040 ?x0 . wd:Q2086445 wdt:P1431 ?x0 . wd:Q2086445 wdt:P162|wdt:P272 ?x0 . wd:Q2086445 wdt:P58 ?x0 }``` , \n \n \n \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Sarah J. Maas\": \"Q20640708\"}, \"relationships\": {\"notable work\": \"P800\"}}<|im_end|>\n<|im_start|>user\nHow many notable works does Sarah J. Maas have?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?notableW) AS ?result) WHERE {wd:Q20640708 wdt:P800 ?notableW}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P800 wd:Q20640708 }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P800 wd:Q20640708 }``` , \n , \n , \n , \n , \n , \n , \n , and \n were written by Sarah J. Maas? , written by Sarah J. Maas , and written by Sarah J. Maas , Sarah J. Maas , Sarah J. Maas , Sarah J. Maas , and Sarah J. Maas }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n ,"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Bryan Evenson\": \"Q4963691\", \"university\": \"Q3918\"}, \"relationships\": {\"employer\": \"P108\", \"alumni of\": \"P69\"}}<|im_end|>\n<|im_start|>user\nDid Bryan Evenson work for at least one university where he was educated at?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q4963691 wdt:P108 ?uni; wdt:P69 ?uni. ?uni wdt:P31/wdt:P279* wd:Q3918.}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q4963691 wdt:P69 ?answer . ?answer wdt:P31 wd:Q3918}",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q4963691 wdt:P69 ?answer . ?answer wdt:P31 wd:Q3918}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l9c\": \"Q106395330\"}, \"relationships\": {\"instance of\": \"P31\", \"label\": \"rdfs:label\"}} , FILTER\": \"CONTAINS\", \"lcase\": \"lcase\"}} , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n m.0f8l9c\": \"Q106395330\"}} , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Jeff Bezos\": \"Q312556\"}, \"relationships\": {\"spouse\": \"P26\", \"child\": \"P40\", \"parent\": \"P25\", \"ex-spouse\": \"P582\"}}<|im_end|>\n<|im_start|>user\nHow many children (including apopted ones) does Jeff Bezos have with his ex-wife?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?child) AS ?result) WHERE {wd:Q312556 p:P26 ?sps. ?sps ps:P26 ?sp. ?child wdt:P25 ?sp; wdt:P22 wd:Q312556. FILTER(EXISTS{?sps pq:P582 ?et})}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q312556 wdt:P26 ?X . ?X wdt:P40 ?answer . ?X wdt:P25 ?answer . ?X wdt:P582 ?answer}",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q312556 wdt:P26 ?X . ?X wdt:P40 ?answer . ?X wdt:P25 ?answer . ?X wdt:P582 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q312556 wdt:P26 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q312556 wdt:P26 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q312556 wdt:P26 ?answer}``` , \n , \n , \n , \n , \n , \n , \n wd:Q312556 wdt:P26 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q312556 wdt:P26 ?answer}``` , \n , \n , \n , \n , \n wd:Q312556 wdt:P26 ?answer}``` , \n , \n , \n , \n wd:Q312556 wdt:P26 ?answer}``` , \n , \n , \n , \n wd:Q312556 wdt:P26 ?answer}``` , \n , \n , \n , \n wd:Q312556 wdt:P26 ?answer }``` , \n , \n , \n , \n wd:Q312556 wdt:P26 ?answer }``` , \n , \n , \n wd:Q312556 wdt:P26 ?answer }``` , \n , \n , "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Paul McCartney\": \"Q2599\", \"Linda McCartney\": \"Q228899\"}, \"relationships\": {\"spouse\": \"P26\", \"child\": \"P25\", \"parent\": \"P22\"}}<|im_end|>\n<|im_start|>user\nHow many children had Paul McCartney together with his ex-wife Linda McCartney?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?child) AS ?result) WHERE {wd:Q2599 p:P26 ?sps. ?sps ps:P26 ?sp. ?child wdt:P25 ?sp; wdt:P22 wd:Q2599. FILTER((EXISTS{?sps pq:P582 ?et}) && (?sp = wd:Q228899))}",
        "generated_sparql": "SELECT ?value1 ?value2 WHERE { wd:Q2599 p:P26 ?s . ?s ps:P26 wd:Q228899 . ?s pq:P25 ?value1 . ?s pq:P22 ?value2 }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT ?value1 ?value2 WHERE { wd:Q2599 p:P26 ?s . ?s ps:P26 wd:Q228899 . ?s pq:P25 ?value1 . ?s pq:P22 ?value2 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n p:P26 wd:Q228899 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n ,"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Chinese zodiac animal\": \"Q79226802\"}, \"relationships\": {\"instance of\": \"P31\"}}<|im_end|>\n<|im_start|>user\nHow many Chinese zodiac animals are there in total?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?animal) AS ?result) WHERE {?animal wdt:P31 wd:Q79226802}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P31 wd:Q79226802 }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P31 wd:Q79226802 }``` , \n , \n , \n , \n , \n , \n , \n , and \n are Chinese zodiac animal ?obj where { wd:Q79226802 wdt:P31 ?obj . ?obj wdt:P1038 ?value}``` , \n , \n , \n , \n , \n , \n , \n , \n wdt:P31 wd:Q79226802 }``` , \n , \n , \n , \n , \n , \n wdt:P31 wd:Q79226802 }``` , \n , \n , \n , \n , \n wdt:P31 wd:Q79226802 }``` , \n , \n , \n , \n wdt:P31 wd:Q79226802 }``` , \n , \n , \n wdt:P31 wd:Q79226802 }``` , \n , \n , \n wdt:P31 wd:Q79226802 }``` , \n , \n , \n wdt:P31 wd:Q79226802 }``` , \n , \n , \n wdt:P31 wd:Q79226802 }``` , \n , \n , \n wdt:P31 wd:Q79226802 }``` , \n , \n , \n wdt:P31 wd:Q79226802 }``` , \n , \n , \n wdt:P31 wd:Q79226802 }``` , \n , \n , \n wdt:P31 wd:Q79226802 }``` , \n , \n , "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Pearl River Delta\": \"Q1144286\"}, \"relationships\": {\"has part\": \"P527\", \"instance of\": \"P31\", \"located in the administrative territorial entity\": \"P279\"}}<|im_end|>\n<|im_start|>user\nHow many cities are part of the Pearl River Delta?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?city) AS ?result) WHERE {wd:Q1144286 wdt:P527 ?city. ?city wdt:P31/wdt:P279* wd:Q515.}",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P527 wd:Q1144286 . ?sbj wdt:P31 wd:Q515 }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P527 wd:Q1144286 . ?sbj wdt:P31 wd:Q515 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n and  wdt:P279 ?sbj }``` , \n , \n , \n , \n , \n , \n , \n , \n and  wdt:P31 wd:Q1144286 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wdt:P31 wd:Q1144286 }``` , \n , \n , \n , \n , \n , \n , \n , \n wdt:P31 wd:Q1144286 }``` , \n , \n , \n , \n , \n , \n , \n wdt:P31 wd:Q1144286 }``` , \n , \n , \n , \n , \n , \n wdt:P31 wd:Q1144286 }``` , \n , \n , \n , \n , \n wdt:P31 wd:Q1144286 }``` , \n , \n , \n , \n , \n wdt:P31 wd:Q1144286 }``` , \n , \n , \n , \n wdt:P31 wd:Q1144286 }``` , \n , \n , \n , \n wdt:P31 wd:Q1144286 }``` , \n , \n , \n , \n wdt:P31 wd:Q1144286 }``` , \n , \n , \n , \n wdt:P31 wd:Q1144286 }```"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"city-state\": \"?cs\"}, \"relationships\": {\"instance of\": \"P31\"}}<|im_end|>\n<|im_start|>user\nHow many city-states are currently in the world?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?cs) AS ?result) WHERE {?cs wdt:P31 wd:Q133442}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P31 wd:Q748199 }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P31 wd:Q748199 }``` , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Steve Jobs\": \"Q19837\", \"business\": \"Q4830453\"}, \"relationships\": {\"founder\": \"P112\", \"instance of\": \"P31\", \"part of\": \"P279\"}}<|im_end|>\n<|im_start|>user\nHow many businesses did Steve Jobs found?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?company) AS ?result) WHERE {?company wdt:P112 wd:Q19837; wdt:P31/wdt:P279* wd:Q4830453}",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P112 wd:Q19837 . ?sbj wdt:P31 wd:Q4830453 }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P112 wd:Q19837 . ?sbj wdt:P31 wd:Q4830453 }``` , \n , \n , \n , \n , \n , \n , \n , and \n are found by Steve Jobs? , \n , \n , and \n are found by a company 's founder and employee and found Steve Jobs , Steve Jobs , and Steve Jobs , \n , \n and \n are found by a company 's founder and employee and found Steve Jobs , Steve Jobs , and Steve Jobs , \n , \n and \n are found by a company 's founder and employee and found Steve Jobs , Steve Jobs , and Steve Jobs , \n , \n and \n are found by a company 's founder and employee and found Steve Jobs , Steve Jobs , and Steve Jobs , \n , and \n are found by a company 's founder and employee and found Steve Jobs , Steve Jobs , and Steve Jobs , \n , and \n are found by a company 's founder and employee and found Steve Jobs , Steve Jobs , and Steve Jobs , \n , and \n are found by a company 's founder and employee and found Steve Jobs , Steve Jobs , and Steve Jobs , \n , and \n are found by a company 's founder and employee and found Steve Jobs , Steve Jobs , and Steve Jobs , \n , and \n are found by a company 's founder and employee and found Steve Jobs , Steve Jobs , and Steve Jobs , \n , and \n are found by a company 's founder and employee and found Steve Jobs , Steve Jobs , and Steve Jobs , \n , and \n are found by a company 's founder and employee and found Steve Jobs , Steve Jobs , and Steve Jobs , \n , and \n are found by a company 's founder and employee and found Steve Jobs , Steve Jobs , and Steve Jobs , \n , and \n are found by a company 's founder and employee and found Steve Jobs , Steve Jobs , and Steve Jobs , \n , and \n are found by a company '"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"country\": null, \"democracy\": \"Q6256\", \"left-hand traffic\": \"Q13196750\"}, \"relationships\": {\"instance of\": \"P31\", \"democracy index\": \"P8328\", \"drives on the left side\": \"P1622\"}}<|im_end|>\n<|im_start|>user\nHow many countries have a democracy index higher than 7 and drive on the left side ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?country) AS ?result) WHERE {?country wdt:P31 wd:Q6256; wdt:P8328 ?ind; wdt:P1622 wd:Q13196750 FILTER(?ind > 7)}",
        "generated_sparql": "select ?ent where { ?ent wdt:P31 wd:Q6256 . ?ent wdt:P8328 ?obj . ?ent wdt:P1622 wd:Q13196750 } ORDER BY DESC(?obj)LIMIT 5",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql select ?ent where { ?ent wdt:P31 wd:Q6256 . ?ent wdt:P8328 ?obj . ?ent wdt:P1622 wd:Q13196750 } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql ASK WHERE { ?ent wdt:P31 wd:Q6256 . ?ent wdt:P8328 ?obj . ?ent wdt:P1622 wd:Q13196750 } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql ASK WHERE { ?ent wdt:P31 wd:Q6256 . ?ent wdt:P8328 ?obj . ?ent wdt:P1622 wd:Q13196750 } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql ASK WHERE { ?ent wdt:P31 wd:Q6256 . ?ent wdt:P8328 ?obj . ?ent wdt:P1622 wd:Q13196750 } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql ASK WHERE { ?ent wdt:P31 wd:Q6256 . ?ent wdt:P8328 ?obj . ?ent wdt:P1622 wd:Q13196750 } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql ASK WHERE { ?ent wdt:P31 wd:Q6256 . ?ent wdt:P8328 ?obj . ?ent wdt:P1622 wd:Q13196750 } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql ASK WHERE { ?ent wdt:P31 wd:Q6256 . ?ent wdt:P8328 ?obj . ?ent wdt"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"country\": null, \"Vatican City\": \"Q6256\", \"United Nations\": \"Q1065\"}, \"relationships\": {\"instance of\": \"P31\", \"member of\": \"P463\"}}<|im_end|>\n<|im_start|>user\nHow many countries have never been members of the UN?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?country) AS ?result) WHERE {?country wdt:P31 wd:Q6256. FILTER(NOT EXISTS{?country p:P463/ps:P463 wd:Q1065})}",
        "generated_sparql": "SELECT DISTINCT ?sbj ?sbj_label WHERE { ?sbj wdt:P31 wd:Q6256 . ?sbj wdt:P463 wd:Q1065 . ?sbj rdfs:label ?sbj_label . FILTER(CONTAINS(lcase(?sbj_label), 'vatican')) . FILTER (lang(?sbj_label) = 'en') } LIMIT 25",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT DISTINCT ?sbj ?sbj_label WHERE { ?sbj wdt:P31 wd:Q6256 . ?sbj wdt:P463 wd:Q1065 . ?sbj rdfs:label ?sbj_label . FILTER(CONTAINS(lcase(?sbj_label), 'vatican')) . FILTER (lang(?sbj_label) = 'en') } LIMIT 25``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n , \n \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l9c wdt:P112 ?x0 . ?x0 wdt:P108 wd:Q1065 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"South America\": \"Q18\", \"continent\": \"Q6256\"}, \"relationships\": {\"instance of\": \"P31\", \"continent\": \"P30\"}}<|im_end|>\n<|im_start|>user\nHow many countries are on the continent of South America ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?country) AS ?result) WHERE {?country wdt:P31 wd:Q6256; wdt:P30 wd:Q18}",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P30 wd:Q18 . ?sbj wdt:P31 wd:Q6256 }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P30 wd:Q18 . ?sbj wdt:P31 wd:Q6256 }``` , \n , ?sbj wdt:P31 wd:Q6256 }``` , \n , ?sbj wdt:P31 wd:Q18 }``` , \n , ?sbj wdt:P31 wd:Q6256 }``` , \n , ?sbj wdt:P31 wd:Q18 }``` , \n , ?sbj wdt:P31 wd:Q6256 }``` , \n , ?sbj wdt:P31 wd:Q18 }``` , \n , ?sbj wdt:P31 wd:Q6256 }``` , \n , ?sbj wdt:P31 wd:Q18 }``` , \n , ?sbj wdt:P31 wd:Q6256 }``` , \n , ?sbj wdt:P31 wd:Q18 }``` , \n , ?sbj wdt:P31 wd:Q6256 }``` , \n , ?sbj wdt:P31 wd:Q18 }``` , \n , ?sbj wdt:P31 wd:Q6256 }``` , \n , ?sbj wdt:P31 wd:Q18 }``` , \n , ?sbj wdt:P31 wd:Q6256 }``` , \n , ?sbj wdt:P31 wd:Q18 }``` , \n , ?sbj wdt:P31 wd:Q6256 }``` , \n , ?sbj wdt:P31 wd:Q18 }``` , \n , ?sbj wdt:P31 wd:Q6256 }``` , \n , ?sbj wdt:P31 wd:Q18 }``` , \n ,"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"mountain\": \"\", \"country\": \"\"}, \"relationships\": {\"instance of\": \"P31\", \"part of\": \"P279\", \"height\": \"P2044\", \"country\": \"P17\"}}<|im_end|>\n<|im_start|>user\nHow many countries have mountains whose peaks are higher than 2000m above sea level?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?country) AS ?result) WHERE {?mountain wdt:P31/wdt:P279* wd:Q8502; p:P2044/psn:P2044/wikibase:quantityAmount ?height; wdt:P17 ?country. FILTER(?height > 2000)}",
        "generated_sparql": "select ?ent where { ?ent wdt:P31 wd:Q8502 . ?ent wdt:P279 ?obj . ?ent wdt:P2044 ?obj . ?ent wdt:P17 wd:Q17 } ORDER BY DESC(?obj)LIMIT 5",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql select ?ent where { ?ent wdt:P31 wd:Q8502 . ?ent wdt:P279 ?obj . ?ent wdt:P2044 ?obj . ?ent wdt:P17 wd:Q17 } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql SELECT ?obj WHERE { wd:Q8502 p:P31 ?s . ?s ps:P31 ?obj . ?s pq:P2044 ?x filter(?x = 2000) }``` , \n`sparql SELECT ?obj WHERE { wd:Q8502 p:P31 ?s . ?s ps:P31 ?obj . ?s pq:P2044 ?x filter(?x = 2000) }``` , \n`sparql SELECT ?obj WHERE { wd:Q8502 p:P31 ?s . ?s ps:P31 ?obj . ?s pq:P2044 ?x filter(?x = 2000) }``` , \n`sparql SELECT ?obj WHERE { wd:Q8502 p:P31 ?s . ?s ps:P31 ?obj . ?s pq:P2044 ?x filter(?x = 2000) }``` , \n`sparql SELECT ?obj WHERE { wd:Q8502 p:P31 ?s . ?s ps:P31 ?obj . ?s pq:P2044 ?x filter(?x = 2000) }``` , \n`sparql SELECT ?obj WHERE { wd:Q8502 p:P31 ?s . ?s ps:P31 ?obj . ?s pq:P2044 ?x filter(?x = 2000) }``` , \n`sparql SELECT ?obj WHERE { wd:Q8502 p:P31 ?s . ?s ps:P31 ?obj . ?s"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Game of Thrones\": \"Q23572\", \"fictional dragon\": \"Q30170627\"}, \"relationships\": {\"instance of\": \"P31\", \"subclass of\": \"P279\", \"features as fictional creature\": \"P1441\"}}<|im_end|>\n<|im_start|>user\nHow many fictional dragons are present in Game of Thrones?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?dragon) AS ?result) WHERE {?dragon wdt:P31/wdt:P279* wd:Q30170627; wdt:P1441 wd:Q23572}",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P31 wd:Q30170627 . ?sbj wdt:P279 wd:Q23572 . ?sbj wdt:P1441 wd:Q23572 }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P31 wd:Q30170627 . ?sbj wdt:P279 wd:Q23572 . ?sbj wdt:P1441 wd:Q23572 }``` , \n , \n , \n , \n , \n , \n , \n , \n , and \n are distinct ?sbj where { ?sbj wdt:P31 wd:Q30170627 . ?sbj wdt:P279 wd:Q23572 . ?sbj wdt:P1441 wd:Q23572 }``` , \n , \n , \n , \n , \n , \n , \n and \n are distinct ?sbj where { ?sbj wdt:P31 wd:Q30170627 . ?sbj wdt:P279 wd:Q23572 . ?sbj wdt:P1441 wd:Q23572 }``` , \n , \n , \n , \n , \n , \n and \n are distinct ?sbj where { ?sbj wdt:P31 wd:Q30170627 . ?sbj wdt:P279 wd:Q23572 . ?sbj wdt:P1441 wd:Q23572 }``` , \n , \n , \n , \n , \n , \n and \n are distinct ?sbj where { ?sbj wdt:P31 wd:Q30170627 . ?sbj wdt:P279 wd:Q23572 . ?sbj wdt:P1441 wd:Q23572 }``` , \n , \n , \n , \n , \n , \n and \n are distinct ?sbj where { ?sbj wdt:P31 wd:Q30170627 . ?sbj"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Game of Thrones\": \"Q23572\", \"Emmy Award\": \"Q123737\"}, \"relationships\": {\"award won\": \"P166\", \"nominated for\": \"P360\", \"part of\": \"P361\"}}<|im_end|>\n<|im_start|>user\nhow many emmy awards has the tv series game of thrones won?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?emmy) AS ?result) WHERE {wd:Q23572 wdt:P166 ?emmy. ?emmy wdt:P361/wdt:P279 wd:Q123737}",
        "generated_sparql": "SELECT ?value1 ?value2 WHERE { wd:Q23572 p:P166 ?s . ?s ps:P166 wd:Q123737 . ?s pq:P360 ?value1 . ?s pq:P361 ?value2 }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql SELECT ?value1 ?value2 WHERE { wd:Q23572 p:P166 ?s . ?s ps:P166 wd:Q123737 . ?s pq:P360 ?value1 . ?s pq:P361 ?value2 }``` , \n , \n , \n , \n , \n , \n , \n , and \n p:P166 wd:Q123737 }``` , \n , \n , \n , \n , \n , \n , \n , \n and \n p:P166 wd:Q123737 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n and \n p:P166 wd:Q123737 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n and \n p:P166 wd:Q123737 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n and \n p:P166 wd:Q123737 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n and \n p:P166 wd:Q123737 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n and \n p:P166 wd:Q123737 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n and \n p:P166 wd:Q123737 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n and \n p:P166 wd:Q123737 }``"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Ghost in the Shell\": \"Q92582\", \"manga\": \"Q11424\"}, \"relationships\": {\"based on\": \"P4969\", \"instance of\": \"P31\", \"part of\": \"P279\"}}<|im_end|>\n<|im_start|>user\nHow many films are derived from the original Ghost in the Shell Manga?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?film) AS ?result) WHERE {wd:Q92582 wdt:P4969 ?film. ?film wdt:P31/wdt:P279* wd:Q11424}",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P4969 wd:Q92582 . ?sbj wdt:P31 wd:Q11424 }",
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P4969 wd:Q92582 . ?sbj wdt:P31 wd:Q11424 }``` , \n , \n , \n , \n , \n , \n , \n , and \n wdt:P31 wd:Q11424 }``` , \n , \n , \n , \n , \n , \n wdt:P31 wd:Q11424 }``` , \n , \n , \n , \n wdt:P31 wd:Q11424 }``` , \n , \n , \n wdt:P31 wd:Q11424 }``` , \n , \n wdt:P31 wd:Q11424 }``` , \n , \n wdt:P31 wd:Q11424 }``` , \n , \n wdt:P31 wd:Q11424 }``` , \n , \n wdt:P31 wd:Q11424 }``` , \n , \n wdt:P31 wd:Q11424 }``` , \n , \n wdt:P31 wd:Q11424 }``` , \n , \n wdt:P31 wd:Q11424 }``` , \n , \n wdt:P31 wd:Q11424 }``` , \n , \n wdt:P31 wd:Q11424 }``` , \n , \n wdt:P31 wd:Q11424 }``` , \n , \n wdt:P31 wd:Q11424 }``` , \n , \n wdt:P31 wd:Q11424 }``` , \n , \n wdt:P31 wd:Q11424 }``` , \n , \n wdt:P"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"king of France\": \"Q18384454\", \"natural causes\": \"Q3739104\"}, \"relationships\": {\"position held\": \"P39\", \"manner of death\": \"P1196\"}}<|im_end|>\n<|im_start|>user\nHow many French kings didn't die of natural causes?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?king) AS ?result) WHERE {?king wdt:P39 wd:Q18384454. MINUS{?king wdt:P1196 wd:Q3739104}}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q18384454 wdt:P39 ?answer . ?answer wdt:P1196 wd:Q3739104}",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q18384454 wdt:P39 ?answer . ?answer wdt:P1196 wd:Q3739104}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q18384454 wdt:P1196 wd:Q3739104 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q18384454 wdt:P1196 wd:Q3739104 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q18384454 wdt:P1196 wd:Q3739104 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q18384454 wdt:P1196 wd:Q3739104 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q18384454 wdt:P1196 wd:Q3739104 }``` , \n , \n , \n , \n , \n , \n wd:Q18384454 wdt:P1196 wd:Q3739104 }``` , \n , \n , \n , \n , \n wd:Q18384454 wdt:P1196 wd:Q3739104 }``` , \n , \n , \n , \n , \n wd:Q18384454 wdt:P1196 wd:Q373"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Queen Elizabeth II\": \"Q9682\"}, \"relationships\": {\"given name\": \"P735\"}}<|im_end|>\n<|im_start|>user\nHow many given names has Queen Elizabeth II ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?names) AS ?result) WHERE {wd:Q9682 p:P735/ps:P735 ?names}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P735 wd:Q9682 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P735 wd:Q9682 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l\": \"Q11424\"}, \"relationships\": {\"director\": \"P57\", \"writer\": \"P58\", \"sequel\": \"P155\"}} , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Hamburg\": \"Q1055\", \"female\": \"Q6581072\"}, \"relationships\": {\"head of government\": \"P6\", \"gender\": \"P21\"}}<|im_end|>\n<|im_start|>user\nHow many different female mayors did Hamburg have?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?fm) AS ?result) WHERE {wd:Q1055 p:P6/ps:P6 ?fm. ?fm wdt:P21 wd:Q6581072}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P6 wd:Q1055 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P6 wd:Q1055 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l98 wdt:P112 ?x0 . ?x0 wdt:P108 wd:Q153987 . ?x0 wdt:P108 wd:Q153987 . ?x0 wdt:P108 wd:Q153987 . ?x0 wdt:P108 wd:Q153987 . ?x0 wdt:P108 wd:Q153987 . ?x0 wdt:P108 wd:Q153987 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Iran\": \"Q794\"}, \"relationships\": {\"head of state\": \"P35\"}}<|im_end|>\n<|im_start|>user\nhow many head of the state does iran have?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?hos) AS ?result) WHERE {wd:Q794 p:P35/ps:P35 ?hos.}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P35 wd:Q794 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P35 wd:Q794 }``` , \n\"relationships\": {\"head of state\": \"P35\"}} , \n\"time\": {\"point in time\": \"P580\"}} , \n\"instance of\": \"P31\"}}``` , \n\"system\": \"Q11424\"}, \"relationships\": {\"director\": \"P57\", \"writer\": \"P58\", \"sequel\": \"P155\"}} , \n \"starring\": \"P161\", \"instance of\": \"P31\"}} , \n \"starring\": \"P161\"}} , \n \"starring\": \"P161\"}} , \n \"starring\": \"P161\"}} , \n \"starring\": \"P161\"}} , \n \"starring\": \"P161\"}} , \n \"starring\": \"P161\"}} , \n \"starring\": \"P161\"}} , \n \"starring\": \"P161\"}} , \n \"starring\": \"P161\"}} , \n \"starring\": \"P161\"}} , \n \"starring\": \"P161\"}} , \n \"starring\": \"P161\"}} , \n \"starring\": \"P161\"}} , \n \"starring\": \"P161\"}} , \n \"starring\": \"P161\"}} , \n \"starring\": \"P161\"}} , \n \"starring\": \"P161\"}} , \n \"starring\": \"P161\"}} , \n \"starring\": \"P161\"}} , \n \"starring\": \"P161\"}} , \n \"starring\": \"P161\"}} , \n \"starring\": \"P161\"}} , \n \"starring\": \"P161\"}} , \n \"starring\": \"P161\"}} , \n \"starring\": \"P161\"}} , \n \""
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"ImageNet\": \"Q24901201\", \"scholarly article\": \"Q13442814\"}, \"relationships\": {\"instance of\": \"P31\", \"main subject\": \"P921\"}}<|im_end|>\n<|im_start|>user\nHow many scholary articles have ImageNet as a subject?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?art) AS ?result) WHERE {?art wdt:P31 wd:Q13442814. ?art wdt:P921 wd:Q24901201.}",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P31 wd:Q24901201 . ?sbj wdt:P921 wd:Q13442814 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P31 wd:Q24901201 . ?sbj wdt:P921 wd:Q13442814 }``` , \n , \n , \n , \n , \n , \n , \n , \n and \n wdt:P31 wd:Q13442814 }``` , \n , \n , \n , \n , \n , \n wd:Q24901201 wdt:P31 wd:Q13442814 }``` , \n , \n , \n , \n , \n , \n wd:Q24901201 wdt:P31 wd:Q13442814 }``` , \n , \n , \n , \n , \n wd:Q24901201 wdt:P31 wd:Q13442814 }``` , \n , \n , \n , \n wd:Q24901201 wdt:P31 wd:Q13442814 }``` , \n , \n , \n , \n wd:Q24901201 wdt:P31 wd:Q13442814 }``` , \n , \n , \n wd:Q24901201 wdt:P31 wd:Q13442814 }``` , \n , \n , \n wd:Q24901201 wdt:P31 wd:Q13442814 }``` , \n , \n , \n wd:Q24901201 wdt:P31 wd:Q13442814 }``` , \n , \n , \n wd:Q24901201 wdt:P31 wd:Q13442814"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Cristiano Ronaldo\": \"Q11571\"}, \"relationships\": {\"place of birth\": \"P19\", \"population\": \"P1082\"}}<|im_end|>\n<|im_start|>user\nHow many inhabitants does the birthplace of Cristiano Ronaldo have?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q11571 wdt:P19/wdt:P1082 ?result}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q11571 wdt:P19 ?X . ?X wdt:P1082 ?answer}",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q11571 wdt:P19 ?X . ?X wdt:P1082 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q11571 wdt:P108 ?X . ?X wdt:P1082 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q11571 wdt:P108 ?X }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q11571 wdt:P108 ?X }``` , \n , \n , \n , \n , \n , \n , \n wd:Q11571 wdt:P108 ?X }``` , \n , \n , \n , \n , \n , \n wd:Q11571 wdt:P108 ?X }``` , \n , \n , \n , \n , \n wd:Q11571 wdt:P108 ?X }``` , \n , \n , \n , \n wd:Q11571 wdt:P108 ?X }``` , \n , \n , \n , \n wd:Q11571 wdt:P108 ?X }``` , \n , \n , \n wd:Q11571 wdt:P108 ?X }``` , \n , \n , \n wd:Q11571 wdt:P108 ?X }``` , \n , \n , \n wd:Q11571 wdt:P108 ?X }``` , \n , \n , \n wd:Q11571 w"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Nobel Prize\": \"Q7191\", \"Japan\": \"Q17\", \"writer\": \"Q36180\"}, \"relationships\": {\"awarded\": \"P166\", \"winner\": \"P279\", \"country of citizenship\": \"P27\", \"occupation\": \"P106\"}}<|im_end|>\n<|im_start|>user\nHow many Japanese writers received the Nobel Prize?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?writer) AS ?result) WHERE {?writer wdt:P166/wdt:P279 wd:Q7191. ?writer wdt:P27 wd:Q17; wdt:P106 wd:Q36180}",
        "generated_sparql": "SELECT ?value1 ?value2 WHERE { wd:Q36180 p:P166 ?s . ?s ps:P166 wd:Q7191 . ?s pq:P279 ?value1 . ?s pq:P27 ?value2 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT ?value1 ?value2 WHERE { wd:Q36180 p:P166 ?s . ?s ps:P166 wd:Q7191 . ?s pq:P279 ?value1 . ?s pq:P27 ?value2 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n , \n \n p:P166 wd:Q7191 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P166 wd:Q7191 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P166 wd:Q7191 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P166 wd:Q7191 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P166 wd:Q7191 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P166 wd:Q7191 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"India\": \"Q668\"}, \"relationships\": {\"language used in the administrative territorial entity\": \"P2936\"}}<|im_end|>\n<|im_start|>user\nHow many languages are widely used in India?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?lan) AS ?result) WHERE {wd:Q668 wdt:P2936 ?lan}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P2936 wd:Q668 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P2936 wd:Q668 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"water\": \"Q283\"}, \"relationships\": {\"color\": \"P462\"}}<|im_end|>\n<|im_start|>user\nHow many different colors can water take?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?color) AS ?result) WHERE {wd:Q283 wdt:P462 ?color}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P462 wd:Q283 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P462 wd:Q283 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n \n }```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P462 wd:Q283 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Georges Braque\": \"Q153793\"}, \"relationships\": {\"work location\": \"P937\"}}<|im_end|>\n<|im_start|>user\nHow many locations has Georges Braque worked at (work location)?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?loc) AS ?result) WHERE {wd:Q153793 wdt:P937 ?loc}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P937 wd:Q153793 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P937 wd:Q153793 }``` , \n`sparql SELECT (?sub) AS ?value ) { ?sub wdt:P937 wd:Q153793 }``` , \n`sparql SELECT (?sub) AS ?value ) { ?sub wdt:P937 wd:Q153793 }``` , \n`sparql SELECT (?sub) AS ?value ) { ?sub wdt:P937 wd:Q153793 }``` , \n`sparql SELECT (?sub) AS ?value ) { ?sub wdt:P937 wd:Q153793 }``` , \n`sparql SELECT (?sub) AS ?value ) { ?sub wdt:P937 wd:Q153793 }``` , \n`sparql SELECT (?sub) AS ?value ) { ?sub wdt:P937 wd:Q153793 }``` , \n`sparql SELECT (?sub) AS ?value ) { ?sub wdt:P937 wd:Q153793 }``` , \n`sparql SELECT (?sub) AS ?value ) { ?sub wdt:P937 wd:Q153793 }``` , \n`sparql SELECT (?sub) AS ?value ) { ?sub wdt:P937 wd:Q153793 }``` , \n`sparql SELECT (?sub) AS ?value ) { ?sub wdt:P937 wd:Q153793 }``` , \n`sparql SELECT (?sub) AS ?value ) { ?sub wdt:P937 wd:Q153793 }``` , \n`sparql SELECT (?sub) AS ?value ) { ?sub wdt:P937 wd:Q1"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"winter\": \"Q1311\", \"Germany\": \"Q183\"}, \"relationships\": {\"has part\": \"P527\", \"part of\": \"P361\"}}<|im_end|>\n<|im_start|>user\nHow many months does winter consist of in Germany?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?mon) AS ?result) WHERE {wd:Q1311 p:P2922 ?ms. ?ms ps:P2922 ?mon; pq:P3005/wdt:P527 ?part. wd:Q183 wdt:P361* ?part.}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q1311 wdt:P527 ?answer . ?answer wdt:P361 wd:Q183}",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q1311 wdt:P527 ?answer . ?answer wdt:P361 wd:Q183}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q1311 wdt:P1036 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q1311 wdt:P1037 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q1311 wdt:P1038 ?answer}``` , \n , \n , \n , \n , \n , \n , \n wd:Q1311 wdt:P1039 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q1311 wdt:P1039 ?answer}``` , \n , \n , \n , \n , \n wd:Q1311 wdt:P1039 ?answer}``` , \n , \n , \n , \n wd:Q1311 wdt:P1039 ?answer}``` , \n , \n , \n wd:Q1311 wdt:P1039 ?answer}``` , \n , \n , \n wd:Q1311 wdt:P1039 ?answer}``` , \n , \n , \n wd:Q1311 wdt:P1039 ?answer}``` , \n , \n , \n wd:Q1311 wdt:P1039 ?answer}``` , \n , \n wd:Q1311 wdt:P1039 ?answer}``` , \n , \n wd:"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Scream franchise\": \"Q11424\"}, \"relationships\": {\"instance of\": \"P31\", \"main subject\": \"P179\"}}<|im_end|>\n<|im_start|>user\nHow many movies does the Scream franchise have?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?film) AS ?result) WHERE {?film wdt:P31 wd:Q11424; wdt:P179 wd:Q388659}",
        "generated_sparql": "SELECT DISTINCT ?sbj ?sbj_label WHERE { ?sbj wdt:P31 wd:Q11424 . ?sbj rdfs:label ?sbj_label . FILTER(CONTAINS(lcase(?sbj_label), 'scream')) . FILTER (lang(?sbj_label) = 'en') } LIMIT 25",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT DISTINCT ?sbj ?sbj_label WHERE { ?sbj wdt:P31 wd:Q11424 . ?sbj rdfs:label ?sbj_label . FILTER(CONTAINS(lcase(?sbj_label), 'scream')) . FILTER (lang(?sbj_label) = 'en') } LIMIT 25``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l9c\": \"Q106306610\"}, \"relationships\": {\"instance of\": \"P31\", \"label\": \"rdfs:label\"}} , FILTER(CONTAINS(lcase(?sbj_label), 'm.0f8l9c')) . FILTER (lang(?sbj_label) = 'en') } LIMIT 25``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"film\": \"\", \"James Cameron\": \"Q42574\", \"movie\": \"Q11424\"}, \"relationships\": {\"instance of\": \"P31\", \"director\": \"P57\", \"publication date\": \"P577\"}}<|im_end|>\n<|im_start|>user\nHow many movies has James Cameron directed prior to the year 2010?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?film) AS ?result) WHERE {?film wdt:P31 wd:Q11424; wdt:P57 wd:Q42574; wdt:P577 ?date. FILTER(YEAR(?date)<2010)}",
        "generated_sparql": "SELECT ?sbj ?sbj_label WHERE { ?sbj wdt:P31 wd:Q11424 . ?sbj wdt:P57 wd:Q42574 . ?sbj rdfs:label ?sbj_label . FILTER(CONTAINS(lcase(?sbj_label), '2010')) . FILTER (lang(?sbj_label) = 'en') } LIMIT 25",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT ?sbj ?sbj_label WHERE { ?sbj wdt:P31 wd:Q11424 . ?sbj wdt:P57 wd:Q42574 . ?sbj rdfs:label ?sbj_label . FILTER(CONTAINS(lcase(?sbj_label), '2010')) . FILTER (lang(?sbj_label) = 'en') } LIMIT 25``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l9c wdt:P1040 ?x0 . wd:Q1140578 wdt:P1040 ?x0 . wd:Q1140578 wdt:P1040 ?x0 . wd:Q114057"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"film\": \"\", \"drama film\": \"Q11424\", \"Akira Kurosawa\": \"Q8006\"}, \"relationships\": {\"instance of\": \"P31\", \"director\": \"P57\"}}<|im_end|>\n<|im_start|>user\nHow many movies were directed by Akira Kurosawa ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?film) AS ?result) WHERE {?film wdt:P31 wd:Q11424; wdt:P57 wd:Q8006}",
        "generated_sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P31 wd:Q11424 . ?x0 wdt:P57 wd:Q8006 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P31 wd:Q11424 . ?x0 wdt:P57 wd:Q8006 }``` , \n \n , \n , \n , \n , \n , \n , \n , \n , and \n were directed by Akira Kurosawa and directed by a film 's director and writer , \n , \n , and \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l9c\": \"Q106506\"}, \"relationships\": {\"wavelength\": \"P2808\"}} , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n m.0f8l9c wavelength\": \"P2808\"}} , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"musical scale\": \"Q179651\"}, \"relationships\": {\"instance of\": \"P31\"}}<|im_end|>\n<|im_start|>user\nHow many musical scales are there?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?scale) AS ?result) WHERE {?scale wdt:P31 wd:Q179651}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P31 wd:Q179651 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P31 wd:Q179651 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Bavaria\": \"Q980\"}, \"relationships\": {\"public holiday\": \"P832\"}}<|im_end|>\n<|im_start|>user\nHow many public holidays does the state Bavaria have in a year?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?hol) AS ?result) WHERE {wd:Q980 wdt:P832 ?hol}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P832 wd:Q980 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P832 wd:Q980 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"The Picture of Dorian Gray\": \"Q82464\"}, \"relationships\": {\"author\": \"P50\", \"instance of\": \"P31\", \"literary work\": \"\"}}<|im_end|>\n<|im_start|>user\nHow many literary works besides The Picture of Dorian Gray did its author write?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?novel) AS ?result) WHERE {wd:Q82464 wdt:P50 ?aut. ?novel wdt:P31 wd:Q7725634; wdt:P50 ?aut FILTER(?novel != wd:Q82464)}",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P50 wd:Q82464 . ?sbj wdt:P31 wd:Q7725634 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P50 wd:Q82464 . ?sbj wdt:P31 wd:Q7725634 }``` , \n , \n , \n , \n , \n , \n , \n , \n and  wdt:P31 wd:Q7725634 }``` , \n , \n , \n , \n , \n , \n and  wdt:P31 wd:Q7725634 }``` , \n , \n , \n , \n , \n , \n and  wdt:P31 wd:Q7725634 }``` , \n , \n , \n , \n , \n , \n and  wdt:P31 wd:Q7725634 }``` , \n , \n , \n , \n , \n , \n and  wdt:P31 wd:Q7725634 }``` , \n , \n , \n , \n , \n , \n and  wdt:P31 wd:Q7725634 }``` , \n , \n , \n , \n , \n , \n and  wdt:P31 wd:Q7725634 }``` , \n , \n , \n , \n , \n , \n and  wdt:P31 wd:Q7725634 }``` , \n , \n , \n , \n , \n , \n and  wdt:P31 wd:Q7725634 }``` , \n , \n , \n , \n , \n , \n and  wdt:P31 wd:Q7725634 }``` , \n , \n , \n , \n , \n , \n and  wdt:P31 wd:Q7725634 }``` , \n , \n , \n , \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"literary work\": \"Q7725634\", \"Mark Twain\": \"Q7245\"}, \"relationships\": {\"instance of\": \"P31\", \"author\": \"P50\"}}<|im_end|>\n<|im_start|>user\nHow many literary works did Mark Twain write in his lifetime?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?novel) AS ?result) WHERE {?novel wdt:P31 wd:Q7725634; wdt:P50 wd:Q7245}",
        "generated_sparql": "SELECT DISTINCT ?sbj ?sbj_label WHERE { ?sbj wdt:P31 wd:Q7725634 . ?sbj wdt:P50 wd:Q7245 . ?sbj rdfs:label ?sbj_label . FILTER(STRSTARTS(lcase(?sbj_label), 'w')) . FILTER (lang(?sbj_label) = 'en') } LIMIT 25",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT DISTINCT ?sbj ?sbj_label WHERE { ?sbj wdt:P31 wd:Q7725634 . ?sbj wdt:P50 wd:Q7245 . ?sbj rdfs:label ?sbj_label . FILTER(STRSTARTS(lcase(?sbj_label), 'w')) . FILTER (lang(?sbj_label) = 'en') } LIMIT 25``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l9c\": \"Q106506\"}, \"relationships\": {\"wavelength\": \"P2808\"}} , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n m.0f8l9c wavelength\": \"P2808\"}} \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n m.0f8l9c wavelength\":"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Mark Twain\": \"Q7245\"}, \"relationships\": {\"occupation\": \"P106\"}}<|im_end|>\n<|im_start|>user\nHow many occupations did Mark Twain have?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?occ) AS ?result) WHERE {wd:Q7245 wdt:P106 ?occ}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P106 wd:Q36834 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P106 wd:Q36834 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n md:Q10837 wdt:P161 ?x0 . wd:Q10837 wdt:P161 ?x1 . wd:Q10837 wdt:P161 wd:Q107602841 . wd:Q10837 wdt:P161 wd:Q107603010 . wd:Q10837 wdt:P161 wd:Q107603017 . wd:Q10837 wdt:P161 wd:Q107603018 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"United Kingdom\": \"Q145\", \"Spider-Man\": \"Q79037\"}, \"relationships\": {\"country of citizenship\": \"P27\", \"portrayed by\": \"P175\"}}<|im_end|>\n<|im_start|>user\nhow many of spiderman perfomers are citizens of the united kingdom?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?per) AS ?result) WHERE {?per wdt:P27 wd:Q145. wd:Q79037 p:P175/ps:P175 ?per}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q79037 wdt:P275 ?answer . ?answer wdt:P27 wd:Q145}",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q79037 wdt:P275 ?answer . ?answer wdt:P27 wd:Q145}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l9c\": \"Q106390991\"}, \"relationships\": {\"instance of\": \"P31\", \"label\": \"rdfs:label\"}} , FILTER\": \"CONTAINS\", \"lowercase\": \"lcase\"}} , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"United States of America\": \"Q30\"}, \"relationships\": {\"official language\": \"P37\"}}<|im_end|>\n<|im_start|>user\nhow many official languages does the united states of america have?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?lan) AS ?result) WHERE {wd:Q30 p:P37/ps:P37 ?lan}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P37 wd:Q30 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P37 wd:Q30 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Pakistan\": \"Q843\"}, \"relationships\": {\"official language\": \"P37\"}}<|im_end|>\n<|im_start|>user\nHow many official languages has Pakistan ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?lan) AS ?result) WHERE {wd:Q843 p:P37/ps:P37 ?lan}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P37 wd:Q843 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P37 wd:Q843 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Hayao Miyazaki\": \"Q55400\", \"Academy Award\": \"Q19020\"}, \"relationships\": {\"director\": \"P57\", \"award\": \"P166\", \"instance of\": \"P31\"}}<|im_end|>\n<|im_start|>user\nHow many Oscars did all the movies directed by Hayao Miyazaki combined win?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?aw) AS ?result) WHERE {?film wdt:P57 wd:Q55400; wdt:P166 ?aw. ?aw  wdt:P31 wd:Q19020}",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P57 wd:Q55400 . ?sbj wdt:P31 wd:Q19020 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P57 wd:Q55400 . ?sbj wdt:P31 wd:Q19020 }``` , \n , \n , \n , \n , \n , \n , \n , and  wdt:P166 wd:Q55400 }``` , \n , \n , \n , \n , \n , \n , \n , \n and  wdt:P31 wd:Q11424 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n and  wdt:P161 wd:Q55400 }``` , \n , \n , \n , \n , \n , \n , \n , \n and  wdt:P161 wd:Q55400 }``` , \n , \n , \n , \n , \n , \n , \n , \n and  wdt:P161 wd:Q55400 }``` , \n , \n , \n , \n , \n , \n , \n , \n and  wdt:P161 wd:Q55400 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n and  wdt:P161 wd:Q55400 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n and  wdt:P161 wd:Q55400 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n and  wdt:P161 wd:Q55400 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n and  wdt:P161 wd:Q55400 }"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"painting\": \"\", \"Pablo Picasso\": \"Q5593\", \"museum\": \"Q33506\"}, \"relationships\": {\"creator\": \"P170\", \"location\": \"P276\", \"instance of\": \"P31\", \"part of\": \"P279\"}}<|im_end|>\n<|im_start|>user\nHow many paintings of Pablo Picasso were ever in a museum?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?painting) AS ?result) WHERE {?painting wdt:P31 wd:Q3305213; wdt:P170 wd:Q5593; wdt:P276 ?loc. ?loc wdt:P31/wdt:P279* wd:Q33506}",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P170 wd:Q5593 . ?sbj wdt:P276 wd:Q33506 . ?sbj wdt:P31 wd:Q3305213 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P170 wd:Q5593 . ?sbj wdt:P276 wd:Q33506 . ?sbj wdt:P31 wd:Q3305213 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n and \n wdt:P276 wd:Q33506 }``` , \n , \n , \n , \n , \n , \n , \n wdt:P276 wd:Q33056 }``` , \n , \n , \n , \n , \n , \n wdt:P276 wd:Q33506 }``` , \n , \n , \n , \n , \n wdt:P276 wd:Q33056 }``` , \n , \n , \n , \n wdt:P276 wd:Q33056 }``` , \n , \n , \n , \n wdt:P276 wd:Q33506 }``` , \n , \n , \n , \n wdt:P276 wd:Q33056 }``` , \n , \n , \n wd:Q33056 wdt:P276 ?x0 }``` , \n , \n , \n wd:Q33056 wdt:P276 ?x0 . wd:Q33056 wdt:P276 wd:Q5577 . wd:Q33056 wdt:P276 wd:Q155807 }``` , \n , \n , \n wd:Q33056 wdt:P276 wd:Q1038450 }``` , \n , \n wd:Q33056 wdt:P276 wd:Q103845"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Mensch \u00e4rgere dich nicht\": \"Q545129\"}, \"relationships\": {\"number of players\": \"P1873\"}}<|im_end|>\n<|im_start|>user\nHow many people can play \"Mensch \u00e4rgere dich nicht\" at most?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q545129 wdt:P1873 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1873 wd:Q545129 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1873 wd:Q545129 }``` , \n 's parent\": \"P40\", \"child\": \"P355\"}} 's parent 's parent 's parent 's parent 's parent was Mensch \u00e4rgere dich nicht 's star 's parent 's parent 's parent 's parent 's parent 's parent 's parent 's parent 's parent 's parent 's parent 's parent 's parent 's parent 's parent 's parent 's parent 's parent 's parent 's parent 's parent 's parent 's parent 's parent 's parent ?x0 . ?x0 wdt:P112 ?x1 . ?x1 wdt:P40|wdt:P355 ?x2 . ?x2 wdt:P40|wdt:P355 ?x3 . ?x3 wdt:P40|wdt:P355 ?x4 . ?x4 wdt:P40|wdt:P355 ?x5 . wd:Q545129 wdt:P161 ?x5 }``` , \n 's parent 's parent 's parent 's parent 's parent wdt:P40|wdt:P355 ?x0 }``` , \n 's parent 's parent 's parent wdt:P40|wdt:P355 ?x0 }``` , \n 's parent 's parent wdt:P40|wdt:P355 ?x0 }``` , \n 's parent 's parent wdt:P40|wdt:P355 ?x0 }``` , \n 's parent 's parent wdt:P40|wdt:P355 ?x0 }``` , \n 's parent 's parent wdt:P40|wdt:P355 ?x0 }``` , \n 's parent 's parent wdt:P40|wdt:P355 ?x0 }``` , \n 's parent 's"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Oscar Pistorius\": \"Q201377\", \"human\": \"Q5\"}, \"relationships\": {\"instance of\": \"P31\", \"killed\": \"P157\"}}<|im_end|>\n<|im_start|>user\nHow many people did Oscar Pistorius kill?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?people) AS ?result) WHERE {?people wdt:P31 wd:Q5;wdt:P157 wd:Q201377}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P31 wd:Q5 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P31 wd:Q5 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l9c\": \"Q106506\"}, \"relationships\": {\"instance of\": \"P31\", \"label\": \"rdfs:label\"}} , FILTER\": \"CONTAINS\", \"lcase\": \"lcase\"}} , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Great Leap Forward\": \"Q58715\"}, \"relationships\": {\"number of deaths\": \"P1120\", \"estimate\": \"P1542\"}}<|im_end|>\n<|im_start|>user\nHow many people died due to the Great Leap Forward according to the highest estimate?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (MAX(?d) AS ?result) WHERE {wd:Q58715 wdt:P1542/wdt:P1120 ?d}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q58715 wdt:P1120 ?X . ?X wdt:P1542 ?answer}",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q58715 wdt:P1120 ?X . ?X wdt:P1542 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n wd:Q58715 wdt:P112 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q58715 wdt:P112 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q58715 wdt:P112 ?answer}``` , \n , \n , \n , \n , \n , \n , \n wd:Q58715 wdt:P112 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q58715 wdt:P112 ?answer}``` , \n , \n , \n , \n , \n wd:Q58715 wdt:P112 ?answer}``` , \n , \n , \n , \n wd:Q58715 wdt:P112 ?answer}``` , \n , \n , \n wd:Q58715 wdt:P112 ?answer}``` , \n , \n , \n wd:Q58715 wdt:P112 ?answer }``` , \n , \n , \n wd:Q58715 wdt:P112 ?answer }``` , \n , \n , \n wd:Q58715 wdt:P112 ?answer }``` , \n , \n wd:Q58715 wdt:P112 ?answer }``` , \n , \n wd:"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"human\": \"Q5\", \"Nobel Prize in Literature\": \"Q37922\"}, \"relationships\": {\"instance of\": \"P31\", \"award received\": \"P166\"}}<|im_end|>\n<|im_start|>user\nHow many people have won the Nobel Prize in Literature since its inception?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?people) AS ?result) WHERE {?people wdt:P31 wd:Q5; wdt:P166 wd:Q37922}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P31 wd:Q5 . ?sub wdt:P166 wd:Q37922 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P31 wd:Q5 . ?sub wdt:P166 wd:Q37922 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"city\": null, \"Nile\": \"Q3392\", \"inhabited place\": \"Q515\"}, \"relationships\": {\"instance of\": \"P31\", \"located near\": null, \"located in the administrative territorial entity\": \"P206\", \"population\": \"P1082\"}}<|im_end|>\n<|im_start|>user\nHow many people live in cities in the vicinity of the Nile ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (SUM (?pop) AS ?result) WHERE {?city wdt:P31 wd:Q515; wdt:P206 wd:Q3392; wdt:P1082 ?pop}",
        "generated_sparql": "select ?ent where { ?ent wdt:P31 wd:Q515 . ?ent wdt:P206 ?obj . ?ent wdt:P1082 wd:Q3392 } ORDER BY DESC(?obj)LIMIT 5",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql select ?ent where { ?ent wdt:P31 wd:Q515 . ?ent wdt:P206 ?obj . ?ent wdt:P1082 wd:Q3392 } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql SELECT ?obj WHERE { wd:Q3392 p:P31 ?s . ?s ps:P31 ?obj . ?s pq:P1082 ?x filter(contains(?x,'50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"chromatic scale\": \"Q202021\", \"pitch class\": \"Q1760309\"}, \"relationships\": {\"has part\": \"P527\", \"instance of\": \"P31\"}}<|im_end|>\n<|im_start|>user\nHow many pitch classes are part of the chromatic scale?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?note) AS ?result) WHERE {wd:Q202021 wdt:P527 ?note. ?note wdt:P31 wd:Q1760309}",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P527 wd:Q202021 . ?sbj wdt:P31 wd:Q1760309 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P527 wd:Q202021 . ?sbj wdt:P31 wd:Q1760309 }``` , \n , \n , \n , \n , \n , \n , \n , \n and \n are distinct from a pitch class? , \n , \n , \n , \n , \n and \n are distinct from a pitch class? , \n and \n are distinct from a pitch class? , \n and \n are distinct from a pitch class? , \n and \n are distinct from a pitch class? , \n and \n are distinct from a pitch class? , \n and \n are distinct from a pitch class? , \n and \n are distinct from a pitch class? , \n and \n are distinct from a pitch class? , \n and \n are distinct from a pitch class? , \n and \n are distinct from a pitch class? , \n and \n are distinct from a pitch class? , \n and \n are distinct from a pitch class? , \n and \n are distinct from a pitch class? , \n and \n are distinct from a pitch class? , \n and \n are distinct from a pitch class? , \n and \n are distinct from a pitch class? , \n and \n are distinct from a pitch class? , \n and \n are distinct from a pitch class? , \n and \n are distinct from a pitch class? , \n and \n are distinct from a pitch class? , \n and \n are distinct from a pitch class? , \n and \n are distinct from a pitch class? , \n and \n are distinct from a pitch class? , \n and \n are distinct from a pitch class? , \n and \n are distinct from a pitch class? , \n and \n are distinct from a pitch class? , \n and \n are distinct from a pitch class? , \n and \n are distinct from a pitch class? , \n and \n are distinct from a pitch class? , \n and \n are distinct from a pitch class? , \n and \n are distinct from a pitch class? , \n and \n are"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"play\": \"?play\", \"drama\": \"Q7725634\", \"tragedy\": \"Q25379\", \"William Shakespeare\": \"Q692\"}, \"relationships\": {\"instance of\": \"P31\", \"genre\": \"P7937\", \"author\": \"P50\", \"inception\": \"P571\"}}<|im_end|>\n<|im_start|>user\nhow many plays has William Shakespeare written in the 16th century.<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?play) AS ?result) WHERE {?play wdt:P31 wd:Q7725634; wdt:P7937 wd:Q25379; wdt:P50 wd:Q692; wdt:P571 ?inc FILTER(YEAR(?inc) < 1600)}",
        "generated_sparql": "select ?ent where { ?ent wdt:P31 wd:Q7725634 . ?ent wdt:P7937 ?obj . ?ent wdt:P50 wd:Q692 . ?ent wdt:P571 ?obj } ORDER BY DESC(?obj)LIMIT 5",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql select ?ent where { ?ent wdt:P31 wd:Q7725634 . ?ent wdt:P7937 ?obj . ?ent wdt:P50 wd:Q692 . ?ent wdt:P571 ?obj } ORDER BY DESC(?obj)LIMIT 5``` , \n , ?obj wdt:P31 wd:Q7725634)LIMIT 5``` , \n , ?obj wdt:P31 wd:Q25379 }``` , \n , ?obj wdt:P31 wd:Q692 }``` , \n , ?obj wdt:P31 wd:Q7725634 }``` , \n , ?obj wdt:P31 wd:Q7725634 }``` , \n , ?obj wdt:P31 wd:Q7725634 }``` , \n , ?obj wdt:P31 wd:Q7725634 }``` , \n , ?obj wdt:P31 wd:Q7725634 }``` , \n , ?obj wdt:P31 wd:Q7725634 }``` , \n , ?obj wdt:P31 wd:Q7725634 }``` , \n , ?obj wdt:P31 wd:Q7725634 }``` , \n , ?obj wdt:P31 wd:Q7725634 }``` , \n , ?obj wdt:P31 wd:Q7725634 }``` , \n , ?obj wdt:P31 wd:Q7725634 }``` , \n , ?obj wdt:P31 wd:Q7725634 }``` , \n , ?obj wdt:P31 wd:Q7725634 }``` , \n , ?obj wdt:P31 wd"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"poem\": \"\", \"Allen Ginsberg\": \"Q6711\", \"literary work\": \"Q7725634\", \"author\": \"Q482\"}, \"relationships\": {\"instance of\": \"P31\", \"author\": \"P50\", \"genre\": \"P136\", \"main subject\": \"P279\"}}<|im_end|>\n<|im_start|>user\nHow many poems did Allen Ginsberg published?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?poem) AS ?result) WHERE {?poem wdt:P31 wd:Q7725634; wdt:P50 wd:Q6711; wdt:P136/wdt:P279* wd:Q482}",
        "generated_sparql": "select ?ent where { ?ent wdt:P31 wd:Q7725634 . ?ent wdt:P50 wd:Q6711 . ?ent wdt:P136 ?obj . ?ent wdt:P279 ?obj } ORDER BY DESC(?obj)LIMIT 5",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql select ?ent where { ?ent wdt:P31 wd:Q7725634 . ?ent wdt:P50 wd:Q6711 . ?ent wdt:P136 ?obj . ?ent wdt:P279 ?obj } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P31 wd:Q7725634 . ?x0 wdt:P50 wd:Q6711 . ?x0 wdt:P136 ?obj . ?x0 wdt:P279 ?obj } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P31 wd:Q7725634 . ?x0 wdt:P50 wd:Q6711 . ?x0 wdt:P136 ?obj . ?x0 wdt:P279 ?obj } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P31 wd:Q7725634 . ?x0 wdt:P50 wd:Q6711 . ?x0 wdt:P136 ?obj . ?x0 wdt:P279 ?obj } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P31 wd:Q7725634 . ?x0 wdt:P50 wd:Q6711 . ?x0 wdt:P136 ?obj . ?x0 wdt:P279 ?obj } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P31 wd:Q7725634 ."
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Germany\": \"Q183\", \"Bundestag\": \"Q154797\"}, \"relationships\": {\"instance of\": \"P31\", \"part of\": \"P279\", \"member of political party\": \"P1410\", \"number of seats\": \"P1410\", \"of\": \"P194\"}}<|im_end|>\n<|im_start|>user\nHow many political parties have ever had seats in the German Bundestag ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?group) AS ?result) WHERE {?group wdt:P31/wdt:P279* wd:Q7278. ?group p:P1410 ?ps. ?ps pq:P194 wd:Q154797; ps:P1410 ?seats. FILTER(?seats > 0)}",
        "generated_sparql": "select ?ent where { ?ent wdt:P31 wd:Q183 . ?ent wdt:P279 ?obj . ?ent wdt:P1410 ?obj . ?ent wdt:P194 wd:Q154797 } ORDER BY DESC(?obj)LIMIT 5",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql select ?ent where { ?ent wdt:P31 wd:Q183 . ?ent wdt:P279 ?obj . ?ent wdt:P1410 ?obj . ?ent wdt:P194 wd:Q154797 } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql SELECT ?obj WHERE { wd:Q183 p:P1082 ?s . ?s ps:P1082 ?obj . ?s pq:P585 ?x filter(contains(YEAR(?x),'1948')) }``` , \n`sparql SELECT ?obj WHERE { wd:Q183 p:P1082 ?s . ?s ps:P1082 ?obj . ?s pq:P585 ?x filter(contains(YEAR(?x),'1948')) }``` , \n`sparql SELECT ?obj WHERE { wd:Q183 p:P1082 ?s . ?s ps:P1082 ?obj . ?s pq:P585 ?x filter(contains(YEAR(?x),'1948')) }``` , \n`sparql SELECT ?obj WHERE { wd:Q183 p:P1082 ?s . ?s ps:P1082 ?obj . ?s pq:P585 ?x filter(contains(YEAR(?x),'1948')) }``` , \n`sparql SELECT ?obj WHERE { wd:Q183 p:P1082 ?s . ?s ps:P1082 ?obj . ?s pq:P585 ?x filter(contains(YEAR(?x),'1948')) }``` , \n`sparql SELECT ?obj WHERE { wd:Q183 p:P1082 ?s . ?s ps:P1082 ?obj . ?s pq:P585 ?x filter(contains(YEAR(?x),'194"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Kobe Bryant\": \"Q25369\"}, \"relationships\": {\"position played\": \"P413\"}}<|im_end|>\n<|im_start|>user\nHow many positions did Kobe Bryant play in his team?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?pos) AS ?result) WHERE {wd:Q25369 wdt:P413 ?pos}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P413 wd:Q25369 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P413 wd:Q25369 }``` , \n , \n , \n , \n , \n , \n , \n , and \n were played by Kobe Bryant? , Kobe Bryant , Kobe Bryant , Kobe Bryant , and Kobe Bryant? , \n and \nwere played by Kobe Bryant? , Kobe Bryant , Kobe Bryant , Kobe Bryant , and Kobe Bryant? }``` , \n , \n , \n , \n , \n , \n , \n and \n were played by Kobe Bryant? , Kobe Bryant , Kobe Bryant , Kobe Bryant , Kobe Bryant , and Kobe Bryant? , \n and \n were played by Kobe Bryant? , Kobe Bryant , Kobe Bryant , Kobe Bryant , Kobe Bryant , and Kobe Bryant? , \n and \n were played by Kobe Bryant? , Kobe Bryant , Kobe Bryant , Kobe Bryant , Kobe Bryant , and Kobe Bryant? , \n and \n were played by Kobe Bryant? , Kobe Bryant , Kobe Bryant , Kobe Bryant , Kobe Bryant , and Kobe Bryant? , \n and \n were played by Kobe Bryant? , Kobe Bryant , Kobe Bryant , Kobe Bryant , Kobe Bryant , and Kobe Bryant? , \n and \n were played by Kobe Bryant? , Kobe Bryant , Kobe Bryant , Kobe Bryant , Kobe Bryant , and Kobe Bryant? , \n and \n were played by Kobe Bryant? , Kobe Bryant , Kobe Bryant , Kobe Bryant , Kobe Bryant , and Kobe Bryant? , \n and \n were played by Kobe Bryant? , Kobe Bryant , Kobe Bryant , Kobe Bryant , Kobe Bryant , and Kobe Bryant? , \n and \n were played by Kobe Bryant? , Kobe Bryant , Kobe Bryant , Kobe Bryant , Kobe Bry"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Alfred Nobel\": \"Q7191\", \"Nobel Prize\": \"Q23810\"}, \"relationships\": {\"founder\": \"P112\", \"award\": \"P527\"}}<|im_end|>\n<|im_start|>user\nHow many prizes are there established by Alfred Nobel ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?prize) AS ?result) WHERE {wd:Q7191 wdt:P527 ?prize; wdt:P112 wd:Q23810}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q7191 wdt:P112 ?answer . ?answer wdt:P527 wd:Q23810}",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q7191 wdt:P112 ?answer . ?answer wdt:P527 wd:Q23810}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q7191 wdt:P112 ?answer}``` , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n md:Q106541431 wdt:P161 ?x0 . wd:Q106541431 wdt:P344 ?x0 . wd:Q106541431 wdt:P1040 ?x0 . wd:Q106541431 wdt:P1431 ?x0 . wd:Q106541431 wdt:P58 ?x0 . wd:Q106541431 wdt:P58 ?x0 . wd:Q106541431 wdt:P58 ?x"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"SpaceX\": \"Q2133344\", \"space mission\": \"\", \"failed launch\": \"Q99654400\"}, \"relationships\": {\"instance of\": \"P31\", \"operator\": \"P137\"}}<|im_end|>\n<|im_start|>user\nDid SpaceX ever operate a space mission that was a failed launch?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {?mission wdt:P31 wd:Q2133344, wd:Q99654400; wdt:P137 wd:Q193701}",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P371 wd:Q193701 . ?sbj wdt:P31 wd:Q2133344 . ?sbj wdt:P137 wd:Q99654400 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P371 wd:Q193701 . ?sbj wdt:P31 wd:Q2133344 . ?sbj wdt:P137 wd:Q99654400 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n and \n are different from SpaceX? , SpaceX , SpaceX , SpaceX , and SpaceX? , \n and \n are different from SpaceX? , SpaceX , and SpaceX? , \n and \n are different from SpaceX? , SpaceX , and SpaceX? , \n and \n are different from SpaceX? , SpaceX , and SpaceX? }``` , \n and \n are different from SpaceX? , SpaceX , and SpaceX? }``` , \n and \n are different from SpaceX? , SpaceX , and SpaceX? }``` , \n and \n are different from SpaceX? , SpaceX , and SpaceX? }``` , \n and \n are different from SpaceX? , SpaceX , and SpaceX? }``` , \n and \n are different from SpaceX? , SpaceX , and SpaceX? }``` , \n and \n are different from SpaceX? , SpaceX , and SpaceX? }``` , \n and \n are different from SpaceX? , SpaceX , and SpaceX? }``` , \n and \n are different from SpaceX? , SpaceX , and SpaceX? }``` , \n and \n are different from SpaceX? , SpaceX , and SpaceX? }``` , \n and \n are different from SpaceX? , SpaceX , and SpaceX? }``` , \n and \n are different from SpaceX? , SpaceX , and SpaceX? }``` , \n and \n are different from SpaceX? , SpaceX , and SpaceX? }``` , \n and \n are different from SpaceX? , SpaceX , and SpaceX? }``` , \n and \n are different from SpaceX? , SpaceX , and SpaceX? }"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"human\": \"Q5\", \"Nobel Prize in Chemistry\": \"Q44585\"}, \"relationships\": {\"instance of\": \"P31\", \"nominated for\": \"P1411\", \"winner\": \"P166\"}}<|im_end|>\n<|im_start|>user\nHow many people nominated for the nobel prize in chemistry didn't ever win it?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?peo) AS ?result) WHERE {?peo wdt:P31 wd:Q5; wdt:P1411 wd:Q44585. FILTER(NOT EXISTS{?peo wdt:P166 wd:Q44585})}",
        "generated_sparql": "select ?ent where { ?ent wdt:P31 wd:Q5 . ?ent wdt:P1411 ?obj . ?ent wdt:P166 wd:Q44585 } ORDER BY DESC(?obj)LIMIT 5",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql select ?ent where { ?ent wdt:P31 wd:Q5 . ?ent wdt:P1411 ?obj . ?ent wdt:P166 wd:Q44585 } ORDER BY DESC(?obj)LIMIT 5``` , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l9c wdt:P161 ?x0 . wd:Q106805 wdt:P161 ?x0 . wd:Q106805 wdt:P161 ?x0 . wd:Q106805 wdt:P161 ?x0 . wd:Q106805 wdt:P161 ?x0 . wd:Q106805 wdt:P161 ?x0 . wd:Q106805 wdt:P161 ?x0 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Pose\": \"Q30603704\"}, \"relationships\": {\"number of seasons\": \"P2437\"}}<|im_end|>\n<|im_start|>user\nHow many seasons does Pose have?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result {wd:Q30603704 wdt:P2437 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P2437 wd:Q30603704 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P2437 wd:Q30603704 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n  }``` , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m\nQ11424 . ?x0 wdt:P1040 ?x1 . ?x0 wdt:P1040 wd:Q1136284 . ?x0 wdt:P1040 wd:Q1136284 . ?x0 wdt:P1040 wd:Q1136284 . ?x0 wdt:P1040 wd:Q1136284 . ?x0 wdt:P1040 wd:Q1136284 . ?x0 wdt:P1040 wd:Q1136284 . ?x0 wdt:P1040 wd:Q11362"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"German Bundestag\": \"Q154797\"}, \"relationships\": {\"number of seats\": \"P1342\"}}<|im_end|>\n<|im_start|>user\nHow many seats are there in the current German Bundestag ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {wd:Q154797 wdt:P1342 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1342 wd:Q154797 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1342 wd:Q154797 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n  }``` , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\nNone<|im_end|>\n<|im_start|>user\nHow many siblings had the author of \u201cLittle Women\u201d ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?sib) AS ?result) WHERE {wd:Q523076 wdt:P50 ?aut. ?aut wdt:P3373 ?sib}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P58 ?x0 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P58 ?x0 }``` , \n \n1984 wdt:P58 ?x0 }``` , \n1984 wdt:P58 ?x0 }``` , \n1984 wdt:P58 ?x0 }``` , \n1984 wdt:P58 ?x0 }``` , \n1984 wdt:P58 ?x0 }``` , \n1984 wdt:P58 ?x0 }``` , \n1984 wdt:P58 ?x0 }``` , \n1984 wdt:P58 ?x0 }``` , \n1984 wdt:P58 ?x0 }``` , \n1984 wdt:P58 ?x0 }``` , \n1984 wdt:P58 ?x0 }``` , \n1984 wdt:P58 ?x0 }``` , \n1984 wdt:P58 ?x0 }``` , \n1984 wdt:P58 ?x0 }``` , \n1984 wdt:P58 ?x0 }``` , \n1984 wdt:P58 ?x0 }``` , \n1984 wdt:P58 ?x0 }``` , \n1984 wdt:P58 ?x0 }``` , \n1984 wdt:P58 ?x0 }``` , \n1984 wdt:P58 ?x0 }``` , \n1984 wdt:P58 ?x0 }``` , \n1984 wdt:P58 ?x0 }``` , \n1984 wdt:P58 ?x0 }``` , \n1984 wdt:P58 ?x0 }``` , \n1984 wdt:P58 ?x0 }``` , \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"France\": \"Q142\"}, \"relationships\": {\"instance of\": \"P31\", \"country\": \"P17\"}}<|im_end|>\n<|im_start|>user\nHow many ski resorts were there ever in France?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?ski) AS ?result) WHERE {?ski wdt:P31 wd:Q130003; wdt:P17 wd:Q142}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P31 wd:Q142 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P31 wd:Q142 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n }```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P31 wd:Q142 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Jay Chou\": \"Q238819\", \"song\": \"\", \"album\": \"\"}, \"relationships\": {\"composer\": \"P86\", \"genre\": \"P31\", \"performer\": \"P175\"}}<|im_end|>\n<|im_start|>user\nHow many songs were composed by Jay Chou but not released in his own albums?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?song) AS ?result) WHERE {?song wdt:P31 wd:Q7366; wdt:P86 wd:Q238819; wdt:P361 ?album. ?album wdt:P31 wd:Q482994; wdt:P175 ?per FILTER(?per != wd:Q238819)}",
        "generated_sparql": "SELECT ?value1 ?value2 WHERE { wd:Q238819 p:P86 ?s . ?s ps:P86 ?x filter(contains(?x,'Song')) . ?s pq:P31 ?value1 . ?s pq:P175 ?value2 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT ?value1 ?value2 WHERE { wd:Q238819 p:P86 ?s . ?s ps:P86 ?x filter(contains(?x,'Song')) . ?s pq:P31 ?value1 . ?s pq:P175 ?value2 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Venom\": \"Q1621261\", \"Spider-Man\": \"Q79037\"}, \"relationships\": {\"based on\": \"P1441\", \"character in\": \"P144\"}}<|im_end|>\n<|im_start|>user\nHow many works that are based on Spider-Man has Venom been a part of?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?work) AS ?result) WHERE {wd:Q1621261 wdt:P1441 ?work. ?work wdt:P144 wd:Q79037}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q1621261 wdt:P1441 ?answer . ?answer wdt:P1441 wd:Q79037}",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q1621261 wdt:P1441 ?answer . ?answer wdt:P1441 wd:Q79037}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q1621261 wdt:P1441 ?answer}``` , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n md:Q1621261 wdt:P1441 ?answer . ?answer wdt:P106 wd:Q33999}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Rama V\": \"Q158861\"}, \"relationships\": {\"spouse\": \"P26\"}}<|im_end|>\n<|im_start|>user\nHow many spouses had Rama V (one of the former Kings of Siam)?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?sp) AS ?result) WHERE {wd:Q158861 wdt:P26 ?sp}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P26 wd:Q158861 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P26 wd:Q158861 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Switzerland\": \"Q39\"}, \"relationships\": {\"location\": \"P1332\"}}<|im_end|>\n<|im_start|>user\nDoes Switzerland have a place north of the Point (8.57 47.8)?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q39 wdt:P1332 ?loc FILTER(?loc > \"Point(8.57 47.8)\"^^geo:wktLiteral)}",
        "generated_sparql": "ASK WHERE { wd:Q39 wdt:P1332 ?obj filter(?obj = 8.57 47.8) }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql ASK WHERE { wd:Q39 wdt:P1332 ?obj filter(?obj = 8.57 47.8) }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n , \n \n , \n \n , \n \n \n , \n \n \n , \n \n \n \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Giorgio Moroder\": \"Q312674\", \"Golden Globe Award\": \"Q1011547\"}, \"relationships\": {\"award received\": \"P166\"}}<|im_end|>\n<|im_start|>user\nhow many times has Giorgio Moroder won golden globe award?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?awards) AS ?result) WHERE {wd:Q312674 p:P166 ?awards. ?awards ps:P166/wdt:P31 wd:Q1011547}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P166 wd:Q312674 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P166 wd:Q312674 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n ,"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Kobe Bryant\": \"Q25369\", \"Olympic Games\": \"Q5389\"}, \"relationships\": {\"participant\": \"P1344\", \"instance of\": \"P31\", \"part of\": \"P279\"}}<|im_end|>\n<|im_start|>user\nHow many Olympic Games has Kobe Bryant taken part in?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?ol) AS ?result) WHERE {wd:Q25369 wdt:P1344 ?ol. ?ol wdt:P31/wdt:P279 wd:Q5389}",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P1344 wd:Q25369 . ?sbj wdt:P31 wd:Q5389 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P1344 wd:Q25369 . ?sbj wdt:P31 wd:Q5389 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n and \n wdt:P279 ?sbj }``` , \n , \n , \n , \n , \n , \n wd:Q25369 wdt:P279 ?sbj }``` , \n , \n , \n , \n , \n , \n , \n wd:Q25369 wdt:P279 ?sbj }``` , \n , \n , \n , \n , \n wd:Q25369 wdt:P279 ?sbj }``` , \n , \n , \n , \n wd:Q25369 wdt:P279 ?sbj }``` , \n , \n , \n wd:Q25369 wdt:P279 ?sbj }``` , \n , \n , \n wd:Q25369 wdt:P279 ?sbj }``` , \n , \n , \n wd:Q25369 wdt:P279 ?sbj }``` , \n , \n , \n wd:Q25369 wdt:P279 ?sbj }``` , \n , \n , \n wd:Q25369 wdt:P279 ?sbj }``` , \n , \n , \n wd:Q25369 wdt:P279 ?sbj }``` , \n , \n , \n wd:Q25369 wdt:P279 ?sbj }``` , \n , \n , \n wd:Q25369 wdt:P279 ?sbj }``` , \n , \n , \n wd:Q2"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Oskar Lafontaine\": \"Q110719\", \"Member of the Landtag of Saarland\": \"Q18130478\"}, \"relationships\": {\"held political office\": \"P39\"}}<|im_end|>\n<|im_start|>user\nHow many times was Oskar Lafontaine elected Member of the Landtag of Saarland?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?s) AS ?result) WHERE {wd:Q110719 p:P39 ?s. ?s ps:P39 wd:Q18130478}",
        "generated_sparql": "SELECT ?value WHERE { wd:Q110719 p:P39 ?s . ?s ps:P39 wd:Q18130478 . ?s pq:P768 ?value}",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT ?value WHERE { wd:Q110719 p:P39 ?s . ?s ps:P39 wd:Q18130478 . ?s pq:P768 ?value}``` , \n 1984\u20132005\": \"Q18130478\"}, \"relationships\": {\"position held\": \"P39\", \"start time\": \"P580\"}} , \n , 1984\u20132005\": \"P39\"}} , \n , 1984\u20132005\": \"P580\"}} , \n , 1984\u20132005\": \"P580\"}} , \n , 1984\u20132005\": \"P580\"}} , \n , 1984\u20132005\": \"P580\"}} , \n , 1984\u20132005\": \"P580\"}} , \n , 1984\u20132005\": \"P580\"}} , \n , 1984\u20132005\": \"P580\"}} , \n , 1984\u20132005\": \"P580\"}} , \n , 1984\u20132005\": \"P580\"}} , \n , 1984\u20132005\": \"P580\"}} , \n , 1984\u20132005\": \"P580\"}} , \n , 1984\u20132005\": \"P580\"}} , \n , 1984\u20132005\": \"P580\"}} , \n , 1984\u20132005\": \"P580\"}} , \n , 1984\u20132005\": \"P580\"}} , \n , 1984\u20132005\": \"P580\"}} , \n , 1984\u20132005\": \"P580\"}} , \n , "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Empire of Japan\": \"Q188712\"}, \"relationships\": {\"participant of\": \"P1344\", \"instance of\": \"P31\"}}<|im_end|>\n<|im_start|>user\nHow many wars did the Empire of Japan participate in?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?war) AS ?result) WHERE {wd:Q188712 wdt:P1344 ?war. ?war wdt:P31 wd:Q198}",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P1344 wd:Q188712 . ?sbj wdt:P31 wd:Q208548 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P1344 wd:Q188712 . ?sbj wdt:P31 wd:Q208548 }``` , \n , \n , \n , \n , \n , \n , \n , and \n are different from Empire of Japan? , Empire of Japan , Empire of Japan , Empire of Japan , and Empire of Japan? , \n , and \n are different from Empire of Japan? , Empire of Japan , and Empire of Japan? , \n and \n are different from Empire of Japan? , Empire of Japan , and Empire of Japan? , \n and \n are different from Empire of Japan? , Empire of Japan , and Empire of Japan? , \n and \n are different from Empire of Japan? , Empire of Japan , and Empire of Japan? , \n and \n are different from Empire of Japan? , Empire of Japan , and Empire of Japan? , \n and \n are different from Empire of Japan? , Empire of Japan , and Empire of Japan? }``` , \n and \n are different from Empire of Japan? , Empire of Japan , and Empire of Japan? , \n and \n are different from Empire of Japan? , Empire of Japan , and Empire of Japan? , \n and \n are different from Empire of Japan? , Empire of Japan , and Empire of Japan? }``` , \n and \n are different from Empire of Japan? , Empire of Japan , and Empire of Japan? , \n and \n are different from Empire of Japan? , Empire of Japan , and Empire of Japan? }``` , \n and \n are different from Empire of Japan? , Empire of Japan , and Empire of Japan? , \n and \n are different from Empire of Japan? , Empire of Japan , and Empire of Japan? }``` , \n and \n are different from Empire of Japan? , Empire of Japan , and Empire of Japan? , \n and \n are different from Empire of Japan? , Empire of Japan , and Empire of Japan? }``` , \n and \n are different from Empire of Japan? , Empire of Japan , and Empire of Japan? , \n and \n are different from Empire of Japan? , Empire of Japan , and Empire of Japan"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"The Bridge (Die Br\u00fccke)\": \"Q152778\", \"female\": \"Q6581072\"}, \"relationships\": {\"founding member\": \"P112\", \"sex or gender\": \"P21\"}}<|im_end|>\n<|im_start|>user\nHow many women were amongst the founding members of \u201cThe Bridge\u201d (\u201cDie Br\u00fccke\u201d)?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?f) AS ?result) WHERE {wd:Q152778 wdt:P112 ?f. ?f wdt:P21 wd:Q6581072}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q152778 wdt:P112 ?answer . ?answer wdt:P21 wd:Q6581072}",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q152778 wdt:P112 ?answer . ?answer wdt:P21 wd:Q6581072}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n and \n wd:Q152778 wdt:P112 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q152778 wdt:P112 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q152778 wdt:P112 ?answer}``` , \n , \n , \n , \n wd:Q152778 wdt:P112 ?answer}``` , \n , \n , \n , \n wd:Q152778 wdt:P112 ?answer}``` , \n , \n , \n wd:Q152778 wdt:P112 ?answer}``` , \n , \n , \n wd:Q152778 wdt:P112 ?answer}``` , \n , \n , \n wd:Q152778 wdt:P112 ?answer}``` , \n , \n wd:Q152778 wdt:P112 ?answer}``` , \n , \n wd:Q152778 wdt:P112 ?answer}``` , \n , \n wd:Q152778 wdt:P112 ?answer}``` , \n , \n wd:Q152778 wdt:P112 ?answer}``` , \n , \n wd:Q152778 wdt:P112 ?answer}``` , \n , \n wd:Q152778 wdt:P112 ?answer}``` , \n , "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"common bottlenose dolphin\": \"Q174199\", \"brown bear\": \"Q36341\"}, \"relationships\": {\"observed lifespan\": \"P4214\"}}<|im_end|>\n<|im_start|>user\nWho has a higher observed lifespan out of the common bottlenose dolphin and the brown bear?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P4214 ?ls. FILTER(?result IN (wd:Q174199, wd:Q36341))} ORDER BY DESC(?ls) LIMIT 1",
        "generated_sparql": "select ?ent where { ?ent wdt:P31 wd:Q174199 . ?ent wdt:P4214 ?obj . ?ent wdt:P31 wd:Q36341 } ORDER BY DESC(?obj)LIMIT 5",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql select ?ent where { ?ent wdt:P31 wd:Q174199 . ?ent wdt:P4214 ?obj . ?ent wdt:P31 wd:Q36341 } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql ASK WHERE { wd:Q174199 wdt:P31 ?obj . wd:Q174199 wdt:P4214 ?obj . wd:Q174199 wdt:P31 wd:Q36341 }``` , \n`sparql ASK WHERE { wd:Q174199 wdt:P31 wd:Q36341 }``` , \n`sparql ASK WHERE { wd:Q174199 wdt:P31 wd:Q36341 }``` , \n`sparql ASK WHERE { wd:Q174199 wdt:P31 wd:Q36341 }``` , \n`sparql ASK WHERE { wd:Q174199 wdt:P31 wd:Q36341 }``` , \n`sparql ASK WHERE { wd:Q174199 wdt:P31 wd:Q36341 }``` , \n`sparql ASK WHERE { wd:Q174199 wdt:P31 wd:Q36341 }``` , \n`sparql ASK WHERE { wd:Q174199 wdt:P31 wd:Q36341 }``` , \n`sparql ASK WHERE { wd:Q174199 wdt:P31 wd:Q36341 }``` , \n`sparql ASK WHERE { wd:Q174199 wdt:P31 wd:Q36341 }``` , \n`sparql A"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"TNFAIP1\": \"Q18032040\"}, \"relationships\": {\"instance of\": \"P31\"}}<|im_end|>\n<|im_start|>user\nWhat is TNFAIP1 ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {wd:Q18032040 wdt:P31 ?result}",
        "generated_sparql": "select distinct ?answer where { wd:Q18032040 wdt:P1056 ?answer}",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql select distinct ?answer where { wd:Q18032040 wdt:P1056 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q18032040 wdt:P1056 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q18032040 wdt:P1056 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q18032040 wdt:P1056 ?answer}``` , \n , \n , \n , \n , \n wd:Q18032040 wdt:P1056 ?answer}``` , \n , \n , \n , \n wd:Q18032040 wdt:P1056 ?answer}``` , \n , \n , \n , \n wd:Q18032040 wdt:P1056 ?answer}``` , \n , \n , \n wd:Q18032040 wdt:P1056 ?answer}``` , \n , \n , \n wd:Q18032040 wdt:P1056 ?answer}``` , \n , \n , \n wd:Q18032040 wdt:P1056 ?answer}``` , \n , \n wd:Q18032040 wdt:P1056 ?answer}``` , \n , \n wd:Q18032040 wdt:P1056 ?answer}``` , \n , \n wd:Q18032040 wdt:P1056 ?answer}``` , \n , \n wd:Q18032040 wdt:P"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Naomi Novik\": \"Q242643\", \"Nebula Award\": \"Q194285\"}, \"relationships\": {\"award received\": \"P166\"}}<|im_end|>\n<|im_start|>user\nHow often did Naomi Novik win the nebula award?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(?award) AS ?result) WHERE {wd:Q242643 p:P166/ps:P166 ?award FILTER(?award = wd:Q194285)}",
        "generated_sparql": "SELECT ?value WHERE { wd:Q242643 p:P166 ?s . ?s ps:P166 wd:Q194285 . ?s pq:P512 ?value}",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT ?value WHERE { wd:Q242643 p:P166 ?s . ?s ps:P166 wd:Q194285 . ?s pq:P512 ?value}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n p:P166 ?x filter(contains(?x,'Nebula Award')) . ?x0 wdt:P512 ?x1 . ?x1 wdt:P106 wd:Q33999 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P166 ?x0 . ?x0 wdt:P166 wd:Q194285 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P166 ?x0 . ?x0 wdt:P166 wd:Q194285 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P166 ?x0 . ?x0 wdt:P166 wd:Q194285 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P166 ?x0 . ?x0 wdt:P166 wd:Q194285 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P166 ?x0 . ?x0 wdt:P166 wd:Q194285 }``` , \n , \n , \n , \n , \n , \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Mongols\": \"Q208156\"}, \"relationships\": {\"invasion\": \"P585\"}}<|im_end|>\n<|im_start|>user\nHow often did the Mongols try to invade Japan?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?time) AS ?result) WHERE {wd:Q208156 wdt:P585 ?time}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P585 wd:Q208156 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P585 wd:Q208156 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n ,"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Naomi Novik\": \"Q242643\", \"Hugo Award\": \"Q188914\"}, \"relationships\": {\"nominated for\": \"P1411\"}}<|im_end|>\n<|im_start|>user\nHow often was Naomi Novik nominated for a Hugo Award?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(?award) AS ?result) WHERE {wd:Q242643 p:P1411/ps:P1411 ?award FILTER(?award = wd:Q188914)}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1411 wd:Q242643 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1411 wd:Q242643 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l9c\": \"Q106506\"}, \"relationships\": {\"instance of\": \"P31\", \"label\": \"rdfs:label\"}} , FILTER\": \"CONTAINS\", \"lcase\": \"lcase\"}} , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"dog\": \"\"}, \"relationships\": {\"instance of\": \"P31\", \"birth date\": \"P569\", \"death date\": \"P570\"}}<|im_end|>\n<|im_start|>user\nHow many years did the second oldest dog in the world live?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE{?dog wdt:P31 wd:Q144. ?dog wdt:P569 ?db; wdt:P570 ?dd BIND((YEAR(?dd) - YEAR(?db)) AS ?result)} ORDER BY DESC(?result) LIMIT 1 OFFSET 1",
        "generated_sparql": "select ?ent where { ?ent wdt:P31 wd:Q156 . ?ent wdt:P569 ?obj . ?ent wdt:P570 ?obj } ORDER BY DESC(?obj)LIMIT 5",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql select ?ent where { ?ent wdt:P31 wd:Q156 . ?ent wdt:P569 ?obj . ?ent wdt:P570 ?obj } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql SELECT ?obj WHERE { wd:Q156 p:P31 ?s . ?s ps:P31 ?obj . ?s pq:P570 ?x filter(contains(?x,'1969-1-1')) }``` , \n`sparql SELECT ?obj WHERE { wd:Q156 p:P31 ?s . ?s ps:P31 ?obj . ?s pq:P570 ?x filter(contains(?x,'1969-1-1')) }``` , \n`sparql SELECT ?obj WHERE { wd:Q156 p:P31 ?s . ?s ps:P31 ?obj . ?s pq:P570 ?x filter(contains(?x,'1969-1-1')) }``` , \n`sparql SELECT ?obj WHERE { wd:Q156 p:P31 ?s . ?s ps:P31 ?obj . ?s pq:P570 ?x filter(contains(?x,'1969-1-1')) }``` , \n`sparql SELECT ?obj WHERE { wd:Q156 p:P31 ?s . ?s ps:P31 ?obj . ?s pq:P570 ?x filter(contains(?x,'1969-1-1')) }``` , \n`sparql SELECT ?obj WHERE { wd:Q156 p:P31 ?s . ?s ps:P31 ?obj . ?s pq:P570 ?x filter(contains(?x,'1969-1-1')) }``` , \n`sparql SELECT ?obj WHERE { wd:Q156 p:P31 ?s . ?s ps:P31 ?obj . ?s"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Queen\": \"Q15862\"}, \"relationships\": {\"formation\": \"P2031\"}}<|im_end|>\n<|im_start|>user\nif someone died in 1969, is there any chance they heard of queen\u2019s music?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q15862 wdt:P2031 ?start. FILTER(YEAR(?start) <= 1969)}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q15862 wdt:P178 ?answer . ?answer wdt:P570 ?x FILTER(contains(YEAR(?x),'1969'))}",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q15862 wdt:P178 ?answer . ?answer wdt:P570 ?x FILTER(contains(YEAR(?x),'1969'))}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q15862 wdt:P178 ?x FILTER(contains(?x),'1969'))}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q15862 wdt:P178 ?x FILTER(contains(?x),'1969'))}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q15862 wdt:P178 ?x FILTER(contains(?x),'1969'))}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q15862 wdt:P178 ?x FILTER(contains(?x),'1969'))}``` , \n , \n , \n , \n , \n , \n , \n wd:Q15862 wdt:P178 ?x FILTER(contains(?x),'1969'))}``` , \n , \n , \n , \n , \n , \n wd:Q15862 wdt:P178 ?x FILTER(contains(?x),'1969'))}``` , \n , \n , \n , \n , \n wd:Q15862 wdt:P178 ?x FILTER(contains(?x),'1969'))}``` , \n , \n , \n , \n , \n wd"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Dr. Pepper\": \"Q623561\"}, \"relationships\": {\"named after\": \"P138\", \"inventor\": \"P61\"}}<|im_end|>\n<|im_start|>user\nIs Dr. Pepper named after its inventor?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q623561 wdt:P138 ?na; wdt:P61 ?inv. FILTER(?inv = ?na)}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q623561 wdt:P138 ?X . ?X wdt:P61 ?answer}",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q623561 wdt:P138 ?X . ?X wdt:P61 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q623561 wdt:P138 ?X . ?X wdt:P61 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q623561 wdt:P138 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q623561 wdt:P138 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q623561 wdt:P138 ?answer}``` , \n , \n , \n , \n , \n wd:Q623561 wdt:P138 ?answer}``` , \n , \n , \n , \n wd:Q623561 wdt:P138 ?answer}``` , \n , \n , \n wd:Q623561 wdt:P138 ?answer}``` , \n , \n , \n wd:Q623561 wdt:P138 ?answer}``` , \n , \n wd:Q623561 wdt:P138 ?answer}``` , \n , \n wd:Q623561 wdt:P138 ?answer}``` , \n , \n wd:Q623561 wdt:P138 ?answer}``` , \n , \n wd:Q623561 wdt:P138 ?answer}``` , \n , \n wd:Q623561 wdt:P138"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Drive\": \"Q11424\", \"Ryan Gosling\": \"Q193815\", \"Carey Mulligan\": \"Q219655\"}, \"relationships\": {\"instance of\": \"P31\", \"starring\": \"P161\"}}<|im_end|>\n<|im_start|>user\nIn how many movies did Carey Mulligan and Ryan Gosling star together?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?movie) AS ?result) WHERE {?movie wdt:P31 wd:Q11424; wdt:P161 wd:Q193815, wd:Q219655}",
        "generated_sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P31 wd:Q11424 . ?x0 wdt:P161 wd:Q193815 . ?x0 wdt:P161 wd:Q219655 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P31 wd:Q11424 . ?x0 wdt:P161 wd:Q193815 . ?x0 wdt:P161 wd:Q219655 }``` , \n , \n , \n , \n , \n , \n , \n , \n , and \n star Ryan Gosling and star Carey Mulligan 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Ghost in the Shell\": \"Q92580\"}, \"relationships\": {\"country of origin\": \"P495\", \"head of state\": \"P35\"}}<|im_end|>\n<|im_start|>user\nin the country where ghost in the shell is born, who is the current head of the state?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {wd:Q92580 wdt:P495 ?country. ?country wdt:P35 ?result}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q92580 wdt:P495 ?X . ?X wdt:P35 ?answer}",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q92580 wdt:P495 ?X . ?X wdt:P35 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q92580 wdt:P161 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q92580 wdt:P161 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q92580 wdt:P161 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q92580 wdt:P161 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q92580 wdt:P161 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q92580 wdt:P161 ?answer}``` , \n , \n , \n , \n , \n wd:Q92580 wdt:P161 ?answer}``` , \n , \n , \n , \n wd:Q92580 wdt:P161 ?answer }``` , \n , \n , \n , \n wd:Q92580 wdt:P161 ?answer . ?answer wdt:P106 wd:Q33999}``` , \n , \n , \n , \n , \n wd:Q92580 wdt:"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Cage the Elephant\": \"Q68061\", \"United States\": \"Q35657\", \"river\": \"Q4022\"}, \"relationships\": {\"origin\": \"P740\", \"located in the administrative territorial entity\": \"P131\", \"instance of\": \"P31\", \"location\": \"P206\"}}<|im_end|>\n<|im_start|>user\nHow many rivers are in or next to the U.S. state where cage the elephant is from?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?bow) AS ?result) WHERE {wd:Q68061 wdt:P740/wdt:P131* ?state. ?state wdt:P31 wd:Q35657; wdt:P206 ?bow. ?bow wdt:P31 wd:Q4022}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q68061 wdt:P740 ?answer . ?answer wdt:P131 wd:Q35657}",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q68061 wdt:P740 ?answer . ?answer wdt:P131 wd:Q35657}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l9c\": \"Q106390633\"}, \"relationships\": {\"instance of\": \"P31\", \"label\": \"rdfs:label\"}} , FILTER\": \"CONTAINS\", \"lowercase\": \"lcase\"}} , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Veltins brewery\": \"Q608350\", \"federal state\": \"\", \"headquarter location\": \"?hql\", \"Germany\": \"Q1221156\"}, \"relationships\": {\"headquarter location\": \"P159\", \"located in the administrative territorial entity\": \"P131\", \"instance of\": \"P31\"}}<|im_end|>\n<|im_start|>user\nIn which federal state is the Veltins brewery headquarter?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {wd:Q608350 wdt:P159 ?hql. ?hql wdt:P131* ?result. ?result wdt:P31 wd:Q1221156}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q608350 wdt:P159 ?answer . ?answer wdt:P131 wd:Q1221156}",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q608350 wdt:P159 ?answer . ?answer wdt:P131 wd:Q1221156}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n , \n \n wd:Q608350 wdt:P131 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q608350 wdt:P31 ?answer}``` , \n , \n , \n , \n , \n , \n , \n wd:Q608350 wdt:P31 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q608350 wdt:P31 ?answer}``` , \n , \n , \n , \n , \n wd:Q608350 wdt:P31 ?answer}``` , \n , \n , \n , \n wd:Q608350 wdt:P31 ?answer}``` , \n , \n , \n , \n wd:Q608350 wdt:P31 ?answer}``` , \n , \n , \n wd:Q608350 wdt:P31 ?answer}``` , \n , \n , \n wd:Q608350 wdt:P31 ?answer}``` , \n , \n , \n wd:Q608350 wdt:P31 ?answer}``` , \n , \n wd:Q608350 wdt:P31 ?answer }``` , \n , \n , \n wd:Q608350 wdt:P31 ?answer }``` , \n , \n wd:Q608350 wdt:P31 ?answer }"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"New York Yankees\": \"Q213417\"}, \"relationships\": {\"home stadium\": \"P115\"}}<|im_end|>\n<|im_start|>user\nIn which stadium do the New York Yankees play?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {wd:Q213417 wdt:P115 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P115 wd:Q213417 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P115 wd:Q213417 }``` , \n , \n , \n , \n , \n , \n , \n , and \n are the New York Yankees? , \n , \n , \n , and \n ?sub wdt:P115 wd:Q213417 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Himalayas\": \"Q5451\"}, \"relationships\": {\"country\": \"P17\"}}<|im_end|>\n<|im_start|>user\nIn which countries is the Himalayas located?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q5451 wdt:P17 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P17 wd:Q5451 }",
        "question": "In which countries is the Himalayas located?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P17 wd:Q5451 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n }``` , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Isfahan\": \"Q42053\"}, \"relationships\": {\"capital of\": \"P1376\", \"start time\": \"P580\", \"end time\": \"P582\"}}<|im_end|>\n<|im_start|>user\nWas Isfahan a capital in the year 934?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q42053 p:P1376 ?ps. ?ps pq:P580 ?start; pq:P582 ?end. FILTER((YEAR(?start) < 934) && (YEAR(?end) > 934))}",
        "generated_sparql": "SELECT ?obj WHERE { wd:Q42053 p:P1376 ?s . ?s ps:P1376 ?obj . ?s pq:P580 ?x filter(contains(?x,'934-0-0')) }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql SELECT ?obj WHERE { wd:Q42053 p:P1376 ?s . ?s ps:P1376 ?obj . ?s pq:P580 ?x filter(contains(?x,'934-0-0')) }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n , \n \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8w97 wdt:P1040 ?x0 . wd:Q1140578 wdt:P1040 ?x0 . wd:Q1140578 wdt:P1040 ?x0 . wd:Q1140578 wdt:P1040 ?x0 . wd:Q1140578 wdt:P1040 ?x0 . wd:Q1140578 wdt:P1040 ?x0 . wd:Q114"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"IKEA\": \"Q1769361\", \"country\": \"Q6256\"}, \"relationships\": {\"founding\": \"P527\", \"instance of\": \"P31\"}}<|im_end|>\n<|im_start|>user\nIn how many countries has IKEA been established?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?c) AS ?result) WHERE {wd:Q1769361 wdt:P527 ?c. ?c p:P31/ps:P31 wd:Q6256}",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P527 wd:Q1769361 . ?sbj wdt:P31 wd:Q6256 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P527 wd:Q1769361 . ?sbj wdt:P31 wd:Q6256 }``` , \n , \n , \n , \n , \n , \n , \n , and \n wdt:P31 wd:Q6256 }``` , \n , \n , \n , \n , \n , \n wdt:P31 wd:Q6256 }``` , \n , \n , \n , \n wdt:P31 wd:Q6256 }``` , \n , \n , \n wdt:P31 wd:Q6256 }``` , \n , \n wdt:P31 wd:Q6256 }``` , \n , \n wdt:P31 wd:Q6256 }``` , \n , \n wdt:P31 wd:Q6256 }``` , \n , \n wdt:P31 wd:Q6256 }``` , \n , \n wdt:P31 wd:Q6256 }``` , \n , \n wdt:P31 wd:Q6256 }``` , \n , \n wdt:P31 wd:Q6256 }``` , \n , \n wdt:P31 wd:Q6256 }``` , \n , \n wdt:P31 wd:Q6256 }``` , \n , \n wdt:P31 wd:Q6256 }``` , \n , \n wdt:P31 wd:Q6256 }``` , \n , \n wdt:P31 wd:Q6256 }``` , \n , \n wdt:P31 wd:Q6256 }``` , \n , \n wdt:P31 wd:Q6256 }``` , \n ,"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"United Fruit Company\": \"Q1771942\"}, \"relationships\": {\"headquarters location\": \"P159\", \"located in the administrative territorial entity\": \"P131\", \"instance of\": \"P31\", \"country\": \"Q6256\"}}<|im_end|>\n<|im_start|>user\nIn which country did the United Fruit Company have their headquarters?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE{wd:Q1771942 wdt:P159/wdt:P131* ?result. ?result wdt:P31 wd:Q6256}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q1771942 wdt:P159 ?X . ?X wdt:P131 ?answer . ?X wdt:P31 wd:Q6256}",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q1771942 wdt:P159 ?X . ?X wdt:P131 ?answer . ?X wdt:P31 wd:Q6256}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q1771942 wdt:P112 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q1771942 wdt:P112 ?answer}``` , \n , \n , \n , \n , \n , \n , \n wd:Q1771942 wdt:P112 ?answer}``` , \n , \n , \n , \n , \n wd:Q1771942 wdt:P112 ?answer}``` , \n , \n , \n , \n wd:Q1771942 wdt:P112 ?answer}``` , \n , \n , \n wd:Q1771942 wdt:P112 ?answer}``` , \n , \n , \n wd:Q1771942 wdt:P112 ?answer}``` , \n , \n , \n wd:Q1771942 wdt:P112 ?answer}``` , \n , \n wd:Q1771942 wdt:P112 ?answer}``` , \n , \n wd:Q1771942 wdt:P112 ?answer}``` , \n , \n wd:Q1771942 wdt:P112 ?answer}``` , \n , \n wd:Q1771942 wdt:P112 ?answer}``` , \n , \n wd:Q1771942 w"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"pysanka\": \"Q3233785\"}, \"relationships\": {\"country\": \"P17\"}}<|im_end|>\n<|im_start|>user\nIn how many countries is pysanka practiced?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?c) AS ?result) WHERE {wd:Q3233785 wdt:P17 ?c}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P17 wd:Q3233785 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P17 wd:Q3233785 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q3233785 wdt:P17 wd:Q142 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q3233785 wdt:P17 wd:Q16 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q3233785 wdt:P17 wd:Q142 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q3233785 wdt:P17 wd:Q142 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q3233785 wdt:P17 wd:Q142 }``` , \n , \n , \n , \n , \n , \n wd:Q3233785 wdt:P17 wd:Q142 }``` , \n , \n , \n , \n , \n wd:Q3233785 wdt:P17 wd:Q142 }``` , \n , \n , \n , \n , \n wd:Q3233785 wdt:P17 wd:Q142 }``` , \n , \n , \n , \n wd:Q3233785 wdt:P17 wd:Q142 }``` , \n , \n , \n , \n wd:Q323"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Oberirrach\": \"Q98138090\"}, \"relationships\": {\"country\": \"P17\"}}<|im_end|>\n<|im_start|>user\nIn which country is Oberirrach ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {wd:Q98138090 wdt:P17 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P17 wd:Q98138090 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P17 wd:Q98138090 }``` , \n\"relationships\": {\"instance of\": \"P31\", \"label\": \"rdfs:label\"}} , FILTER\": \"CONTAINS\", \"lang\": \"lang\"}} , \n7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Spotify\": \"Q689141\"}, \"relationships\": {\"country of origin\": \"P495\"}}<|im_end|>\n<|im_start|>user\nIn which country was Spotify created?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {wd:Q689141 wdt:P495 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P495 wd:Q689141 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P495 wd:Q689141 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q689141 wdt:P161 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q689141 wdt:P161 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q689141 wdt:P161 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q689141 wdt:P161 ?x0 }``` , \n , \n , \n , \n , \n , \n wd:Q689141 wdt:P161 ?x0 }``` , \n , \n , \n , \n , \n wd:Q689141 wdt:P161 ?x0 }``` , \n , \n , \n , \n , \n wd:Q689141 wdt:P161 ?x0 }``` , \n , \n , \n , \n wd:Q689141 wdt:P161 ?x0 }``` , \n , \n , \n , \n wd:Q689141 wdt:P161 ?x0 }``` , \n , \n , \n , \n wd:Q689141 wdt:P161 ?x0 }``` , \n , \n , \n wd:Q689141 wdt:P161 ?x0 }``` , "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Vogue\": \"Q1128775\", \"Madonna\": \"Q1744\"}, \"relationships\": {\"performer\": \"P175\", \"named after\": \"P138\"}}<|im_end|>\n<|im_start|>user\nWhat is the song Vogue by Madonna named after?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE{wd:Q1128775 wdt:P175 wd:Q1744; wdt:P138 ?result}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q1128775 wdt:P175 ?answer . ?answer wdt:P138 wd:Q1744}",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q1128775 wdt:P175 ?answer . ?answer wdt:P138 wd:Q1744}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n md:Q1744 wdt:P161 ?x0 . wd:Q1744 wdt:P161 ?x1 . wd:Q1744 wdt:P161 wd:Q1744 . wd:Q1744 wdt:P161 wd:Q1744 . wd:Q1744 wdt:P161 wd:Q1744 . wd:Q1744 wdt:P161 wd:Q1744 . wd:Q1744 wdt:P161 wd:Q1744 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"United States\": \"Q30\"}, \"relationships\": {\"short name\": \"P1813\", \"language of work or name\": \"P407\"}}<|im_end|>\n<|im_start|>user\nin which language does the united stated have the shortest short name?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {wd:Q30 wdt:P1813 ?name BIND(lang(?name) AS ?result)} ORDER BY ASC(strlen(?name)) LIMIT 1",
        "generated_sparql": "select ?answer where { wd:Q30 wdt:P1813 ?answer . ?answer wdt:P407 wd:Q30}",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql select ?answer where { wd:Q30 wdt:P1813 ?answer . ?answer wdt:P407 wd:Q30}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q30 wdt:P1813 ?x0 . ?x0 wdt:P407 wd:Q30 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q30 wdt:P1813 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q30 wdt:P1813 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q30 wdt:P1813 ?x0 }``` , \n , \n , \n , \n , \n , \n wd:Q30 wdt:P1813 ?x0 }``` , \n , \n , \n , \n , \n wd:Q30 wdt:P1813 ?x0 }``` , \n , \n , \n , \n wd:Q30 wdt:P1813 ?x0 }``` , \n , \n , \n , \n wd:Q30 wdt:P1813 ?x0 }``` , \n , \n , \n , \n wd:Q30 wdt:P1813 ?x0 }``` , \n , \n , \n wd:Q30 wdt:P1813 ?x0 }``` , \n , \n , \n wd:Q30 wdt:P1813 ?x0 }``` , \n , \n , \n wd:Q30 wdt:P1813 ?"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Bremerhaven\": \"Q2706\"}, \"relationships\": {\"local dialing code\": \"P473\"}}<|im_end|>\n<|im_start|>user\nDoes Bremerhaven's local dialing code start with 4?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q2706 wdt:P473 ?code. FILTER regex(?code, \"^4\")}",
        "generated_sparql": "SELECT DISTINCT ?sbj ?sbj_label WHERE { ?sbj wdt:P31 wd:Q2706 . ?sbj rdfs:label ?sbj_label . FILTER(STRSTARTS(lcase(?sbj_label), '4')) . FILTER (lang(?sbj_label) = 'en') } LIMIT 25",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql SELECT DISTINCT ?sbj ?sbj_label WHERE { ?sbj wdt:P31 wd:Q2706 . ?sbj rdfs:label ?sbj_label . FILTER(STRSTARTS(lcase(?sbj_label), '4')) . FILTER (lang(?sbj_label) = 'en') } LIMIT 25``` , \n 'lang(?sbj_label) = 'en') } LIMIT 25``` , \n 'lang(?sbj_label) = 'en') } LIMIT 25``` , \n 'lang(?sbj_label) = 'en') } LIMIT 25``` , \n 'lang(?sbj_label) = 'en') } LIMIT 25``` , \n 'lang(?sbj_label) = 'en') } LIMIT 25``` , \n 'lang(?sbj_label) = 'en') } LIMIT 25``` , \n 'lang(?sbj_label) = 'en') } LIMIT 25``` , \n 'lang(?sbj_label) = 'en') } LIMIT 25``` , \n 'lang(?sbj_label) = 'en') } LIMIT 25``` , \n 'lang(?sbj_label) = 'en') } LIMIT 25``` , \n 'lang(?sbj_label) = 'en') } LIMIT 25``` , \n 'lang(?sbj_label) = 'en') } LIMIT 25``` , \n 'lang(?sbj_label) = 'en') } LIMIT 25``` , \n 'lang(?sbj_label) = 'en') } LIMIT 25``` , \n 'lang(?sbj_label) = 'en') } LIMIT 25``` , \n 'lang(?sbj_label) = 'en') } LIMIT 25``` , \n 'lang(?sbj_label) = 'en') } LIMIT 25``` , \n 'lang(?sbj_label) = 'en') } LIMIT 25``` ,"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Human\": \"Q11424\", \"Johnny Depp\": \"Q37175\"}, \"relationships\": {\"instance of\": \"P31\", \"cast member\": \"P161\"}}<|im_end|>\n<|im_start|>user\nIn how many movies was Johnny Depp casted in?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?result) AS ?resultCnt) WHERE{?result wdt:P31 wd:Q11424; wdt:P161 wd:Q37175}",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P161 wd:Q37175 . ?sbj wdt:P31 wd:Q11424 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P161 wd:Q37175 . ?sbj wdt:P31 wd:Q11424 }``` , \n , \n , \n , \n , \n , \n , \n , \n , and \n wdt:P161 wd:Q37175 }``` , \n , \n , \n , \n , \n , \n wd:Q37175 wdt:P31 wd:Q11424 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q37175 wdt:P161 wd:Q37175 }``` , \n , \n , \n , \n , \n wd:Q37175 wdt:P161 wd:Q37175 }``` , \n , \n , \n , \n wd:Q37175 wdt:P161 wd:Q37175 }``` , \n , \n , \n wd:Q37175 wdt:P161 wd:Q37175 }``` , \n , \n , \n wd:Q37175 wdt:P161 wd:Q37175 }``` , \n , \n , \n wd:Q37175 wdt:P161 wd:Q37175 }``` , \n , \n , \n wd:Q37175 wdt:P161 wd:Q37175 }``` , \n , \n , \n wd:Q37175 wdt:P161 wd:Q37175 }``` , \n , \n , \n wd:Q37175 wdt:P161 wd:Q37175 }``` , \n , \n , \n wd:Q"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"ABBA\": \"Q338553\", \"The Visitors\": null}, \"relationships\": {\"publication date\": \"P577\"}}<|im_end|>\n<|im_start|>user\nIn which year did ABBA publish their album The Visitors ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE{wd:Q338553 wdt:P577 ?date. BIND(YEAR(?date) AS ?result)}",
        "generated_sparql": "SELECT ?value WHERE { wd:Q182223 p:P674 ?s . ?s ps:P674 wd:Q338553 . ?s pq:P577 ?value}",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql SELECT ?value WHERE { wd:Q182223 p:P674 ?s . ?s ps:P674 wd:Q338553 . ?s pq:P577 ?value}``` , \n 1979-0-0 ?x filter(contains(?x,'1979')) }``` , \n , 1979 ?x filter(contains(?x,'1979')) }``` , \n , 1979 ?x filter(contains(?x,'1979')) }``` , \n , 1979 ?x filter(contains(?x,'1979')) }``` , \n , 1979 ?x filter(contains(?x,'1979')) }``` , \n , 1979 ?x filter(contains(?x,'1979')) }``` , \n , 1979 ?x filter(contains(?x,'1979')) }``` , \n , 1979 ?x filter(contains(?x,'1979')) }``` , \n , 1979 ?x filter(contains(?x,'1979')) }``` , \n , 1979 ?x filter(contains(?x,'1979')) }``` , \n , 1979 ?x filter(contains(?x,'1979')) }``` , \n , 1979 ?x filter(contains(?x,'1979')) }``` , \n , 1979 ?x filter(contains(?x,'1979')) }``` , \n , 1979 ?x filter(contains(?x,'1979')) }``` , \n , 1979 ?x filter(contains(?x,'1979')) }``` , \n , 1979 ?x filter(contains(?x,'1979')) }``` , \n , 1979 ?x filter(contains(?x,'1979')) }``` , \n , "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"The Vanishing Half\": \"Q98476957\"}, \"relationships\": {\"author\": \"P50\", \"birth date\": \"P569\"}}<|im_end|>\n<|im_start|>user\nIn which year was the author of \u201cThe Vanishing Half\u201d born?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {wd:Q98476957 wdt:P50/wdt:P569 ?date. BIND(YEAR(?date) AS ?result)}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q98476957 wdt:P50 ?X . ?X wdt:P569 ?answer}",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q98476957 wdt:P50 ?X . ?X wdt:P569 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q98476957 wdt:P58 ?X . ?X wdt:P569 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q98476957 wdt:P58 ?X }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q98476957 wdt:P58 ?X }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q98476957 wdt:P58 ?X }``` , \n , \n , \n , \n , \n , \n , \n wd:Q98476957 wdt:P58 ?X }``` , \n , \n , \n , \n , \n , \n wd:Q98476957 wdt:P58 ?X }``` , \n , \n , \n , \n , \n wd:Q98476957 wdt:P58 ?X }``` , \n , \n , \n , \n , \n wd:Q98476957 wdt:P58 ?X }``` , \n , \n , \n , \n wd:Q98476957 wdt:P58 ?X }``` , \n , \n , \n wd:Q98476957 wdt:P58 ?X }``` ,"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"After Eight\": \"Q388973\", \"Unilever\": \"Q157062\"}, \"relationships\": {\"manufacturer\": \"P176\"}}<|im_end|>\n<|im_start|>user\nIs After Eight manufactured by Unilever?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q388973 wdt:P176 wd:Q157062}",
        "generated_sparql": "ASK WHERE { wd:Q388973 wdt:P176 wd:Q157062 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql ASK WHERE { wd:Q388973 wdt:P176 wd:Q157062 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q157062 wdt:P176 wd:Q704756 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q157062 wdt:P176 wd:Q704756 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q157062 wdt:P176 wd:Q704756 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q157062 wdt:P176 wd:Q704756 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q157062 wdt:P176 wd:Q704756 }``` , \n , \n , \n , \n , \n , \n wd:Q157062 wdt:P176 wd:Q704756 }``` , \n , \n , \n , \n , \n wd:Q157062 wdt:P176 wd:Q704756 }``` , \n , \n , \n , \n , \n wd:Q157062 wdt:P176 wd:Q704756 }``` , \n , \n , \n , \n wd:Q157062 wdt:P176 wd:Q704756 }"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"ALDI\": \"Q125054\", \"Italy\": \"Q38\"}, \"relationships\": {\"subsidiary\": \"P527\", \"country\": \"P17\"}}<|im_end|>\n<|im_start|>user\nIs ALDI also in Italy?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q125054 wdt:P527/wdt:P17 wd:Q38}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q125054 wdt:P527 ?answer . ?answer wdt:P17 wd:Q38}",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q125054 wdt:P527 ?answer . ?answer wdt:P17 wd:Q38}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q125054 wdt:P17 wd:Q38}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q125054 wdt:P17 wd:Q38 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q125054 wdt:P17 wd:Q38 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q125054 wdt:P17 wd:Q38 }``` , \n , \n , \n , \n , \n wd:Q125054 wdt:P17 wd:Q38 }``` , \n , \n , \n , \n wd:Q125054 wdt:P17 wd:Q38 }``` , \n , \n , \n , \n wd:Q125054 wdt:P17 wd:Q38 }``` , \n , \n , \n wd:Q125054 wdt:P17 wd:Q38 }``` , \n , \n , \n wd:Q125054 wdt:P17 wd:Q38 }``` , \n , \n , \n wd:Q125054 wdt:P17 wd:Q38 }``` , \n , \n , \n wd:Q125054 wdt:P17 wd:Q3"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Isfahan\": \"Q42053\", \"big city\": \"Q1549591\"}, \"relationships\": {\"instance of\": \"P31\"}}<|im_end|>\n<|im_start|>user\nis Isfahan a big city?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q42053 wdt:P31 wd:Q1549591}",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P36 wd:Q42053 . ?sbj wdt:P31 wd:Q1549591 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P36 wd:Q42053 . ?sbj wdt:P31 wd:Q1549591 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l9c\": \"Q106392999\"}, \"relationships\": {\"instance of\": \"P31\", \"label\": \"rdfs:label\"}} , FILTER\": \"CONTAINS\", \"lowercase\": \"lcase\"}} , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"mathematics\": \"Q395\", \"science\": \"Q336\"}, \"relationships\": {\"related to\": \"?p\"}}<|im_end|>\n<|im_start|>user\nIs math related to science ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q395 ?p [?p2 wd:Q336]}",
        "generated_sparql": "ASK WHERE { wd:Q395 wdt:P101 wd:Q336 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql ASK WHERE { wd:Q395 wdt:P101 wd:Q336 }``` , ?x0 wdt:P101 wd:Q395 }``` , ?x0 wdt:P101 wd:Q336 }``` , ?x0 wdt:P101 wd:Q395 }``` , ?x0 wdt:P101 wd:Q395 }``` , ?x0 wdt:P101 wd:Q395 }``` , ?x0 wdt:P101 wd:Q395 }``` , ?x0 wdt:P101 wd:Q395 }``` , ?x0 wdt:P101 wd:Q395 }``` , ?x0 wdt:P101 wd:Q395 }``` , ?x0 wdt:P101 wd:Q395 }``` , ?x0 wdt:P101 wd:Q395 }``` , ?x0 wdt:P101 wd:Q395 }``` , ?x0 wdt:P101 wd:Q395 }``` , ?x0 wdt:P101 wd:Q395 }``` , ?x0 wdt:P101 wd:Q395 }``` , ?x0 wdt:P101 wd:Q395 }``` , ?x0 wdt:P101 wd:Q395 }``` , ?x0 wdt:P101 wd:Q395 }``` , ?x0 wdt:P101 wd:Q395 }``` , ?x0 wdt:P101 wd:Q395 }``` , ?x0 wdt:P101 wd:Q395 }``` , ?x0 wdt:P101 wd:Q395 }``` , ?x0 wdt:P101 wd:Q39"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Python\": \"Q28865\", \"Programming languages\": \"Q9143\"}, \"relationships\": {\"instance of\": \"P31\"}}<|im_end|>\n<|im_start|>user\nIs Python a kind of Programming languages?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q28865 p:P31/ps:P31 wd:Q9143}",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P277 wd:Q28865 . ?sbj wdt:P31 wd:Q9143 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P277 wd:Q28865 . ?sbj wdt:P31 wd:Q9143 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l9c\": \"Q106395330\"}, \"relationships\": {\"instance of\": \"P31\", \"label\": \"rdfs:label\"}} , FILTER\": \"CONTAINS\", \"lowercase\": \"lcase\"}} , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Samurai Champloo\": \"Q143276\", \"original work\": \"Q104640197\", \"adaptation\": \"Q1213562\"}, \"relationships\": {\"instance of\": \"P31\", \"based on\": \"P279\"}}<|im_end|>\n<|im_start|>user\nIs samurai champloo a piece of original work or an adaptation?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {wd:Q143276 wdt:P31/wdt:P279* ?result FILTER(?result IN (wd:Q104640197, wd:Q1213562))}",
        "generated_sparql": "ASK WHERE { wd:Q143276 wdt:P31 wd:Q104640197 . wd:Q143276 wdt:P279 wd:Q1213562 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql ASK WHERE { wd:Q143276 wdt:P31 wd:Q104640197 . wd:Q143276 wdt:P279 wd:Q1213562 }``` , \n , \n , \n , \n , \n , \n , \n , \n , and \n are written by a film 's writer , executive producer , and producer and written by Samurai Champloo 's writer and editor , \n , \n , \n , \n , and \n , \n , \n , \n and \n are written by a film 's writer , executive producer , and producer and written by Samurai Champloo 's writer and editor , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n ,"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"first female chancellor in Germany\": \"Q183\", \"Germany\": \"Q183\"}, \"relationships\": {\"spouse\": \"P26\"}}<|im_end|>\n<|im_start|>user\nWas the first female chancellor in Germany ever married?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {{SELECT ?fc WHERE {wd:Q183 p:P6 ?ps. ?ps ps:P6 ?fc; pq:P580 ?st. ?fc wdt:P21 wd:Q6581072} ORDER BY ASC(?st) LIMIT 1} FILTER(EXISTS{?fc p:P26/ps:P26 ?sp})}",
        "generated_sparql": "ASK WHERE { ?x0 wdt:P21 wd:Q6581072 . ?x0 wdt:P26 wd:Q183 . FILTER ( ?x0 != wd:Q183 ) }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql ASK WHERE { ?x0 wdt:P21 wd:Q6581072 . ?x0 wdt:P26 wd:Q183 . FILTER ( ?x0 != wd:Q183 ) }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n md:Q10837 wdt:P161 ?x0 . wd:Q10837 wdt:P161 wd:Q10837 . wd:Q10837 wdt:P161 wd:Q10837 . wd:Q10837 wdt:P161 wd:Q10837 . wd:Q10837 wdt:P161 wd:Q10837 . wd:Q10837 wdt:P161 wd:Q10837 }``` , \n , \n , \n , \n , \n , \n , \n , \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Mariana Trench\": \"Q510\", \"Mount Everest\": \"Q513\"}, \"relationships\": {\"depth\": \"P2044\"}}<|im_end|>\n<|im_start|>user\nIs the Mariana Trench deeper than Mount Everest is high (above sea level)?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q510 wdt:P2044 ?d. wd:Q513 wdt:P2044 ?h. FILTER(?d + ?h < 0)}",
        "generated_sparql": "ASK WHERE { wd:Q510 wdt:P2044 wd:Q513 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql ASK WHERE { wd:Q510 wdt:P2044 wd:Q513 }``` , \n , wd:Q510 wdt:P2044 wd:Q513 }``` , \n , wd:Q510 wdt:P2044 wd:Q513 }``` , \n , wd:Q510 wdt:P2044 wd:Q513 }``` , \n , wd:Q510 wdt:P2044 wd:Q513 }``` , \n , wd:Q510 wdt:P2044 wd:Q513 }``` , \n , wd:Q510 wdt:P2044 wd:Q513 }``` , \n , wd:Q510 wdt:P2044 wd:Q513 }``` , \n , wd:Q510 wdt:P2044 wd:Q513 }``` , \n , wd:Q510 wdt:P2044 wd:Q513 }``` , \n , wd:Q510 wdt:P2044 wd:Q513 }``` , \n , wd:Q510 wdt:P2044 wd:Q513 }``` , \n , wd:Q510 wdt:P2044 wd:Q513 }``` , \n , wd:Q510 wdt:P2044 wd:Q513 }``` , \n , wd:Q510 wdt:P2044 wd:Q513 }``` , \n , wd:Q510 wdt:P2044 wd:Q513 }``` , \n , wd:Q510 wdt:P2044 wd:Q513 }``` , \n , wd:Q510 wdt:"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Europe\": \"Q46\", \"Asia\": \"Q48\", \"continent\": \"Q6256\"}, \"relationships\": {\"instance of\": \"P31\", \"continent\": \"P30\"}}<|im_end|>\n<|im_start|>user\nIs the number of countries in Europe larger than that in Asia?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {{SELECT (COUNT (DISTINCT ?ac) AS ?acc) (COUNT (DISTINCT ?ec) AS ?ecc) WHERE {?ec p:P31/ps:P31 wd:Q6256; wdt:P30 wd:Q46. ?ac p:P31/ps:P31 wd:Q6256; wdt:P30 wd:Q48.}}FILTER(?ecc > ?acc)}",
        "generated_sparql": "ASK WHERE { wd:Q46 wdt:P31 wd:Q48 . wd:Q46 wdt:P30 wd:Q6256 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql ASK WHERE { wd:Q46 wdt:P31 wd:Q48 . wd:Q46 wdt:P30 wd:Q6256 }``` , \n 's sibling\": \"P3373\", \"founder\": \"P112\"}} , \n 's sibling\": \"P3373\", \"founder\": \"P112\"}} , \n 's sibling\": \"P3373\", \"founder\": \"P112\"}} , \n 's sibling\": \"P3373\", \"founder\": \"P112\"}} , \n 's sibling\": \"P3373\", \"founder\": \"P112\"}} , \n 's sibling\": \"P3373\", \"founder\": \"P112\"}} , \n 's sibling\": \"P3373\", \"founder\": \"P112\"}} , \n 's sibling\": \"P3373\", \"founder\": \"P112\"}} , \n 's sibling\": \"P3373\", \"founder\": \"P112\"}} , \n 's sibling\": \"P3373\", \"founder\": \"P112\"}} , \n 's sibling\": \"P3373\", \"founder\": \"P112\"}} , \n 's sibling\": \"P3373\", \"founder\": \"P112\"}} , \n 's sibling\": \"P3373\", \"founder\": \"P112\"}} , \n 's sibling\": \"P3373\", \"founder\": \"P112\"}} , \n 's sibling\": \"P3373\", \"founder\": \"P112\"}} , \n 's sibling\": \"P3373\", \"founder\": \"P112\"}} , \n 's sibling\": \"P3373\", \"founder\": \"P112\"}} , \n 's sibling\": \"P3373\", \"founder\":"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Samurai Champloo\": \"Q143276\"}, \"relationships\": {\"production company\": \"P272\", \"dissolved, abolished or demolished\": \"P576\"}}<|im_end|>\n<|im_start|>user\nIs the production company of samurai champloo still existing?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q143276 wdt:P272 ?comp FILTER(NOT EXISTS{?comp wdt:P576 ?o})}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q143276 wdt:P272 ?X . ?X wdt:P576 ?answer}",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q143276 wdt:P272 ?X . ?X wdt:P576 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n wd:Q143276 wdt:P108 ?X . ?X wdt:P576 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q143276 wdt:P108 ?X }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q143276 wdt:P108 ?X }``` , \n , \n , \n , \n , \n , \n , \n wd:Q143276 wdt:P108 ?X }``` , \n , \n , \n , \n , \n , \n wd:Q143276 wdt:P108 ?X }``` , \n , \n , \n , \n , \n wd:Q143276 wdt:P108 ?X }``` , \n , \n , \n , \n wd:Q143276 wdt:P108 ?X }``` , \n , \n , \n , \n wd:Q143276 wdt:P108 ?X }``` , \n , \n , \n wd:Q143276 wdt:P108 ?X }``` , \n , \n , \n wd:Q143276 wdt:P108 ?X }``` , \n , \n , \n wd:Q143276 wdt:P108 ?X }``` , \n , \n w"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Hunter x Hunter\": \"Q696071\", \"female\": \"Q6581072\"}, \"relationships\": {\"main character\": \"P674\", \"gender\": \"P21\"}}<|im_end|>\n<|im_start|>user\nis there female main character in hunter x hunter?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q696071 wdt:P674 ?char. ?char wdt:P21 wd:Q6581072}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q696071 wdt:P674 ?answer . ?answer wdt:P21 wd:Q6581072}",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q696071 wdt:P674 ?answer . ?answer wdt:P21 wd:Q6581072}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l9c\": \"Q106390009\"}, \"relationships\": {\"instance of\": \"P31\", \"label\": \"rdfs:label\"}} , FILTER\": \"CONTAINS\", \"lcase\": \"lcase\"}} , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"water\": \"Q283\", \"colorless\": \"Q11567495\"}, \"relationships\": {\"has quality\": \"P462\"}}<|im_end|>\n<|im_start|>user\nIs water colorless?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q283 wdt:P462 wd:Q11567495}",
        "generated_sparql": "ASK WHERE { wd:Q283 wdt:P462 wd:Q11567495 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql ASK WHERE { wd:Q283 wdt:P462 wd:Q11567495 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n and \n wd:Q283 wdt:P462 wd:Q11567495 }``` , \n , \n , \n , \n , \n , \n , \n , \n and \n wd:Q283 wdt:P462 wd:Q11567495 }``` , \n , \n , \n , \n , \n , \n , \n , \n and \n wd:Q283 wdt:P462 wd:Q11567495 }``` , \n , \n , \n , \n , \n , \n , \n , \n and \n wd:Q283 wdt:P462 wd:Q11567495 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q283 wdt:P462 wd:Q11567495 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q283 wdt:P462 wd:Q11567495 }``` , \n , \n , \n , \n , \n , \n wd:Q283 wdt:P462 wd:Q11567495 }``` , \n , \n , \n , \n , \n wd:Q283 wdt:P462 wd:Q11567495 }``` , \n , \n , \n , \n , \n wd:Q283 wdt:P462 wd:Q11567495 }``` , \n , \n , \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Axl Rose\": \"Q11885\", \"Guns N' Roses\": \"Q11895\"}, \"relationships\": {\"member of\": \"P463\"}}<|im_end|>\n<|im_start|>user\nIs Axel Rose a member of Guns N' Roses?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q11885 wdt:P463 wd:Q11895}",
        "generated_sparql": "ASK WHERE { wd:Q11885 wdt:P463 wd:Q11895 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql ASK WHERE { wd:Q11885 wdt:P463 wd:Q11895 }``` , \n , wd:Q11885 wdt:P463 wd:Q174105 }``` , \n , wd:Q11885 wdt:P463 wd:Q174105 }``` , \n , wd:Q11885 wdt:P463 wd:Q174105 }``` , \n , wd:Q11885 wdt:P463 wd:Q174105 }``` , \n , wd:Q11885 wdt:P463 wd:Q174105 }``` , \n , wd:Q11885 wdt:P463 wd:Q174105 }``` , \n , wd:Q11885 wdt:P463 wd:Q174105 }``` , \n , wd:Q11885 wdt:P463 wd:Q174105 }``` , \n , wd:Q11885 wdt:P463 wd:Q174105 }``` , \n , wd:Q11885 wdt:P463 wd:Q174105 }``` , \n , wd:Q11885 wdt:P463 wd:Q174105 }``` , \n , wd:Q11885 wdt:P463 wd:Q174105 }``` , \n , wd:Q11885 wdt:P463 wd:Q174105 }``` , \n , wd:Q11885 wdt:P463 wd:Q174105 }``` , \n , wd:Q11885"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Iran\": \"Q794\", \"Germany\": \"Q183\"}, \"relationships\": {\"capital\": \"P36\", \"population\": \"P2046\"}}<|im_end|>\n<|im_start|>user\nIs the capital of Iran bigger than that of Germany?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q794 wdt:P36/wdt:P2046 ?a1. wd:Q183 wdt:P36/wdt:P2046 ?a2. FILTER(?a1 > ?a2)}",
        "generated_sparql": "ASK WHERE { wd:Q794 wdt:P36 ?x0 . ?x0 wdt:P2046 wd:Q183 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql ASK WHERE { wd:Q794 wdt:P36 ?x0 . ?x0 wdt:P2046 wd:Q183 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q794 wdt:P36 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q794 wdt:P36 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q794 wdt:P36 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q794 wdt:P36 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q794 wdt:P36 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q794 wdt:P36 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q794 wdt:P36 ?x0 }``` , \n , \n , \n , \n , \n , \n wd:Q794 wdt:P36 ?x0 }``` , \n , \n , \n , \n , \n , \n wd:Q794 wdt:P36 ?x0 }``` , \n , \n , \n , \n , \n wd:Q794 w"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Weser\": \"Q1650\", \"Rhine\": \"Q584\"}, \"relationships\": {\"length\": \"P2043\"}}<|im_end|>\n<|im_start|>user\nIs the Weser longer than the Rhine?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK{wd:Q1650 p:P2043/psn:P2043/wikibase:quantityAmount ?lenw. wd:Q584 p:P2043/psn:P2043/wikibase:quantityAmount ?lenr FILTER(?lenw > ?lenr)}",
        "generated_sparql": "ASK WHERE { wd:Q1650 wdt:P2043 wd:Q584 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql ASK WHERE { wd:Q1650 wdt:P2043 wd:Q584 }``` , \n , wd:Q1650 wdt:P2043 wd:Q1650 wdt:P2043 wd:Q1650 wdt:P2043 wd:Q1650 wdt:P2043 wd:Q1650 wdt:P2043 wd:Q1650 wdt:P2043 wd:Q1650 wdt:P2043 wd:Q1650 wdt:P2043 wd:Q1650 wdt:P2043 wd:Q1650 wdt:P2043 wd:Q1650 wdt:P2043 wd:Q1650 wdt:P2043 wd:Q1650 wdt:P2043 wd:Q1650 wdt:P2043 wd:Q1650 wdt:P2043 wd:Q1650 wdt:P2043 wd:Q1650 wdt:P2043 wd:Q1650 wdt:P2043 wd:Q1650 wdt:P2043 wd:Q1650 wdt:P2043 wd:Q1650 wdt:P2043 wd:Q1650 wdt:P2043 wd:Q1650 wdt:P2043 wd:Q1650 wdt:P2043 wd:Q1650 wdt:P2043 wd:Q1650 wdt:P2043 wd:Q1650 wdt:P2043 wd:Q1650 wdt:P2043 wd:Q1650 wdt:P2043 wd:Q1650 w"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Tony Blair\": \"Q9545\", \"Tiger Woods\": \"Q10993\"}, \"relationships\": {\"height\": \"P2048\"}}<|im_end|>\n<|im_start|>user\nIs Tony Blair taller than Tiger Woods?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q9545 p:P2048/psn:P2048/wikibase:quantityAmount ?hb. wd:Q10993 p:P2048/psn:P2048/wikibase:quantityAmount ?hw FILTER(?hb > ?hw)}",
        "generated_sparql": "ASK WHERE { wd:Q9545 wdt:P2048 wd:Q10993 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql ASK WHERE { wd:Q9545 wdt:P2048 wd:Q10993 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n  wd:Q10993 wdt:P2048 wd:Q10993 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q10993 wdt:P2048 wd:Q10993 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q10993 wdt:P2048 wd:Q10993 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q10993 wdt:P2048 wd:Q10993 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q10993 wdt:P2048 wd:Q10993 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q10993 wdt:P2048 wd:Q10993 }``` , \n , \n , \n , \n , \n , \n wd:Q10993 wdt:P2048 wd:Q10993 }``` , \n , \n , \n , \n , \n wd:Q10993 wdt:P2048 wd:Q10993 }``` , \n , \n , \n , \n , \n wd:Q10993 wdt:P2048 wd:"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Chicago\": \"Q1297\", \"Lake Michigan\": \"Q1169\"}, \"relationships\": {\"located at\": \"P206\"}}<|im_end|>\n<|im_start|>user\nIs Chicago located at Lake Michigan?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q1297 wdt:P206 wd:Q1169}",
        "generated_sparql": "ASK WHERE { wd:Q1297 wdt:P206 wd:Q1169 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql ASK WHERE { wd:Q1297 wdt:P206 wd:Q1169 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q1297 wdt:P206 wd:Q1169 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q1297 wdt:P206 wd:Q1169 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q1297 wdt:P206 wd:Q1169 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q1297 wdt:P206 wd:Q1169 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q1297 wdt:P206 wd:Q1169 }``` , \n , \n , \n , \n , \n , \n wd:Q1297 wdt:P206 wd:Q1169 }``` , \n , \n , \n , \n , \n , \n wd:Q1297 wdt:P206 wd:Q1169 }``` , \n , \n , \n , \n , \n wd:Q1297 wdt:P206 wd:Q1169 }``` , \n , \n , \n , \n , \n wd:Q1297 wdt:P206 wd:Q1169 }``` , \n , \n , \n , \n wd:Q1297 wdt:P206 wd:Q11"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"H\u00f6xter\": \"Q6228\", \"Paderborn\": \"Q6224\"}, \"relationships\": {\"adjacent to\": \"P47\"}}<|im_end|>\n<|im_start|>user\nIs the district of H\u00f6xter next to the district of Paderborn?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q6228 wdt:P47 wd:Q6224}",
        "generated_sparql": "ASK WHERE { wd:Q6228 wdt:P47 wd:Q6224 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql ASK WHERE { wd:Q6228 wdt:P47 wd:Q6224 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Harz\": \"Q4186\", \"Nordhausen\": \"Q7858\"}, \"relationships\": {\"located in the administrative territorial entity\": \"P131\"}}<|im_end|>\n<|im_start|>user\nAre part of the Harz mountains in the district of Nordhausen?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q4186 wdt:P131 wd:Q7858}",
        "generated_sparql": "ASK WHERE { wd:Q4186 wdt:P131 wd:Q7858 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql ASK WHERE { wd:Q4186 wdt:P131 wd:Q7858 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"human\": \"Q5\", \"Nobel Prize in Literature\": \"Q37922\", \"Nobel Prize in Physics\": \"Q38104\"}, \"relationships\": {\"instance of\": \"P31\", \"award received\": \"P166\", \"point in time\": \"P585\"}}<|im_end|>\n<|im_start|>user\nHow many people won the Nobel Prize in Literature or Physics since 2000?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?result) AS ?resultCnt) WHERE{?result wdt:P31 wd:Q5. ?result p:P166 ?ps. {?ps ps:P166 wd:Q37922} UNION {?ps ps:P166 wd:Q38104} ?ps pq:P585 ?time. FILTER(YEAR(?time) > 2000)}",
        "generated_sparql": "SELECT ?obj WHERE { wd:Q37922 p:P166 ?s . ?s ps:P166 ?obj . ?s pq:P585 ?x filter(contains(YEAR(?x),'2000')) }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql SELECT ?obj WHERE { wd:Q37922 p:P166 ?s . ?s ps:P166 ?obj . ?s pq:P585 ?x filter(contains(YEAR(?x),'2000')) }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n , \n \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l9c\": \"Q106395300\"}, \"relationships\": {\"instance of\": \"P31\", \"label\": \"rdfs:label\"}} , FILTER\": \"CONTAINS\", \"lcase\": \"lcase\"}} , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"African-American people\": \"Q5\", \"Hollywood Walk of Fame\": \"Q17985761\", \"human\": \"Q49085\"}, \"relationships\": {\"instance of\": \"P31\", \"award received\": \"P166\", \"country of origin\": \"P172\"}}<|im_end|>\n<|im_start|>user\nHow many african-american people got a star on the Hollywood Walk of Fame?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?act) AS ?result) WHERE {?act wdt:P31 wd:Q5; wdt:P166 wd:Q17985761; wdt:P172 wd:Q49085}",
        "generated_sparql": "SELECT ?value WHERE { wd:Q5 p:P166 ?s . ?s ps:P166 wd:Q17985761 . ?s pq:P172 ?value}",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql SELECT ?value WHERE { wd:Q5 p:P166 ?s . ?s ps:P166 wd:Q17985761 . ?s pq:P172 ?value}``` , \n \"relationships\": {\"instance of\": \"P31\", \"label\": \"rdfs:label\"}} , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Australia\": \"Q408\"}, \"relationships\": {\"border\": \"P47\", \"instance of\": \"P31\"}}<|im_end|>\n<|im_start|>user\nWith how many countries does Australia share a border?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?country) AS ?result) WHERE {wd:Q408 wdt:P47 ?country. ?country p:P31/ps:P31 wd:Q6256}",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P47 wd:Q408 . ?sbj wdt:P31 wd:Q3624078 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P47 wd:Q408 . ?sbj wdt:P31 wd:Q3624078 }``` , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n md:Q10837 wdt:P161 ?x0 . wd:Q10837 wdt:P161 ?x1 . wd:Q10837 wdt:P161 wd:Q107602841 . wd:Q10837 wdt:P161 wd:Q107603010 . wd:Q10837 wdt:P161 wd:Q107603017 . wd:Q10837 wdt:P161 wd:Q107603018 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Chinese Empress\": \"Q268218\", \"female\": \"Q6581072\"}, \"relationships\": {\"occupation\": \"P39\", \"gender\": \"P21\"}}<|im_end|>\n<|im_start|>user\nHow many female Chinese Empresses have there been?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?result) AS ?resultCnt) WHERE {?result wdt:P39 wd:Q268218; wdt:P21 wd:Q6581072}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q268218 wdt:P39 ?answer . ?answer wdt:P21 wd:Q6581072}",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q268218 wdt:P39 ?answer . ?answer wdt:P21 wd:Q6581072}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , and \n wdt:P31 wd:Q5 }``` , \n , \n , \n , \n , \n , \n , \n wdt:P31 wd:Q1762059 }``` , \n , \n , \n , \n , \n , \n wdt:P31 wd:Q1762059 }``` , \n , \n , \n , \n , \n wdt:P31 wd:Q1762059 }``` , \n , \n , \n , \n wdt:P31 wd:Q1762059 }``` , \n , \n , \n , \n wdt:P31 wd:Q1762059 }``` , \n , \n , \n , \n wdt:P31 wd:Q1762059 }``` , \n , \n , \n , \n wdt:P31 wd:Q1762059 }``` , \n , \n , \n wdt:P31 wd:Q1762059 }``` , \n , \n , \n wdt:P31 wd:Q1762059 }``` , \n , \n , \n wdt:P31 wd:Q1762059 }``` , \n , \n , \n wdt:P31 wd:Q1762059 }``` , \n , \n , \n wdt:P31 wd:Q1762059 }``` , \n , \n , \n wdt:P31 wd:Q1762059 }``` ,"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Joseph Beuys\": \"Q153965\"}, \"relationships\": {\"member of political party\": \"P102\"}}<|im_end|>\n<|im_start|>user\nOf which political party was Joseph Beuys a member?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q153965 wdt:P102 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P102 wd:Q153965 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P102 wd:Q153965 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n ,"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Hollywood Walk of Fame\": \"Q71719\"}, \"relationships\": {\"inception\": \"P1619\"}}<|im_end|>\n<|im_start|>user\nIn what year did the Hollywood Walk of Fame open?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q71719 wdt:P1619 ?year. BIND(YEAR(?year) AS ?result) }",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1619 wd:Q71719 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1619 wd:Q71719 }``` , \n , 1986-0-0: Hollywood Walk of Fame? , 1986-0-0: Hollywood Walk of Fame? , 1986-0-0: Hollywood Walk of Fame? , 1986-0-0: Hollywood Walk of Fame? , 1986-0-0: Hollywood Walk of Fame? , 1986-0-0: Hollywood Walk of Fame? }``` , \n , 1986-0-0: Hollywood Walk of Fame ?x0 }``` , \n , 1986-0-0: Hollywood Walk of Fame ?x0 }``` , \n , 1986-0-0: Hollywood Walk of Fame ?x0 }``` , \n , 1986-0-0: Hollywood Walk of Fame ?x0 }``` , \n , 1986-0-0: Hollywood Walk of Fame ?x0 }``` , \n , 1986-0-0: Hollywood Walk of Fame ?x0 }``` , \n , 1986-0-0: Hollywood Walk of Fame ?x0 }``` , \n , 1986-0-0: Hollywood Walk of Fame ?x0 }``` , \n , 1986-0-0: Hollywood Walk of Fame ?x0 }``` , \n , 1986-0-0: Hollywood Walk of Fame ?x0 }``` , \n , 1986-0-0: Hollywood Walk of Fame ?x0 }``` , \n , 1986-0-0: Hollywood Walk of Fame ?x0 }``` , \n , 1986-0-0: Hollywood Walk of Fame ?x0 }``` , \n , 1986-0-0: Hollywood Walk of Fame ?x0 }``` , \n , 1986-0-0: Hollywood Walk of Fame ?x0 }``` , \n , 1986-"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Hunter x Hunter\": \"Q70209136\", \"video streaming service\": \"Q59152282\"}, \"relationships\": {\"available on\": \"P750\", \"instance of\": \"P31\"}}<|im_end|>\n<|im_start|>user\non which video streaming services can i watch hunter x hunter anime series?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q70209136 wdt:P750 ?result. ?result wdt:P31 wd:Q59152282 }",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P750 wd:Q70209136 . ?sbj wdt:P31 wd:Q59152282 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P750 wd:Q70209136 . ?sbj wdt:P31 wd:Q59152282 }``` , \n , \n , \n , \n , \n , \n , \n , and \n wdt:P31 wd:Q11424 }``` , \n , \n , \n , \n , \n , \n wdt:P31 wd:Q11424 }``` , \n , \n , \n , \n wdt:P31 wd:Q11424 }``` , \n , \n , \n wdt:P31 wd:Q11424 }``` , \n , \n , \n wdt:P31 wd:Q11424 }``` , \n , \n , \n wdt:P31 wd:Q11424 }``` , \n , \n wdt:P31 wd:Q11424 }``` , \n , \n wdt:P31 wd:Q11424 }``` , \n , \n wdt:P31 wd:Q11424 }``` , \n , \n wdt:P31 wd:Q11424 }``` , \n , \n wdt:P31 wd:Q11424 }``` , \n , \n wdt:P31 wd:Q11424 }``` , \n , \n wdt:P31 wd:Q11424 }``` , \n , \n wdt:P31 wd:Q11424 }``` , \n , \n wdt:P31 wd:Q11424 }``` , \n , \n wdt:P31 wd:Q11424 }``` , \n , \n wdt:P31 wd:Q11424 }``"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Silent Generation\": \"Q3044693\"}, \"relationships\": {\"birth year\": \"P582\"}}<|im_end|>\n<|im_start|>user\nPeople of what age belong to the Silent Generation ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q3044693 wdt:P582 ?time. BIND(YEAR(NOW()) - YEAR(?time) AS ?result) }",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P170 wd:Q3044693 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P170 wd:Q3044693 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n md:Q10837 wdt:P161 ?x0 . wd:Q10837 wdt:P161 ?x1 . wd:Q10837 wdt:P161 wd:Q107602841 . wd:Q10837 wdt:P161 wd:Q107603019 . wd:Q10837 wdt:P161 wd:Q107603019 . wd:Q10837 wdt:P161 wd:Q107603019 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"H\u00f6xter\": \"Q6228\"}, \"relationships\": {\"inception\": \"P571\"}}<|im_end|>\n<|im_start|>user\nIn what year did the district of H\u00f6xter come into existence?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q6228 wdt:P571 ?time. BIND(YEAR(?time) AS ?result)}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P155 wd:Q6228 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P155 wd:Q6228 }``` , \n\"relationships\": {\"instance of\": \"P31\", \"label\": \"rdfs:label\"}} , FILTER\": \"CONTAINS\", \"lowercase\": \"lcase\"}} , \n\"lang\": \"lang\"}} LIMIT 25``` , \n\"relationships\": {\"instance of\": \"P31\", \"label\": \"rdfs:label\"}} , FILTER (CONTAINS(lcase(?sbj_label), 'h\u00f6xter')) . FILTER (lang(?sbj_label) = 'en') } LIMIT 25``` , \n\"relationships\": {\"instance of\": \"P31\", \"label\": \"rdfs:label\"}} , FILTER (CONTAINS(lcase(?sbj_label), 'h\u00f6xter')) . FILTER (lang(?sbj_label) = 'en') } LIMIT 25``` , \n\"relationships\": {\"instance of\": \"P31\", \"label\": \"rdfs:label\"}} , FILTER (CONTAINS(lcase(?sbj_label), 'h\u00f6xter')) . FILTER (lang(?sbj_label) = 'en') } LIMIT 25``` , \n \"relationships\": {\"instance of\": \"P31\", \"label\": \"rdfs:label\"}} , FILTER (CONTAINS(lcase(?sbj_label), 'h\u00f6xter')) . FILTER (lang(?sbj_label) = 'en') } LIMIT 25``` , \n \"relationships\": {\"instance of\": \"P31\", \"label\": \"rdfs:label\"}} , FILTER (CONTAINS(lcase(?sbj_label), 'h\u00f6xter')) . FILTER (lang(?sbj_label) = 'en') } LIMIT 25``` , \n \"relationships\": {\"instance of\": \"P31\", \"label\": \"rdfs:label\"}} , FILTER (CONTAINS(lcase(?sbj"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Linux Foundation\": \"Q858851\", \"Twitter\": \"Q920\"}, \"relationships\": {\"verified account\": \"P2002\"}}<|im_end|>\n<|im_start|>user\nIs the Linux Foundation verified on Twitter?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK{wd:Q858851 p:P2002/pq:P1552 wd:Q28378282}",
        "generated_sparql": "ASK WHERE { wd:Q858851 wdt:P2002 wd:Q920 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql ASK WHERE { wd:Q858851 wdt:P2002 wd:Q920 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q858851 wdt:P2002 wd:Q920 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q858851 wdt:P2002 wd:Q920 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q858851 wdt:P2002 wd:Q920 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q858851 wdt:P2002 wd:Q920 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q858851 wdt:P2002 wd:Q920 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q858851 wdt:P2002 wd:Q920 }``` , \n , \n , \n , \n , \n , \n wd:Q858851 wdt:P2002 wd:Q920 }``` , \n , \n , \n , \n , \n wd:Q858851 wdt:P2002 wd:Q920 }``` , \n , \n , \n , \n , \n wd:Q858851 wdt:P2002 wd:Q920"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Angela Merkel\": \"Q567\", \"Tony Blair\": \"Q9545\"}, \"relationships\": {\"date of birth\": \"P569\"}}<|im_end|>\n<|im_start|>user\nWere Angela Merkel and Tony Blair born in the same year?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q567 wdt:P569 ?da. wd:Q9545 wdt:P569 ?dt. FILTER(YEAR(?dt) = YEAR(?da))}",
        "generated_sparql": "ASK WHERE { wd:Q567 wdt:P569 wd:Q9545 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql ASK WHERE { wd:Q567 wdt:P569 wd:Q9545 }``` , \n , wd:Q567 wdt:P569 wd:Q19001 }``` , \n , wd:Q567 wdt:P569 wd:Q19001 }``` , \n , wd:Q567 wdt:P569 wd:Q19001 }``` , \n , wd:Q567 wdt:P569 wd:Q19001 }``` , \n , wd:Q567 wdt:P569 wd:Q19001 }``` , \n , wd:Q567 wdt:P569 wd:Q19001 }``` , \n , wd:Q567 wdt:P569 wd:Q19001 }``` , \n , wd:Q567 wdt:P569 wd:Q19001 }``` , \n , wd:Q567 wdt:P569 wd:Q19001 }``` , \n , wd:Q567 wdt:P569 wd:Q19001 }``` , \n , wd:Q567 wdt:P569 wd:Q19001 }``` , \n , wd:Q567 wdt:P569 wd:Q19001 }``` , \n , wd:Q567 wdt:P569 wd:Q19001 }``` , \n , wd:Q567 wdt:P569 wd:Q19001 }``` , \n , wd:Q567 wdt:P569 wd:Q19001 }``` , \n , wd:Q567 wdt:P569 wd:Q19001 }"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Japanese\": \"Q5287\"}, \"relationships\": {\"number of speakers\": \"P1098\"}}<|im_end|>\n<|im_start|>user\nDo more than 100000000 people speak Japanese?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q5287 wdt:P1098 ?num. FILTER(?num > 100000000)}",
        "generated_sparql": "",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql ASK WHERE { wd:Q5287 wdt:P1098 ?obj filter(?obj = 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Red Notice\": \"Q58815001\", \"Rawson Marshall Thurber\": \"Q2745616\"}, \"relationships\": {\"director\": \"P57\", \"cast member\": \"P161\"}}<|im_end|>\n<|im_start|>user\nTell me all the cast members of the film Red Notice directed by Rawson Marshall Thurber ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q58815001 wdt:P57 wd:Q2745616; wdt:P161 ?result}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q58815001 wdt:P161 ?answer . ?answer wdt:P57 wd:Q2745616}",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q58815001 wdt:P161 ?answer . ?answer wdt:P57 wd:Q2745616}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q58815001 wdt:P161 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q58815001 wdt:P161 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q58815001 wdt:P161 ?answer}``` , \n , \n , \n , \n , \n , \n , \n wd:Q58815001 wdt:P161 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q58815001 wdt:P161 ?answer}``` , \n , \n , \n , \n , \n wd:Q58815001 wdt:P161 ?answer}``` , \n , \n , \n , \n , \n wd:Q58815001 wdt:P161 ?answer}``` , \n , \n , \n , \n wd:Q58815001 wdt:P161 ?answer}``` , \n , \n , \n , \n wd:Q58815001 wdt:P161 ?answer}``` , \n , \n , \n wd:Q58815001 wdt:P161 ?answer }``` , \n , \n , \n , \n wd:Q58815001 wdt:P1"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Jay Chou\": \"Q482994\"}, \"relationships\": {\"genre\": \"P31\", \"performer\": \"P175\", \"publication date\": \"P577\"}}<|im_end|>\n<|im_start|>user\nThe first album of Jay Chou<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{?result wdt:P31 wd:Q482994; wdt:P175 wd:Q238819; wdt:P577 ?date. } ORDER BY ASC(?date) LIMIT 1",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q482994 wdt:P31 ?X . ?X wdt:P175 ?answer . ?X wdt:P577 ?x FILTER(contains(?x,'1987'))}",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q482994 wdt:P31 ?X . ?X wdt:P175 ?answer . ?X wdt:P577 ?x FILTER(contains(?x,'1987'))}``` , \n 1987-0-0) }``` , 1987-0-0) }``` , 1987-0-0) }``` , 1987-0-0) }``` , 1987-0-0) }``` , 1987-0-0) }``` , 1987-0-0) }``` , 1987-0-0) }``` , 1987-0-0) }``` , 1987-0-0) }``` , 1987-0-0) }``` , 1987-0-0) }``` , 1987-0-0) }``` , 1987-0-0) }``` , 1987-0-0) }``` , 1987-0-0) }``` , 1987-0-0) }``` , 1987-0-0) }``` , 1987-0-0) }``` , 1987-0-0) }``` , 1987-0-0) }``` , 1987-0-0) }``` , 1987-0-0) }``` , 1987-0-0) }``` , 1987-0-0) }``` , 1987-0-0) }``` , 1987-0-0) }``` , 1987-0-0) }``` , 1987-0-0) }``` , 1987-0-0) }``` , 1987-0-0) }``` , 1987-"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Danube\": \"Q1653\"}, \"relationships\": {\"country\": \"P17\"}}<|im_end|>\n<|im_start|>user\nThrough which countries does the Danube go?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q1653 wdt:P17 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P17 wd:Q1653 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P17 wd:Q1653 }``` , \n\"relationships\": {\"country\": \"P17\"}} , \n\"time\": {\"point in time\": \"P580\"}} , \n\"value\": \"P17 wd:Q1653 }``` , \n\"relationships\": {\"country\": \"P17\"}} , \n\"time\": \"P580\"}} , \n\"relationships\": {\"country\": \"P17\", \"point in time\": \"P580\"}} , \n\"relationships\": {\"country\": \"P17\", \"point in time\": \"P580\"}} , \n\"relationships\": {\"country\": \"P17\", \"point in time\": \"P580\"}} , \n\"relationships\": {\"country\": \"P17\", \"point in time\": \"P580\"}} , \n\"relationships\": {\"country\": \"P17\", \"point in time\": \"P580\"}} , \n\"relationships\": {\"country\": \"P17\", \"point in time\": \"P580\"}} , \n\"relationships\": {\"country\": \"P17\", \"point in time\": \"P580\"}} , \n \"relationships\": {\"country\": \"P17\", \"point in time\": \"P580\"}} , \n \"relationships\": {\"country\": \"P17\", \"point in time\": \"P580\"}} , \n \"relationships\": {\"country\": \"P17\", \"point in time\": \"P580\"}} , \n \"relationships\": {\"country\": \"P17\", \"point in time\": \"P580\"}} , \n \"relationships\": {\"country\": \"P17\", \"point in time\": \"P580\"}} , \n \"relationships\": {\"country\": \"P17\", \"point in time\": \"P580\"}} , \n \"relationships\": {\"country\": \"P17\", \"point in time\": \"P58"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"sperm whale\": \"Q81214\"}, \"relationships\": {\"main food source\": \"P1034\"}}<|im_end|>\n<|im_start|>user\nWhat do sperm whales mainly eat?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q81214 wdt:P1034 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1034 wd:Q81214 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1034 wd:Q81214 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n  }``` , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Frida Kahlo\": \"Q5588\", \"surrealism\": \"Q39427\"}, \"relationships\": {\"movement\": \"P135\"}}<|im_end|>\n<|im_start|>user\nWas Frida Kahlo a surrealist?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK{wd:Q5588 wdt:P135 wd:Q39427}",
        "generated_sparql": "ASK WHERE { wd:Q5588 wdt:P135 wd:Q39427 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql ASK WHERE { wd:Q5588 wdt:P135 wd:Q39427 }``` , \n , wd:Q5588 wdt:P135 wd:Q190575 }``` , \n , wd:Q5588 wdt:P135 wd:Q210054 }``` , \n , wd:Q5588 wdt:P135 wd:Q260300 }``` , \n , wd:Q5588 wdt:P135 wd:Q273055 }``` , \n , wd:Q5588 wdt:P135 wd:Q288305 }``` , \n , wd:Q5588 wdt:P135 wd:Q290856 }``` , \n , wd:Q5588 wdt:P135 wd:Q290856 }``` , \n , wd:Q5588 wdt:P135 wd:Q290856 }``` , \n , wd:Q5588 wdt:P135 wd:Q290856 }``` , \n , wd:Q5588 wdt:P135 wd:Q290856 }``` , \n , wd:Q5588 wdt:P135 wd:Q290856 }``` , \n , wd:Q5588 wdt:P135 wd:Q290856 }``` , \n , wd:Q5588 wdt:P135 wd:Q290856 }``` , \n , wd:Q5588 wdt:P135 wd:Q290856 }``` , \n , wd:Q5588 wdt:P135 wd:Q29085"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Funny Games\": \"Q696928\", \"its remake\": \"Q951002\"}, \"relationships\": {\"director\": \"P57\"}}<|im_end|>\n<|im_start|>user\nWas Funny Games and its remake directed by different persons?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK{wd:Q696928 wdt:P57 ?dir. wd:Q951002 wdt:P57 ?dir2. FILTER(?dir != ?dir2)}",
        "generated_sparql": "ASK WHERE { ?x0 wdt:P31 wd:Q5 . wd:Q696928 wdt:P57 ?x0 . wd:Q951002 wdt:P57 ?x0 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql ASK WHERE { ?x0 wdt:P31 wd:Q5 . wd:Q696928 wdt:P57 ?x0 . wd:Q951002 wdt:P57 ?x0 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n md:Q107270 wdt:P161 ?x0 . wd:Q107270 wdt:P161 wd:Q107270 . wd:Q107270 wdt:P161 wd:Q107270 . wd:Q107270 wdt:P161 wd:Q107270 . wd:Q107270 wdt:P161 wd:Q107270 . wd:Q107270 wdt:P161 wd:Q107270 . wd:Q107270 wdt:P161 wd:Q107270 }``` , \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Google\": \"Q95\", \"Bill Gates\": \"Q5284\"}, \"relationships\": {\"founder\": \"P112\"}}<|im_end|>\n<|im_start|>user\nWas Google founded by Bill Gates?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK{wd:Q95 wdt:P112 wd:Q5284}",
        "generated_sparql": "ASK WHERE { wd:Q95 wdt:P112 wd:Q5284 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql ASK WHERE { wd:Q95 wdt:P112 wd:Q5284 }``` , wd:Q5284 wdt:P112 wd:Q551549 }``` , wd:Q5284 wdt:P112 wd:Q551549 }``` , wd:Q5284 wdt:P112 wd:Q551549 }``` , wd:Q5284 wdt:P112 wd:Q551549 }``` , wd:Q5284 wdt:P112 wd:Q551549 }``` , wd:Q5284 wdt:P112 wd:Q551549 }``` , wd:Q5284 wdt:P112 wd:Q551549 }``` , wd:Q5284 wdt:P112 wd:Q551549 }``` , wd:Q5284 wdt:P112 wd:Q551549 }``` , wd:Q5284 wdt:P112 wd:Q551549 }``` , wd:Q5284 wdt:P112 wd:Q551549 }``` , wd:Q5284 wdt:P112 wd:Q551549 }``` , wd:Q5284 wdt:P112 wd:Q551549 }``` , wd:Q5284 wdt:P112 wd:Q551549 }``` , wd:Q5284 wdt:P112 wd:Q551549 }``` , wd:Q5284 wdt:P112 wd:Q551549 }``` , wd:Q5284 wdt:P11"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Beta\": \"Q19793459\", \"Greek alphabet\": \"Q8216\"}, \"relationships\": {\"instance of\": \"P31\", \"has part\": \"P361\", \"nomenclature\": \"P156\", \"transliteration\": \"P155\"}}<|im_end|>\n<|im_start|>user\nWhat is the second letter in the Greek alphabet?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{?fl wdt:P31 wd:Q19793459; wdt:P361 wd:Q8216. ?fl wdt:P156 ?result FILTER(NOT EXISTS{?fl wdt:P155 ?we})}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q19793459 wdt:P361 ?answer . ?answer wdt:P156 wd:Q8216}",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q19793459 wdt:P361 ?answer . ?answer wdt:P156 wd:Q8216}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q19793459 wdt:P155 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q19793459 wdt:P155 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q19793459 wdt:P155 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q19793459 wdt:P155 ?answer}``` , \n , \n , \n , \n , \n , \n , \n wd:Q19793459 wdt:P155 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q19793459 wdt:P155 ?answer}``` , \n , \n , \n , \n , \n wd:Q19793459 wdt:P155 ?answer}``` , \n , \n , \n , \n , \n wd:Q19793459 wdt:P155 ?answer}``` , \n , \n , \n , \n wd:Q19793459 wdt:P155 ?answer}``` , \n , \n , \n , \n wd:Q19793459 wdt:P155 ?answer}``` , \n , \n , \n , \n wd"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Steve Jobs\": \"Q19837\", \"Apple\": \"Q12078\"}, \"relationships\": {\"cause of death\": \"P509\", \"CEO\": \"P279\"}}<|im_end|>\n<|im_start|>user\nWas it the cancer that caused the death of Steve Jobs who was the CEO of Apple?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q19837 wdt:P509/wdt:P279* wd:Q12078 }",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q19837 wdt:P509 ?answer . ?answer wdt:P279 wd:Q12078}",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q19837 wdt:P509 ?answer . ?answer wdt:P279 wd:Q12078}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q19837 wdt:P108 wd:Q12078}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q19837 wdt:P108 wd:Q312 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q19837 wdt:P108 wd:Q312 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q19837 wdt:P108 wd:Q312 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q19837 wdt:P108 wd:Q312 }``` , \n , \n , \n , \n , \n , \n wd:Q19837 wdt:P108 wd:Q312 }``` , \n , \n , \n , \n , \n wd:Q19837 wdt:P108 wd:Q312 }``` , \n , \n , \n , \n wd:Q19837 wdt:P108 wd:Q312 }``` , \n , \n , \n , \n wd:Q19837 wdt:P108 wd:Q312 }``` , \n , \n , \n , \n wd"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Shaquille O'Neal\": \"Q25369\", \"Kobe Bryant\": \"Q169452\"}, \"relationships\": {\"team\": \"P54\"}}<|im_end|>\n<|im_start|>user\nWas Shaquille O'Neal the teammate of Kobe Bryant in the year of 2000?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q25369 p:P54 ?ps1. ?ps1 ps:P54 ?team; pq:P580 ?st1; pq:P582 ?et1. wd:Q169452 p:P54 ?ps2. ?ps2 ps:P54 ?team; pq:P580 ?st2; pq:P582 ?et2. FILTER(YEAR(?st1) <= 2000 && YEAR(?et1) >= 2000 && YEAR(?st2) <= 2000 && YEAR(?et2) >= 2000)}",
        "generated_sparql": "SELECT ?obj WHERE { wd:Q25369 p:P54 ?s . ?s ps:P54 ?obj . ?s pq:P582 ?x filter(contains(YEAR(?x),'2000')) }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql SELECT ?obj WHERE { wd:Q25369 p:P54 ?s . ?s ps:P54 ?obj . ?s pq:P582 ?x filter(contains(YEAR(?x),'2000')) }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n p:P54 ?obj }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P54 ?obj }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P54 ?obj }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P54 ?obj }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P54 ?obj }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P54 ?obj }``` , \n , \n , \n , \n , \n , \n , \n , \n p:P54 ?obj }``` , \n , \n , \n , \n , \n , \n , \n , \n p:P54 ?obj }``` , \n , \n , \n , \n , \n , \n , \n , \n p:P54 ?obj }``` , \n , \n , \n , \n , \n , \n , \n , \n p:P54 ?obj }``` , \n , \n , \n , \n , \n , \n , \n p:P54 ?obj }``` , \n , \n , \n , \n , \n , \n p:P54 ?"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Shaquille O'Neal\": \"Q169452\"}, \"relationships\": {\"occupation\": \"P106\"}}<|im_end|>\n<|im_start|>user\nWas Shaquille O'Neal, as the basketball player, also an film actor?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q169452 wdt:P106 wd:Q3665646, wd:Q10800557}",
        "generated_sparql": "ASK WHERE { wd:Q169452 wdt:P106 wd:Q33999 . wd:Q169452 wdt:P106 wd:Q2526255 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql ASK WHERE { wd:Q169452 wdt:P106 wd:Q33999 . wd:Q169452 wdt:P106 wd:Q2526255 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n ,"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Darkside\": \"Q482994\", \"Psychic\": \"Q16954319\"}, \"relationships\": {\"genre\": \"P31\", \"performer\": \"P175\", \"release date\": \"P577\"}}<|im_end|>\n<|im_start|>user\nWas the first album of the band Darkside released in 2012?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {?album wdt:P31 wd:Q482994; wdt:P175 wd:Q16954319; wdt:P577 ?date FILTER(NOT EXISTS{?album2 wdt:P31 wd:Q482994; wdt:P175 wd:Q16954319; wdt:P577 ?date2 FILTER(?date2 < ?date)} && YEAR(?date) = 2012)}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q482994 wdt:P31 ?answer . ?answer wdt:P175 wd:Q16954319}",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q482994 wdt:P31 ?answer . ?answer wdt:P175 wd:Q16954319}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n and \n wd:Q16954319 wdt:P577 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q16954319 wdt:P577 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q16954319 wdt:P577 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q16954319 wdt:P577 ?x0 }``` , \n , \n , \n , \n , \n , \n wd:Q16954319 wdt:P577 ?x0 }``` , \n , \n , \n , \n , \n , \n wd:Q16954319 wdt:P577 ?x0 }``` , \n , \n , \n , \n , \n wd:Q16954319 wdt:P577 ?x0 }``` , \n , \n , \n , \n wd:Q16954319 wdt:P577 ?x0 }``` , \n , \n , \n , \n wd:Q16954319 wdt:P577 ?x0 }``` , \n , \n , \n , \n wd:Q16954319 wdt:P577 ?x0 }``` , \n , \n , \n , \n wd:"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Breaking Bad\": \"Q1079\"}, \"relationships\": {\"spin-off\": \"P2512\"}}<|im_end|>\n<|im_start|>user\nWhat are the spin-offs of Breaking Bad?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1079 wdt:P2512 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P2512 wd:Q1079 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P2512 wd:Q1079 }``` , \n , \n , \n , \n , \n , \n , \n , \n , and \n are the spin-offs of Breaking Bad? , \n , \n , \n , \n , and \n ?sub wdt:P31 wd:Q11424 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Grand Canyon\": \"Q118841\", \"river\": \"Q4022\"}, \"relationships\": {\"main area of flow\": \"P206\", \"instance of\": \"P31\"}}<|im_end|>\n<|im_start|>user\nWhich river flows through the Grand Canyon?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q4022. wd:Q118841 wdt:P206 ?result}",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P206 wd:Q118841 . ?sbj wdt:P31 wd:Q4022 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P206 wd:Q118841 . ?sbj wdt:P31 wd:Q4022 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n md:Q2062523 wdt:P1040 ?x0 . wd:Q2062523 wdt:P1431 ?x0 . wd:Q2062523 wdt:P162|wdt:P272 ?x0 . wd:Q2062523 wdt:P58 ?x0 . wd:Q27703060 wdt:P1040 ?x0 . wd:Q27703060 wdt:P1431 ?x0 . wd:Q27703060 wdt:P162|wdt:P272 ?x0 . wd:Q27703060 wdt:P58 ?x0 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Salvador Dal\u00ed\": \"Q5577\"}, \"relationships\": {\"key event\": \"P793\"}}<|im_end|>\n<|im_start|>user\nWhat was the key event related to Salvador Dal\u00ed?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q5577 wdt:P793 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P793 wd:Q5577 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P793 wd:Q5577 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n md:Q120993 wdt:P161 ?x0 . wd:Q120993 wdt:P161 ?x1 . wd:Q120993 wdt:P161 wd:Q155057 . wd:Q120993 wdt:P161 wd:Q10712777 . wd:Q120993 wdt:P161 wd:Q10712778 . wd:Q120993 wdt:P161 wd:Q10712779 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"German Occupational Safety and Health Act\": \"Q1006079\", \"Germany\": \"Q183\", \"legislative act\": \"Q629029\"}, \"relationships\": {\"instance of\": \"P31\", \"amended by\": \"P361\", \"country\": \"P1001\", \"passed by\": \"P467\"}}<|im_end|>\n<|im_start|>user\nWho passed the German Occupational Safety and Health Act?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?act wdt:P31 wd:Q1006079; wdt:P361 wd:Q629029; wdt:P1001 wd:Q183; wdt:P467 ?result}",
        "generated_sparql": "select ?ent where { ?ent wdt:P31 wd:Q629029 . ?ent wdt:P361 ?obj . ?ent wdt:P1001 wd:Q1006079 . ?ent wdt:P467 ?obj } ORDER BY DESC(?obj)LIMIT 5",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql select ?ent where { ?ent wdt:P31 wd:Q629029 . ?ent wdt:P361 ?obj . ?ent wdt:P1001 wd:Q1006079 . ?ent wdt:P467 ?obj } ORDER BY DESC(?obj)LIMIT 5``` , \n , ?obj wdt:P31 wd:Q629029 }``` , \n , ?obj wdt:P31 wd:Q629029 }``` , \n , ?obj wdt:P31 wd:Q629029 }``` , \n , ?obj wdt:P31 wd:Q629029 }``` , \n , ?obj wdt:P31 wd:Q629029 }``` , \n , ?obj wdt:P31 wd:Q629029 }``` , \n , ?obj wdt:P31 wd:Q629029 }``` , \n , ?obj wdt:P31 wd:Q629029 }``` , \n , ?obj wdt:P31 wd:Q629029 }``` , \n , ?obj wdt:P31 wd:Q629029 }``` , \n , ?obj wdt:P31 wd:Q629029 }``` , \n , ?obj wdt:P31 wd:Q629029 }``` , \n , ?obj wdt:P31 wd:Q629029 }``` , \n , ?obj wdt:P31 wd:Q629029 }``` , \n , ?obj wdt:P31 wd:Q629029 }``` , \n , ?obj wdt:P31 wd:Q629029 }``` , \n , ?obj wdt:P31 wd:Q629029 }"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"academic discipline\": \"Q11862829\"}, \"relationships\": {\"instance of\": \"P31\", \"label\": \"rdfs:label\"}}<|im_end|>\n<|im_start|>user\nWhat are the German names of academic disciplines containing \u201clinguistik\u201d?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?disc wdt:P31 wd:Q11862829; rdfs:label ?result FILTER(langMatches(lang(?result),\"de\") && regex(?result,\"linguistik\"))}",
        "generated_sparql": "SELECT DISTINCT ?sbj ?sbj_label WHERE { ?sbj wdt:P31 wd:Q11862829 . ?sbj rdfs:label ?sbj_label . FILTER(CONTAINS(lcase(?sbj_label), 'linguistik')) . FILTER (lang(?sbj_label) = 'en') } LIMIT 25",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql SELECT DISTINCT ?sbj ?sbj_label WHERE { ?sbj wdt:P31 wd:Q11862829 . ?sbj rdfs:label ?sbj_label . FILTER(CONTAINS(lcase(?sbj_label), 'linguistik')) . FILTER (lang(?sbj_label) = 'en') } LIMIT 25``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Germany\": \"Q183\", \"France\": \"Q142\"}, \"relationships\": {\"head of state\": \"P35\"}}<|im_end|>\n<|im_start|>user\nWhat are the names of the head of states of Germany and France ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {{wd:Q183 wdt:P35 ?result} UNION {wd:Q142 wdt:P35 ?result}}",
        "generated_sparql": "SELECT ?obj WHERE { wd:Q183 p:P35 ?s . ?s ps:P35 ?obj . ?s pq:P17 wd:Q183 . ?s pq:P17 wd:Q142 }",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql SELECT ?obj WHERE { wd:Q183 p:P35 ?s . ?s ps:P35 ?obj . ?s pq:P17 wd:Q183 . ?s pq:P17 wd:Q142 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n p:P31 wd:Q5 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n p:P31 wd:Q5 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"John Lennon\": \"Q1203\"}, \"relationships\": {\"child\": \"P22\", \"human\": \"Q5\", \"occupation\": \"P106\"}}<|im_end|>\n<|im_start|>user\nWhat are the professions of John Lennon\u2019s sons?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?son wdt:P22 wd:Q1203; wdt:P31 wd:Q5; wdt:P106 ?result}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q1203 wdt:P22 ?answer . ?answer wdt:P31 wd:Q5}",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q1203 wdt:P22 ?answer . ?answer wdt:P31 wd:Q5}``` , ?answer wdt:P106 ?x0}``` , ?x0 wdt:P106 wd:Q36834 }``` , ?x0 wdt:P108 wd:Q1203 }``` , ?x0 wdt:P108 wd:Q1203 }``` , ?x0 wdt:P108 wd:Q1203 }``` , ?x0 wdt:P108 wd:Q1203 }``` , ?x0 wdt:P108 wd:Q1203 }``` , ?x0 wdt:P108 wd:Q1203 }``` , ?x0 wdt:P108 wd:Q1203 }``` , ?x0 wdt:P108 wd:Q1203 }``` , ?x0 wdt:P108 wd:Q1203 }``` , ?x0 wdt:P108 wd:Q1203 }``` , ?x0 wdt:P108 wd:Q1203 }``` , ?x0 wdt:P108 wd:Q1203 }``` , ?x0 wdt:P108 wd:Q1203 }``` , ?x0 wdt:P108 wd:Q1203 }``` , ?x0 wdt:P108 wd:Q1203 }``` , ?x0 wdt:P108 wd:Q1203 }``` , ?x0 wdt:P108 wd:Q1203 }``` , ?x0 wdt:P108 wd:Q1203 }``` , ?x0 wdt:P108 wd:Q1203 }``` , ?x0 wdt:P108 wd"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Star Wars\": \"Q22092344\", \"film\": \"\", \"series\": \"Q11424\"}, \"relationships\": {\"title\": \"P1476\", \"part of\": \"P179\", \"instance of\": \"P31\", \"part of the series\": \"P279\"}}<|im_end|>\n<|im_start|>user\nWhat are the titles of the Star Wars series movies?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?film wdt:P1476 ?result; wdt:P179 wd:Q22092344 FILTER(EXISTS{?film wdt:P31/wdt:P279* wd:Q11424})}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q22092344 wdt:P1476 ?answer . ?answer wdt:P179 wd:Q11424}",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q22092344 wdt:P1476 ?answer . ?answer wdt:P179 wd:Q11424}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q17738 wdt:P179 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q17738 wdt:P279 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q17738 wdt:P279 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q17738 wdt:P279 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q17738 wdt:P279 ?x0 }``` , \n , \n , \n , \n , \n , \n wd:Q17738 wdt:P279 ?x0 }``` , \n , \n , \n , \n , \n wd:Q17738 wdt:P279 ?x0 }``` , \n , \n , \n , \n , \n wd:Q17738 wdt:P279 ?x0 }``` , \n , \n , \n , \n wd:Q17738 wdt:P279 ?x0 }``` , \n , \n , \n , \n wd:Q17738 wdt:P279 ?x0 }``` , \n , \n , \n , \n wd:Q"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"The Flintstones\": \"Q201358\", \"end of racial discrimination in voting in the US\": \"Q1608064\"}, \"relationships\": {\"inception\": \"P580\", \"publication date\": \"P577\"}}<|im_end|>\n<|im_start|>user\nWhat came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{ BIND(IF(EXISTS{wd:Q201358 wdt:P580 ?date1. wd:Q1608064 wdt:P577 ?date2. FILTER(?date1 < ?date2)},wd:Q201358 , wd:Q1608064) AS ?result)}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q201358 wdt:P580 ?answer . ?answer wdt:P577 wd:Q1608064}",
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q201358 wdt:P580 ?answer . ?answer wdt:P577 wd:Q1608064}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n and  wd:Q201358 wdt:P577 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q201358 wdt:P577 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q201358 wdt:P577 ?answer}``` , \n , \n , \n , \n wd:Q201358 wdt:P577 ?answer}``` , \n , \n , \n wd:Q201358 wdt:P577 ?answer}``` , \n , \n , \n wd:Q201358 wdt:P577 ?answer}``` , \n , \n wd:Q201358 wdt:P577 ?answer}``` , \n , \n wd:Q201358 wdt:P577 ?answer}``` , \n , \n wd:Q201358 wdt:P577 ?answer}``` , \n , \n wd:Q201358 wdt:P577 ?answer}``` , \n , \n wd:Q201358 wdt:P577 ?answer}``` , \n , \n wd:Q201358 wdt:P577 ?answer}``` , \n , \n wd:Q201358 wdt:P577 ?answer}``` , \n , \n wd:Q201358 wdt:P577 ?answer}``` , \n , \n wd:Q2013"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Germany\": \"Q48160\"}, \"relationships\": {\"color\": \"P462\"}}<|im_end|>\n<|im_start|>user\nWhat colors does the German national flag have?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q48160 wdt:P462 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P462 wd:Q48160 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P462 wd:Q48160 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"suffragettes\": \"Q322170\"}, \"relationships\": {\"advocated for\": \"P279\", \"field of work\": \"P425\", \"main subject\": \"P3712\"}}<|im_end|>\n<|im_start|>user\nWhat did the suffragettes stand for?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q322170 wdt:P279/wdt:P425/wdt:P3712 ?result}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q322170 wdt:P279 ?X . ?X wdt:P425 ?answer . ?X wdt:P3712 ?answer}",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q322170 wdt:P279 ?X . ?X wdt:P425 ?answer . ?X wdt:P3712 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q322170 wdt:P101 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q322170 wdt:P101 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q322170 wdt:P101 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q322170 wdt:P101 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q322170 wdt:P101 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q322170 wdt:P101 ?answer}``` , \n , \n , \n , \n , \n wd:Q322170 wdt:P101 ?answer}``` , \n , \n , \n , \n , \n wd:Q322170 wdt:P101 ?answer}``` , \n , \n , \n , \n wd:Q322170 wdt:P101 ?answer}``` , \n , \n , \n , \n wd:Q322170 wdt:P101 ?answer}``` , "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"emperor\": \"Q39018\"}, \"relationships\": {\"female form\": \"P2521\"}}<|im_end|>\n<|im_start|>user\nWhat do you call a female form of an emperor in English?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q39018 wdt:P2521 ?result. FILTER(langMatches(lang(?result),\"en\"))}",
        "generated_sparql": "SELECT ?obj WHERE { wd:Q39018 p:P1412 ?s . ?s ps:P1412 ?obj . ?s pq:P4130 ?x filter(contains(?x,'female')) }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT ?obj WHERE { wd:Q39018 p:P1412 ?s . ?s ps:P1412 ?obj . ?s pq:P4130 ?x filter(contains(?x,'female')) }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l9c\": \"Q106506\"}, \"relationships\": {\"instance of\": \"P31\", \"label\": \"rdfs:label\"}} , FILTER\": \"CONTAINS\", \"lcase\": \"lcase\"}} , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"event\": \"?result\", \"World War I\": \"Q1190554\"}, \"relationships\": {\"number of deaths\": \"P1120\", \"start time\": \"P580\", \"end time\": \"P582\", \"instance of\": \"P31\", \"part of\": \"P279\"}}<|im_end|>\n<|im_start|>user\nWhat event killed the most people in the years 1910 to 1920?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P1120 ?num; wdt:P580 ?st; wdt:P582 ?et. FILTER((EXISTS{?result wdt:P31/wdt:P279* wd:Q1190554}) &&(YEAR(?st) >= 1910) && (YEAR(?et) <= 1920))}ORDER BY DESC(?num) LIMIT 1",
        "generated_sparql": "select ?ent where { ?ent wdt:P31 wd:Q1190554 . ?ent wdt:P1120 ?obj . ?ent wdt:P580 ?x filter(contains(YEAR(?x),'1919')) . ?ent wdt:P582 ?x filter(contains(?x),'1920')) } ORDER BY DESC(?obj)LIMIT 5",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql select ?ent where { ?ent wdt:P31 wd:Q1190554 . ?ent wdt:P1120 ?obj . ?ent wdt:P580 ?x filter(contains(YEAR(?x),'1919')) . ?ent wdt:P582 ?x filter(contains(?x),'1920')) } ORDER BY DESC(?obj)LIMIT 5``` , \n\"relationships\": {\"instance of\": \"P31\", \"number of deaths\": \"P1120\"}} , \n , \n , \n , \n , \n , \n , \n , \n , \n and \n are the event with the lowest number of deaths? , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"ATI Company\": \"Q213849\"}, \"relationships\": {\"dissolved, abolished or demolished\": \"P576\"}}<|im_end|>\n<|im_start|>user\nDoes the ATI Company still exist?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {FILTER(NOT EXISTS {wd:Q213849 wdt:P576 ?o})}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P31 wd:Q213849 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P31 wd:Q213849 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n  wd:Q213849 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q213849 wdt:P31 wd:Q4830453 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q213849 wdt:P31 wd:Q4830453 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q213849 wdt:P31 wd:Q4830453 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q213849 wdt:P31 wd:Q4830453 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q213849 wdt:P31 wd:Q4830453 }``` , \n , \n , \n , \n , \n , \n wd:Q213849 wdt:P31 wd:Q4830453 }``` , \n , \n , \n , \n , \n , \n wd:Q213849 wdt:P31 wd:Q4830453 }``` , \n , \n , \n , \n , \n wd:Q213849 wdt:P3"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"dinosaurs\": \"Q430\"}, \"relationships\": {\"cause of extinction\": \"P793\"}}<|im_end|>\n<|im_start|>user\nWhat happened to the dinosaurs ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q430 wdt:P793 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P793 wd:Q430 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P793 wd:Q430 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n , \n \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Louis Armstrong\": \"Q1779\"}, \"relationships\": {\"instrument\": \"P1303\"}}<|im_end|>\n<|im_start|>user\nWhat instruments did Louis Armstrong play?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1779 wdt:P1303 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1303 wd:Q1779 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1303 wd:Q1779 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m\nQ17305711 wdt:P161 ?x0 . wd:Q17305711 wdt:P344 ?x0 . wd:Q17305711 wdt:P1040 ?x0 . wd:Q17305711 wdt:P1431 ?x0 . wd:Q17305711 wdt:P58 ?x0 . wd:Q17305711 wdt:P58 ?x0 . wd:Q17305711 wdt:P58 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Julius Caesar\": \"Q271723\"}, \"relationships\": {\"author\": \"P50\", \"manner of death\": \"P509\"}}<|im_end|>\n<|im_start|>user\nwhat did the author of the phrase: \"Alea iacta est\" die of?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q271723 wdt:P50/wdt:P509 ?result}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q271723 wdt:P50 ?answer . ?answer wdt:P509 ?x FILTER(contains(?x,'Alea iacta est'))}",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q271723 wdt:P50 ?answer . ?answer wdt:P509 ?x FILTER(contains(?x,'Alea iacta est'))}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n and \n wdt:P50 ?x FILTER(contains(?x,'Alea iacta est'))}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Allen Ginsberg\": \"Q6711\"}, \"relationships\": {\"partner\": \"P451\", \"binary gender\": \"P21\"}}<|im_end|>\n<|im_start|>user\nWhat is the binary gender of the partner of Allen Ginsberg ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q6711 wdt:P451/wdt:P21 ?result}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q6711 wdt:P451 ?X . ?X wdt:P21 ?answer}",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q6711 wdt:P451 ?X . ?X wdt:P21 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n wd:Q6711 wdt:P451 ?X . ?X wdt:P21 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q6711 wdt:P451 ?X . ?X wdt:P21 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q6711 wdt:P451 ?X . ?X wdt:P21 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q6711 wdt:P451 ?X . ?X wdt:P21 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q6711 wdt:P451 ?X . ?X wdt:P21 ?answer}``` , \n , \n , \n , \n , \n wd:Q6711 wdt:P451 ?X . ?X wdt:P21 ?answer}``` , \n , \n , \n , \n wd:Q6711 wdt:P451 ?X . ?X wdt:P21 ?answer}``` , \n , \n , \n , \n wd:Q6711 wdt:P451 ?X . ?X wdt:P21 ?answer}``` , \n , \n , \n wd:Q6711 wdt:P451 ?X . ?X wdt:P21 ?answer}``` , \n , \n , \n wd"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Tokyo\": \"Q1490\"}, \"relationships\": {\"capital\": \"P36\"}}<|im_end|>\n<|im_start|>user\nWhat is the capital of the prefecture Tokyo ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1490 wdt:P36 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P36 wd:Q1490 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P36 wd:Q1490 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n }``` , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"ox\": \"Q79226802\", \"Chinese zodiac animal\": \"?result\"}, \"relationships\": {\"instance of\": \"P31\", \"follows\": \"P155\"}}<|im_end|>\n<|im_start|>user\nWhat is the Chinese zodiac animal that follows the ox?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q79226802; wdt:P155 wd:Q599644}",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P31 wd:Q79226802 . ?sbj wdt:P155 wd:Q11980 . ?sbj wdt:P31 wd:Q16520 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P31 wd:Q79226802 . ?sbj wdt:P155 wd:Q11980 . ?sbj wdt:P31 wd:Q16520 }``` , \n , \n , \n , \n , \n , \n , \n , \n and \n wdt:P31 wd:Q79226802 }``` , \n , \n , \n , \n , \n , \n , \n and \n wdt:P31 wd:Q16520 }``` , \n , \n , \n , \n , \n , \n wdt:P31 wd:Q16520 }``` , \n , \n , \n , \n , \n wdt:P31 wd:Q16520 }``` , \n , \n , \n , \n wdt:P31 wd:Q16520 }``` , \n , \n , \n wdt:P31 wd:Q16520 }``` , \n , \n , \n wdt:P31 wd:Q16520 }``` , \n , \n , \n wdt:P31 wd:Q16520 }``` , \n , \n , \n wdt:P31 wd:Q16520 }``` , \n , \n , \n wdt:P31 wd:Q16520 }``` , \n , \n wdt:P31 wd:Q16520 }``` , \n , \n wdt:P31 wd:Q16520 }``` , \n , \n wdt:P31 wd:Q16520 }``` , \n , \n wdt:P31 wd:Q16520 }``` , \n , \n wdt:P31 wd:Q1"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Big Tech\": \"Q30748112\"}, \"relationships\": {\"industry\": \"P361\", \"number of employees\": \"P1128\", \"revenue\": \"P2139\", \"point in time\": \"P585\"}}<|im_end|>\n<|im_start|>user\nWhat is the combined total revenue of three largest Big Tech companies ordered by number of employees?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (SUM(?rev) AS ?result) WHERE {{SELECT DISTINCT ?company WHERE {?company wdt:P361 wd:Q30748112. ?company wdt:P1128 ?num} ORDER BY DESC(?num) LIMIT 3} ?company p:P2139 ?ps. ?ps ps:P2139 ?rev; pq:P585 ?time. FILTER(NOT EXISTS{?company p:P2139/pq:P585 ?time2 FILTER(?time2 > ?time)})}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q30748112 wdt:P361 ?X . ?X wdt:P112 ?answer . ?X wdt:P2138 ?answer . ?X wdt:P585 ?answer}",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q30748112 wdt:P361 ?X . ?X wdt:P112 ?answer . ?X wdt:P2138 ?answer . ?X wdt:P585 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l9c\": \"Q106506\"}, \"relationships\": {\"wavelength\": \"P2808\"}} , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n m.0f8l9c wavelength\": \"P2808\"}} , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n m.0f8l9c wavelength\": \"P2808\"}} , \n , \n , \n , \n , \n , \n , \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Shenzhen\": \"Q15174\"}, \"relationships\": {\"coordinate location\": \"P625\"}}<|im_end|>\n<|im_start|>user\nWhat is the coordinate location of Shenzhen ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT  DISTINCT ?result WHERE {wd:Q15174 wdt:P625 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P625 wd:Q15174 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P625 wd:Q15174 }``` , \n , ?sub wdt:P31 wd:Q15174 }``` , \n , ?sub wdt:P31 wd:Q15174 }``` , \n , ?sub wdt:P31 wd:Q15174 }``` , \n , ?sub wdt:P31 wd:Q15174 }``` , \n , ?sub wdt:P31 wd:Q15174 }``` , \n , ?sub wdt:P31 wd:Q15174 }``` , \n , ?sub wdt:P31 wd:Q15174 }``` , \n , ?sub wdt:P31 wd:Q15174 }``` , \n , ?sub wdt:P31 wd:Q15174 }``` , \n , ?sub wdt:P31 wd:Q15174 }``` , \n , ?sub wdt:P31 wd:Q15174 }``` , \n , ?sub wdt:P31 wd:Q15174 }``` , \n , ?sub wdt:P31 wd:Q15174 }``` , \n , ?sub wdt:P31 wd:Q15174 }``` , \n , ?sub wdt:P31 wd:Q15174 }``` , \n , ?sub wdt:P31 wd:Q15174 }``` , \n , ?sub wdt:P31 wd:Q15174 }``` , \n , ?sub wdt:P31 wd:Q15174 }``` , \n , ?sub wdt:P31 wd:Q15174 }``` , \n , ?sub wdt:P31 wd:Q1"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Erlangen program\": \"Q315296\"}, \"relationships\": {\"instance of\": \"P31\"}}<|im_end|>\n<|im_start|>user\nWhat is the Erlangen program ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q315296 wdt:P31 ?result}",
        "generated_sparql": "select distinct ?answer where { wd:Q315296 wdt:P1056 ?answer}",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql select distinct ?answer where { wd:Q315296 wdt:P1056 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q315296 wdt:P1056 ?answer}``` , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n md:Q10518313 wdt:P1040 ?x0 . wd:Q10518313 wdt:P1431 ?x0 . wd:Q10518313 wdt:P162|wdt:P272 ?x0 . wd:Q10518313 wdt:P58 ?x0 . wd:Q2082586 wdt:P1040 ?x0 . wd:Q2082586 wdt:P1431 ?x0 . wd:Q2082586 wdt:P162|wdt:P272 ?x0 . wd:Q208"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Roland Corporation\": \"Q163829\", \"synthesizer\": \"Q848490\"}, \"relationships\": {\"instance of\": \"P31\", \"manufacturer\": \"P176\"}}<|im_end|>\n<|im_start|>user\nDid the Roland Corporation produce synthesizers?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {?result wdt:P31 wd:Q163829; wdt:P176 wd:Q848490}",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P176 wd:Q163829 . ?sbj wdt:P31 wd:Q848490 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P176 wd:Q163829 . ?sbj wdt:P31 wd:Q848490 }``` , \n , \n , \n , \n , \n , \n , \n , \n and \n wdt:P31 wd:Q848490 }``` , \n , \n , \n , \n , \n , \n wdt:P31 wd:Q848490 }``` , \n , \n , \n , \n , \n wdt:P31 wd:Q848490 }``` , \n , \n , \n , \n wdt:P31 wd:Q848490 }``` , \n , \n , \n , \n wdt:P31 wd:Q848490 }``` , \n , \n , \n wdt:P31 wd:Q848490 }``` , \n , \n , \n wdt:P31 wd:Q848490 }``` , \n , \n , \n wdt:P31 wd:Q848490 }``` , \n , \n , \n wdt:P31 wd:Q848490 }``` , \n , \n , \n wdt:P31 wd:Q848490 }``` , \n , \n , \n wdt:P31 wd:Q848490 }``` , \n , \n , \n wdt:P31 wd:Q848490 }``` , \n , \n , \n wdt:P31 wd:Q848490 }``` , \n , \n , \n wdt:P31 wd:Q848490 }``` , \n , \n , \n wdt:P31 wd:Q848490 }"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Port of Rotterdam\": \"Q1027807\"}, \"relationships\": {\"number of employees\": \"P1128\"}}<|im_end|>\n<|im_start|>user\nHow many perople do the Port of Rotterdam employ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1027807 wdt:P1128 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1128 wd:Q1027807 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1128 wd:Q1027807 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Your Lie in April\": \"Q11419997\", \"primary school student\": \"Q16003605\", \"middle school student\": \"Q16003532\", \"high school student\": \"Q15360275\"}, \"relationships\": {\"main subject\": \"P921\"}}<|im_end|>\n<|im_start|>user\nwhat is the main subject of the manga \"your lie in april\": primary school, middle school or high school student?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q11419997 wdt:P921 ?result. FILTER(?result IN (wd:Q16003605, wd:Q16003532, wd:Q15360275))}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q11419997 wdt:P1889 ?answer . ?answer wdt:P31 wd:Q16003605 . ?answer wdt:P31 wd:Q16003532 . ?answer wdt:P31 wd:Q15360275}",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q11419997 wdt:P1889 ?answer . ?answer wdt:P31 wd:Q16003605 . ?answer wdt:P31 wd:Q16003532 . ?answer wdt:P31 wd:Q15360275}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l9c wdt:P1040 ?x0 . wd:Q1140578 wdt:P1040 ?x0 . wd:Q1140578 wdt:P1040 ?x0 . wd:Q1140578 wdt:P1040 ?x0 . wd:Q1140578 wdt:P1040 ?x0 . w"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Chimamanda Ngozi Adichie\": \"Q230141\"}, \"relationships\": {\"native language\": \"P103\"}}<|im_end|>\n<|im_start|>user\nWhat is the mother tongue of the author Chimamanda Ngozi Adichie ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q230141 wdt:P103 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P103 wd:Q230141 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P103 wd:Q230141 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n  }``` , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Allen Ginsberg\": \"Q6711\"}, \"relationships\": {\"partner\": \"P451\"}}<|im_end|>\n<|im_start|>user\nWho was the partner of Allen Ginsberg?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q6711 wdt:P451 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P451 wd:Q6711 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P451 wd:Q6711 }``` , \n`sparql SELECT (?sub) AS ?value ) { ?sub wdt:P451 wd:Q6711 }``` , \n`sparql SELECT (?sub) AS ?value ) { ?sub wdt:P451 wd:Q6711 }``` , \n`sparql SELECT (?sub) AS ?value ) { ?sub wdt:P451 wd:Q6711 }``` , \n`sparql SELECT (?sub) AS ?value ) { ?sub wdt:P451 wd:Q6711 }``` , \n`sparql SELECT (?sub) AS ?value ) { ?sub wdt:P451 wd:Q6711 }``` , \n`sparql SELECT (?sub) AS ?value ) { ?sub wdt:P451 wd:Q6711 }``` , \n`sparql SELECT (?sub) AS ?value ) { ?sub wdt:P451 wd:Q6711 }``` , \n`sparql SELECT (?sub) AS ?value ) { ?sub wdt:P451 wd:Q6711 }``` , \n`sparql SELECT (?sub) AS ?value ) { ?sub wdt:P451 wd:Q6711 }``` , \n`sparql SELECT (?sub) AS ?value ) { ?sub wdt:P451 wd:Q6711 }``` , \n`sparql SELECT (?sub) AS ?value ) { ?sub wdt:P451 wd:Q6711 }``` , \n`sparql SELECT (?sub) AS ?value ) { ?sub wdt:P451 wd:Q6711 }``` , \n`sparql SELECT (?sub) AS ?value ) {"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Piranha Bytes\": \"Q677273\"}, \"relationships\": {\"developer\": \"P178\", \"publication date\": \"P577\"}}<|im_end|>\n<|im_start|>user\nWhat is the second game developed by Piranha Bytes?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{?result wdt:P178 wd:Q677273; wdt:P577 ?date} ORDER BY ASC(?date) OFFSET 1 LIMIT 1",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q677273 wdt:P178 ?X . ?X wdt:P577 ?answer}",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q677273 wdt:P178 ?X . ?X wdt:P577 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q677273 wdt:P178 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q677273 wdt:P178 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q677273 wdt:P178 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q677273 wdt:P178 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q677273 wdt:P178 ?answer}``` , \n , \n , \n , \n , \n wd:Q677273 wdt:P178 ?answer}``` , \n , \n , \n , \n wd:Q677273 wdt:P178 ?answer}``` , \n , \n , \n , \n wd:Q677273 wdt:P178 ?answer}``` , \n , \n , \n wd:Q677273 wdt:P178 ?answer}``` , \n , \n , \n wd:Q677273 wdt:P178 ?answer}``` , \n , \n , \n wd:Q677273 wdt:P178 ?answer}``` , \n , \n wd:Q67727"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Blackadder\": \"Q5398426\", \"Rowan Atkinson\": \"Q23760\"}, \"relationships\": {\"instance of\": \"P31\", \"starring\": \"P161\", \"number of seasons\": \"P2437\", \"start time\": \"P580\"}}<|im_end|>\n<|im_start|>user\nWhat is the TV-show that starred Rowan Atkinson , had 4 seasons and started in 1983?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{?result wdt:P31 wd:Q5398426; wdt:P161 wd:Q23760; wdt:P2437 ?season; wdt:P580 ?time FILTER((YEAR(?time) = 1983) && (?season = 4))}",
        "generated_sparql": "select ?ent where { ?ent wdt:P31 wd:Q5398426 . ?ent wdt:P161 wd:Q23760 . ?ent wdt:P2437 ?x filter(contains(?x,'4')) . ?ent wdt:P580 ?x filter(contains(YEAR(?x),'1983')) }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql select ?ent where { ?ent wdt:P31 wd:Q5398426 . ?ent wdt:P161 wd:Q23760 . ?ent wdt:P2437 ?x filter(contains(?x,'4')) . ?ent wdt:P580 ?x filter(contains(YEAR(?x),'1983')) }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n , \n \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Ella Fitzgerald\": \"Q1768\"}, \"relationships\": {\"nickname\": \"P1449\"}}<|im_end|>\n<|im_start|>user\nWhat is the english nickname of Ella Fitzgerald?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1768 wdt:P1449 ?result. FILTER(langMatches(lang(?result),\"en\"))}",
        "generated_sparql": "select distinct ?answer where { wd:Q1768 wdt:P1449 ?answer}",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql select distinct ?answer where { wd:Q1768 wdt:P1449 ?answer}``` , \"male\": \"Q6581097\"}} , \"relationships\": {\"has gender\": \"P21\", \"has quality\": \"P1412\"}} , \"relationships\": {\"has quality\": \"P1412\"}} , \"relationships\": {\"has gender\": \"P21\"}} , \"relationships\": {\"has quality\": \"P1412\"}} , \"relationships\": {\"has gender\": \"P21\"}} , \"relationships\": {\"has quality\": \"P1412\"}} , \"relationships\": {\"has gender\": \"P21\"}} , \"relationships\": {\"has quality\": \"P1412\"}} , \"relationships\": {\"has gender\": \"P21\"}} , \"relationships\": {\"has quality\": \"P1412\"}} , \"relationships\": {\"has gender\": \"P21\"}} , \"relationships\": {\"has quality\": \"P1412\"}} , \"relationships\": {\"has gender\": \"P21\"}} , \"relationships\": {\"has quality\": \"P1412\"}} , \"relationships\": {\"has gender\": \"P21\"}} , \"relationships\": {\"has quality\": \"P1412\"}} , \"relationships\": {\"has gender\": \"P21\"}} , \"relationships\": {\"has quality\": \"P1412\"}} , \"relationships\": {\"has gender\": \"P21\"}} , \"relationships\": {\"has quality\": \"P1412\"}} , \"relationships\": {\"has gender\": \"P21\"}} , \"relationships\": {\"has quality\": \"P1412\"}} , \"relationships\": {\"has gender\": \"P21\"}} , \"relationships\": {\"has quality\": \"P1412\"}} , \"relationships\": {\"has gender\": \"P21\"}} , \"relationships\": {\"has quality\": \"P1412\"}} , \"relationships\": {\"has gender\": \"P"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Kazuo Ishiguro\": \"Q272855\", \"daughter of Kazuo Ishiguro\": \"Q6581072\"}, \"relationships\": {\"child\": \"P40\", \"father\": \"P22\", \"occupation\": \"P106\"}}<|im_end|>\n<|im_start|>user\nWhat are the occupations of Kazuo Ishiguro\u2019s daughter?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q272855 wdt:P40 ?d. ?d wdt:P21 wd:Q6581072; wdt:P106 ?result}",
        "generated_sparql": "SELECT ?value1 ?value2 WHERE { wd:Q114630 p:P40 ?s . ?s ps:P40 wd:Q272855 . ?s pq:P22 ?value1 . ?s pq:P106 ?value2 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT ?value1 ?value2 WHERE { wd:Q114630 p:P40 ?s . ?s ps:P40 wd:Q272855 . ?s pq:P22 ?value1 . ?s pq:P106 ?value2 }``` , \n , \n , \n , \n , \n , \n , \n , \n , and \n p:P40 ?x filter(contains(?x,'10.0')) }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Nat King Cole\": \"Q137042\"}, \"relationships\": {\"occupation\": \"P106\"}}<|im_end|>\n<|im_start|>user\nWhat are the occupations of Nat King Cole?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q137042 wdt:P106 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P106 wd:Q33999 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P106 wd:Q33999 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l97 wdt:P1040 ?x0 . wd:Q1361018 wdt:P1040 ?x0 . wd:Q2085 wdt:P1040 ?x0 . wd:Q1361018 wdt:P1040 ?x0 . wd:Q2085 wdt:P1040 ?x0 . wd:Q1361018 wdt:P1040 ?x0 . wd:Q2085 wdt:P1040 ?x0 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Iran\": \"Q794\"}, \"relationships\": {\"official language\": \"P37\"}}<|im_end|>\n<|im_start|>user\nwhat is the official language of iran?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q794 wdt:P37 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P37 wd:Q794 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P37 wd:Q794 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n  }``` , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Freiburg\": \"Q2833\"}, \"relationships\": {\"population\": \"P1082\"}}<|im_end|>\n<|im_start|>user\nWhat is the population in Freiburg ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q2833 wdt:P1082 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1082 wd:Q2833 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1082 wd:Q2833 }``` , \n\"relationships\": {\"point in time\": \"P585\"}} , \n\"time\": \"P459\"}} , \n\"relationships\": {\"point in time\": \"P585\"}} , \n\"value\": \"P459\"}} , \n\"relationships\": {\"point in time\": \"P585\"}} , \n\"value\": \"P459\"}} , \n\"relationships\": {\"population\": \"P1082\"}} , \n\"value\": \"P585\"}} , \n\"relationships\": {\"point in time\": \"P585\"}} , \n\"value\": \"P459\"}} , \n\"relationships\": {\"point in time\": \"P585\"}} , \n\"value\": \"P459\"}} , \n\"relationships\": {\"population\": \"P1082\"}} , \n\"value\": \"P585\"}} , \n\"relationships\": {\"point in time\": \"P585\"}} , \n\"value\": \"P459\"}} , \n\"relationships\": {\"population\": \"P1082\"}} , \n \"value\": \"P585\"}} , \n \"relationships\": {\"point in time\": \"P585\"}} , \n \"relationships\": {\"population\": \"P1082\"}} , \n \"value\": \"P585\"}} , \n \"relationships\": {\"point in time\": \"P585\"}} , \n \"relationships\": {\"population\": \"P1082\"}} , \n \"value\": \"P585\"}} , \n \"relationships\": {\"point in time\": \"P585\"}} , \n \"relationships\": {\"population\": \"P1082\"}} , \n \"value\": \"P585\"}} , \n \"relationships\": {\"point in time\": \"P58"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"drama film\": \"Q11424\", \"Carey Mulligan\": \"Q219655\"}, \"relationships\": {\"instance of\": \"P31\", \"starring\": \"P161\", \"release date\": \"P577\", \"title\": \"P1476\"}}<|im_end|>\n<|im_start|>user\nWhat is the title of the 2020 released movie in which Carey Mulligan was the main actress?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?movie wdt:P31 wd:Q11424; wdt:P161 wd:Q219655; wdt:P577 ?time; wdt:P1476 ?result FILTER(YEAR(?time) = 2020)}",
        "generated_sparql": "select ?ent where { ?ent wdt:P31 wd:Q11424 . ?ent wdt:P161 ?obj . ?ent wdt:P577 ?x filter(contains(YEAR(?x),'2020')) . ?ent wdt:P1476 ?obj } ORDER BY DESC(?obj)LIMIT 5",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql select ?ent where { ?ent wdt:P31 wd:Q11424 . ?ent wdt:P161 ?obj . ?ent wdt:P577 ?x filter(contains(YEAR(?x),'2020')) . ?ent wdt:P1476 ?obj } ORDER BY DESC(?obj)LIMIT 5``` , \n \n7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Ray-Ban\": \"Q653941\"}, \"relationships\": {\"product\": \"P1056\"}}<|im_end|>\n<|im_start|>user\nWhat does Ray-Ban produce primarily?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q653941 wdt:P1056 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1056 wd:Q653941 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1056 wd:Q653941 }``` , \n \"relationships\": {\"has product\": \"P1056\"}} , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n }``` , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m\nQ11424 . ?x0 wdt:P1040 ?x1 . ?x0 wdt:P1040 wd:Q1136284 . ?x0 wdt:P1040 wd:Q1136284 . ?x0 wdt:P1040 wd:Q1136284 . ?x0 wdt:P1040 wd:Q1136284 . ?x0 wdt:P1040 wd:Q1136284 . ?x0 wdt:P1"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Aristotle\": \"Q12097\", \"the famous king\": \"Q868\"}, \"relationships\": {\"student of\": \"P802\", \"teacher\": \"P97\", \"spoken language\": \"P1412\"}}<|im_end|>\n<|im_start|>user\nWhat language did the famous king, who was also a student of Aristotle's , speak?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q868 wdt:P802 ?king. ?king wdt:P97 wd:Q12097; wdt:P1412 ?result}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q12097 wdt:P802 ?answer . ?answer wdt:P97 wd:Q868}",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q12097 wdt:P802 ?answer . ?answer wdt:P97 wd:Q868}``` 's parent 's parent 's language? 's teacher is Aristotle? 's parent? 's parent? 's parent? 's parent? 's parent? 's parent? 's parent? 's parent? 's parent? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent ? 's parent"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Poland\": \"Q36\"}, \"relationships\": {\"official language\": \"P2936\"}}<|im_end|>\n<|im_start|>user\nWhat language do they speak in Poland ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q36 wdt:P2936 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P2936 wd:Q36 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P2936 wd:Q36 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n ,"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"West Europe\": \"Q27496\"}, \"relationships\": {\"spoken in this territory\": \"P527\", \"language of work or name\": \"P2936\"}}<|im_end|>\n<|im_start|>user\nHow many different languages are spoken in West Europe?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?lan) AS ?result) WHERE {wd:Q27496 wdt:P527/wdt:P2936 ?lan}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q27496 wdt:P527 ?X . ?X wdt:P2936 ?answer}",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q27496 wdt:P527 ?X . ?X wdt:P2936 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q27496 wdt:P527 ?X . ?X wdt:P2936 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q27496 wdt:P527 ?X . ?X wdt:P2936 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q27496 wdt:P527 ?X . ?X wdt:P2936 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q27496 wdt:P527 ?X . ?X wdt:P2936 ?answer}``` , \n , \n , \n , \n , \n , \n , \n wd:Q27496 wdt:P527 ?X . ?X wdt:P2936 ?answer}``` , \n , \n , \n , \n , \n wd:Q27496 wdt:P527 ?X . ?X wdt:P2936 ?answer}``` , \n , \n , \n , \n wd:Q27496 wdt:P527 ?X . ?X wdt:P2936 ?answer}``` , \n , \n , \n , \n wd:Q27496 wdt:P527 ?X . ?X wdt:P2936 ?answer}``` , \n , \n , \n wd:"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Germany\": \"Q183\", \"Poland\": \"Q36\"}, \"relationships\": {\"area\": \"P2046\"}}<|im_end|>\n<|im_start|>user\nIs Germany bigger than Poland?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q183 p:P2046/psn:P2046/wikibase:quantityAmount ?ag. wd:Q36 p:P2046/psn:P2046/wikibase:quantityAmount ?ap FILTER(?ag > ?ap)}",
        "generated_sparql": "ASK WHERE { wd:Q183 wdt:P2046 wd:Q36 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql ASK WHERE { wd:Q183 wdt:P2046 wd:Q36 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n md:Q10837 wdt:P161 ?x0 . wd:Q10837 wdt:P161 ?x1 . wd:Q10837 wdt:P161 wd:Q10837 . wd:Q10837 wdt:P161 wd:Q10837 . wd:Q10837 wdt:P161 wd:Q10837 . wd:Q10837 wdt:P161 wd:Q10837 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"C major chord\": \"Q55706505\"}, \"relationships\": {\"has part\": \"P527\", \"instance of\": \"P31\"}}<|im_end|>\n<|im_start|>user\nWhat notes does a C major chord consist of?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q55706505 wdt:P527 ?result. ?result wdt:P31 wd:Q263478}",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P527 wd:Q55706505 . ?sbj wdt:P31 wd:Q215380 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P527 wd:Q55706505 . ?sbj wdt:P31 wd:Q215380 }``` , \n , \n , \n , \n , \n , \n , \n , and \n wdt:P31 wd:Q55706505 }``` , \n , \n , \n , \n , \n , \n wdt:P31 wd:Q215380 }``` , \n , \n , \n , \n , \n wdt:P31 wd:Q215380 }``` , \n , \n , \n , \n wdt:P31 wd:Q215380 }``` , \n , \n , \n wdt:P31 wd:Q215380 }``` , \n , \n , \n wdt:P31 wd:Q215380 }``` , \n , \n , \n wdt:P31 wd:Q215380 }``` , \n , \n , \n wdt:P31 wd:Q215380 }``` , \n , \n , \n wdt:P31 wd:Q215380 }``` , \n , \n , \n wdt:P31 wd:Q215380 }``` , \n , \n , \n wdt:P31 wd:Q215380 }``` , \n , \n wdt:P31 wd:Q215380 }``` , \n , \n wdt:P31 wd:Q215380 }``` , \n , \n wdt:P31 wd:Q215380 }``` , \n , \n wdt:P31 wd:Q215380 }``` , \n , \n wdt:P3"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Nobel Prize in Literature\": \"Q37922\"}, \"relationships\": {\"winner\": \"P166\", \"spouse\": \"P26\", \"occupation\": \"P106\"}}<|im_end|>\n<|im_start|>user\nHow many different occupations did/do spouses of winners of the Nobel Prize in Literature hold?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?occ) AS ?result) WHERE {?winner wdt:P166 wd:Q37922; wdt:P26/wdt:P106 ?occ}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q37922 wdt:P166 ?X . ?X wdt:P26 ?answer}",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q37922 wdt:P166 ?X . ?X wdt:P26 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n wd:Q37922 wdt:P166 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q37922 wdt:P166 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q37922 wdt:P166 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q37922 wdt:P166 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q37922 wdt:P166 ?answer}``` , \n , \n , \n , \n , \n , \n , \n wd:Q37922 wdt:P166 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q37922 wdt:P166 ?answer}``` , \n , \n , \n , \n , \n wd:Q37922 wdt:P166 ?answer}``` , \n , \n , \n , \n , \n wd:Q37922 wdt:P166 ?answer}``` , \n , \n , \n , \n wd:Q37922 wdt:P166"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Dead by Daylight\": \"Q24514682\"}, \"relationships\": {\"instance of\": \"P31\", \"genre\": \"P279\", \"release date\": \"P577\"}}<|im_end|>\n<|im_start|>user\nHow many other video games began the same year as Dead by Daylight?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?game) AS ?result) WHERE {?game wdt:P31/wdt:P279* wd:Q7889; wdt:P577 ?gameTime. wd:Q24514682 wdt:P577 ?dbdtime. FILTER((YEAR(?gameTime) = YEAR(?dbdtime)))}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q24514682 wdt:P31 ?X . ?X wdt:P279 ?answer . ?X wdt:P577 ?x filter(contains(YEAR(?x),'1984'))}",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q24514682 wdt:P31 ?X . ?X wdt:P279 ?answer . ?X wdt:P577 ?x filter(contains(YEAR(?x),'1984'))}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n and \n wdt:P31 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n wdt:P31 ?x0 }``` , \n , \n , \n , \n , \n wdt:P31 ?x0 }``` , \n , \n , \n wdt:P31 ?x0 }``` , \n , \n , \n wdt:P31 ?x0 }``` , \n , \n , \n wdt:P31 ?x0 }``` , \n , \n , \n wdt:P31 ?x0 }``` , \n , \n , \n wdt:P31 ?x0 }``` , \n , \n , \n wdt:P31 ?x0 }``` , \n , \n , \n wdt:P31 ?x0 }``` , \n , \n , \n wdt:P31 ?x0 }``` , \n , \n , \n wdt:P31 ?x0 }``` , \n , \n , \n wdt:P31 ?x0 }``` , \n , \n , \n wdt:P31 ?x0 }``` , \n , \n , \n wdt:P31 ?x0 }``` , \n , \n , \n wdt:P31 ?x0 }``` , \n , \n , \n wdt:P31 ?x0 }``` , \n , \n , \n wdt:P31 ?x0 }``` , \n , \n , \n wdt:P31 ?x0 }``"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Aztecs\": \"Q12542\"}, \"relationships\": {\"instance of\": \"P31\", \"part of\": \"P279\", \"start time\": \"P580\", \"end time\": \"P582\"}}<|im_end|>\n<|im_start|>user\nWhat other civilizations existed during the Aztecs ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31/wdt:P279* wd:Q8432; wdt:P580 ?start; wdt:P582 ?end. wd:Q12542 wdt:P580 ?ast; wdt:P582 ?aet. FILTER(?start < ?aet && ?end > ?ast && ?result != wd:Q12542) }",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q12542 wdt:P31 ?X . ?X wdt:P279 ?answer}",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q12542 wdt:P31 ?X . ?X wdt:P279 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q12542 wdt:P582 ?X . ?X wdt:P31 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q12542 wdt:P580 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q12542 wdt:P582 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q12542 wdt:P580 ?answer . ?answer wdt:P31 wd:Q3624078}``` , \n , \n , \n , \n , \n , \n , \n wd:Q12542 wdt:P582 ?answer}``` , \n , \n , \n , \n , \n wd:Q12542 wdt:P580 ?answer . ?answer wdt:P31 wd:Q3624078}``` , \n , \n , \n , \n wd:Q12542 wdt:P582 ?answer}``` , \n , \n , \n , \n wd:Q12542 wdt:P580 ?answer . ?answer wdt:P31 wd:Q3624078}``` , \n , \n , \n wd:Q12542 wdt:P582 ?answer}``` , \n , \n , \n wd:Q12542 wdt:P580 ?answer"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Vaseline\": \"Q457239\", \"petroleum jelly\": \"Q431289\"}, \"relationships\": {\"active ingredient\": \"P1056\", \"has part\": \"P279\", \"instance of\": \"P31\"}}<|im_end|>\n<|im_start|>user\nWhat brand uses petroleum jelly?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P1056 wd:Q457239; wdt:P31/wdt:P279 wd:Q431289}",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P1056 wd:Q457239 . ?sbj wdt:P31 wd:Q431289 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P1056 wd:Q457239 . ?sbj wdt:P31 wd:Q431289 }``` , \n , \n , \n , \n , \n , \n , \n , \n and \n wdt:P31 wd:Q431289 }``` , \n , \n , \n , \n , \n , \n wdt:P31 wd:Q431289 }``` , \n , \n , \n , \n , \n wdt:P31 wd:Q431289 }``` , \n , \n , \n , \n wdt:P31 wd:Q431289 }``` , \n , \n , \n wdt:P31 wd:Q431289 }``` , \n , \n , \n wdt:P31 wd:Q431289 }``` , \n , \n , \n wdt:P31 wd:Q431289 }``` , \n , \n , \n wdt:P31 wd:Q431289 }``` , \n , \n , \n wdt:P31 wd:Q431289 }``` , \n , \n , \n wdt:P31 wd:Q431289 }``` , \n , \n , \n wdt:P31 wd:Q431289 }``` , \n , \n , \n wdt:P31 wd:Q431289 }``` , \n , \n , \n wdt:P31 wd:Q431289 }``` , \n , \n , \n wdt:P31 wd:Q431289 }``` , \n , \n , \n wdt:P31 wd:Q431289 }```"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Grease\": \"Q267721\", \"musical film\": \"Q11424\"}, \"relationships\": {\"instance of\": \"P31\", \"genre\": \"P279\", \"film genre\": \"P136\", \"musical\": \"Q842256\", \"release date\": \"P577\"}}<|im_end|>\n<|im_start|>user\nHow many other musical films were launched the same year as Grease?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?result) AS ?resultCnt) WHERE {?result wdt:P31/wdt:P279* wd:Q11424; wdt:P136 wd:Q842256; wdt:P577 ?date. wd:Q267721 wdt:P577 ?dateG FILTER((YEAR(?date)=YEAR(?dateG)) && (?result != wd:Q267721))}",
        "generated_sparql": "select ?ent where { ?ent wdt:P31 wd:Q11424 . ?ent wdt:P279 ?obj . ?ent wdt:P136 wd:Q842256 . ?ent wdt:P577 ?obj } ORDER BY DESC(?obj)LIMIT 5",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql select ?ent where { ?ent wdt:P31 wd:Q11424 . ?ent wdt:P279 ?obj . ?ent wdt:P136 wd:Q842256 . ?ent wdt:P577 ?obj } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql SELECT ?obj WHERE { wd:Q267721 p:P136 ?s . ?s ps:P136 ?obj . ?s pq:P577 ?x filter(contains(YEAR(?x),'1956')) }``` , \n`sparql SELECT ?obj WHERE { wd:Q267721 p:P136 ?s . ?s ps:P136 ?obj . ?s pq:P577 ?x filter(contains(YEAR(?x),'1956')) }``` , \n`sparql SELECT ?obj WHERE { wd:Q267721 p:P136 ?s . ?s ps:P136 ?obj . ?s pq:P577 ?x filter(contains(YEAR(?x),'1956')) }``` , \n`sparql SELECT ?obj WHERE { wd:Q267721 p:P136 ?s . ?s ps:P136 ?obj . ?s pq:P577 ?x filter(contains(YEAR(?x),'1956')) }``` , \n`sparql SELECT ?obj WHERE { wd:Q267721 p:P136 ?s . ?s ps:P136 ?obj . ?s pq:P577 ?x filter(contains(YEAR(?x),'1956')) }``` , \n`sparql SELECT ?obj WHERE { wd:Q267721 p:P136 ?s . ?s ps:P136 ?obj . ?s pq:P577 ?x filter(contains(YEAR("
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"The OA\": \"Q19798744\"}, \"relationships\": {\"creator\": \"P170\", \"starring\": \"P161\"}}<|im_end|>\n<|im_start|>user\nWhich creator of The OA also acted in it?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q19798744 wdt:P170 ?result; wdt:P161 ?result}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q19798744 wdt:P170 ?X . ?X wdt:P161 ?answer}",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q19798744 wdt:P170 ?X . ?X wdt:P161 ?answer}``` , \n 's starring': \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P161\"}} 's starring\": \"P"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Atif Aslam\": \"Q755830\", \"album\": \"Q482994\"}, \"relationships\": {\"performer\": \"P175\", \"instance of\": \"P31\"}}<|im_end|>\n<|im_start|>user\nWhat albums has Atif Aslam been on?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q482994; wdt:P175 wd:Q755830}",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P175 wd:Q755830 . ?sbj wdt:P31 wd:Q482994 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P175 wd:Q755830 . ?sbj wdt:P31 wd:Q482994 }``` , \n \"relationships\": {\"performer\": \"P175\", \"instance of\": \"P31\"}} , \n , \n , \n , \n , \n , \n , \n , \n , \n and \n are distinct from Atif Aslam? , \n , \n , \n , \n , \n , \n , \n , \n , \n and \n are distinct from Atif Aslam? , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Ada Lovelace\": \"Q7259\"}, \"relationships\": {\"noble title\": \"P97\"}}<|im_end|>\n<|im_start|>user\nWhat was Ada Lovelace\u2019s noble title?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q7259 wdt:P97 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P97 wd:Q7259 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P97 wd:Q7259 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n  }``` , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Janus\": \"Q167685\"}, \"relationships\": {\"god of\": \"P2925\"}}<|im_end|>\n<|im_start|>user\nWhat was Janus the god of?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q167685 wdt:P2925 ?result}",
        "generated_sparql": "select distinct ?answer where { wd:Q167685 wdt:P2925 ?answer}",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql select distinct ?answer where { wd:Q167685 wdt:P2925 ?answer}``` , \"relationships\": {\"instance of\": \"P31\", \"label\": \"rdfs:label\"}} , \"filter\": \"lang\"\": \"lang\"}} , \"lang\": \"lang\"}} LIMIT 25``` , \"lang\": \"lang\"}} LIMIT 25``` , \"lang\": \"lang\"}} LIMIT 25``` , \"lang\": \"lang\"}} LIMIT 25``` , \"lang\": \"lang\"}} LIMIT 25``` , \"lang\": \"lang\"}} LIMIT 25``` , \"lang\": \"lang\"}} LIMIT 25``` , \"lang\": \"lang\"}} LIMIT 25``` , \"lang\": \"lang\"}} LIMIT 25``` , \"lang\": \"lang\"}} LIMIT 25``` , \"lang\": \"lang\"}} LIMIT 25``` , \"lang\": \"lang\"}} LIMIT 25``` , \"lang\": \"lang\"}} LIMIT 25``` , \"lang\": \"lang\"}} LIMIT 25``` , \"lang\": \"lang\"}} LIMIT 25``` , \"lang\": \"lang\"}} LIMIT 25``` , \"lang\": \"lang\"}} LIMIT 25``` , \"lang\": \"lang\"}} LIMIT 25``` , \"lang\": \"lang\"}} LIMIT 25``` , \"lang\": \"lang\"}} LIMIT 25``` , \"lang\": \"lang\"}} LIMIT 25``` , \"lang\": \"lang\"}} LIMIT 25``` , \"lang\": \"lang\"}} LIMIT 25``` , \"lang\": \"lang\"}} LIMIT 25``` , \"lang\": \"lang\"}} LIMIT 25``` , \"lang\": \"lang\"}} LIMIT 25``` , \"lang\": \"lang\"}} LIMIT 25``` , \"lang\": \"lang\"}} LIMIT 25``` , \"lang\": \"lang\"}} LIMIT 25``` , \"lang\": \"lang\"}} LIMIT 25``` , \"lang\": \"lang\"}} LIMIT 25``` , \"lang\": \"lang\"}}"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Frodo\": \"Q177329\", \"Hobbit\": \"Q74359\"}, \"relationships\": {\"enemy of\": \"P7047\", \"instance of\": \"P31\"}}<|im_end|>\n<|im_start|>user\nWho was the fellow Hobbit who was an enemy of Frodo?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q177329 wdt:P7047 ?result. ?result wdt:P31 wd:Q74359}",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P7047 wd:Q177329 . ?sbj wdt:P31 wd:Q74359 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P7047 wd:Q177329 . ?sbj wdt:P31 wd:Q74359 }``` , \n , \n , \n , \n , \n , \n , \n , and \n trilogy? , \n , and \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n trilogy? , \n tr"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Tree Roots\": \"Q3305213\", \"Vincent van Gogh\": \"Q5582\"}, \"relationships\": {\"instance of\": \"P31\", \"creator\": \"P170\", \"inception\": \"P571\"}}<|im_end|>\n<|im_start|>user\nWhat was the last painting that Van Gogh painted?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q3305213; wdt:P170 wd:Q5582; wdt:P571 ?date} ORDER BY DESC(?date) LIMIT 1",
        "generated_sparql": "select ?ent where { ?ent wdt:P31 wd:Q3305213 . ?ent wdt:P170 wd:Q5582 . ?ent wdt:P571 ?obj } ORDER BY DESC(?obj)LIMIT 5",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql select ?ent where { ?ent wdt:P31 wd:Q3305213 . ?ent wdt:P170 wd:Q5582 . ?ent wdt:P571 ?obj } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql SELECT ?obj WHERE { wd:Q5582 p:P802 ?s . ?s ps:P802 ?obj . ?s pq:P582 ?x filter(contains(?x,'1900-0-0')) }``` , \n`sparql SELECT ?obj WHERE { wd:Q5582 p:P802 ?s . ?s ps:P802 ?obj . ?s pq:P582 ?x filter(contains(?x,'1900-0-0')) }``` , \n`sparql SELECT ?obj WHERE { wd:Q5582 p:P802 ?s . ?s ps:P802 ?obj . ?s pq:P582 ?x filter(contains(?x,'1900-0-0')) }``` , \n`sparql SELECT ?obj WHERE { wd:Q5582 p:P802 ?s . ?s ps:P802 ?obj . ?s pq:P582 ?x filter(contains(?x,'1900-0-0')) }``` , \n`sparql SELECT ?obj WHERE { wd:Q5582 p:P802 ?s . ?s ps:P802 ?obj . ?s pq:P582 ?x filter(contains(?x,'1900-0-0')) }``` , \n`sparql SELECT ?obj WHERE { wd:Q5582 p:P802 ?s . ?s ps:P802 ?obj . ?s pq:P582 ?x filter(contains(?x,'1900-0-0')) }``` , \n`sparql SELECT ?obj WHERE"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Smoke on the Water\": \"Q636399\"}, \"relationships\": {\"main subject\": \"P921\"}}<|im_end|>\n<|im_start|>user\nWhat was the main subject addressed in the Deep Purple song \u201cSmoke on the water\u201d?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q636399 wdt:P921 ?result}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q636399 wdt:P175 ?X . ?X wdt:P921 ?answer}",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q636399 wdt:P175 ?X . ?X wdt:P921 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q636399 wdt:P175 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q636399 wdt:P175 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q636399 wdt:P175 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q636399 wdt:P175 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q636399 wdt:P175 ?answer}``` , \n , \n , \n , \n , \n wd:Q636399 wdt:P175 ?answer}``` , \n , \n , \n , \n wd:Q636399 wdt:P175 ?answer}``` , \n , \n , \n , \n wd:Q636399 wdt:P175 ?answer}``` , \n , \n , \n wd:Q636399 wdt:P175 ?answer}``` , \n , \n , \n wd:Q636399 wdt:P175 ?answer}``` , \n , \n , \n wd:Q636399 wdt:P175 ?answer}``` , \n , \n wd:Q63639"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"sperm whale\": \"Q81214\"}, \"relationships\": {\"start time\": \"P580\"}}<|im_end|>\n<|im_start|>user\nWhen did the first sperm whales exist?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q81214 wdt:P580 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1652 wd:Q81214 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1652 wd:Q81214 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n  }``` , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Berlin Wall\": \"Q5086\"}, \"relationships\": {\"dissolved, abolished or demolished\": \"P576\"}}<|im_end|>\n<|im_start|>user\nWhat year did the Berlin Wall fall?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q5086 wdt:P576 ?time BIND(YEAR(?time) AS ?result)}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P576 wd:Q5086 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P576 wd:Q5086 }``` , \n , 1948-1949: Berlin Wall , 1948-1949: Berlin Wall , 1948-1949: Berlin Wall }``` , \n , 1948-1949: Berlin Wall }``` , \n , 1948-1949: Berlin Wall }``` , \n , 1948-1949: Berlin Wall }``` , \n , 1948-1949: Berlin Wall }``` , \n , 1948-1949: Berlin Wall }``` , \n , 1948-1949: Berlin Wall }``` , \n , 1948-1949: Berlin Wall }``` , \n , 1948-1949: Berlin Wall }``` , \n , 1948-1949: Berlin Wall }``` , \n , 1948-1949: Berlin Wall }``` , \n , 1948-1949: Berlin Wall }``` , \n , 1948-1949: Berlin Wall }``` , \n , 1948-1949: Berlin Wall }``` , \n , 1948-1949: Berlin Wall }``` , \n , 1948-1949: Berlin Wall }``` , \n , 1948-1949: Berlin Wall }``` , \n , 1948-1949: Berlin Wall }``` , \n , 1948-1949: Berlin Wall }``` , \n , 1948-1949: Berlin Wall }``` , \n , 1948-1949: Berlin Wall }``` , \n , 1948-1949: Berlin Wall }``` , \n , 1"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Riverdale\": \"Q23001951\"}, \"relationships\": {\"inception\": \"P580\"}}<|im_end|>\n<|im_start|>user\nWhat year was Riverdale first aired?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q23001951 wdt:P580 ?time. BIND(YEAR(?time) AS ?result)}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P112 wd:Q23001951 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P112 wd:Q23001951 }``` , \n`sparql SELECT ?value WHERE { wd:Q23001951 p:P112 ?s . ?s ps:P112 wd:Q23001951 . ?s pq:P580 ?value}``` , \n \n`sparql SELECT ?value WHERE { wd:Q23001951 p:P112 ?s . ?s ps:P112 wd:Q23001951 . ?s pq:P580 ?value}``` , \n \n`sparql SELECT ?value WHERE { wd:Q23001951 p:P112 ?s . ?s ps:P112 wd:Q23001951 . ?s pq:P580 ?value}``` , \n 's parent\": \"P40\", \"child\": \"P355\"}} , \n 's parent\": \"P3373\"}} 's sibling\": \"P3373\"}} 's parent 's parent 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Allen Ginsberg\": \"Q6711\"}, \"relationships\": {\"date of death\": \"P570\"}}<|im_end|>\n<|im_start|>user\nWhen did Allen Ginsberg die?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q6711 wdt:P570 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P570 wd:Q6711 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P570 wd:Q6711 }``` , \n`sparql SELECT ?value WHERE { wd:Q6711 p:P570 ?s . ?s ps:P570 ?x filter(contains(?x,'1968-0-0')) . ?s pq:P31 ?value}``` , \n 's parent\": \"P40\", 'child\": \"P355\"}} , \n 's parent\": \"P3373\"}} 's sibling\": \"P3373\"}} 's parent 's parent 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling '"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Ella Fitzgerald\": \"Q1768\"}, \"relationships\": {\"date of death\": \"P570\"}}<|im_end|>\n<|im_start|>user\nWhen did Ella Fitzgerald die?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1768 wdt:P570 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P570 wd:Q1768 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P570 wd:Q1768 }``` , \n`sparql SELECT ?value WHERE { wd:Q1768 p:P570 ?s . ?s ps:P570 ?x filter(contains(?x,'1969-0-0')) . ?s pq:P31 ?value}``` , \n 's sibling': \"P3373\"}} , \n 's sibling\": \"P3373\"}} 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling '"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"bouldering\": \"Q852989\"}, \"relationships\": {\"inception\": \"P571\"}}<|im_end|>\n<|im_start|>user\nwhen did human first start to bouldering?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q852989 wdt:P571 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1056 wd:Q852989 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1056 wd:Q852989 }``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l97 wdt:P1040 ?x0 . wd:Q854743 wdt:P1040 ?x0 . wd:Q854743 wdt:P1040 ?x0 . wd:Q854743 wdt:P1040 ?x0 . wd:Q854743 wdt:P1040 ?x0 . wd:Q854743 wdt:P1040 ?x0 . wd:Q854743 wdt:P1040 ?x0 . wd:Q854743 wdt:P1040 ?x0 . wd:Q854743 wdt:P1040 ?x0 . wd:Q854743 wdt:P1040 ?x0 }``` ,"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Pakistan\": \"Q843\"}, \"relationships\": {\"inception\": \"P571\"}}<|im_end|>\n<|im_start|>user\nWhen did Pakistan become independent?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q843 wdt:P571 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P571 wd:Q843 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P571 wd:Q843 }``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Rumi\": \"Q43347\"}, \"relationships\": {\"date of death\": \"P570\"}}<|im_end|>\n<|im_start|>user\nWhen did Rumi die?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q43347 wdt:P570 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1480 wd:Q43347 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1480 wd:Q43347 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n  }``` , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Slaughterhouse Five\": \"Q265954\", \"Kurt Vonnegut's brother\": \"Q6581097\"}, \"relationships\": {\"author\": \"P50\", \"brother\": \"P3373\", \"gender\": \"P21\", \"date of death\": \"P570\"}}<|im_end|>\n<|im_start|>user\nWhen did the brother of the author of Slaughterhouse Five die?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q265954 wdt:P50/wdt:P3373 ?bro. ?bro wdt:P21 wd:Q6581097; wdt:P570 ?result}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q265954 wdt:P50 ?answer . ?answer wdt:P3373 wd:Q6581097}",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q265954 wdt:P50 ?answer . ?answer wdt:P3373 wd:Q6581097}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n and \n wdt:P58 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n wdt:P58 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n wdt:P58 ?x0 . ?x0 wdt:P3373 wd:Q6581097 . FILTER ( ?x0 != wd:Q6581097 ) }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q108373711 wdt:P58 ?x0 . wd:Q108373711 wdt:P58 ?x0 . wd:Q108373711 wdt:P58 ?x0 . wd:Q108373711 wdt:P58 ?x0 . wd:Q108373711 wdt:P58 ?x0 . wd:Q108373711 wdt:P58 ?x0 . wd:Q108373711 wdt:P58 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q108373711 wdt:P58 ?x0 }``` , \n , \n , \n , \n , \n , \n wd:Q108373711 wdt:P58 ?x0 }``` , \n , \n , \n , \n , \n , "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Saturday Night Live\": \"Q13979\"}, \"relationships\": {\"creator\": \"P170\", \"date of birth\": \"P569\"}}<|im_end|>\n<|im_start|>user\nwhen was the creator of saturday night live born?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q13979 wdt:P170/wdt:P569 ?result}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q13979 wdt:P170 ?X . ?X wdt:P569 ?answer}",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q13979 wdt:P170 ?X . ?X wdt:P569 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q13979 wdt:P170 ?X . ?X wdt:P569 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q13979 wdt:P170 ?X . ?X wdt:P569 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q13979 wdt:P170 ?X . ?X wdt:P569 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q13979 wdt:P170 ?X . ?X wdt:P569 ?answer}``` , \n , \n , \n , \n , \n , \n , \n wd:Q13979 wdt:P170 ?X . ?X wdt:P569 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q13979 wdt:P170 ?X . ?X wdt:P569 ?answer}``` , \n , \n , \n , \n , \n wd:Q13979 wdt:P170 ?X . ?X wdt:P569 ?answer}``` , \n , \n , \n , \n wd:Q13979 wdt:P170 ?X . ?X wdt:P569 ?answer}``` , \n , \n , \n , \n wd:"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Hambach Festival\": \"Q551416\"}, \"relationships\": {\"participant\": \"P710\"}}<|im_end|>\n<|im_start|>user\nWho was part of the Hambach Festival?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q551416 wdt:P710 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P710 wd:Q551416 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P710 wd:Q551416 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m\nQ11424 . ?x0 wdt:P1040 ?x1 . ?x0 wdt:P1040 wd:Q107602847 . ?x0 wdt:P1040 wd:Q107603019 . ?x0 wdt:P1040 wd:Q107603019 . ?x0 wdt:P1040 wd:Q107603019 . ?x0 wdt:P1040 wd:Q107603019 . ?x0 wdt:P1040 wd:Q107603019 . ?x0 wdt:P1040"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"The OA\": \"Q19798744\"}, \"relationships\": {\"first release date\": \"P580\"}}<|im_end|>\n<|im_start|>user\nWhen did The OA was first released?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q19798744 wdt:P580 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1441 wd:Q19798744 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1441 wd:Q19798744 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q19798744 wdt:P1441 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q19798744 wdt:P1441 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q19798744 wdt:P1441 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q19798744 wdt:P1441 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q19798744 wdt:P1441 ?x0 }``` , \n , \n , \n , \n , \n , \n wd:Q19798744 wdt:P1441 ?x0 }``` , \n , \n , \n , \n , \n wd:Q19798744 wdt:P1441 ?x0 }``` , \n , \n , \n , \n wd:Q19798744 wdt:P1441 ?x0 }``` , \n , \n , \n , \n wd:Q19798744 wdt:P1441 ?x0 }``` , \n , \n , \n , \n wd:Q19798744"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"The Troubles\": \"Q815436\"}, \"relationships\": {\"number of casualties\": \"P1120\"}}<|im_end|>\n<|im_start|>user\nHow many casualties were a result of the Troubles?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q815436 wdt:P1120 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1120 wd:Q815436 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1120 wd:Q815436 }``` , \n , \n , \n , \n , \n , \n , \n , \n , and \n were written by The Troubles 's producer 's founder and writer and written by a film 's writer and star , \n , \n , \n , and \n , \n , \n and \n were written by a film 's writer and star and written by a founder and employee of The Troubles 's producer and distributor , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Weimar Republic\": \"Q41304\"}, \"relationships\": {\"inception\": \"P571\"}}<|im_end|>\n<|im_start|>user\nWhen did the Weimar Republic start?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q41304 wdt:P571 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P571 wd:Q41304 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P571 wd:Q41304 }``` , \n , 1919-1923: Weimar Republic }``` , \n , 1919-1923: Weimar Republic }``` , \n , 1919-1923: Weimar Republic }``` , \n , 1919-1923: Weimar Republic }``` , \n , 1919-1923: Weimar Republic }``` , \n , 1919-1923: Weimar Republic }``` , \n , 1919-1923: Weimar Republic }``` , \n , 1919-1923: Weimar Republic }``` , \n , 1919-1923: Weimar Republic }``` , \n , 1919-1923: Weimar Republic }``` , \n , 1919-1923: Weimar Republic }``` , \n , 1919-1923: Weimar Republic }``` , \n , 1919-1923: Weimar Republic }``` , \n , 1919-1923: Weimar Republic }``` , \n , 1919-1923: Weimar Republic }``` , \n , 1919-1923: Weimar Republic }``` , \n , 1919-1923: Weimar Republic }``` , \n , 1919-1923: Weimar Republic }``` , \n , 1919-1923: Weimar Republic }``` , \n , 1919-1923: Weimar Republic }``` , \n , 1919-1923: Weimar Republic }``` , \n , 1919-1"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"World War II\": \"Q362\"}, \"relationships\": {\"end time\": \"P582\"}}<|im_end|>\n<|im_start|>user\nWhen did World War II officially end?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q362 wdt:P582 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P607 wd:Q362 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P607 wd:Q362 }``` , \n , 1945-1946: 100 Days of War , and 1945-1946: 100 Days of Peace were written by a film director , written by a film 's producer , and written by a film 's writer and star , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Ironman World Championship\": \"Q1420480\"}, \"relationships\": {\"inception\": \"P571\"}}<|im_end|>\n<|im_start|>user\nwhen is the first ironman world championship?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q1420480 wdt:P571 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1420480 wdt:P178 ?obj }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1420480 wdt:P178 ?obj }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l\": \"Q174570\"}, \"relationships\": {\"director\": \"P57\", \"executive producer\": \"P1431\", \"writer\": \"P58\", \"producer\": \"P272\", \"starring\": \"P161\"}} , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Hunter x Hunter\": \"Q696071\", \"Shueisha\": \"Q41298\"}, \"relationships\": {\"published in\": \"P1433\", \"instance of\": \"P31\", \"part of\": \"P279\", \"founding date\": \"P571\"}}<|im_end|>\n<|im_start|>user\nwhen was the magazine in which hunter x hunter is published established?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q696071 wdt:P1433 ?mag. ?mag wdt:P31/wdt:P279* wd:Q41298; wdt:P571 ?result}",
        "generated_sparql": "select ?ent where { ?ent wdt:P31 wd:Q41298 . ?ent wdt:P1433 ?obj . ?ent wdt:P31 wd:Q696071 } ORDER BY DESC(?obj)LIMIT 5",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql select ?ent where { ?ent wdt:P31 wd:Q41298 . ?ent wdt:P1433 ?obj . ?ent wdt:P31 wd:Q696071 } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql SELECT ?obj WHERE { wd:Q106413 p:P1433 ?s . ?s ps:P1433 ?obj . ?s pq:P31 wd:Q41298 }``` , \n`sparql SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P31 wd:Q41298 . ?x0 wdt:P1433 ?x1 . ?x1 wdt:P106 wd:Q33999 }``` , \n`sparql SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P31 wd:Q41298 . ?x0 wdt:P1433 ?x1 . ?x1 wdt:P106 wd:Q33999 }``` , \n`sparql SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P31 wd:Q41298 . ?x0 wdt:P1433 ?x1 . ?x1 wdt:P106 wd:Q33999 }``` , \n`sparql SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P31 wd:Q41298 . ?x0 wdt:P1433 ?x1 . ?x1 wdt:P106 wd:Q33999 }``` , \n`sparql SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P31 wd:Q41298 . ?x0 wdt:P1433 ?x1 . ?x1 wdt:P106 wd:Q33999 }``` , \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Red Notice\": \"Q58815001\"}, \"relationships\": {\"release date\": \"P577\"}}<|im_end|>\n<|im_start|>user\nWhen the film Red Notice was released?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q58815001 wdt:P577 ?result}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q58815001 wdt:P108 ?X . ?X wdt:P577 ?answer}",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q58815001 wdt:P108 ?X . ?X wdt:P577 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n wd:Q58815001 wdt:P108 ?X . ?X wdt:P577 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q58815001 wdt:P108 ?X }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q58815001 wdt:P108 ?X }``` , \n , \n , \n , \n , \n , \n , \n wd:Q58815001 wdt:P108 ?X }``` , \n , \n , \n , \n , \n wd:Q58815001 wdt:P108 ?X }``` , \n , \n , \n , \n wd:Q58815001 wdt:P108 ?X }``` , \n , \n , \n , \n wd:Q58815001 wdt:P108 ?X }``` , \n , \n , \n wd:Q58815001 wdt:P108 ?X }``` , \n , \n , \n wd:Q58815001 wdt:P108 ?X }``` , \n , \n , \n wd:Q58815001 wdt:P108 ?X }``` , \n , \n , \n wd:Q58815001 wdt:P108"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Cologne Cathedral\": \"Q4176\"}, \"relationships\": {\"inception\": \"P571\"}}<|im_end|>\n<|im_start|>user\nWhen was Cologne Cathedral built?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q4176 wdt:P571 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P571 wd:Q4176 }",
        "question": "When was Cologne Cathedral built?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P571 wd:Q4176 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"gout\": \"Q133087\"}, \"relationships\": {\"treatments\": \"P2176\"}}<|im_end|>\n<|im_start|>user\nWhat can be done against gout?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q133087 wdt:P2176 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P2176 wd:Q133087 }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P2176 wd:Q133087 }``` , \n 's parent\": \"P40\", \"child\": \"P355\"}} 's parent 's parent 's parent 's parent is gout? 's treatment? 's parent? 's parent? 's parent? 's parent? 's parent? 's parent? 's parent? 's parent? 's parent? 's parent? 's parent? 's parent? 's parent? 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``` 's parent ?x0 }``"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"HIV\": \"Q15787\"}, \"relationships\": {\"inception\": \"P575\"}}<|im_end|>\n<|im_start|>user\nWhen was HIV first identified?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q15787 wdt:P575 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1056 wd:Q15787 }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1056 wd:Q15787 }``` , \n , 1984-0-0: \"Q15787 }``` , \n , 1984-0-0: \"Q15787 }``` , \n , 1984-0-0: \"Q15787 }``` , \n , 1984-0-0: \"Q15787 }``` , \n , 1984-0-0: \"Q15787 }``` , \n , 1984-0-0: \"Q15787 }``` , \n , 1984-0-0: \"Q15787 }``` , \n , 1984-0-0: \"Q15787 }``` , \n , 1984-0-0: \"Q15787 }``` , \n , 1984-0-0: \"Q15787 }``` , \n , 1984-0-0: \"Q15787 }``` , \n , 1984-0-0: \"Q15787 }``` , \n , 1984-0-0: \"Q15787 }``` , \n , 1984-0-0: \"Q15787 }``` , \n , 1984-0-0: \"Q15787 }``` , \n , 1984-0-0: \"Q15787 }``` , \n , 1984-0-0: \"Q15787 }``` , \n , 1984-0-0: \"Q15787 }``` , \n , 1984-0-0: \"Q15787 }``` , \n , 1984-0-0: \"Q"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Liquid State Machines\": \"Q6557482\", \"article\": \"Q191067\"}, \"relationships\": {\"main subject\": \"P921\", \"publication date\": \"P577\", \"instance of\": \"P31\"}}<|im_end|>\n<|im_start|>user\nWhen was the first article about Liquid State Machines published?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{?art wdt:P31/wdt:P279* wd:Q191067; wdt:P921 wd:Q6557482; wdt:P577 ?result} ORDER BY ASC(?result) LIMIT 1",
        "generated_sparql": "SELECT ?value WHERE { wd:Q6557482 p:P1433 ?s . ?s ps:P1433 wd:Q191067 . ?s pq:P577 ?value}",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT ?value WHERE { wd:Q6557482 p:P1433 ?s . ?s ps:P1433 wd:Q191067 . ?s pq:P577 ?value}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m\nQ11424 . ?x0 wdt:P1040 ?x1 . ?x0 wdt:P1040 wd:Q1136310 . ?x0 wdt:P1040 wd:Q1136310 . ?x0 wdt:P1040 wd:Q1136310 . ?x0 wdt:P1040 wd:Q1136310 . ?x0 wdt:P1040 wd:Q1136310 . ?x0 wdt:P1040 wd:Q1136310 . ?x0 wdt:P1040 wd:Q1136310 . ?x0"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Marlene Dietrich\": \"Q4612\"}, \"relationships\": {\"birth date\": \"P569\"}}<|im_end|>\n<|im_start|>user\nWhen was Marlene Dietrich born?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q4612 wdt:P569 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P569 wd:Q4612 }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P569 wd:Q4612 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n md:Q108257924 wdt:P161 ?x0 . wd:Q108257924 wdt:P344 ?x0 . wd:Q108257924 wdt:P1040 ?x0 . wd:Q108257924 wdt:P1431 ?x0 . wd:Q108257924 wdt:P58 ?x0 . wd:Q2085 wdt:P161 ?x0 . wd:Q2085 wdt:P161 wd:Q108257924 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Penicillin\": \"Q12190\"}, \"relationships\": {\"inception\": \"P575\"}}<|im_end|>\n<|im_start|>user\nWhen was Penicillin discovered?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q12190 wdt:P575 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P61 wd:Q12190 }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P61 wd:Q12190 }``` , \n , 1920-0-0 ?x filter(?x = 1920-0-0) }``` , \n , 1920-0-0 ?x filter(?x = 1920-0-0) }``` , \n , 1920-0-0 ?x filter(?x = 1920-0-0) }``` , \n , 1920-0-0 ?x filter(?x = 1920-0-0) }``` , \n , 1920-0-0 ?x filter(?x = 1920-0-0) }``` , \n , 1920-0-0 ?x filter(?x = 1920-0-0) }``` , \n , 1920-0-0 ?x filter(?x = 1920-0-0) }``` , \n , 1920-0-0 ?x filter(?x = 1920-0-0) }``` , \n , 1920-0-0 ?x filter(?x = 1920-0-0) }``` , \n , 1920-0-0 ?x filter(?x = 1920-0-0) }``` , \n , 1920-0-0 ?x filter(?x = 1920-0-0) }``` , \n , 1920-0-0 ?x filter(?x = 1920-0-0) }``` , \n , 1920-0-0 ?x filter(?x = 1920-0-0) }``` , \n , 1920-0-0 ?x filter(?x = 1920-0-0) }``` , \n , 1920-0-"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Rumi\": \"Q43347\"}, \"relationships\": {\"date of birth\": \"P569\"}}<|im_end|>\n<|im_start|>user\nWhen was Rumi born?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q43347 wdt:P569 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P569 wd:Q43347 }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P569 wd:Q43347 }``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Romanticism\": \"Q37068\"}, \"relationships\": {\"start time\": \"P580\"}}<|im_end|>\n<|im_start|>user\nWhen was the beginning of Romanticism ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q37068 wdt:P580 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1269 wd:Q37068 }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1269 wd:Q37068 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q37068 wdt:P1269 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q37068 wdt:P1269 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q37068 wdt:P1269 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q37068 wdt:P1269 ?x0 }``` , \n , \n , \n , \n , \n , \n wd:Q37068 wdt:P1269 ?x0 }``` , \n , \n , \n , \n , \n wd:Q37068 wdt:P1269 ?x0 }``` , \n , \n , \n , \n , \n wd:Q37068 wdt:P1269 ?x0 }``` , \n , \n , \n , \n wd:Q37068 wdt:P1269 ?x0 }``` , \n , \n , \n , \n wd:Q37068 wdt:P1269 ?x0 }``` , \n , \n , \n , \n wd:Q37068 wdt:P1269 ?x0 }``` , \n , \n , \n wd:Q37068 wdt:P1269 ?x"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Echo Music Prize\": \"Q703237\"}, \"relationships\": {\"abolished, dissolved or demolished\": \"P576\"}}<|im_end|>\n<|im_start|>user\nWhen was the Echo Music Prize abolished?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q703237 wdt:P576 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P155 wd:Q703237 }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P155 wd:Q703237 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q1194456 wdt:P155 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q1194456 wdt:P155 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q1194456 wdt:P155 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q1194456 wdt:P155 ?x0 }``` , \n , \n , \n , \n , \n , \n wd:Q1194456 wdt:P155 ?x0 }``` , \n , \n , \n , \n , \n wd:Q1194456 wdt:P155 ?x0 }``` , \n , \n , \n , \n wd:Q1194456 wdt:P155 ?x0 }``` , \n , \n , \n , \n wd:Q1194456 wdt:P155 ?x0 }``` , \n , \n , \n wd:Q1194456 wdt:P155 ?x0 }``` , \n , \n , \n wd:Q1194456 wdt:P155 ?x0 }``` , \n , \n , \n wd:Q1194456 wdt:P155 ?x0 }``` , \n , \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Typhoon\": \"Q7861093\"}, \"relationships\": {\"genre\": \"P31\", \"performer\": \"P175\", \"release date\": \"P577\"}}<|im_end|>\n<|im_start|>user\nWhen was the first album of the American band Typhoon released?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{?alb wdt:P31 wd:Q482994; wdt:P175 wd:Q7861093; wdt:P577 ?result} ORDER BY ASC(?result) LIMIT 1",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q7861093 wdt:P31 ?X . ?X wdt:P175 ?answer . ?X wdt:P577 ?x FILTER(contains(YEAR(?x),'1986'))}",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q7861093 wdt:P31 ?X . ?X wdt:P175 ?answer . ?X wdt:P577 ?x FILTER(contains(YEAR(?x),'1986'))}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n and  wdt:P31 wd:Q4830453 }``` , \n , \n , \n , \n , \n , \n , \n , \n and  wdt:P31 wd:Q4830453 }``` , \n , \n , \n , \n , \n , \n , \n , \n and  wdt:P31 wd:Q4830453 }``` , \n , \n , \n , \n , \n , \n , \n , \n and  wdt:P31 wd:Q4830453 }``` , \n , \n , \n , \n , \n , \n , \n , \n and  wdt:P31 wd:Q4830453 }``` , \n , \n , \n , \n , \n , \n , \n , \n and  wdt:P31 wd:Q4830453 }``` , \n , \n , \n , \n , \n , \n , \n , \n and  wdt:P31 wd:Q4830453 }``` , \n , \n , \n , \n , \n , \n , \n , \n and  wdt:P31 wd:Q4830453 }``` , \n , \n , \n , \n , \n , \n , \n , \n and  wdt:P31 wd:Q4830453 }``` , \n , \n , \n , \n , \n , \n ,"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Hamburg Airport\": \"Q27706\"}, \"relationships\": {\"inaugurated on\": \"P571\"}}<|im_end|>\n<|im_start|>user\nWhen was the Hamburg Airport inaugurated?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q27706 wdt:P571 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P571 wd:Q27706 }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P571 wd:Q27706 }``` , \n , 1986-0-0\": \"Q1986\"}} , \n , 1986-0-0\": \"Q1986\"}} , \n , 1986-0-0\": \"Q1986\"}} , \n , 1986-0-0\": \"Q1986\"}} , \n , 1986-0-0\": \"Q1986\"}} , \n , 1986-0-0\": \"Q1986\"}} , \n , 1986-0-0\": \"Q1986\"}} , \n , 1986-0-0\": \"Q1986\"}} , \n , 1986-0-0\": \"Q1986\"}} , \n , 1986-0-0\": \"Q1986\"}} , \n , 1986-0-0\": \"Q1986\"}} , \n , 1986-0-0\": \"Q1986\"}} , \n , 1986-0-0\": \"Q1986\"}} , \n , 1986-0-0\": \"Q1986\"}} , \n , 1986-0-0\": \"Q1986\"}} , \n , 1986-0-0\": \"Q1986\"}} , \n , 1986-0-0\": \"Q1986\"}} , \n , 1986-0-0\": \"Q1986\"}} , \n , 1986-0-0\": \"Q1986\"}} , \n , 1986-0-0\": \"Q1986\"}} , \n , 1986-0-0\": \"Q1986\"}} , \n , 1986-0"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Hamburg S-Bahn\": \"Q693956\"}, \"relationships\": {\"inception\": \"P1619\"}}<|im_end|>\n<|im_start|>user\nWhen was the Hamburg S-Bahn officially opened?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q693956 wdt:P1619 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1619 wd:Q693956 }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1619 wd:Q693956 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n , \n \n wd:Q693956 wdt:P1619 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q693956 wdt:P1619 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q693956 wdt:P1619 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q693956 wdt:P1619 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q693956 wdt:P1619 ?x0 }``` , \n , \n , \n , \n , \n , \n wd:Q693956 wdt:P1619 ?x0 }``` , \n , \n , \n , \n , \n wd:Q693956 wdt:P1619 ?x0 }``` , \n , \n , \n , \n , \n wd:Q693956 wdt:P1619 ?x0 }``` , \n , \n , \n , \n , \n wd:Q693956 wdt:P1619 ?x0 }``` , \n , \n , \n , \n wd:Q693956 wdt:P1619 ?x0"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Birdland\": \"Q800176\"}, \"relationships\": {\"inception\": \"P571\"}}<|im_end|>\n<|im_start|>user\nWhen was the jazz club Birdland in Hamburg founded?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q800176 wdt:P571 ?result}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q800176 wdt:P112 ?X . ?X wdt:P571 ?answer}",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q800176 wdt:P112 ?X . ?X wdt:P571 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q800176 wdt:P112 ?X . ?X wdt:P571 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q800176 wdt:P112 ?X }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q800176 wdt:P112 ?X0 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q800176 wdt:P112 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q800176 wdt:P112 ?x0 }``` , \n , \n , \n , \n , \n , \n wd:Q800176 wdt:P112 ?x0 }``` , \n , \n , \n , \n , \n wd:Q800176 wdt:P112 ?x0 }``` , \n , \n , \n , \n , \n wd:Q800176 wdt:P112 ?x0 }``` , \n , \n , \n , \n wd:Q800176 wdt:P112 ?x0 }``` , \n , \n , \n , \n wd:Q800176 wdt:P112 ?x0 }"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Howl\": \"Q1545259\"}, \"relationships\": {\"inception\": \"P571\"}}<|im_end|>\n<|im_start|>user\nWhen was the poem Howl written?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q1545259 wdt:P571 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P170 wd:Q1545259 }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P170 wd:Q1545259 }``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l9c\": \"Q106506\"}, \"relationships\": {\"instance of\": \"P31\", \"label\": \"rdfs:label\"}} , FILTER\": \"CONTAINS\", \"lcase\": \"lcase\"}} , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n m.0f8l9c\": \"Q106506\"}} , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"University of Cambridge\": \"Q35794\"}, \"relationships\": {\"founding date\": \"P571\"}}<|im_end|>\n<|im_start|>user\nWhen was the university of Cambridge founded?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q35794 wdt:P571 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P571 wd:Q35794 }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P571 wd:Q35794 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n , \n \n }```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P571 wd:Q35794 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n \n , \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"University of Hamburg\": \"Q156725\"}, \"relationships\": {\"founding date\": \"P571\"}}<|im_end|>\n<|im_start|>user\nWhen was the University of Hamburg founded?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q156725 wdt:P571 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P112 wd:Q156725 }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P112 wd:Q156725 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n , \n \n }```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P112 wd:Q156725 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n , \n \n wd:Q156725 wdt:P112 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q156725 wdt:P112 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q156725 wdt:P112 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q156725 wdt:P112 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q156725 wdt:P112 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q156725 wdt:P112 ?x0 }``` , \n , \n , \n , \n , \n , \n , "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"University of Saskatchewan\": \"Q1514848\"}, \"relationships\": {\"founding date\": \"P571\"}}<|im_end|>\n<|im_start|>user\nWhen was the University of Saskatchewan founded?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q1514848 wdt:P571 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P112 wd:Q1514848 }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P112 wd:Q1514848 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n }```sparql SELECT ?value WHERE { wd:Q1514848 p:P112 ?s . ?s ps:P112 ?x filter(contains(?x,'1974')) . ?s pq:P580 ?value}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Vatican City\": \"Q237\"}, \"relationships\": {\"inception\": \"P571\"}}<|im_end|>\n<|im_start|>user\nWhen was the Vatican City created?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q237 wdt:P571 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P571 wd:Q237 }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P571 wd:Q237 }``` , \n`sparql SELECT ?value WHERE { wd:Q237 p:P112 ?s . ?s ps:P112 ?x filter(contains(?x,'1973')) . ?s pq:P571 ?value}``` , \n 's parent\": \"P40\", 'child\": \"P355\"}} , \n 's founder\": \"P112\"}} 's parent and child , and \n 's founder 's employer 's founder and employee was Vatican City 's founder and employee 's parent and child 's founder and employee 's parent and employee 's parent and employee 's founder and employee 's parent and employee 's parent and employee was Vatican City 's founder and employee 's parent and employee 's parent and employee 's parent and employee 's parent and employee 's parent and employee was Vatican City 's founder and employee 's parent and employee 's parent and employee 's parent and employee 's parent and employee was Vatican City 's founder and employee 's parent and employee 's parent and employee 's parent and employee 's parent and employee was Vatican City 's founder and employee 's parent and employee 's parent and employee 's parent and employee was Vatican City 's founder and employee 's parent and employee 's parent and employee 's parent and employee was Vatican City 's founder and employee 's parent and employee 's parent and employee was Vatican City 's founder and employee 's parent and employee 's parent and employee was Vatican City 's founder and employee 's parent and employee 's parent and employee was Vatican City 's founder and employee 's parent and employee 's parent and employee was Vatican City 's founder and employee 's parent and employee 's parent and employee was Vatican City 's founder and employee 's parent and employee was Vatican City 's founder and employee 's parent and employee was Vatican City 's founder and employee 's parent and employee was Vatican City 's founder and employee 's parent and employee was Vatican"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"United Fruit Company\": \"Q1771942\"}, \"relationships\": {\"founding date\": \"P571\"}}<|im_end|>\n<|im_start|>user\nWhen was United Fruit Company founded?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q1771942 wdt:P571 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P112 wd:Q1771942 }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P112 wd:Q1771942 }``` , \n , \n , \n , \n , \n , \n , \n , \n , and \n found by United Fruit Company 's founder 's employer 's employee and founder and found by a company 's founder and employee 's founder and employee 's founder and employee 's founder and employee 's founder and employee 's founder and employee found United Fruit Company 's founder and employee and found a company 's founder and employee 's employer 's founder and employee 's founder and employee 's founder and employee 's founder and employee 's founder and employee found United Fruit Company 's founder and employee and found a company 's founder and employee 's employer 's founder and employee 's founder and employee 's founder and employee 's founder and employee found United Fruit Company 's founder and employee and found a company 's founder and employee 's employer 's founder and employee 's founder and employee 's founder and employee 's founder and employee found United Fruit Company 's founder and employee and found a company 's founder and employee 's employer 's founder and employee 's founder and employee 's founder and employee found United Fruit Company 's founder and employee and found a company 's founder and employee 's employer 's founder and employee 's founder and employee 's founder and employee found United Fruit Company 's founder and employee and found a company 's founder and employee 's employer 's founder and employee 's founder and employee 's founder and employee found United Fruit Company 's founder and employee and found a company 's founder and employee 's employer 's founder and employee 's founder and employee 's founder and employee found United Fruit Company 's founder and employee and found a company 's founder and employee 's employer 's founder and employee 's founder and employee 's founder and employee found United Fruit Company 's founder and employee and found a company 's founder and employee 's employer 's founder and employee 's founder and employee 's founder and employee found United Fruit Company 's founder and employee and found a company 's founder and employee 's employer 's founder and employee 's founder and employee 's founder and employee found"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Trotzky\": \"Q33391\"}, \"relationships\": {\"place of death\": \"P20\"}}<|im_end|>\n<|im_start|>user\nWhere did Trotzky die?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q33391 wdt:P20 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P20 wd:Q33391 }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P20 wd:Q33391 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l97 wdt:P161 ?x0 . wd:Q33391 wdt:P161 ?x0 . wd:Q33391 wdt:P161 wd:Q10712777 . wd:Q33391 wdt:P161 wd:Q10712777 . wd:Q33391 wdt:P161 wd:Q10712777 . wd:Q33391 wdt:P161 wd:Q10712777 . wd:Q33391 wdt:P161 wd:Q10712777 . wd:Q33391 wdt:P161 wd:Q"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"The Call of the Wild\": \"Q476871\", \"White Fang\": \"Q152267\"}, \"relationships\": {\"setting\": \"P840\"}}<|im_end|>\n<|im_start|>user\nWhere are both The Call of the Wild and White Fang set, the most two famous works of Jack London?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q476871 wdt:P840 ?result. wd:Q152267 wdt:P840 ?result}",
        "generated_sparql": "SELECT ?obj WHERE { wd:Q476871 p:P840 ?s . ?s ps:P840 ?obj . ?s pq:P1344 wd:Q152267 }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT ?obj WHERE { wd:Q476871 p:P840 ?s . ?s ps:P840 ?obj . ?s pq:P1344 wd:Q152267 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n p:P840 ?obj }``` , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m:Q108377104 wdt:P161 ?x0 . wd:Q108377104 wdt:P344 ?x0 . wd:Q108377104 wdt:P1040 ?x0 . wd:Q108377104 wdt:P1431 ?x0 . wd:Q108377104 wdt:P58 ?x0 . wd:Q108377104 wdt:P58 ?x0 . wd:Q108377104 wdt:P58 ?x0 . wd:Q1"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Hambach Festival\": \"Q551416\"}, \"relationships\": {\"location\": \"P276\"}}<|im_end|>\n<|im_start|>user\nWhere did the Hambach Festival happen?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q551416 wdt:P276 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P276 wd:Q551416 }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P276 wd:Q551416 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wdt:P276 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q551416 wdt:P276 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q551416 wdt:P276 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q551416 wdt:P276 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q551416 wdt:P276 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q551416 wdt:P276 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q551416 wdt:P276 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q551416 wdt:P276 ?x0 }``` , \n , \n , \n , \n , \n , \n wd:Q551416 wdt:P276 ?"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"The Lord of the Rings\": \"Q15228\"}, \"relationships\": {\"setting\": \"P840\"}}<|im_end|>\n<|im_start|>user\nWhere do the novels of the franchise The Lord of the Rings take place?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q15228 wdt:P840 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P840 wd:Q15228 }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P840 wd:Q15228 }``` , \n , \n , \n , \n , \n , \n , \n , and \n were written by The Lord of the Rings 's writer and director , written by Peter Jackson , and written by Stephen Sondheim , Cate Blanchett , and Stephen Sondheim , \n , \n , \n , \n and \n were written by The Lord of the Rings 's writer and director , written by Peter Jackson , and written by Stephen Sondheim , Stephen Sondheim , Stephen Sondheim , Stephen Sondheim , and Stephen Sondheim , \n , \n and \n were written by The Lord of the Rings 's writer and director , written by Peter Jackson , and written by Stephen Sondheim , Stephen Sondheim , Stephen Sondheim , Stephen Sondheim , and Stephen Sondheim , \n , \n and \n were written by The Lord of the Rings 's writer and director , written by Peter Jackson , and written by Stephen Sondheim , Stephen Sondheim , Stephen Sondheim , Stephen Sondheim , and Stephen Sondheim , \n and \n was written by The Lord of the Rings 's writer and director , written by Peter Jackson , and written by Stephen Sondheim , Stephen Sondheim , Stephen Sondheim , Stephen Sondheim , and Stephen Sondheim , \n and \n was written by The Lord of the Rings 's writer and director , written by Peter Jackson , and written by Stephen Sondheim , Stephen Sondheim , Stephen Sondheim , Stephen Sondheim , and Stephen Sondheim , \n and \n was written by The Lord of the Rings 's writer and director , written by Peter Jackson , and written by Stephen Sondheim , Stephen Sondheim , Stephen Sondheim , Stephen Sondheim , and Stephen Sondheim , \n and \n was written by The Lord of the Rings 's writer and director , written by Peter Jackson , and written by Stephen Sondheim , Stephen Sondheim , Stephen Sondheim , Stephen Sondheim , and Stephen Sondheim , \n and \n was written by The Lord of the Rings '"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Nutri-Score\": \"Q46577569\"}, \"relationships\": {\"country of origin\": \"P495\"}}<|im_end|>\n<|im_start|>user\nWhere does the Nutri-Score originate from?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q46577569 wdt:P495 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P495 wd:Q46577569 }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P495 wd:Q46577569 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n  wdt:P17 wd:Q142 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wdt:P17 wd:Q142 }``` , \n , \n , \n , \n , \n , \n , \n wdt:P17 wd:Q142 }``` , \n , \n , \n , \n , \n , \n wdt:P17 wd:Q142 }``` , \n , \n , \n , \n , \n wdt:P17 wd:Q142 }``` , \n , \n , \n , \n wdt:P17 wd:Q142 }``` , \n , \n , \n wdt:P17 wd:Q142 }``` , \n , \n , \n wdt:P17 wd:Q142 }``` , \n , \n , \n wdt:P17 wd:Q142 }``` , \n , \n , \n wdt:P17 wd:Q142 }``` , \n , \n , \n wdt:P17 wd:Q142 }``` , \n , \n , \n wdt:P17 wd:Q142 }``` , \n , \n , \n wdt:P17 wd:Q142 }``` , \n , \n , \n wdt:P17 wd:Q142 }``` , \n , \n , \n wdt:P17 wd:Q142 }``` , \n , \n , \n w"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Academy Award for Best Actress\": \"Q103618\"}, \"relationships\": {\"winner\": \"P166\", \"educated at\": \"P69\"}}<|im_end|>\n<|im_start|>user\nAre there at least two winners of the Academy Award for Best Actress who have been educated at the same institution?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK{?act wdt:P166 wd:Q103618; wdt:P69 ?result. ?act2 wdt:P166 wd:Q103618; wdt:P69 ?result FILTER(?act != ?act2)}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q103618 wdt:P166 ?X . ?X wdt:P69 ?answer}",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q103618 wdt:P166 ?X . ?X wdt:P69 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n and  wdt:P166 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n wdt:P166 ?answer}``` , \n \n , \n , \n , \n , \n wdt:P166 ?answer}``` , \n , \n , \n wdt:P166 ?answer}``` , \n , \n wdt:P166 ?answer}``` , \n , \n wdt:P166 ?answer}``` , \n , \n wdt:P166 ?answer}``` , \n , \n wdt:P166 ?answer}``` , \n , \n wdt:P166 ?answer}``` , \n , \n wdt:P166 ?answer}``` , \n , \n wdt:P166 ?answer}``` , \n , \n wdt:P166 ?answer}``` , \n , \n wdt:P166 ?answer}``` , \n , \n wdt:P166 ?answer}``` , \n , \n wdt:P166 ?answer}``` , \n , \n wdt:P166 ?answer}``` , \n , \n wdt:P166 ?answer}``` , \n , \n wdt:P166 ?answer}``` , \n , \n wdt:P166 ?answer}``` , \n , \n wdt:P166 ?answer}``` , \n , \n wdt:P166 ?answer}``` , \n , \n wdt:P166 ?answer}``` , \n , \n wdt:P166 ?answer}``` , \n , \n wdt:P166 ?answer}``` , \n , "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Lisa Manoban\": \"Q26707663\"}, \"relationships\": {\"place of birth\": \"P19\"}}<|im_end|>\n<|im_start|>user\nWhere was K-pop star Lisa Manoban born?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q26707663 wdt:P19 ?result}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q26707663 wdt:P161 ?X . ?X wdt:P19 ?answer}",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q26707663 wdt:P161 ?X . ?X wdt:P19 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n wd:Q26707663 wdt:P161 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q26707663 wdt:P161 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q26707663 wdt:P161 ?answer}``` , \n , \n , \n , \n , \n , \n , \n wd:Q26707663 wdt:P161 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q26707663 wdt:P161 ?answer}``` , \n , \n , \n , \n , \n wd:Q26707663 wdt:P161 ?answer}``` , \n , \n , \n , \n , \n wd:Q26707663 wdt:P161 ?answer}``` , \n , \n , \n , \n wd:Q26707663 wdt:P161 ?answer}``` , \n , \n , \n , \n wd:Q26707663 wdt:P161 ?answer}``` , \n , \n , \n , \n wd:Q26707663 wdt:P161 ?answer}``` , \n , \n , \n , \n wd:Q26707663 wdt:P161 ?answer}```"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Norway\": \"Q20\"}, \"relationships\": {\"highest point\": \"P610\"}}<|im_end|>\n<|im_start|>user\nWhat is the highest point of Norway?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q20 wdt:P610 ?result}",
        "generated_sparql": "select distinct ?answer where { wd:Q20 wdt:P610 ?answer}",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql select distinct ?answer where { wd:Q20 wdt:P610 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q20 wdt:P610 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q20 wdt:P610 ?answer}``` , \n , \n , \n , \n , \n , \n , \n wd:Q20 wdt:P610 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q20 wdt:P610 ?answer}``` , \n , \n , \n , \n , \n wd:Q20 wdt:P610 ?answer}``` , \n , \n , \n , \n wd:Q20 wdt:P610 ?answer }``` , \n , \n , \n , \n wd:Q20 wdt:P610 ?answer }``` , \n , \n , \n , \n wd:Q20 wdt:P610 ?answer }``` , \n , \n , \n wd:Q20 wdt:P610 ?answer }``` , \n , \n , \n wd:Q20 wdt:P610 ?answer }``` , \n , \n , \n wd:Q20 wdt:P610 ?answer }``` , \n , \n , \n wd:Q20 wdt:P610 ?answer }``` , \n , \n , \n wd:Q20 wdt:P610 ?answer }``` , \n , \n , \n wd:Q20 wdt:P610 ?answer }``` , \n , \n , \n wd:Q20 wdt:P610"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Khruangbin\": \"Q54555985\"}, \"relationships\": {\"place of formation\": \"P740\"}}<|im_end|>\n<|im_start|>user\nWhere did the psychedelic band \u201cKhruangbin\u201d form?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q54555985 wdt:P740 ?result}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q54555985 wdt:P175 ?X . ?X wdt:P740 ?answer}",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q54555985 wdt:P175 ?X . ?X wdt:P740 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q54555985 wdt:P175 ?X . ?X wdt:P740 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q54555985 wdt:P175 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q54555985 wdt:P175 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q54555985 wdt:P175 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q54555985 wdt:P175 ?answer}``` , \n , \n , \n , \n , \n , \n , \n wd:Q54555985 wdt:P175 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q54555985 wdt:P175 ?answer}``` , \n , \n , \n , \n , \n wd:Q54555985 wdt:P175 ?answer}``` , \n , \n , \n , \n , \n wd:Q54555985 wdt:P175 ?answer"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Caesar\": \"Q1048\"}, \"relationships\": {\"place of death\": \"P20\"}}<|im_end|>\n<|im_start|>user\nWhere was Caesar murdered?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1048 wdt:P20 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P20 wd:Q1048 }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P20 wd:Q1048 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Goethe\": \"Q5879\"}, \"relationships\": {\"unmarried partner\": \"P451\", \"place of birth\": \"P19\"}}<|im_end|>\n<|im_start|>user\nWhere was Goethe\u2019s unmarried partner born ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q5879 wdt:P451/wdt:P19 ?result}",
        "generated_sparql": "SELECT ?ans_1 ?ans_2 WHERE { wd:Q5879 wdt:P451 ?ans_1 . wd:Q5879 wdt:P19 ?ans_2 }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT ?ans_1 ?ans_2 WHERE { wd:Q5879 wdt:P451 ?ans_1 . wd:Q5879 wdt:P19 ?ans_2 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q5879 wdt:P58 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q5879 wdt:P58 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q5879 wdt:P58 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q5879 wdt:P58 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q5879 wdt:P58 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q5879 wdt:P58 ?x0 }``` , \n , \n , \n , \n , \n , \n wd:Q5879 wdt:P58 ?x0 }``` , \n , \n , \n , \n , \n , \n wd:Q5879 wdt:P58 ?x0 }``` , \n , \n , \n , \n , \n wd:Q5879 wdt:P58 ?x0 }``` , \n , \n , \n , \n , \n wd:Q5879 wdt:P58 ?x0 }``` , \n , \n ,"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Roland Corporation\": \"Q848490\"}, \"relationships\": {\"founding location\": \"P740\"}}<|im_end|>\n<|im_start|>user\nWhere was Roland Corporation founded?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q848490 wdt:P740 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P740 wd:Q848490 }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P740 wd:Q848490 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m\nQ106639014 wdt:P112 ?x0 . ?x0 wdt:P108 wd:Q106639014 . ?x0 wdt:P108 wd:Q106639014 . ?x0 wdt:P108 wd:Q106639014 . ?x0 wdt:P108 wd:Q106639014 . ?x0 wdt:P108 wd:Q106639014 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"The Catcher in the Rye\": \"Q183883\"}, \"relationships\": {\"author\": \"P50\", \"birthplace\": \"P19\"}}<|im_end|>\n<|im_start|>user\nWhere was the author of The Catcher in the Rye born ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q183883 wdt:P50/wdt:P19 ?result}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q183883 wdt:P50 ?X . ?X wdt:P19 ?answer}",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q183883 wdt:P50 ?X . ?X wdt:P19 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q183883 wdt:P50 ?X . ?X wdt:P19 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q183883 wdt:P50 ?X . ?X wdt:P19 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q183883 wdt:P50 ?X . ?X wdt:P19 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q183883 wdt:P50 ?X . ?X wdt:P19 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q183883 wdt:P50 ?X . ?X wdt:P19 ?answer}``` , \n , \n , \n , \n , \n wd:Q183883 wdt:P50 ?X . ?X wdt:P19 ?answer}``` , \n , \n , \n , \n wd:Q183883 wdt:P50 ?X . ?X wdt:P19 ?answer}``` , \n , \n , \n , \n wd:Q183883 wdt:P50 ?X . ?X wdt:P19 ?answer}``` , \n , \n , \n wd:Q183883 wdt:P50 ?X . ?X wdt:"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Erlangen program\": \"Q315296\"}, \"relationships\": {\"developer\": \"P800\"}}<|im_end|>\n<|im_start|>user\nWho developed the Erlangen program?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P800 wd:Q315296}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P800 wd:Q315296 }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P800 wd:Q315296 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n md:Q1056856 wdt:P1040 ?x0 . wd:Q1056856 wdt:P1431 ?x0 . wd:Q1056856 wdt:P162|wdt:P272 ?x0 . wd:Q1056856 wdt:P58 ?x0 . wd:Q2082586 wdt:P1040 ?x0 . wd:Q2082586 wdt:P1431 ?x0 . wd:Q2082586 wdt:P162|wdt:P272 ?x0 . wd:Q2082586 wdt:P58 ?x0 . wd:Q2082586 wdt:P58 ?x0 . wd:"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Free Guy\": \"Q38685497\", \"Deadpool\": \"Q19347291\"}, \"relationships\": {\"starring actor\": \"P161\"}}<|im_end|>\n<|im_start|>user\nWhich actor starring in Free Guy also starred in Deadpool?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q38685497 wdt:P161 ?result. wd:Q19347291 wdt:P161 ?result}",
        "generated_sparql": "SELECT ?obj WHERE { wd:Q38685497 p:P161 ?s . ?s ps:P161 ?obj . ?s pq:P175 wd:Q19347291 }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT ?obj WHERE { wd:Q38685497 p:P161 ?s . ?s ps:P161 ?obj . ?s pq:P175 wd:Q19347291 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n , \n \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l9c\": \"Q106390633\"}, \"relationships\": {\"instance of\": \"P31\", \"label\": \"rdfs:label\"}} , FILTER\": \"CONTAINS\", \"lowercase\": \"lcase\"}} , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"United States\": \"Q11696\"}, \"relationships\": {\"position held\": \"P39\", \"father\": \"P22\"}}<|im_end|>\n<|im_start|>user\nWhich American presidents followed in their father\u2018s step and also became the president?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P39 wd:Q11696; wdt:P22/wdt:P39 wd:Q11696}",
        "generated_sparql": "SELECT ?value1 ?obj WHERE { wd:Q11696 p:P39 ?s . ?s ps:P39 ?obj . ?s pq:P22 ?value1 . }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT ?value1 ?obj WHERE { wd:Q11696 p:P39 ?s . ?s ps:P39 ?obj . ?s pq:P22 ?value1 . }``` , \n , \n , \n , \n , \n , \n , \n , \n , and \n p:P40|p:P355 ?x filter(?x = ?obj) }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P3373 ?x filter(?x = ?obj) }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P3373 ?x filter(?x = ?obj) }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P3373 ?x filter(?x = ?obj) }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P3373 ?x filter(?x = ?obj) }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P3373 ?x filter(?x = ?obj) }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P3373 ?x filter(?x = ?obj) }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P3373 ?x filter(?x = ?obj) }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P3373 ?x filter("
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"panda\": \"Q33602\", \"koala\": \"Q36101\"}, \"relationships\": {\"maximum lifespan\": \"P4214\"}}<|im_end|>\n<|im_start|>user\nwhich animal can possibly live longer, panda or koala?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {BIND(IF(EXISTS{wd:Q33602 wdt:P4214 ?lp. wd:Q36101 wdt:P4214 ?lk FILTER(?lp > ?lk)},wd:Q33602,wd:Q36101)AS ?result)}",
        "generated_sparql": "select distinct ?obj where { wd:Q33602 wdt:P4214 ?obj . ?obj wdt:P31 wd:Q16521 }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql select distinct ?obj where { wd:Q33602 wdt:P4214 ?obj . ?obj wdt:P31 wd:Q16521 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n md:Q1056836 wdt:P161 ?x0 . wd:Q1056836 wdt:P161 wd:Q1056836 . wd:Q1056836 wdt:P161 wd:Q1056836 . wd:Q1056836 wdt:P161 wd:Q1056836 . wd:Q1056836 wdt:P161 wd:Q1056836 . wd:Q1056836 wdt:P161 wd:Q1056836 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Gal\u00e1pagos Islands\": \"Q38095\", \"Hawaiian Islands\": \"Q192626\"}, \"relationships\": {\"part of\": \"P527\", \"instance of\": \"P31\", \"located in the administrative territorial entity\": \"P279\"}}<|im_end|>\n<|im_start|>user\nWhich archipelago has more islands: the Gal\u00e1pagos Islands or the Hawaiian Islands ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {{SELECT (COUNT (DISTINCT ?isl) AS ?gn) WHERE{wd:Q38095 wdt:P527+ ?isl. ?isl wdt:P31/wdt:P279* wd:Q23442}}{SELECT (COUNT (DISTINCT ?isl) AS ?hn) WHERE{wd:Q192626 wdt:P527+ ?isl. ?isl wdt:P31/wdt:P279* wd:Q23442}} BIND(IF(?hn > ?gn, wd:Q192626, wd:Q38095) AS ?result)}",
        "generated_sparql": "select ?ent where { ?ent wdt:P31 wd:Q38095 . ?ent wdt:P527 ?obj . ?ent wdt:P31 wd:Q192626 } ORDER BY DESC(?obj)LIMIT 5",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql select ?ent where { ?ent wdt:P31 wd:Q38095 . ?ent wdt:P527 ?obj . ?ent wdt:P31 wd:Q192626 } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql SELECT ?obj WHERE { wd:Q38095 p:P131 ?s . ?s ps:P131 ?obj . ?s pq:P31 wd:Q192626 }``` , \n`sparql SELECT ?obj WHERE { wd:Q38095 p:P131 ?s . ?s ps:P131 ?obj . ?s pq:P31 wd:Q192626 }``` , \n`sparql SELECT ?obj WHERE { wd:Q38095 p:P131 ?s . ?s ps:P131 ?obj . ?s pq:P31 wd:Q192626 }``` , \n`sparql SELECT ?obj WHERE { wd:Q38095 p:P131 ?s . ?s ps:P131 ?obj . ?s pq:P31 wd:Q192626 }``` , \n`sparql SELECT ?obj WHERE { wd:Q38095 p:P131 ?s . ?s ps:P131 ?obj . ?s pq:P31 wd:Q192626 }``` , \n`sparql SELECT ?obj WHERE { wd:Q38095 p:P131 ?s . ?s ps:P131 ?obj . ?s pq:P31 wd:Q192626 }``` , \n`sparql SELECT ?obj WHERE { wd:Q38095 p:P131 ?s . ?s ps:P131 ?obj . ?s pq:P31 wd:Q192626 }"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Yoko Ono\": \"Q117012\", \"Fluxus\": \"Q968159\"}, \"relationships\": {\"movement\": \"P135\", \"instance of\": \"P31\"}}<|im_end|>\n<|im_start|>user\nWhich art movement was Yoko Ono part of?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q117012 wdt:P135 ?result. ?result wdt:P31 wd:Q968159 }",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P135 wd:Q117012 . ?sbj wdt:P31 wd:Q968159 }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P135 wd:Q117012 . ?sbj wdt:P31 wd:Q968159 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n and \n wdt:P31 wd:Q968159 }``` , \n , \n , \n , \n , \n , \n , \n , \n wdt:P31 wd:Q968159 }``` , \n , \n , \n , \n , \n , \n wdt:P31 wd:Q968159 }``` , \n , \n , \n , \n , \n wdt:P31 wd:Q968159 }``` , \n , \n , \n , \n wdt:P31 wd:Q968159 }``` , \n , \n , \n , \n wdt:P31 wd:Q968159 }``` , \n , \n , \n wdt:P31 wd:Q968159 }``` , \n , \n , \n wdt:P31 wd:Q968159 }``` , \n , \n , \n wdt:P31 wd:Q968159 }``` , \n , \n , \n wdt:P31 wd:Q968159 }``` , \n , \n , \n wdt:P31 wd:Q968159 }``` , \n , \n , \n wdt:P31 wd:Q968159 }``` , \n , \n , \n wdt:P31 wd:Q968159 }``` , \n , \n , \n wdt:P31 wd:Q968159 }``` , \n , \n wdt"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Queen\": \"Q15862\", \"Pink Floyd\": \"Q2306\"}, \"relationships\": {\"inception\": \"P571\"}}<|im_end|>\n<|im_start|>user\nwhich band is created earlier, queen or pink floyd?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q15862 wdt:P571 ?q. wd:Q2306 wdt:P571 ?p. BIND(IF((?q < ?p), wd:Q15862, wd:Q2306 ) AS ?result)}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q15862 wdt:P178 ?answer . ?answer wdt:P178 wd:Q2306}",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q15862 wdt:P178 ?answer . ?answer wdt:P178 wd:Q2306}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q2306 wdt:P178 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q2306 wdt:P178 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q2306 wdt:P178 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q2306 wdt:P178 ?answer}``` , \n , \n , \n , \n , \n wd:Q2306 wdt:P178 ?answer}``` , \n , \n , \n , \n wd:Q2306 wdt:P178 ?answer}``` , \n , \n , \n wd:Q2306 wdt:P178 ?answer}``` , \n , \n , \n wd:Q2306 wdt:P178 ?answer}``` , \n , \n wd:Q2306 wdt:P178 ?answer}``` , \n , \n wd:Q2306 wdt:P178 ?answer}``` , \n , \n wd:Q2306 wdt:P178 ?answer}``` , \n , \n wd:Q2306 wdt:P178 ?answer}``` , \n , \n wd:Q2306 wdt:P178 ?answer}``` , \n wd:Q2306 wdt:P178 ?answer}``` , \n wd"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Kobe Bryant\": \"Q25369\"}, \"relationships\": {\"cause of death\": \"P509\"}}<|im_end|>\n<|im_start|>user\nWhat caused Kobe Bryant's Death?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q25369 wdt:P509 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P509 wd:Q25369 }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P509 wd:Q25369 }``` 's parent 's parent was Kobe Bryant? 's cause of death? 's parent? 's parent? 's parent? 's parent? 's parent? 's parent? 's parent? 's parent? 's parent? 's parent? 's parent? 's parent? 's parent ?x0 . ?x0 wdt:P108 ?x1 . ?x1 wdt:P40|wdt:P355 ?x2 . ?x2 wdt:P40|wdt:P355 wd:Q25369 }``` 's parent 's parent was Kobe Bryant? 's parent ?x0 . ?x0 wdt:P108 ?x1 . ?x1 wdt:P40|wdt:P355 ?x2 . ?x2 wdt:P40|wdt:P355 wd:Q25369 }``` 's parent 's parent was Kobe Bryant? 's parent ?x0 . ?x0 wdt:P108 ?x1 . ?x1 wdt:P40|wdt:P355 ?x2 . ?x2 wdt:P40|wdt:P355 wd:Q25369 }``` 's parent 's parent was Kobe Bryant? 's parent ?x0 . ?x0 wdt:P108 ?x1 . ?x1 wdt:P40|wdt:P355 ?x2 . ?x2 wdt:P40|wdt:P355 wd:Q25369 }``` 's parent 's parent was Kobe Bryant? 's parent ?x0 . ?x0 wdt:P108 ?x1 . ?x1 wdt:P40|wdt:P355 ?x2 . ?x2 wdt:P40|wdt:P355 wd:Q25369 }``` 's parent '"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"zero\": \"Q204\"}, \"relationships\": {\"additive inverse\": \"P461\"}}<|im_end|>\n<|im_start|>user\nWhat are the opposites of zero?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q204 wdt:P461 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P461 wd:Q204 }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P461 wd:Q204 }``` , \n , 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Tesla\": \"Q478214\", \"business\": \"Q4830453\"}, \"relationships\": {\"founder\": \"P112\", \"instance of\": \"P31\", \"subclass of\": \"P279\", \"founder of\": \"P169\"}}<|im_end|>\n<|im_start|>user\nWhich businesses are founded by the person in charge of Tesla?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q478214 wdt:P169 ?found. ?result wdt:P112 ?found; wdt:P31/wdt:P279* wd:Q4830453}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q478214 wdt:P112 ?X . ?X wdt:P31 ?answer . ?X wdt:P279 ?answer . ?X wdt:P169 wd:Q4830453}",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q478214 wdt:P112 ?X . ?X wdt:P31 ?answer . ?X wdt:P279 ?answer . ?X wdt:P169 wd:Q4830453}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l9c\": \"Q106506\"}, \"relationships\": {\"wavelength\": \"P2808\"}} , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n m.0f8l9c wavelength\": \"P2808\"}} \n , \n , \n , \n , \n , \n , \n , \n , \n , \n m.0f8l9c wavelength\": \"P2808\"}} \n , \n , \n , \n , \n , \n , \n , \n m.0f8l9"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Germany\": \"Q183\"}, \"relationships\": {\"population\": \"P1082\", \"point in time\": \"P585\"}}<|im_end|>\n<|im_start|>user\nDid Germany have a population growth of at least 1% since 2010?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q183 p:P1082 ?ps10, ?psNew. ?ps10 pq:P585 ?t10; ps:P1082 ?p10. ?psNew pq:P585 ?tNew; ps:P1082 ?pNew BIND(((?pNew - ?p10) / ?p10) AS ?diff) FILTER((YEAR(?t10) = 2010) && NOT EXISTS{wd:Q183 p:P1082/pq:P585 ?tt FILTER(?tt > ?tNew)} && ?diff >= 0.01)}",
        "generated_sparql": "ASK WHERE { wd:Q183 wdt:P1082 ?obj filter(?obj = 1.0) }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql ASK WHERE { wd:Q183 wdt:P1082 ?obj filter(?obj = 1.0) }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Howard Hughes\": \"Q11436\"}, \"relationships\": {\"instance of\": \"P31\", \"part of\": \"P279\", \"designed\": \"P178\"}}<|im_end|>\n<|im_start|>user\nWhich aircraft did Howard Hughes build?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {?result wdt:P31/wdt:P279* wd:Q11436; wdt:P178 wd:Q189081}",
        "generated_sparql": "select ?ent where { ?ent wdt:P31 wd:Q15056993 . ?ent wdt:P279 ?obj . ?ent wdt:P178 wd:Q11436 } ORDER BY DESC(?obj)LIMIT 5",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql select ?ent where { ?ent wdt:P31 wd:Q15056993 . ?ent wdt:P279 ?obj . ?ent wdt:P178 wd:Q11436 } ORDER BY DESC(?obj)LIMIT 5``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l9c\": \"Q106390631\"}, \"relationships\": {\"instance of\": \"P31\", \"label\": \"rdfs:label\"}} , FILTER\": \"CONTAINS\", \"lcase\": \"lcase\"}} , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"South Africa\": \"Q258\", \"Ethiopia\": \"Q115\"}, \"relationships\": {\"official language\": \"P37\"}}<|im_end|>\n<|im_start|>user\nWhich country has more official languages: South Africa (\u200b\u200bQ258) or Ethiopia ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {{SELECT (COUNT (DISTINCT ?lanS) AS ?lanSCount) WHERE {wd:Q258 wdt:P37 ?lanS}} {SELECT (COUNT (DISTINCT ?lanE) AS ?lanECount) WHERE {wd:Q115 wdt:P37 ?lanE}} BIND(IF(?lanSCount > ?lanECount, wd:Q258, wd:Q115) AS ?result)}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q115 wdt:P37 ?answer . ?answer wdt:P31 wd:Q258}",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q115 wdt:P37 ?answer . ?answer wdt:P31 wd:Q258}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q115 wdt:P37 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q115 wdt:P37 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q115 wdt:P37 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q115 wdt:P37 ?answer}``` , \n , \n , \n , \n , \n wd:Q115 wdt:P37 ?answer}``` , \n , \n , \n , \n wd:Q115 wdt:P37 ?answer}``` , \n , \n , \n wd:Q115 wdt:P37 ?answer}``` , \n , \n , \n wd:Q115 wdt:P37 ?answer}``` , \n , \n , \n wd:Q115 wdt:P37 ?answer}``` , \n , \n wd:Q115 wdt:P37 ?answer}``` , \n , \n wd:Q115 wdt:P37 ?answer}``` , \n , \n wd:Q115 wdt:P37 ?answer}``` , \n , \n wd:Q115 wdt:P37 ?answer}``` , \n , \n wd:Q115 wdt:P37 ?answer}``` , \n , \n wd:Q115 wdt:P37 ?answer}``` , \n , \n wd:"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"throat singing\": \"Q1067089\", \"tradition\": \"Q82821\"}, \"relationships\": {\"instance of\": \"P31\", \"part of\": \"P279\"}}<|im_end|>\n<|im_start|>user\nIs throat singing a tradition?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q1067089 wdt:P31/wdt:P279* wd:Q82821}",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P279 wd:Q1067089 . ?sbj wdt:P31 wd:Q82821 }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P279 wd:Q1067089 . ?sbj wdt:P31 wd:Q82821 }``` , \n 's parent\": \"P40\", 'spouse\": \"P355\"}} , \n 's parent\": \"P3373\"}} 's sibling\": \"P3373\"}} 's parent 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sib"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Mark Twain\": \"Q7245\", \"heart disease\": \"Q12136\"}, \"relationships\": {\"cause of death\": \"P509\"}}<|im_end|>\n<|im_start|>user\nWhich disease caused the death of Mark Twain?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q7245 wdt:P509 ?result. ?result wdt:P279* wd:Q12136}",
        "generated_sparql": "SELECT ?obj WHERE { wd:Q7245 p:P509 ?s . ?s ps:P509 ?obj . ?s pq:P805 wd:Q12136 }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT ?obj WHERE { wd:Q7245 p:P509 ?s . ?s ps:P509 ?obj . ?s pq:P805 wd:Q12136 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n p:P509 ?obj }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"smoking\": \"Q662860\", \"disease\": \"Q12136\"}, \"relationships\": {\"may cause\": \"P1542\", \"subclass of\": \"P279\"}}<|im_end|>\n<|im_start|>user\nWhich diseases can be caused by smoking ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q662860 wdt:P1542 ?result. ?result wdt:P279* wd:Q12136}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q662860 wdt:P1542 ?answer . ?answer wdt:P279 wd:Q12136}",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q662860 wdt:P1542 ?answer . ?answer wdt:P279 wd:Q12136}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q12136 wdt:P1542 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q12136 wdt:P1542 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q12136 wdt:P1542 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q12136 wdt:P1542 ?answer}``` , \n , \n , \n , \n , \n wd:Q12136 wdt:P1542 ?answer}``` , \n , \n , \n , \n wd:Q12136 wdt:P1542 ?answer}``` , \n , \n , \n wd:Q12136 wdt:P1542 ?answer}``` , \n , \n , \n wd:Q12136 wdt:P1542 ?answer}``` , \n , \n wd:Q12136 wdt:P1542 ?answer}``` , \n , \n wd:Q12136 wdt:P1542 ?answer}``` , \n , \n wd:Q12136 wdt:P1542 ?answer}``` , \n , \n wd:Q12136 wdt:P1542 ?answer}``` , \n , \n wd:Q12136 wdt:P"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Cage the Elephant\": \"Q68061\"}, \"relationships\": {\"genre\": \"P136\"}}<|im_end|>\n<|im_start|>user\nWhich genre that Cage the Elephant belongs to has the fewest english characters?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q68061 wdt:P136 ?result. ?result rdfs:label ?label FILTER(langMatches(lang(?label),\"en\"))} ORDER BY ASC(strlen(?label)) LIMIT 1",
        "generated_sparql": "select ?answer where { wd:Q68061 wdt:P136 ?answer . ?answer wdt:P1813 ?x FILTER(contains(?x,'Cage the Elephant'))}",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql select ?answer where { wd:Q68061 wdt:P136 ?answer . ?answer wdt:P1813 ?x FILTER(contains(?x,'Cage the Elephant'))}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n and \n wdt:P1813 ?x}``` , \n , \n , \n , \n , \n , \n , \n wdt:P1813 ?x}``` , \n , \n , \n , \n wdt:P1813 ?x}``` , \n , \n , \n wdt:P1813 ?x}``` , \n , \n wdt:P1813 ?x}``` , \n , \n wdt:P1813 ?x}``` , \n , \n wdt:P1813 ?x}``` , \n , \n wdt:P1813 ?x}``` , \n , \n wdt:P1813 ?x}``` , \n , \n wdt:P1813 ?x}``` , \n , \n wdt:P1813 ?x}``` , \n , \n wdt:P1813 ?x}``` , \n , \n wdt:P1813 ?x}``` , \n , \n wdt:P1813 ?x}``` , \n , \n wdt:P1813 ?x}``` , \n , \n wdt:P1813 ?x}``` , \n , \n wdt:P1813 ?x}``` , \n , \n wdt:P1813 ?x}``` , \n , \n wdt:P1813 ?x}``` , \n , \n wdt:P1813 ?x}``` , \n , \n wdt:P1813 ?x}``` , \n , \n wdt:P1813 ?x}``` , \n , \n wdt"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"lead\": \"Q708\", \"iron\": \"Q677\"}, \"relationships\": {\"density\": \"P2054\"}}<|im_end|>\n<|im_start|>user\nWhich takes less space? 1kg of lead or 1kg of iron.<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q708 wdt:P2054 ?dl. wd:Q677 wdt:P2054 ?di. BIND(IF(?dl >= ?di, wd:Q708, wd:Q677) AS ?result)}",
        "generated_sparql": "SELECT ?obj WHERE { wd:Q708 p:P2054 ?s . ?s ps:P2054 ?obj . ?s pq:P1582 wd:Q677 }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT ?obj WHERE { wd:Q708 p:P2054 ?s . ?s ps:P2054 ?obj . ?s pq:P1582 wd:Q677 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n p:P1582 ?obj }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n ,"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Thonburi Kingdom\": \"Q1115291\", \"Ayutthaya Kingdom\": \"Q7269\"}, \"relationships\": {\"preceded by\": \"P1365\", \"part of\": \"P279\"}}<|im_end|>\n<|im_start|>user\nWhich kingdom preceded the Thonburi Kingdom ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1115291 wdt:P1365 ?result. ?result wdt:P122/wdt:P279* wd:Q7269}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q1115291 wdt:P1365 ?answer . ?answer wdt:P279 wd:Q7269}",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q1115291 wdt:P1365 ?answer . ?answer wdt:P279 wd:Q7269}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n \n wd:Q1115291 wdt:P1365 ?answer . ?answer wdt:P279 wd:Q7269}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q1115291 wdt:P1365 ?answer . ?answer wdt:P279 wd:Q7269}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q1115291 wdt:P1365 ?answer . ?answer wdt:P279 wd:Q7269}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q1115291 wdt:P1365 ?answer . ?answer wdt:P279 wd:Q7269}``` , \n , \n , \n , \n , \n , \n , \n wd:Q1115291 wdt:P1365 ?answer . ?answer wdt:P279 wd:Q7269}``` , \n , \n , \n , \n , \n , \n wd:Q1115291 wdt:P1365 ?answer . ?answer wdt:P279 wd:Q7269}``` , \n , \n , \n , \n , \n wd:Q1115291 wdt:P1365 ?answer . ?"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"mountain\": null, \"Germany\": \"Q183\"}, \"relationships\": {\"instance of\": \"P31\", \"country\": \"P17\"}}<|im_end|>\n<|im_start|>user\nHow many mountains are located in Germany?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?m) AS ?result) WHERE {?m wdt:P31 wd:Q8502; wdt:P17 wd:Q183}",
        "generated_sparql": "SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P31 wd:Q8502 . ?x0 wdt:P17 wd:Q183 }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT DISTINCT ?x0 WHERE { ?x0 wdt:P31 wd:Q8502 . ?x0 wdt:P17 wd:Q183 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n md:Q105215731 wdt:P1040 ?x0 . wd:Q105215731 wdt:P1431 ?x0 . wd:Q105215731 wdt:P162|wdt:P272 ?x0 . wd:Q105215731 wdt:P58 ?x0 . wd:Q105215731 wdt:P58 ?x0 . wd:Q105215731 wdt:P58 ?x0 . wd:Q105215731 wdt:P58 ?x0 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Les Demoiselles d'Avignon\": \"Q910199\"}, \"relationships\": {\"movement\": \"P135\"}}<|im_end|>\n<|im_start|>user\nWhich movements is the painting \u201cLes Demoiselles d'Avignon\u201d assigned to?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q910199 wdt:P135 ?result}",
        "generated_sparql": "select distinct ?answer where { wd:Q910199 wdt:P135 ?answer}",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql select distinct ?answer where { wd:Q910199 wdt:P135 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q910199 wdt:P135 ?answer}``` , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n md:Q108373794 wdt:P1040 ?x0 . wd:Q108373794 wdt:P1431 ?x0 . wd:Q108373794 wdt:P162|wdt:P272 ?x0 . wd:Q108373794 wdt:P58 ?x0 . wd:Q108373797 wdt:P1040 ?x0 . wd:Q108373797 wdt:P1431 ?x0 . wd:Q108373797 wdt:P162|wdt:P272 ?x0 . wd:Q1083"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Cornetto trilogy\": \"Q169604\"}, \"relationships\": {\"has part\": \"P527\"}}<|im_end|>\n<|im_start|>user\nWhich movies belong to the Cornetto trilogy ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q169604 wdt:P527 ?result}",
        "generated_sparql": "select distinct ?answer where { wd:Q169604 wdt:P527 ?answer}",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql select distinct ?answer where { wd:Q169604 wdt:P527 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q169604 wdt:P527 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q169604 wdt:P527 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q169604 wdt:P527 ?answer}``` , \n , \n , \n , \n wd:Q169604 wdt:P527 ?answer}``` , \n , \n , \n wd:Q169604 wdt:P527 ?answer}``` , \n , \n , \n wd:Q169604 wdt:P527 ?answer}``` , \n , \n wd:Q169604 wdt:P527 ?answer}``` , \n , \n wd:Q169604 wdt:P527 ?answer}``` , \n , \n wd:Q169604 wdt:P527 ?answer}``` , \n , \n wd:Q169604 wdt:P527 ?answer}``` , \n , \n wd:Q169604 wdt:P527 ?answer}``` , \n , \n wd:Q169604 wdt:P527 ?answer}``` , \n , \n wd:Q169604 wdt:P527 ?answer}``` , \n , \n wd:Q169604 wdt:P527 ?answer}``` , \n , \n wd:Q169604 wdt:P527 ?answer"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Four Policemen\": \"Q2945433\"}, \"relationships\": {\"proposed during\": \"P607\"}}<|im_end|>\n<|im_start|>user\nDuring what event was the Four Policemen Council proposed?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q2945433 wdt:P607 ?result.}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P607 wd:Q2945433 }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P607 wd:Q2945433 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l9c\": \"Q106390633\"}, \"relationships\": {\"instance of\": \"P31\", \"label\": \"rdfs:label\"}} , FILTER\": \"CONTAINS\", \"lcase\": \"lcase\"}} , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"NBA\": \"Q13393265\", \"Boston Celtics\": \"Q155223\", \"Los Angeles Lakers\": \"Q27020041\"}, \"relationships\": {\"league\": \"P31\", \"champion\": \"P1346\", \"team\": \"P3450\"}}<|im_end|>\n<|im_start|>user\nWhich NBA teams have won the most seasons?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {{SELECT DISTINCT (COUNT(DISTINCT ?season) AS ?max) WHERE {?season wdt:P31 wd:Q27020041; wdt:P3450 wd:Q155223; wdt:P1346 ?result. ?result wdt:P31 wd:Q13393265} GROUP BY ?result ORDER BY DESC (?max) LIMIT 1} ?season wdt:P31 wd:Q27020041; wdt:P3450 wd:Q155223; wdt:P1346 ?result. ?result wdt:P31 wd:Q13393265.} GROUP BY ?result HAVING ((COUNT(DISTINCT ?season)) = MAX(?max))",
        "generated_sparql": "select ?ent where { ?ent wdt:P31 wd:Q13393265 . ?ent wdt:P3450 ?obj . ?ent wdt:P1346 wd:Q155223 . ?ent wdt:P1346 wd:Q27020041 } ORDER BY DESC(?obj)LIMIT 5",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql select ?ent where { ?ent wdt:P31 wd:Q13393265 . ?ent wdt:P3450 ?obj . ?ent wdt:P1346 wd:Q155223 . ?ent wdt:P1346 wd:Q27020041 } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql ASK WHERE { ?ent wdt:P31 wd:Q13393265 . ?ent wdt:P3450 ?obj . ?ent wdt:P1346 wd:Q155223 . ?ent wdt:P1346 wd:Q27020041 } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql ASK WHERE { ?ent wdt:P31 wd:Q13393265 . ?ent wdt:P3450 ?obj . ?ent wdt:P1346 wd:Q155223 . ?ent wdt:P1346 wd:Q27020041 } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql ASK WHERE { ?ent wdt:P31 wd:Q13393265 . ?ent wdt:P3450 ?obj . ?ent wdt:P1346 wd:Q155223 . ?ent wdt:P1346 wd:Q27020041 } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql ASK WHERE { ?ent wdt:P31 wd:Q13393265 . ?ent wdt:P3450 ?obj . ?ent wdt:P1346 wd:Q155223 . ?ent wdt:P1346 wd:Q27020041 } ORDER BY DESC(?obj)LIMIT 5"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"dragons in Game of Thrones\": \"Q30170627\", \"death\": \"Q23572\"}, \"relationships\": {\"instance of\": \"P31\", \"subclass of\": \"P279\", \"cause of death\": \"P1196\", \"died of\": \"P509\", \"has cause\": \"P828\", \"died\": \"P20\"}}<|im_end|>\n<|im_start|>user\nWhich of the dragons in Game of Thrones died?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31/wdt:P279* wd:Q30170627; wdt:P1441 wd:Q23572 FILTER(EXISTS{?result wdt:P20 _:ex})}",
        "generated_sparql": "select ?ent where { ?ent wdt:P31 wd:Q30170627 . ?ent wdt:P279 ?obj . ?ent wdt:P1196 ?obj . ?ent wdt:P509 ?obj . ?ent wdt:P828 ?obj . ?ent wdt:P20 wd:Q23572 } ORDER BY DESC(?obj)LIMIT 5",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql select ?ent where { ?ent wdt:P31 wd:Q30170627 . ?ent wdt:P279 ?obj . ?ent wdt:P1196 ?obj . ?ent wdt:P509 ?obj . ?ent wdt:P828 ?obj . ?ent wdt:P20 wd:Q23572 } ORDER BY DESC(?obj)LIMIT 5``` , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Another Round\": \"Q69303989\", \"Mads Mikkelsen\": \"Q294647\", \"film\": \"Q11424\"}, \"relationships\": {\"director\": \"P57\", \"instance of\": \"P31\", \"starring\": \"P161\"}}<|im_end|>\n<|im_start|>user\nWhich other movies by the director of Another Round also starred Mads Mikkelsen ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q69303989 wdt:P57 ?dir. ?result wdt:P31 wd:Q11424; wdt:P57 ?dir; wdt:P161 wd:Q294647 FILTER(?result != wd:Q69303989)}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q69303989 wdt:P57 ?answer . ?answer wdt:P31 wd:Q11424}",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q69303989 wdt:P57 ?answer . ?answer wdt:P31 wd:Q11424}``` , ?answer wdt:P161 wd:Q294647}``` , ?answer wdt:P161 wd:Q1053420 }``` , ?answer wdt:P161 wd:Q1053420 }``` , ?answer wdt:P161 wd:Q1053420 }``` , ?answer wdt:P161 wd:Q1053420 }``` , ?answer wdt:P161 wd:Q1053420 }``` , ?answer wdt:P161 wd:Q1053420 }``` , ?answer wdt:P161 wd:Q1053420 }``` , ?answer wdt:P161 wd:Q1053420 }``` , ?answer wdt:P161 wd:Q1053420 }``` , ?answer wdt:P161 wd:Q1053420 }``` , ?answer wdt:P161 wd:Q1053420 }``` , ?answer wdt:P161 wd:Q1053420 }``` , ?answer wdt:P161 wd:Q1053420 }``` , ?answer wdt:P161 wd:Q1053420 }``` , ?answer wdt:P161 wd:Q1053420 }``` , ?answer wdt:P161 wd:Q1053420 }``` , ?answer wdt:P161 wd:Q1053420 }``` , ?answer wdt:P161 wd:Q1053420 }``` , ?answer wdt:P"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Egypt\": \"Q79\", \"pyramid\": \"Q12516\"}, \"relationships\": {\"instance of\": \"P31\", \"part of\": \"P279\", \"height\": \"P2048\"}}<|im_end|>\n<|im_start|>user\nWhich egyptian pyramid is the tallest?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?pyr WHERE {?pyr wdt:P31/wdt:P279* wd:Q12516; p:P2048/psn:P2048/wikibase:quantityAmount ?h; wdt:P17 wd:Q79 } ORDER BY DESC(?h) LIMIT 1",
        "generated_sparql": "select ?ent where { ?ent wdt:P31 wd:Q12516 . ?ent wdt:P279 ?obj . ?ent wdt:P2048 wd:Q79 } ORDER BY DESC(?obj)LIMIT 5",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql select ?ent where { ?ent wdt:P31 wd:Q12516 . ?ent wdt:P279 ?obj . ?ent wdt:P2048 wd:Q79 } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql ASK WHERE { wd:Q12516 wdt:P31 wd:Q12516 . wd:Q12516 wdt:P279 ?obj . wd:Q12516 wdt:P2048 wd:Q79 }``` , \n`sparql ASK WHERE { wd:Q12516 wdt:P31 wd:Q12516 }``` , \n`sparql ASK WHERE { wd:Q12516 wdt:P31 wd:Q12516 }``` , \n`sparql ASK WHERE { wd:Q12516 wdt:P31 wd:Q12516 }``` , \n`sparql ASK WHERE { wd:Q12516 wdt:P31 wd:Q12516 }``` , \n`sparql ASK WHERE { wd:Q12516 wdt:P31 wd:Q12516 }``` , \n`sparql ASK WHERE { wd:Q12516 wdt:P31 wd:Q12516 }``` , \n`sparql ASK WHERE { wd:Q12516 wdt:P31 wd:Q12516 }``` , \n`sparql ASK WHERE { wd:Q12516 wdt:P31 wd:Q12516 }``` , \n`sparql ASK WHERE { wd:Q12516 wdt:P31 wd:Q12516 }``` , \n`sparql ASK WHERE { wd:Q125"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Taipei\": \"Q1867\"}, \"relationships\": {\"official language\": \"P37\"}}<|im_end|>\n<|im_start|>user\nWhat is the offical language of Taipei?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1867 wdt:P37 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P37 wd:Q1867 }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P37 wd:Q1867 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n ,"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Saturday Night Live\": \"Q13979\", \"television series\": \"Q5398426\"}, \"relationships\": {\"inception\": \"P580\", \"instance of\": \"P31\"}}<|im_end|>\n<|im_start|>user\nWhich shows aired for the first time the same year as Saturday Night Live ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q13979 wdt:P580 ?snl. ?result wdt:P31 wd:Q5398426; wdt:P580 ?start. FILTER(YEAR(?snl) = YEAR(?start) && ?result != wd:Q13979)}",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P580 wd:Q13979 . ?sbj wdt:P31 wd:Q5398426 }",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P580 wd:Q13979 . ?sbj wdt:P31 wd:Q5398426 }``` , \n , \n , \n , \n , \n , \n , \n , and \n wdt:P31 wd:Q5398426 }``` , \n , \n , \n , \n , \n , \n wdt:P31 wd:Q5398426 }``` , \n , \n , \n , \n wdt:P31 wd:Q5398426 }``` , \n , \n , \n wdt:P31 wd:Q5398426 }``` , \n , \n , \n wdt:P31 wd:Q5398426 }``` , \n , \n , \n wdt:P31 wd:Q5398426 }``` , \n , \n , \n wdt:P31 wd:Q5398426 }``` , \n , \n wdt:P31 wd:Q5398426 }``` , \n , \n wdt:P31 wd:Q5398426 }``` , \n , \n wdt:P31 wd:Q5398426 }``` , \n , \n wdt:P31 wd:Q5398426 }``` , \n , \n wdt:P31 wd:Q5398426 }``` , \n , \n wdt:P31 wd:Q5398426 }``` , \n , \n wdt:P31 wd:Q5398426 }``` , \n , \n wdt:P31 wd:Q5398426 }``` , \n , \n wdt:P31 wd:Q53"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Fijaci\u00f3n Oral vol. 1\": \"Q828282\"}, \"relationships\": {\"track list\": \"P361\", \"genre\": \"P31\"}}<|im_end|>\n<|im_start|>user\nWhich songs made up the album Fijaci\u00f3n Oral vol. 1 ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P361 wd:Q828282; wdt:P31 ?o FILTER(?o IN (wd:Q105543609, wd:Q134556))}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q828282 wdt:P361 ?X . ?X wdt:P31 ?answer}",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q828282 wdt:P361 ?X . ?X wdt:P31 ?answer}``` , \n 's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's founder 's parent 's parent 's parent 's parent write and executive produce , and executive produce a film 's prequel 's prequel 's prequel 's prequel 's prequel 's prequel 's prequel 's prequel 's prequel 's prequel 's prequel 's prequel 's prequel 's prequel 's prequel 's prequel 's prequel 's prequel '"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Impressionism\": \"Q40415\", \"Expressionism\": \"Q80113\"}, \"relationships\": {\"inception\": \"P571\", \"start time\": \"P580\"}}<|im_end|>\n<|im_start|>user\nWhich started first: impressionism or expressionism (art movements)?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q40415 wdt:P571 ?imp. wd:Q80113 wdt:P580 ?exp. BIND(IF(?imp < ?exp, wd:Q40415, wd:Q80113) AS ?result)}",
        "generated_sparql": "SELECT ?value WHERE { wd:Q40415 p:P138 ?s . ?s ps:P138 wd:Q80113 . ?s pq:P580 ?value}",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT ?value WHERE { wd:Q40415 p:P138 ?s . ?s ps:P138 wd:Q80113 . ?s pq:P580 ?value}``` , \n 1910-0-0 ?x filter(contains(?x,'1910-0-0')) }``` , \n , 1910-0-0 ?x filter(contains(?x,'1910-0-0')) }``` , \n , 1910-0-0 ?x filter(contains(?x,'1910-0-0')) }``` , \n , 1910-0-0 ?x filter(contains(?x,'1910-0-0')) }``` , \n , 1910-0-0 ?x filter(contains(?x,'1910-0-0')) }``` , \n , 1910-0-0 ?x filter(contains(?x,'1910-0-0')) }``` , \n , 1910-0-0 ?x filter(contains(?x,'1910-0-0')) }``` , \n , 1910-0-0 ?x filter(contains(?x,'1910-0-0')) }``` , \n , 1910-0-0 ?x filter(contains(?x,'1910-0-0')) }``` , \n , 1910-0-0 ?x filter(contains(?x,'1910-0-0')) }``` , \n , 1910-0-0 ?x filter(contains(?x,'1910-0-0')) }``` , \n , 1910-0-0 ?x filter(contains(?x,'1910-0-0')) }``` , \n , 1910-0-0 ?x filter(contains(?x,'1910-0-0')) }``` , \n , 1910-0"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Batman\": \"Q2695156\", \"United States of America\": \"Q35657\"}, \"relationships\": {\"residence\": \"P551\", \"located in the administrative territorial entity\": \"P131\", \"instance of\": \"P31\"}}<|im_end|>\n<|im_start|>user\nwhich state inside USA is batman living in?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q2695156 wdt:P551/wdt:P131 ?result. ?result wdt:P31 wd:Q35657}",
        "generated_sparql": "SELECT ?value WHERE { wd:Q2695156 p:P551 ?s . ?s ps:P551 wd:Q35657 . ?s pq:P131 ?value}",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql SELECT ?value WHERE { wd:Q2695156 p:P551 ?s . ?s ps:P551 wd:Q35657 . ?s pq:P131 ?value}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n p:P551 ?x filter(contains(?x,'United States of America')) }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P551 ?x filter(contains(?x,'United States of America')) }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P551 ?x filter(contains(?x,'United States of America')) }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P551 ?x filter(contains(?x,'United States of America')) }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P551 ?x filter(contains(?x,'United States of America')) }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n p:P551 ?x filter(contains(?x,'United States of America')) }``` , \n , \n , \n , \n , \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"swordfighter\": \"\", \"half-elven\": \"Q2035494\", \"Rangers of the North\": \"Q2292830\"}, \"relationships\": {\"occupation\": \"P106\", \"spouse\": \"P26\", \"instance of\": \"P31\", \"participant of\": \"P172\"}}<|im_end|>\n<|im_start|>user\nwhich swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P106 wd:Q11397897; wdt:P26/wdt:P31 wd:Q2035494; wdt:P172 wd:Q2292830}",
        "generated_sparql": "select ?ent where { ?ent wdt:P106 wd:Q2292830 . ?ent wdt:P26 ?obj . ?ent wdt:P172 wd:Q2035494 } ORDER BY DESC(?obj)LIMIT 5",
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "full_generated_text": "\n```sparql select ?ent where { ?ent wdt:P106 wd:Q2292830 . ?ent wdt:P26 ?obj . ?ent wdt:P172 wd:Q2035494 } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql ASK WHERE { ?ent wdt:P31 wd:Q2292830 . ?ent wdt:P26 ?obj . ?ent wdt:P172 wd:Q2035494 }``` , \n`sparql ASK WHERE { ?ent wdt:P31 wd:Q2292830 . ?ent wdt:P26 ?obj . ?ent wdt:P172 wd:Q2035494 }``` , \n`sparql ASK WHERE { ?ent wdt:P31 wd:Q2292830 . ?ent wdt:P26 ?obj . ?ent wdt:P172 wd:Q2035494 }``` , \n`sparql ASK WHERE { ?ent wdt:P31 wd:Q2292830 . ?ent wdt:P26 ?obj . ?ent wdt:P172 wd:Q2035494 }``` , \n`sparql ASK WHERE { ?ent wdt:P31 wd:Q2292830 . ?ent wdt:P26 ?obj . ?ent wdt:P172 wd:Q2035494 }``` , \n`sparql ASK WHERE { ?ent wdt:P31 wd:Q2292830 . ?ent wdt:P26 ?obj . ?ent wdt:P172 wd:Q2035494 }``` , \n`sparql ASK WHERE { ?ent wdt:P31 wd:Q2292830 . ?ent wdt:P26 ?obj . ?ent w"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"2020 UEFA Champions League Final\": \"Q46569648\"}, \"relationships\": {\"participant\": \"P1923\"}}<|im_end|>\n<|im_start|>user\nWhich teams participated in the 2020 UEFA Champions League Final ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q46569648 wdt:P1923 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1923 wd:Q46569648 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1923 wd:Q46569648 }``` , \n , 2018 UEFA Futsal Championship\": \"Q17156793\"}, \"relationships\": {\"number of matches played\": \"P54\", \"participant\": \"P1344\"}} , \n , 2018 UEFA Futsal Championship\": \"Q17156793\"}} , \n , 2018 UEFA Futsal Championship\": \"Q17156793\"}} , \n , 2018 UEFA Futsal Championship\": \"Q17156793\"}} , \n , 2018 UEFA Futsal Championship\": \"Q17156793\"}} , \n , 2018 UEFA Futsal Championship\": \"Q17156793\"}} , \n , 2018 UEFA Futsal Championship\": \"Q17156793\"}} , \n , 2018 UEFA Futsal Championship\": \"Q17156793\"}} , \n , 2018 UEFA Futsal Championship\": \"Q17156793\"}} , \n , 2018 UEFA Futsal Championship\": \"Q17156793\"}} , \n , 2018 UEFA Futsal Championship\": \"Q17156793\"}} , \n , 2018 UEFA Futsal Championship\": \"Q17156793\"}} , \n , 2018 UEFA Futsal Championship\": \"Q17156793\"}} , \n , 2018 UEFA Futsal Championship\": \"Q17156793\"}} , \n , 2018 UEFA Futsal Championship\": \"Q17156793\"}} , \n , 2018 UEFA Futsal Championship\": \"Q17156793\"}} , \n , 2018"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"university\": \"Q3918\"}, \"relationships\": {\"instance of\": \"P31\", \"number of students\": \"P2196\"}}<|im_end|>\n<|im_start|>user\nWhich universities have more than 200000 students?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q3918; wdt:P2196 ?stu. FILTER(?stu > xsd:integer(\"200000\"))}",
        "generated_sparql": "select ?ent where { ?ent wdt:P31 wd:Q3918 . ?ent wdt:P2196 ?obj } ORDER BY DESC(?obj)LIMIT 5",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql select ?ent where { ?ent wdt:P31 wd:Q3918 . ?ent wdt:P2196 ?obj } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql ASK WHERE { ?obj wdt:P31 wd:Q3918 } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql ASK WHERE { ?obj wdt:P31 wd:Q3918 } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql ASK WHERE { ?obj wdt:P31 wd:Q3918 } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql ASK WHERE { ?obj wdt:P31 wd:Q3918 } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql ASK WHERE { ?obj wdt:P31 wd:Q3918 } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql ASK WHERE { ?obj wdt:P31 wd:Q3918 } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql ASK WHERE { ?obj wdt:P31 wd:Q3918 } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql ASK WHERE { ?obj wdt:P31 wd:Q3918 } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql ASK WHERE { ?obj wdt:P31 wd:Q3918 } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql ASK WHERE { ?obj wdt:P31 wd:Q3918 } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql ASK WHERE { ?obj wdt:P31 wd:Q3918 } ORDER BY DESC(?obj)LIMIT"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"University of Oxford\": \"Q34433\", \"University of Cambridge\": \"Q35794\"}, \"relationships\": {\"inception\": \"P571\"}}<|im_end|>\n<|im_start|>user\nwhich university is established earlier, university of oxford or university of cambridge?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q34433 wdt:P571 ?inco. wd:Q35794 wdt:P571 ?incc BIND(IF((?inco < ?incc), wd:Q34433, wd:Q35794) AS ?result)}",
        "generated_sparql": "SELECT ?obj WHERE { wd:Q34433 p:P571 ?s . ?s ps:P571 ?obj . ?s pq:P580 ?x filter(contains(YEAR(?x),'1500')) }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT ?obj WHERE { wd:Q34433 p:P571 ?s . ?s ps:P571 ?obj . ?s pq:P580 ?x filter(contains(YEAR(?x),'1500')) }``` , \n , 1500-0-0 ?x filter(?x = 1500) }``` , \n , 1500-0-0 ?x filter(?x = 1500) }``` , \n , 1500-0-0 ?x filter(?x = 1500) }``` , \n , 1500-0-0 ?x filter(?x = 1500) }``` , \n , 1500-0-0 ?x filter(?x = 1500) }``` , \n , 1500-0-0 ?x filter(?x = 1500) }``` , \n , 1500-0-0 ?x filter(?x = 1500) }``` , \n , 1500-0-0 ?x filter(?x = 1500) }``` , \n , 1500-0-0 ?x filter(?x = 1500) }``` , \n , 1500-0-0 ?x filter(?x = 1500) }``` , \n , 1500-0-0 ?x filter(?x = 1500) }``` , \n , 1500-0-0 ?x filter(?x = 1500) }``` , \n , 1500-0-0 ?x filter(?x = 1500) }``` , \n , 1500-0-0 ?x filter(?x = 1500) }``` , \n , 1500-0-0 ?x filter(?x = 1500) }``` , \n , 15"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"WordNet\": \"Q533822\"}, \"relationships\": {\"developer\": \"P178\"}}<|im_end|>\n<|im_start|>user\nWho developed WordNet?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q533822 wdt:P178 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P178 wd:Q533822 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P178 wd:Q533822 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n and \n are distributed by WordNet 's distributor 's founder and distributor and distributed by a company 's founder and distributor , \n , \n , \n , \n , \n , \n and \n are distributed by a company 's founder and distributor and distributed by a founder and distributor of WordNet 's distributor and producer 's founder and distributor }``` , \n , \n , \n , \n , \n , \n , \n and \n are distributed by a company 's founder and distributor and distributed by WordNet 's distributor and producer 's founder and distributor , \n , \n , \n , \n , \n and \n are distributed by a company 's founder and distributor and distributed by a founder and distributor of WordNet 's distributor and producer 's founder and distributor 's founder and distributor , \n , \n , \n , \n and \n are distributed by a company 's founder and distributor and distributed by a founder and distributor of WordNet 's distributor and producer 's founder and distributor 's founder and distributor , \n , \n , \n , \n and \n are distributed by a company 's founder and distributor and distributed by a company 's founder and distributor , \n , \n , \n , \n , \n and \n are distributed by a company 's founder and distributor and distributed by a company 's founder and distributor , \n , \n , \n , \n , \n and \n are distributed by a company 's founder and distributor and distributed by a company 's founder and distributor , \n , \n , \n , \n , \n and \n are distributed by a company 's founder and distributor and distributed by a company 's founder and distributor , \n , \n , \n , \n , \n and \n are distributed by a company 's founder and distributor and distributed by a company 's"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Portrait of a Lady on Fire\": \"Q63246568\", \"female\": \"Q6581072\"}, \"relationships\": {\"cast member\": \"P161\", \"gender\": \"P21\"}}<|im_end|>\n<|im_start|>user\nWho are the actresses in Portrait of a Lady on Fire?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q63246568 wdt:P161 ?result. ?result wdt:P21 wd:Q6581072}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q63246568 wdt:P161 ?answer . ?answer wdt:P21 wd:Q6581072}",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q63246568 wdt:P161 ?answer . ?answer wdt:P21 wd:Q6581072}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l9c\": \"Q106390933\"}, \"relationships\": {\"instance of\": \"P31\", \"label\": \"rdfs:label\"}} , FILTER\": \"CONTAINS\", \"lcase\": \"lcase\"}} , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n m.0f8l9c\": \"Q106390933\"}} , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Michael Jordan\": \"Q25369\", \"Kobe Bryant\": \"Q41421\"}, \"relationships\": {\"played for\": \"P54\"}}<|im_end|>\n<|im_start|>user\nDid Michael Jordan and Kobe Bryant play for the same team?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q25369 wdt:P54 ?team. wd:Q41421 wdt:P54 ?team.}",
        "generated_sparql": "ASK WHERE { wd:Q25369 wdt:P54 wd:Q41421 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql ASK WHERE { wd:Q25369 wdt:P54 wd:Q41421 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n  wd:Q25369 wdt:P54 wd:Q10837 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q25369 wdt:P54 wd:Q10837 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q25369 wdt:P54 wd:Q10837 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q25369 wdt:P54 wd:Q10837 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q25369 wdt:P54 wd:Q10837 }``` , \n , \n , \n , \n , \n , \n wd:Q25369 wdt:P54 wd:Q10837 }``` , \n , \n , \n , \n , \n , \n wd:Q25369 wdt:P54 wd:Q10837 }``` , \n , \n , \n , \n , \n wd:Q25369 wdt:P54 wd:Q10837 }``` , \n , \n , \n , \n , \n wd:Q25369 wdt:P54 wd:Q10837 }``` , \n , \n , \n , \n wd:Q25369 wdt"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Turing machine\": \"Q163310\"}, \"relationships\": {\"inventor\": \"P61\"}}<|im_end|>\n<|im_start|>user\nWho created the Turing machine?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q163310 wdt:P61 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P61 wd:Q163310 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P61 wd:Q163310 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l9c\": \"Q106506\"}, \"relationships\": {\"instance of\": \"P31\", \"label\": \"rdfs:label\"}} , FILTER\": \"CONTAINS\", \"lcase\": \"lcase\"}} , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Hambach Castle\": \"Q523286\"}, \"relationships\": {\"inception\": \"P571\"}}<|im_end|>\n<|im_start|>user\nWhen was the Hambach Castle built?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q523286 wdt:P571 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P571 wd:Q523286 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P571 wd:Q523286 }``` , \n , 1926-1948 reconstruction\": \"Q18310731\"}, \"relationships\": {\"number of victims\": \"P1345\"}} , \n , 1926-1948 reconstruction\": \"P837\"}} , \n , 1926-1948 reconstruction\": \"P1345\"}} , \n , 1926-1948 reconstruction\": \"P837\"}} , \n , 1926-1948 reconstruction\": \"P1345\"}} , \n , 1926-1948 reconstruction\": \"P837\"}} , \n , 1926-1948 reconstruction\": \"P1345\"}} , \n , 1926-1948 reconstruction\": \"P837\"}} , \n , 1926-1948 reconstruction\": \"P1345\"}} , \n , 1926-1948 reconstruction\": \"P837\"}} , \n , 1926-1948 reconstruction\": \"P1345\"}} , \n , 1926-1948 reconstruction\": \"P837\"}} , \n , 1926-1948 reconstruction\": \"P1345\"}} , \n , 1926-1948 reconstruction\": \"P837\"}} , \n , 1926-1948 reconstruction\": \"P1345\"}} , \n , 1926-1948 reconstruction\": \"P837\"}} , \n , 1926-1948 reconstruction\": \"P1345\"}} , \n , 1926-1948 reconstruction\": \"P837\"}} , \n , 1926-1948 reconstruction\": \"P1345\"}} , \n ,"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"human\": \"Q5\", \"North Pole\": \"Q934\"}, \"relationships\": {\"instance of\": \"P31\", \"place of death\": \"P20\"}}<|im_end|>\n<|im_start|>user\nWho died at the North Pole?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q5; wdt:P20 wd:Q934}",
        "generated_sparql": "select ?ent where { ?ent wdt:P31 wd:Q5 . ?ent wdt:P20 ?obj . ?ent wdt:P159 wd:Q934 } ORDER BY DESC(?obj)LIMIT 5",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql select ?ent where { ?ent wdt:P31 wd:Q5 . ?ent wdt:P20 ?obj . ?ent wdt:P159 wd:Q934 } ORDER BY DESC(?obj)LIMIT 5``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l9c\": \"Q106395029\"}, \"relationships\": {\"instance of\": \"P31\", \"label\": \"rdfs:label\"}} , FILTER\": \"CONTAINS\", \"lang\": \"lang\"}} , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Anne with an E\": \"Q28091065\"}, \"relationships\": {\"director\": \"P57\"}}<|im_end|>\n<|im_start|>user\nWho directed Anne with an E ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q28091065 wdt:P57 ?result.}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P57 wd:Q28091065 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P57 wd:Q28091065 }``` , \n`sparql SELECT ?answer WHERE { wd:Q28091065 wdt:P1040 ?X . ?X wdt:P57 ?answer}``` , \n \n`sparql SELECT ?answer WHERE { wd:Q28091065 wdt:P1040 ?X . ?X wdt:P57 ?answer}``` , \n \n`sparql SELECT ?answer WHERE { wd:Q28091065 wdt:P1040 ?X . ?X wdt:P57 ?answer}``` , \n`sparql SELECT ?answer WHERE { wd:Q28091065 wdt:P1040 ?X . ?X wdt:P57 ?answer}``` , \n`sparql SELECT ?answer WHERE { wd:Q28091065 wdt:P1040 ?X . ?X wdt:P57 ?answer}``` , \n`sparql SELECT ?answer WHERE { wd:Q28091065 wdt:P1040 ?X . ?X wdt:P57 ?answer}``` , \n`sparql SELECT ?answer WHERE { wd:Q28091065 wdt:P1040 ?X . ?X wdt:P57 ?answer}``` , \n```sparql SELECT ?answer WHERE { wd:Q28091065 wdt:P1040 ?X . ?X wdt:P57 ?answer}``` , \n`sparql SELECT ?answer WHERE { wd:Q28091065 wdt:P1040 ?X . ?X wdt:P57 ?answer}``` , \n`sparql SELECT ?answer WHERE { wd:Q28091065 wdt:P1040 ?"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Prototypical Networks for Few-shot Learning\": \"Q44649835\"}, \"relationships\": {\"author\": \"P50\", \"creator\": \"P2093\"}}<|im_end|>\n<|im_start|>user\nWho wrote \"Prototypical Networks for Few-shot Learning\"?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {{wd:Q44649835 wdt:P50 ?result.} UNION {wd:Q44649835 wdt:P2093 ?result}}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q44649835 wdt:P50 ?X . ?X wdt:P2093 ?answer}",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q44649835 wdt:P50 ?X . ?X wdt:P2093 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q44649835 wdt:P50 ?X . ?X wdt:P2093 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q44649835 wdt:P50 ?X }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q44649835 wdt:P50 ?X }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q44649835 wdt:P50 ?X }``` , \n , \n , \n , \n , \n , \n , \n wd:Q44649835 wdt:P50 ?X }``` , \n , \n , \n , \n , \n , \n wd:Q44649835 wdt:P50 ?X }``` , \n , \n , \n , \n , \n wd:Q44649835 wdt:P50 ?X }``` , \n , \n , \n , \n , \n wd:Q44649835 wdt:P50 ?X }``` , \n , \n , \n , \n wd:Q44649835 wdt:P50 ?X }``` , \n , \n , \n , \n wd:Q44649835 wdt:P50 ?"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"The Blue Rider\": \"Q117035\"}, \"relationships\": {\"founder\": \"P112\"}}<|im_end|>\n<|im_start|>user\nWho founded \u201cThe Blue Rider\u201d?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q117035 wdt:P112 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P112 wd:Q117035 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P112 wd:Q117035 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n , \n \n wd:Q117035 wdt:P112 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q117035 wdt:P112 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q117035 wdt:P112 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q117035 wdt:P112 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q117035 wdt:P112 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q117035 wdt:P112 ?x0 }``` , \n , \n , \n , \n , \n , \n wd:Q117035 wdt:P112 ?x0 }``` , \n , \n , \n , \n , \n wd:Q117035 wdt:P112 ?x0 }``` , \n , \n , \n , \n , \n wd:Q117035 wdt:P112 ?x0 }``` , \n , \n , \n , \n wd:Q117035 wdt:P112 ?x"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Worpswede artist colony\": \"Q479361\"}, \"relationships\": {\"founder\": \"P112\"}}<|im_end|>\n<|im_start|>user\nWho founded the Worpswede artist colony ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q479361 wdt:P112 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P112 wd:Q479361 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P112 wd:Q479361 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m\n \n \n \n \n \n m\n \n \n \n \n \n \n \n m\n \n \n \n \n \n \n \n m\n \n \n \n \n m\n \n \n \n m\n \n m\n \n m\n \n m\n \n m\n \n m\n \n m\n \n m\n \n m\n \n m\n \n m\n \n m\n \n m\n \n m\n \n m\n \n m\n \n m\n \n m\n \n m\n \n m\n \n m\n \n m\n \n m\n \n m\n \n m\n \n m\n \n m\n \n m\n m\n m\n m\n m\n m\n m\n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Convenience Store Woman\": \"Q27863945\"}, \"relationships\": {\"author\": \"P50\"}}<|im_end|>\n<|im_start|>user\nWho is the author of \u201cConvenience Store Woman\u201d ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q27863945 wdt:P50 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P50 wd:Q27863945 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P50 wd:Q27863945 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n md:Q10837 wdt:P161 ?x0 . wd:Q10837 wdt:P161 ?x1 . wd:Q10837 wdt:P161 wd:Q107602841 . wd:Q10837 wdt:P161 wd:Q107603019 . wd:Q10837 wdt:P161 wd:Q107603019 . wd:Q10837 wdt:P161 wd:Q107603019 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"soccer player\": \"?result\"}, \"relationships\": {\"occupation\": \"P106\", \"number of goals scored\": \"P6509\", \"soccer player profession\": \"Q937857\"}}<|im_end|>\n<|im_start|>user\nWho is the soccer player with the most goals in their career?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P106 wd:Q937857; wdt:P6509 ?goals} ORDER BY DESC(?goals) LIMIT 1",
        "generated_sparql": "select ?ent where { ?ent wdt:P31 wd:Q6979593 . ?ent wdt:P6509 ?obj . ?ent wdt:P106 wd:Q6979593 } ORDER BY DESC(?obj)LIMIT 5",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql select ?ent where { ?ent wdt:P31 wd:Q6979593 . ?ent wdt:P6509 ?obj . ?ent wdt:P106 wd:Q6979593 } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql ASK WHERE { ?obj wdt:P31 wd:Q937857 }``` , \n`sparql ASK WHERE { ?obj wdt:P31 wd:Q6979593 }``` , \n`sparql ASK WHERE { ?obj wdt:P31 wd:Q6979593 }``` , \n`sparql ASK WHERE { ?obj wdt:P31 wd:Q6979593 }``` , \n`sparql ASK WHERE { ?obj wdt:P31 wd:Q6979593 }``` , \n`sparql ASK WHERE { ?obj wdt:P31 wd:Q6979593 }``` , \n`sparql ASK WHERE { ?obj wdt:P31 wd:Q6979593 }``` , \n`sparql ASK WHERE { ?obj wdt:P31 wd:Q6979593 }``` , \n`sparql ASK WHERE { ?obj wdt:P31 wd:Q6979593 }``` , \n`sparql ASK WHERE { ?obj wdt:P31 wd:Q6979593 }``` , \n`sparql ASK WHERE { ?obj wdt:P31 wd:Q6979593 }``` , \n`sparql ASK WHERE { ?obj wdt:P31 wd:Q6979593 }``` , \n`sparql ASK WHERE { ?obj wdt:P31 wd:Q6979593 }``` , \n`spar"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Dinosaurs\": \"Q1211977\"}, \"relationships\": {\"creator\": \"P170\"}}<|im_end|>\n<|im_start|>user\nWho is the creator of the Dinosaurs tv show ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1211977 wdt:P170 ?result}",
        "generated_sparql": "select distinct ?answer where { wd:Q1211977 wdt:P170 ?answer}",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql select distinct ?answer where { wd:Q1211977 wdt:P170 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q1211977 wdt:P170 ?answer}``` , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n md:Q1054807 wdt:P161 ?x0 . wd:Q1054807 wdt:P161 wd:Q107602841 . wd:Q1054807 wdt:P161 wd:Q107603014 . wd:Q1054807 wdt:P161 wd:Q107603016 . wd:Q1054807 wdt:P161 wd:Q107603017 . wd:Q1054807 wdt:P161 wd:Q107603018 }``` , \n , \n , \n , \n ,"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"German Bundestag\": \"Q154797\"}, \"relationships\": {\"current president\": \"P488\"}}<|im_end|>\n<|im_start|>user\nWho is the current president of the German Bundestag currently?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q154797 wdt:P488 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P488 wd:Q154797 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P488 wd:Q154797 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n }```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P488 wd:Q154797 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"entrepreneur\": \"Q131524\"}, \"relationships\": {\"net worth\": \"P2218\", \"occupation\": \"P106\"}}<|im_end|>\n<|im_start|>user\nWho is the most wealthy entrepreneur?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P2218 ?net; wdt:P106 wd:Q131524} ORDER BY DESC(?net) LIMIT 1",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q131524 wdt:P2218 ?X . ?X wdt:P106 ?answer}",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q131524 wdt:P2218 ?X . ?X wdt:P106 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q131524 wdt:P106 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q131524 wdt:P106 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q131524 wdt:P106 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q131524 wdt:P106 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q131524 wdt:P106 ?answer}``` , \n , \n , \n , \n , \n wd:Q131524 wdt:P106 ?answer}``` , \n , \n , \n , \n wd:Q131524 wdt:P106 ?answer}``` , \n , \n , \n , \n wd:Q131524 wdt:P106 ?answer}``` , \n , \n , \n , \n wd:Q131524 wdt:P106 ?answer}``` , \n , \n , \n wd:Q131524 wdt:P106 ?answer}``` , \n , \n , \n wd:Q131524 wdt:P106 ?answer}``` , \n , \n , \n wd:Q131524 w"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Queer Eye\": \"Q48817408\"}, \"relationships\": {\"cast member\": \"P161\", \"date of birth\": \"P569\"}}<|im_end|>\n<|im_start|>user\nWho is the oldest cast member of the Netflix show \u201cQueer Eye\u201d ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q48817408 wdt:P161 ?result. ?result wdt:P569 ?time} ORDER BY ASC(?time) LIMIT 1",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q48817408 wdt:P161 ?X . ?X wdt:P569 ?answer}",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q48817408 wdt:P161 ?X . ?X wdt:P569 ?answer}``` , \n 's parent\": \"P40\", 'child\": \"P355\"}} , \n , \n , \n , \n , \n , \n , \n , \n , \n and \n wdt:P40|wdt:P355 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n ,"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Smite\": \"Q2357719\"}, \"relationships\": {\"publisher\": \"P123\"}}<|im_end|>\n<|im_start|>user\nWho is the publisher of Smite ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q2357719 wdt:P123 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P123 wd:Q2357719 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P123 wd:Q2357719 }``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n and \n are published by Smite 's publisher? , \n , \n , \n , \n , \n , and \n ?x0 wdt:P108 ?x1 . wd:Q2357719 wdt:P108 ?x1 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q2357719 wdt:P108 ?x1 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q2357719 wdt:P108 ?x1 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q2357719 wdt:P108 ?x1 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q2357719 wdt:P108 ?x1 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q2357719 wdt:P108 ?x1 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q2357719 wdt:P108 ?x1 }``` , \n , \n , \n , \n , \n , \n wd:Q2357719 wdt:P108 ?x1 }``` , \n ,"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Erlangen program\": \"Q315296\"}, \"relationships\": {\"author\": \"P800\"}}<|im_end|>\n<|im_start|>user\nWho wrote the Erlangen program?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P800 wd:Q315296}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P800 wd:Q315296 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P800 wd:Q315296 }``` , \n`sparql SELECT ?answer WHERE { wd:Q315296 wdt:P108 ?X . ?X wdt:P800 ?answer}``` , \n \n`sparql SELECT ?answer WHERE { wd:Q315296 wdt:P108 ?X . ?X wdt:P800 ?answer}``` , \n \n`sparql SELECT ?answer WHERE { wd:Q315296 wdt:P108 ?X . ?X wdt:P800 ?answer}``` , \n \n`sparql SELECT ?answer WHERE { wd:Q315296 wdt:P108 ?X . ?X wdt:P800 ?answer}``` , \n 's parent\": \"P40\", \"child\": \"P355\"}} , \n 's parent\": \"P3373\"}} 's sibling\": \"P3373\"}} 's parent 's parent 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's sibling 's"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Nanga Parbat\": \"Q130736\"}, \"relationships\": {\"country\": \"P17\"}}<|im_end|>\n<|im_start|>user\nIn which country is the Nanga Parbat located?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE { wd:Q130736 wdt:P17 ?result. }",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P17 wd:Q130736 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P17 wd:Q130736 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wdt:P17 wd:Q130736 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q130736 wdt:P17 wd:Q130736 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q130736 wdt:P17 wd:Q130736 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q130736 wdt:P17 wd:Q130736 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q130736 wdt:P17 wd:Q130736 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q130736 wdt:P17 wd:Q130736 }``` , \n , \n , \n , \n , \n , \n wd:Q130736 wdt:P17 wd:Q130736 }``` , \n , \n , \n , \n , \n , \n wd:Q130736 wdt:P17 wd:Q130736 }``` , \n , \n , \n , \n , \n wd:Q130736 wdt:"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Star Wars: Episode VI \u2013 Return of the Jedi\": \"Q181803\"}, \"relationships\": {\"producer\": \"P162\"}}<|im_end|>\n<|im_start|>user\nwho produced Star Wars: Episode VI \u2013 Return of the Jedi?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q181803 wdt:P162 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P162 wd:Q181803 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P162 wd:Q181803 }``` , \n , \n , \n , \n , \n , \n , \n , and \n produced by Star Wars: Episode VI \u2013 Return of the Jedi 's producer and executive producer and produced by a film 's executive producer and writer , \n , \n , \n , and \n , \n , \n and \n produced by a film 's executive producer and writer and produced by Star Wars: Episode VI \u2013 Return of the Jedi 's producer and executive producer , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Daniel Day Lewis\": \"Q166389\", \"Paul Dano\": \"Q343616\"}, \"relationships\": {\"actor\": \"P161\", \"instance of\": \"P31\", \"film\": \"Q11424\"}}<|im_end|>\n<|im_start|>user\nWho was an actor in more movies, Daniel Day Lewis or Paul Dano ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {{SELECT (COUNT (DISTINCT ?film) AS ?ddl) WHERE {?film wdt:P161 wd:Q166389; wdt:P31 wd:Q11424}} {SELECT (COUNT (DISTINCT ?film) AS ?pd) WHERE {?film wdt:P161 wd:Q343616; wdt:P31 wd:Q11424}} BIND(IF((?ddl > ?pd), wd:Q166389, wd:Q343616) AS ?result)}",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P161 wd:Q166389 . ?sbj wdt:P31 wd:Q343616 . ?sbj wdt:P31 wd:Q11424 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P161 wd:Q166389 . ?sbj wdt:P31 wd:Q343616 . ?sbj wdt:P31 wd:Q11424 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n and  wdt:P161 ?sbj . ?sbj wdt:P31 wd:Q343616 }``` , \n , \n , \n , \n , \n , \n , \n , \n and  wdt:P161 ?sbj . ?sbj wdt:P31 wd:Q11424 }``` , \n , \n , \n , \n , \n , \n , \n , \n and  wdt:P161 ?sbj . ?sbj wdt:P31 wd:Q343616 }``` , \n , \n , \n , \n , \n , \n , \n , \n and  wdt:P161 ?sbj . ?sbj wdt:P31 wd:Q11424 }``` , \n , \n , \n , \n , \n , \n , \n , \n and  wdt:P161 ?sbj }``` , \n , \n , \n , \n , \n , \n , \n , \n and  wdt:P161 ?sbj }``` , \n , \n , \n , \n , \n , \n , \n and  wdt:P161 ?sbj }``` , \n , \n , \n , \n , \n , \n , \n and  wdt:P161 ?sbj }``` , \n , \n , \n , \n , \n , \n , \n and  wdt:P161 ?sbj }``` , \n , \n , \n , \n , \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Simone de Beauvoir\": \"Q7197\"}, \"relationships\": {\"nominated for\": \"P1411\"}}<|im_end|>\n<|im_start|>user\nFor what literature prize was Simone de Beauvoir nominated?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q7197 wdt:P1411 ?result. ?result wdt:P31 wd:Q378427}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1411 wd:Q7197 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P1411 wd:Q7197 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Tiny Desk Concert\": \"Q30588383\"}, \"relationships\": {\"official website\": \"P856\"}}<|im_end|>\n<|im_start|>user\nWhat is the website of NPR's \u201cTiny Desk Concert\u201d?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q30588383 wdt:P856 ?result}",
        "generated_sparql": "select distinct ?answer where { wd:Q30588383 wdt:P856 ?answer}",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql select distinct ?answer where { wd:Q30588383 wdt:P856 ?answer}``` 's parent 's parent 's parent 's parent wd:Q30588383}``` 's parent 's parent 's parent wd:Q30588383 wdt:P40|wdt:P355 ?x0 . ?x0 wdt:P40|wdt:P355 ?x1 . ?x1 wdt:P40|wdt:P355 ?x2 . ?x2 wdt:P40|wdt:P355 ?x3 . ?x3 wdt:P40|wdt:P355 ?x4 . ?x4 wdt:P40|wdt:P355 ?x5 . ?x5 wdt:P40|wdt:P355 ?x6 . ?x6 wdt:P40|wdt:P355 ?x7 . ?x7 wdt:P40|wdt:P355 ?x8 . ?x8 wdt:P106 wd:Q36834 }``` 's parent 's parent 's parent wd:Q30588383 wdt:P40|wdt:P355 ?x0 }``` 's parent 's parent wd:Q30588383 wdt:P40|wdt:P355 ?x0 }``` 's parent wd:Q30588383 wdt:P40|wdt:P355 ?x0 }``` 's parent wd:Q30588383 wdt:P40|wdt:P355 ?x0 }``` 's parent wd:Q30588383 wdt:P40|wdt:P355 ?x0 }``` 's parent wd:Q30588383 wdt:P40|wdt:P355 ?x0 }``` 's parent w"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Boo-Boo Bear\": \"Q2394280\"}, \"relationships\": {\"creator\": \"P170\"}}<|im_end|>\n<|im_start|>user\nWho was the creator of Boo-Boo Bear ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q2394280 wdt:P170 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P170 wd:Q2394280 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P170 wd:Q2394280 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8f8l wdt:P1040 ?x0 . wd:Q2082586 wdt:P1040 ?x0 . wd:Q2082586 wdt:P1040 ?x0 . wd:Q2082586 wdt:P1040 ?x0 . wd:Q2082586 wdt:P1040 ?x0 . wd:Q2082586 wdt:P1040 ?x0 . wd:Q2082586 wdt:P1040 ?x0 . wd:Q2082586 wdt:P1040 ?x0 . wd:Q2082586 wdt:P1040 ?x0 . wd:Q2082586 wdt:P1040 ?x0 }``` , \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Unbreakable Kimmy Schmidt\": \"Q16889037\"}, \"relationships\": {\"creator\": \"P170\"}}<|im_end|>\n<|im_start|>user\nWho was the creator of Unbreakable Kimmy Schmidt ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q16889037 wdt:P170 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P170 wd:Q16889037 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P170 wd:Q16889037 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m\n \n \n \n \n \n \n \n m\n \n \n \n \n \n \n \n m\n \n \n \n \n m\n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Llamas with Hats\": \"Q55621114\"}, \"relationships\": {\"director\": \"P57\"}}<|im_end|>\n<|im_start|>user\nWho was the director of Llamas with Hats ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q55621114 wdt:P57 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P57 wd:Q55621114 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P57 wd:Q55621114 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n  }``` , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Roland Corporation\": \"Q848490\"}, \"relationships\": {\"founder\": \"P112\"}}<|im_end|>\n<|im_start|>user\nWho founded the Roland Corporation?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q848490 wdt:P112 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P112 wd:Q848490 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P112 wd:Q848490 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n , \n \n wd:Q848490 wdt:P112 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q848490 wdt:P112 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q848490 wdt:P112 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q848490 wdt:P112 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q848490 wdt:P112 ?x0 }``` , \n , \n , \n , \n , \n , \n wd:Q848490 wdt:P112 ?x0 }``` , \n , \n , \n , \n , \n wd:Q848490 wdt:P112 ?x0 }``` , \n , \n , \n , \n , \n wd:Q848490 wdt:P112 ?x0 }``` , \n , \n , \n , \n wd:Q848490 wdt:P112 ?x0 }``` , \n , \n , \n , \n wd:Q848490 wdt:P112 ?x0 }``` , \n , \n , \n , \n wd"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Pinhead\": \"Q2518973\"}, \"relationships\": {\"played by\": \"P175\"}}<|im_end|>\n<|im_start|>user\nWho was the original actor who played Pinhead ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q2518973 wdt:P175 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P175 wd:Q2518973 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P175 wd:Q2518973 }``` , \n`sparql SELECT (?obj WHERE { wd:Q107270 wdt:P175 ?obj . ?obj wdt:P31 wd:Q5 }``` , \n`sparql SELECT ?value WHERE { wd:Q107270 p:P453 ?s . ?s ps:P453 ?x filter(contains(?x,'5.0')) . ?s pq:P512 ?value}``` , \n \n`sparql SELECT ?value WHERE { wd:Q107270 p:P453 ?x filter(contains(?x,'5.0')) . ?s pq:P512 ?value}``` , \n 's pq:P155 wd:Q107270 }``` , \n 's pq:P155 wd:Q107270 }``` , \n 's pq:P155 wd:Q107270 }``` , \n 's pq:P155 wd:Q107270 }``` , \n 's pq:P155 wd:Q107270 }``` , \n 's pq:P155 wd:Q107270 }``` , \n 's pq:P155 wd:Q107270 }``` , \n 's pq:P155 wd:Q107270 }``` , \n 's pq:P155 wd:Q107270 }``` , \n 's pq:P155 wd:Q107270 }``` , \n 's pq:P155 wd:Q107270 }``` , \n 's pq:P155 wd:Q10727"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Socrates\": \"Q913\"}, \"relationships\": {\"mother\": \"P25\", \"father\": \"P22\"}}<|im_end|>\n<|im_start|>user\nWho were the parents of Socrates ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {{wd:Q913 wdt:P25 ?result} UNION {wd:Q913 wdt:P22 ?result}}",
        "generated_sparql": "SELECT ?ans_1 ?ans_2 WHERE { wd:Q913 wdt:P25 ?ans_1 . wd:Q913 wdt:P22 ?ans_2 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT ?ans_1 ?ans_2 WHERE { wd:Q913 wdt:P25 ?ans_1 . wd:Q913 wdt:P22 ?ans_2 }``` , \n 's parent\": \"P40\", 'child\": \"P355\"}} 's parent 's parent 's parent 's parent Socrates ? 's parent ? 's parent ? 's parent ?x0 . ?x0 wdt:P40|wdt:P355 ?x1 . ?x1 wdt:P40|wdt:P355 ?x2 . ?x2 wdt:P40|wdt:P355 ?x3 . ?x3 wdt:P40|wdt:P355 wd:Q913 }``` , \n 's parent 's parent 's parent ?x0 }``` , \n 's parent ?x0 }``` , \n 's parent ?x0 }``` , \n 's parent ?x0 }``` , \n 's parent ?x0 }``` , \n 's parent ?x0 }``` , \n 's parent ?x0 }``` , \n 's parent ?x0 }``` , \n 's parent ?x0 }``` , \n 's parent ?x0 }``` , \n 's parent ?x0 }``` , \n 's parent ?x0 }``` , \n 's parent ?x0 }``` , \n 's parent ?x0 }``` , \n 's parent ?x0 }``` , \n 's parent ?x0 }``` , \n 's parent ?x0 }``` , \n 's parent ?x0 }``` , \n 's parent ?x0 }``` , \n 's parent ?x0 }``` , \n 's parent ?x0 }``` , \n 's parent ?x0 }``` , \n 's parent ?x0 }``` , \n 's parent ?x0 }``` , \n 's parent ?x0 }``` , \n 's parent ?x"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Anne of Green Gables\": \"Q565911\"}, \"relationships\": {\"author\": \"P50\"}}<|im_end|>\n<|im_start|>user\nWho wrote Anne of Green Gables ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q565911 wdt:P50 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P50 wd:Q565911 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P50 wd:Q565911 }``` , \n`sparql SELECT ?answer WHERE { wd:Q565911 wdt:P170 ?X . ?X wdt:P50 ?answer}``` , \n \n`sparql SELECT ?answer WHERE { wd:Q565911 wdt:P170 ?X . ?X wdt:P50 ?answer}``` , \n`sparql SELECT ?answer WHERE { wd:Q565911 wdt:P170 ?X . ?X wdt:P50 ?answer}``` , \n`sparql SELECT ?answer WHERE { wd:Q565911 wdt:P170 ?X . ?X wdt:P50 ?answer}``` , \n`sparql SELECT ?answer WHERE { wd:Q565911 wdt:P170 ?X . ?X wdt:P50 ?answer}``` , \n`sparql SELECT ?answer WHERE { wd:Q565911 wdt:P170 ?X . ?X wdt:P50 ?answer}``` , \n`sparql SELECT ?answer WHERE { wd:Q565911 wdt:P170 ?X . ?X wdt:P50 ?answer}``` , \n`sparql SELECT ?answer WHERE { wd:Q565911 wdt:P170 ?X . ?X wdt:P50 ?answer}``` , \n`sparql SELECT ?answer WHERE { wd:Q565911 wdt:P170 ?X . ?X wdt:P50 ?answer}``` , \n`sparql SELECT ?answer WHERE { wd:Q565911 wdt:P170 ?X . ?X wdt:P50 ?answer}``` , \n`sparql SELECT ?answer WHERE { wd:Q5659"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Howl\": \"Q1545259\"}, \"relationships\": {\"author\": \"P50\"}}<|im_end|>\n<|im_start|>user\nWho wrote the poem Howl ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1545259 wdt:P50 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P50 wd:Q1545259 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P50 wd:Q1545259 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l9c\": \"Q106506\"}, \"relationships\": {\"instance of\": \"P31\", \"label\": \"rdfs:label\"}} , FILTER\": \"CONTAINS\", \"lcase\": \"lcase\"}} , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"The Hellbound Heart\": \"Q3521239\"}, \"relationships\": {\"author\": \"P50\"}}<|im_end|>\n<|im_start|>user\nWho's the author of The Hellbound Heart ?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q3521239 wdt:P50 ?result}",
        "generated_sparql": "select distinct ?answer where { wd:Q3521239 wdt:P50 ?answer}",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql select distinct ?answer where { wd:Q3521239 wdt:P50 ?answer}``` , \"relationships\": {\"author\": \"P50\"}} , \"time\": {\"point in time\": \"P580\"}} , \"instance of\": \"P31\"}} , \"relationships\": {\"author\": \"P50\"}} , \"time\": {\"point in time\": \"P580\"}} , \"relationships\": {\"instance of\": \"P31\", \"author\": \"P50\"}} , \"relationships\": {\"author\": \"P50\"}} , \"time\": \"P580\"}} , \"relationships\": {\"author\": \"P50\"}} , \"time\": \"P580\"}} , \"relationships\": {\"instance of\": \"P31\", \"author\": \"P50\"}} , \"relationships\": {\"author\": \"P50\"}} , \"time\": \"P580\"}} , \"relationships\": {\"author\": \"P50\"}} , \"relationships\": {\"instance of\": \"P31\", \"author\": \"P50\"}} , \"relationships\": {\"author\": \"P50\"}} , \"time\": \"P580\"}} , \"relationships\": {\"author\": \"P50\"}} , \"relationships\": {\"instance of\": \"P31\", \"author\": \"P50\"}} , \"relationships\": {\"author\": \"P50\"}} , \"time\": \"P580\"}} , \"relationships\": {\"author\": \"P50\"}} , \"relationships\": {\"instance of\": \"P31\", \"author\": \"P50\"}} , \"relationships\": {\"author\": \"P50\"}} , \"time\": \"P580\"}} , \"relationships\": {\"author\": \"P50\"}} , \"relationships\": {\"instance of\": \"P31\", \"author\": \"P50\"}} , \"relationships\": {\"author\": \"P50\"}} , \"time\": \"P580\"}} , \"relationships\": {\"author\": \"P50\"}} , \"relationships\":"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Clara Westhoff\": \"Q462333\"}, \"relationships\": {\"spouse\": \"P26\"}}<|im_end|>\n<|im_start|>user\nWhom did Clara Westhoff marry?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q462333 wdt:P26 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P26 wd:Q462333 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P26 wd:Q462333 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"film festival\": \"Q220505\"}, \"relationships\": {\"instance of\": \"P31\", \"inception\": \"P571\"}}<|im_end|>\n<|im_start|>user\nwhat is the oldest film festival?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q220505; wdt:P571 ?inc FILTER(isLiteral(?inc))} ORDER BY ASC(?inc) LIMIT 1",
        "generated_sparql": "select ?ent where { ?ent wdt:P31 wd:Q220505 . ?ent wdt:P571 ?obj } ORDER BY DESC(?obj)LIMIT 5",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql select ?ent where { ?ent wdt:P31 wd:Q220505 . ?ent wdt:P571 ?obj } ORDER BY DESC(?obj)LIMIT 5``` , \n`?obj)LIMIT 5``` , \n`?obj)LIMIT 5``` , \n`?obj wdt:P31 wd:Q220505 }``` , \n`?obj wdt:P31 wd:Q220505 }``` , \n`?obj wdt:P31 wd:Q220505 }``` , \n`?obj wdt:P31 wd:Q220505 }``` , \n`?obj wdt:P31 wd:Q220505 }``` , \n`?obj wdt:P31 wd:Q220505 }``` , \n`?obj wdt:P31 wd:Q220505 }``` , \n`?obj wdt:P31 wd:Q220505 }``` , \n`?obj wdt:P31 wd:Q220505 }``` , \n`?obj wdt:P31 wd:Q220505 }``` , \n`?obj wdt:P31 wd:Q220505 }``` , \n`?obj wdt:P31 wd:Q220505 }``` , \n`?obj wdt:P31 wd:Q220505 }``` , \n`?obj wdt:P31 wd:Q220505 }``` , \n`?obj wdt:P31 wd:Q220505 }``` , \n`?obj wdt:P31 wd:Q220505 }``` , \n`?obj wdt:P31 wd:Q220505 }``` , \n`?obj wdt"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Athens\": \"Q1524\"}, \"relationships\": {\"founding date\": \"P571\"}}<|im_end|>\n<|im_start|>user\nWhen was Athens founded?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1524 wdt:P571 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P571 wd:Q1524 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P571 wd:Q1524 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n , \n \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Seine\": \"Q1471\", \"Elbe\": \"Q1644\"}, \"relationships\": {\"length\": \"P2043\"}}<|im_end|>\n<|im_start|>user\nwhich river is longer, the Seine or Elbe\uff1f<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1471 wdt:P2043 ?ls. wd:Q1644 wdt:P2043 ?le. BIND(IF((?ls > ?le), wd:Q1471, wd:Q1644) AS ?result)}",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P2043 wd:Q1471 . ?sbj wdt:P31 wd:Q1644 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P2043 wd:Q1471 . ?sbj wdt:P31 wd:Q1644 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n and \n wdt:P31 wd:Q1471 }``` , \n , \n , \n , \n , \n , \n , \n wdt:P31 wd:Q1644 }``` , \n , \n , \n , \n , \n wdt:P31 wd:Q1471 }``` , \n , \n , \n , \n wdt:P31 wd:Q1644 }``` , \n , \n , \n wdt:P31 wd:Q1471 }``` , \n , \n , \n wdt:P31 wd:Q1644 }``` , \n , \n , \n wdt:P31 wd:Q1471 }``` , \n , \n , \n wdt:P31 wd:Q1644 }``` , \n , \n wdt:P31 wd:Q1471 }``` , \n , \n wdt:P31 wd:Q1644 }``` , \n , \n wdt:P31 wd:Q1471 }``` , \n , \n wdt:P31 wd:Q1644 }``` , \n , \n wdt:P31 wd:Q1471 }``` , \n , \n wdt:P31 wd:Q1644 }``` , \n , \n wdt:P31 wd:Q1471 }``` , \n , \n wdt:P31 wd:Q1644 }``` , \n , \n wdt:P31 wd:Q1471 }``` , \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Super Mario Bros\": \"Q11168\", \"Pac-Man\": \"Q173626\"}, \"relationships\": {\"release date\": \"P577\"}}<|im_end|>\n<|im_start|>user\nwhich game is created earlier, super mario bros or Pac-Man?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q11168 wdt:P577 ?cm. wd:Q173626 wdt:P577 ?cp. BIND(IF((?cm < ?cp), wd:Q11168, wd:Q173626) AS ?result)}",
        "generated_sparql": "SELECT ?obj WHERE { wd:Q11168 p:P178 ?s . ?s ps:P178 ?obj . ?s pq:P577 ?x filter(contains(YEAR(?x),'1987')) }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT ?obj WHERE { wd:Q11168 p:P178 ?s . ?s ps:P178 ?obj . ?s pq:P577 ?x filter(contains(YEAR(?x),'1987')) }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n and \n p:P178 ?obj }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"(G)I-DLE\": \"Q51885404\"}, \"relationships\": {\"member of\": \"P463\", \"date of birth\": \"P569\"}}<|im_end|>\n<|im_start|>user\nwho is the youngested member in g-idle?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P463 wd:Q51885404; wdt:P569 ?date} ORDER BY DESC(?date) LIMIT 1",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q51885404 wdt:P463 ?X . ?X wdt:P569 ?answer}",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q51885404 wdt:P463 ?X . ?X wdt:P569 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q51885404 wdt:P463 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q51885404 wdt:P463 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q51885404 wdt:P463 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q51885404 wdt:P463 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q51885404 wdt:P463 ?answer}``` , \n , \n , \n , \n , \n wd:Q51885404 wdt:P463 ?answer}``` , \n , \n , \n , \n wd:Q51885404 wdt:P463 ?answer}``` , \n , \n , \n wd:Q51885404 wdt:P463 ?answer }``` , \n , \n , \n , \n wd:Q51885404 wdt:P463 ?answer }``` , \n , \n , \n wd:Q51885404 wdt:P463 ?answer }``` , \n , \n , \n wd:Q5188540"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Lionel Messi\": \"Q615\", \"Cristiano Ronaldo\": \"Q11571\"}, \"relationships\": {\"date of birth\": \"P569\"}}<|im_end|>\n<|im_start|>user\nwho is older, Lionel Messi or Cristiano Ronaldo\uff1f<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q615 wdt:P569 ?number. wd:Q11571 wdt:P569 ?number2. BIND(IF(?number < ?number2, wd:Q615, wd:Q11571) AS ?result)}",
        "generated_sparql": "SELECT ?obj WHERE { wd:Q615 p:P569 ?s . ?s ps:P569 ?obj . ?s pq:P31 wd:Q5 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT ?obj WHERE { wd:Q615 p:P569 ?s . ?s ps:P569 ?obj . ?s pq:P31 wd:Q5 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l9c\": \"Q106390991\"}, \"relationships\": {\"instance of\": \"P31\", \"label\": \"rdfs:label\"}} , FILTER\": \"CONTAINS\", \"lowercase\": \"lcase\"}} , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Heidelberg University\": \"Q151510\", \"University of Hamburg\": \"Q156725\"}, \"relationships\": {\"founding date\": \"P571\"}}<|im_end|>\n<|im_start|>user\nIs heidelberg university or university hamburg founded earlier?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q151510 wdt:P571 ?number. wd:Q156725 wdt:P571 ?number2. BIND(IF(?number < ?number2, wd:Q151510, wd:Q156725) AS ?result)}",
        "generated_sparql": "SELECT ?obj WHERE { wd:Q151510 p:P112 ?s . ?s ps:P112 ?obj . ?s pq:P580 ?x filter(contains(YEAR(?x),'156725')) }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT ?obj WHERE { wd:Q151510 p:P112 ?s . ?s ps:P112 ?obj . ?s pq:P580 ?x filter(contains(YEAR(?x),'156725')) }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l9c\": \"Q106506\"}, \"relationships\": {\"wavelength\": \"P2808\"}} , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n m.0f8l9c wavelength\": \"P2808\"}} , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n m.0f8l9c wavelength\": \"P2808\"}} , \n , \n , \n , \n , \n ,"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Amazon Rainforest\": \"Q177567\", \"Congo Basin\": \"Q932289\"}, \"relationships\": {\"area\": \"P2046\"}}<|im_end|>\n<|im_start|>user\nwhich forest is bigger, Amazon Rainforest or Congo Basin?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q177567 wdt:P2046 ?aa. wd:Q932289 wdt:P2046 ?ac. BIND(IF((?aa > ?ac), wd:Q177567, wd:Q932289) AS ?result)}",
        "generated_sparql": "ASK WHERE { wd:Q177567 wdt:P2046 ?obj . ?obj wdt:P150 wd:Q932289 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql ASK WHERE { wd:Q177567 wdt:P2046 ?obj . ?obj wdt:P150 wd:Q932289 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q177567 wdt:P2046 ?obj }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q177567 wdt:P2046 ?obj }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q177567 wdt:P2046 ?obj }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q177567 wdt:P2046 ?obj }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q177567 wdt:P2046 ?obj }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q177567 wdt:P2046 ?obj }``` , \n , \n , \n , \n , \n , \n , \n wd:Q177567 wdt:P2046 ?obj }``` , \n , \n , \n , \n , \n , \n , \n wd:Q177567 wdt:P2046 ?obj }``` , \n , \n , \n , \n , \n , \n wd:Q177567 wdt:P2046 ?obj"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Samsung Electronics\": \"Q20718\", \"Apple\": \"Q312\"}, \"relationships\": {\"number of employees\": \"P1128\"}}<|im_end|>\n<|im_start|>user\nDoes Samsung Electronics or Apple have more employees?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q20718 wdt:P1128 ?se. wd:Q312 wdt:P1128 ?ae. BIND(IF((?se > ?ae), wd:Q20718, wd:Q312) AS ?result)}",
        "generated_sparql": "ASK WHERE { wd:Q20718 wdt:P1128 ?x0 . wd:Q20718 wdt:P1128 wd:Q312 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql ASK WHERE { wd:Q20718 wdt:P1128 ?x0 . wd:Q20718 wdt:P1128 wd:Q312 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Samsung\": \"Q20716\", \"Sony\": \"Q41187\"}, \"relationships\": {\"founding date\": \"P571\"}}<|im_end|>\n<|im_start|>user\nwhich company is founded later, samsung or sony?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q20716 wdt:P571 ?sa. wd:Q41187 wdt:P571 ?so. BIND(IF((?sa > ?so), wd:Q20716, wd:Q41187) AS ?result)}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q20716 wdt:P31 ?answer . ?answer wdt:P112 wd:Q41187}",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q20716 wdt:P31 ?answer . ?answer wdt:P112 wd:Q41187}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q20716 wdt:P112 wd:Q41187 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q20716 wdt:P112 wd:Q41187 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q20716 wdt:P112 wd:Q41187 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q20716 wdt:P112 wd:Q41187 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q20716 wdt:P112 wd:Q41187 }``` , \n , \n , \n , \n , \n , \n wd:Q20716 wdt:P112 wd:Q41187 }``` , \n , \n , \n , \n , \n wd:Q20716 wdt:P112 wd:Q41187 }``` , \n , \n , \n , \n , \n wd:Q20716 wdt:P112 wd:Q41187 }``` , \n , \n , \n , \n wd:Q20716 wdt:P112 wd:Q41187 }``` , \n , \n ,"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Lionel Messi\": \"Q615\", \"Cristiano Ronaldo\": \"Q11571\"}, \"relationships\": {\"height\": \"P2048\"}}<|im_end|>\n<|im_start|>user\nwho is taller, Lionel Messi or Cristiano Ronaldo\uff1f<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q615 wdt:P2048 ?number. wd:Q11571 wdt:P2048 ?number2. BIND(IF(?number > ?number2, wd:Q615, wd:Q11571) AS ?result)}",
        "generated_sparql": "ASK WHERE { wd:Q615 wdt:P2048 wd:Q11571 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql ASK WHERE { wd:Q615 wdt:P2048 wd:Q11571 }``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q11571 wdt:P2048 wd:Q615 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q11571 wdt:P2048 wd:Q615 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q11571 wdt:P2048 wd:Q615 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q11571 wdt:P2048 wd:Q615 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q11571 wdt:P2048 wd:Q615 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q11571 wdt:P2048 wd:Q615 }``` , \n , \n , \n , \n , \n , \n wd:Q11571 wdt:P2048 wd:Q615 }``` , \n , \n , \n , \n , \n , \n wd:Q11571 wdt:P2048 wd:Q615 }``` , \n , \n , \n , \n , \n wd:Q11571 wdt:P2048 wd:Q615 }``"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Michael Jordan\": \"Q41421\", \"Kobe Bryant\": \"Q25369\"}, \"relationships\": {\"award winner\": \"P166\"}}<|im_end|>\n<|im_start|>user\nwho has won more NBA awards, Michael Jordan or Kobe Bean Bryant\uff1f<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {{SELECT (COUNT (DISTINCT ?number) AS ?mj) WHERE {wd:Q41421 p:P166/ps:P166 ?number.}} {SELECT (COUNT (DISTINCT ?number2) AS ?kb) WHERE {wd:Q25369 p:P166/ps:P166 ?number2.}}  BIND(IF(?mj > ?kb, wd:Q41421, wd:Q25369) AS ?result)}",
        "generated_sparql": "SELECT ?obj WHERE { wd:Q41421 p:P166 ?s . ?s ps:P166 ?obj . ?s pq:P1706 wd:Q25369 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT ?obj WHERE { wd:Q41421 p:P166 ?s . ?s ps:P166 ?obj . ?s pq:P1706 wd:Q25369 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l9c\": \"Q106390991\"}, \"relationships\": {\"instance of\": \"P31\", \"label\": \"rdfs:label\"}} , FILTER\": \"CONTAINS\", \"lang\": \"lang\"}} , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Michael Jordan\": \"Q41421\", \"Kobe Bryant\": \"Q25369\"}, \"relationships\": {\"weight\": \"P2067\"}}<|im_end|>\n<|im_start|>user\nDid Michael Jordan ever weigh more than Kobe Bean Bryant\uff1f<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q41421 p:P2067/psn:P2067/wikibase:quantityAmount ?mj. wd:Q25369 p:P2067/psn:P2067/wikibase:quantityAmount ?kb. BIND(IF(?mj > ?kb, wd:Q41421, wd:Q25369) AS ?result)}",
        "generated_sparql": "ASK WHERE { wd:Q41421 wdt:P2067 wd:Q25369 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql ASK WHERE { wd:Q41421 wdt:P2067 wd:Q25369 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n  wd:Q6305766 wdt:P2067 wd:Q25369 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q6305766 wdt:P2067 wd:Q10837 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q6305766 wdt:P2067 wd:Q10837 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q6305766 wdt:P2067 wd:Q10837 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q6305766 wdt:P2067 wd:Q10837 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q6305766 wdt:P2067 wd:Q10837 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q6305766 wdt:P2067 wd:Q10837 }``` , \n , \n , \n , \n , \n , \n wd:Q6305766 wdt:P2067 wd:Q10"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Sebastian Vettel\": \"Q42311\", \"Lewis Hamilton\": \"Q9673\"}, \"relationships\": {\"date of birth\": \"P569\"}}<|im_end|>\n<|im_start|>user\nWho is older, Sebastian Vettel or Lewis Hamilton?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q42311 wdt:P569 ?bv. wd:Q9673 wdt:P569 ?bh. BIND(IF(?bv < ?bh, wd:Q42311, wd:Q9673) AS ?result)}",
        "generated_sparql": "SELECT ?obj WHERE { wd:Q42311 p:P569 ?s . ?s ps:P569 ?obj . ?s pq:P31 wd:Q5 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT ?obj WHERE { wd:Q42311 p:P569 ?s . ?s ps:P569 ?obj . ?s pq:P31 wd:Q5 }``` , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l9c\": \"Q106390133\"}, \"relationships\": {\"instance of\": \"P31\", \"label\": \"rdfs:label\"}} , FILTER\": \"CONTAINS\", \"lang\": \"lang\"}} , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Copenhagen\": \"Q1748\", \"Amsterdam\": \"Q727\"}, \"relationships\": {\"population\": \"P1082\"}}<|im_end|>\n<|im_start|>user\nwhich city is more populated, copenhagen or amsterdam?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1748 wdt:P1082 ?popc. wd:Q727 wdt:P1082 ?popa. BIND(IF((?popc > ?popa), wd:Q1748, wd:Q727) AS ?result)}",
        "generated_sparql": "SELECT ?obj WHERE { wd:Q1748 p:P1082 ?s . ?s ps:P1082 ?obj . ?s pq:P1539 wd:Q727 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT ?obj WHERE { wd:Q1748 p:P1082 ?s . ?s ps:P1082 ?obj . ?s pq:P1539 wd:Q727 }``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"One Piece\": \"Q673\"}, \"relationships\": {\"has part\": \"P527\"}}<|im_end|>\n<|im_start|>user\nHow many things are part of the \"One Piece\" Franchise?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?part) AS ?result) WHERE {wd:Q673 wdt:P527 ?part}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P527 wd:Q673 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P527 wd:Q673 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n ,"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"fictional female swordfighter\": \"Q11397897\", \"human\": \"Q95074\", \"female\": \"Q6581072\"}, \"relationships\": {\"instance of\": \"P31\", \"subclass of\": \"P279\", \"occupation\": \"P106\", \"gender\": \"P21\"}}<|im_end|>\n<|im_start|>user\nHow many fictional female swordfighters are there?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?sf) AS ?result) WHERE {?sf wdt:P31/wdt:P279* wd:Q95074; wdt:P106 wd:Q11397897; wdt:P21 wd:Q6581072}",
        "generated_sparql": "select distinct ?sbj where { ?sbj wdt:P31 wd:Q95074 . ?sbj wdt:P279 wd:Q11397897 . ?sbj wdt:P106 wd:Q11424 . ?sbj wdt:P21 wd:Q6581072 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql select distinct ?sbj where { ?sbj wdt:P31 wd:Q95074 . ?sbj wdt:P279 wd:Q11397897 . ?sbj wdt:P106 wd:Q11424 . ?sbj wdt:P21 wd:Q6581072 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l9c\": \"Q106390633\"}, \"relationships\": {\"instance of\": \"P31\", \"label\": \"rdfs:label\"}} , FILTER\": \"CONTAINS\", \"lcase\": \"lcase\"}} , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n m.0f8l9c\": \"Q106390633\"}} , \n , \n , \n , \n , \n , "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Black Diamond Equipment\": \"Q2905359\", \"La Sportiva\": \"Q3821214\"}, \"relationships\": {\"founding date\": \"P571\"}}<|im_end|>\n<|im_start|>user\nwhich company started earlier, Black Diamond Equipment or la sportiva?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q2905359 wdt:P571 ?incbd. wd:Q3821214 wdt:P571 ?incls. BIND(IF((?incbd < ?incls), wd:Q2905359, wd:Q3821214) AS ?result)}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q2905359 wdt:P112 ?answer . ?answer wdt:P31 wd:Q4830453}",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q2905359 wdt:P112 ?answer . ?answer wdt:P31 wd:Q4830453}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n , \n \n wd:Q3821214 wdt:P112 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q3821214 wdt:P112 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q3821214 wdt:P112 ?x0 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q3821214 wdt:P112 ?x0 }``` , \n , \n , \n , \n , \n , \n wd:Q3821214 wdt:P112 ?x0 }``` , \n , \n , \n , \n , \n wd:Q3821214 wdt:P112 ?x0 }``` , \n , \n , \n , \n , \n wd:Q3821214 wdt:P112 ?x0 }``` , \n , \n , \n , \n wd:Q3821214 wdt:P112 ?x0 }``` , \n , \n , \n , \n wd:Q3821214 wdt:P112 ?x0 }``` , \n , \n , \n , \n wd:Q3821214 wdt:P112 ?x0 }``` , \n , \n , \n wd:Q382121"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Sahara Desert\": \"Q6583\", \"Arabian Desert\": \"Q208299\"}, \"relationships\": {\"area\": \"P2046\"}}<|im_end|>\n<|im_start|>user\nwhich desert is bigger, sahara desert or arabian desert?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q6583 wdt:P2046 ?as. wd:Q208299 wdt:P2046 ?aa. BIND(IF((?as > ?aa), wd:Q6583, wd:Q208299) AS ?result)}",
        "generated_sparql": "ASK WHERE { wd:Q6583 wdt:P2046 wd:Q208299 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql ASK WHERE { wd:Q6583 wdt:P2046 wd:Q208299 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n wd:Q6583 wdt:P2046 wd:Q208299 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q6583 wdt:P2046 wd:Q208299 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q6583 wdt:P2046 wd:Q208299 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q6583 wdt:P2046 wd:Q208299 }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q6583 wdt:P2046 wd:Q208299 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q6583 wdt:P2046 wd:Q208299 }``` , \n , \n , \n , \n , \n , \n wd:Q6583 wdt:P2046 wd:Q208299 }``` , \n , \n , \n , \n , \n , \n wd:Q6583 wdt:P2046 wd:Q208299 }``` , \n , \n , \n , \n , \n wd:Q6583 w"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Series Black\": \"Q713701\", \"Bellatrix Lestrange\": \"Q1057918\"}, \"relationships\": {\"date of death\": \"P570\"}}<|im_end|>\n<|im_start|>user\nwho lives longer, series black or bellatrix Lestrange?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q713701 wdt:P570 ?ds. wd:Q1057918 wdt:P570 ?db. BIND(IF((?ds > ?db), wd:Q713701, wd:Q1057918) AS ?result)}",
        "generated_sparql": "select ?ent where { ?ent wdt:P31 wd:Q713701 . ?ent wdt:P570 ?obj . ?ent wdt:P31 wd:Q1057918 } ORDER BY DESC(?obj)LIMIT 5",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql select ?ent where { ?ent wdt:P31 wd:Q713701 . ?ent wdt:P570 ?obj . ?ent wdt:P31 wd:Q1057918 } ORDER BY DESC(?obj)LIMIT 5``` , \n`sparql SELECT ?obj WHERE { wd:Q713701 p:P570 ?s . ?s ps:P570 ?obj . ?s pq:P31 wd:Q1057918 }``` , \n`sparql SELECT ?obj WHERE { wd:Q713701 p:P570 ?s . ?s ps:P570 ?obj . ?s pq:P31 wd:Q1057918 }``` , \n`sparql SELECT ?obj WHERE { wd:Q713701 p:P570 ?s . ?s ps:P570 ?obj . ?s pq:P31 wd:Q1057918 }``` , \n`sparql SELECT ?obj WHERE { wd:Q713701 p:P570 ?s . ?s ps:P570 ?obj . ?s pq:P31 wd:Q1057918 }``` , \n`sparql SELECT ?obj WHERE { wd:Q713701 p:P570 ?s . ?s ps:P570 ?obj . ?s pq:P31 wd:Q1057918 }``` , \n`sparql SELECT ?obj WHERE { wd:Q713701 p:P570 ?s . ?s ps:P570 ?obj . ?s pq:P31 wd:Q1057918 }``` , \n`sparql SELECT ?obj WHERE { wd:Q713701 p:P570 ?s . ?s ps:P570 ?obj . ?s pq"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Great Lakes\": \"Q7347\"}, \"relationships\": {\"area\": \"P2046\"}}<|im_end|>\n<|im_start|>user\nWhat is the area of the great lakes?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q7347 wdt:P2046 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P2046 wd:Q7347 }",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P2046 wd:Q7347 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n  }``` , \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Japan\": \"Q17\"}, \"relationships\": {\"composer\": \"P85\", \"lyricist\": \"P86\", \"native name\": \"P1559\"}}<|im_end|>\n<|im_start|>user\nWhat is native name of the composer of the Japanese national anthem?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q17 wdt:P85/wdt:P86/wdt:P1559 ?result}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q17 wdt:P85 ?X . ?X wdt:P86 ?answer . ?X wdt:P1559 ?x FILTER(contains(?x,'Japan'))}",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q17 wdt:P85 ?X . ?X wdt:P86 ?answer . ?X wdt:P1559 ?x FILTER(contains(?x,'Japan'))}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q17 wdt:P103 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q17 wdt:P103 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q17 wdt:P103 ?answer}``` , \n , \n , \n , \n , \n , \n , \n wd:Q17 wdt:P103 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q17 wdt:P103 ?answer}``` , \n , \n , \n , \n , \n wd:Q17 wdt:P103 ?answer}``` , \n , \n , \n , \n wd:Q17 wdt:P103 ?answer}``` , \n , \n , \n , \n wd:Q17 wdt:P103 ?answer}``` , \n , \n , \n wd:Q17 wdt:P103 ?answer}``` , \n , \n , \n wd:Q17 wdt:P103 ?answer}``` , \n , \n , \n wd:Q17 wdt:P103 ?answer}``` , \n , \n , \n wd:Q17 wdt:P103 ?answer}``` , \n , \n wd:Q17 wdt:P1"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Vietnam\": \"Q881\"}, \"relationships\": {\"capital\": \"P36\", \"founder\": \"P112\"}}<|im_end|>\n<|im_start|>user\nWho is the founder of the capital of Vietnam?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q881 wdt:P36/wdt:P112 ?result}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q881 wdt:P36 ?X . ?X wdt:P112 ?answer}",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q881 wdt:P36 ?X . ?X wdt:P112 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q881 wdt:P112 ?X . ?X wdt:P31 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q881 wdt:P112 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q881 wdt:P112 ?answer}``` , \n , \n , \n , \n , \n , \n , \n wd:Q881 wdt:P112 ?answer}``` , \n , \n , \n , \n , \n wd:Q881 wdt:P112 ?answer}``` , \n , \n , \n , \n wd:Q881 wdt:P112 ?answer }``` , \n , \n , \n , \n wd:Q881 wdt:P112 ?answer }``` , \n , \n , \n wd:Q881 wdt:P112 ?answer }``` , \n , \n , \n wd:Q881 wdt:P112 ?answer }``` , \n , \n , \n wd:Q881 wdt:P112 ?answer }``` , \n , \n , \n wd:Q881 wdt:P112 ?answer }``` , \n , \n , \n wd:Q881 wdt:P112 ?answer }``` , \n , \n wd:Q881 wdt:P112 ?answer }``` , \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Neumayer III\": \"Q7933\"}, \"relationships\": {\"operator\": \"P137\", \"manager\": \"P1037\"}}<|im_end|>\n<|im_start|>user\nWho is the manager of the operator of Neumayer III?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q7933 wdt:P137/wdt:P1037 ?result}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q7933 wdt:P137 ?X . ?X wdt:P1037 ?answer}",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q7933 wdt:P137 ?X . ?X wdt:P1037 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q7933 wdt:P137 ?X . ?X wdt:P1037 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q7933 wdt:P137 ?X }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q7933 wdt:P137 ?X }``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q7933 wdt:P137 ?X }``` , \n , \n , \n , \n , \n , \n wd:Q7933 wdt:P137 ?X }``` , \n , \n , \n , \n , \n wd:Q7933 wdt:P137 ?X }``` , \n , \n , \n , \n wd:Q7933 wdt:P137 ?X }``` , \n , \n , \n , \n wd:Q7933 wdt:P137 ?X }``` , \n , \n , \n wd:Q7933 wdt:P137 ?X }``` , \n , \n , \n wd:Q7933 wdt:P137 ?X }``` , \n , \n , \n wd:Q7933 wdt:P137 ?X }``` , \n , \n wd:Q7933 wdt:P"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"G\u00fcnther Messner\": \"Q195351\"}, \"relationships\": {\"place of death\": \"P20\", \"elevation above sea level\": \"P2044\"}}<|im_end|>\n<|im_start|>user\nHow high is the mountain on which G\u00fcnther Messner died?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q195351 wdt:P20/wdt:P2044 ?result}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q195351 wdt:P20 ?X . ?X wdt:P2044 ?answer}",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q195351 wdt:P20 ?X . ?X wdt:P2044 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q195351 wdt:P20 ?X . ?X wdt:P2044 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q195351 wdt:P20 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q195351 wdt:P20 ?answer}``` , \n , \n , \n , \n , \n , \n , \n wd:Q195351 wdt:P20 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q195351 wdt:P20 ?answer}``` , \n , \n , \n , \n , \n wd:Q195351 wdt:P20 ?answer}``` , \n , \n , \n , \n wd:Q195351 wdt:P20 ?answer}``` , \n , \n , \n , \n wd:Q195351 wdt:P20 ?answer}``` , \n , \n , \n wd:Q195351 wdt:P20 ?answer}``` , \n , \n , \n wd:Q195351 wdt:P20 ?answer}``` , \n , \n , \n wd:Q195351 wdt:P20 ?answer}``` , \n , \n wd:Q195351 wdt:P20"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Running Wild\": \"Q163173\"}, \"relationships\": {\"Twitter username\": \"P740\"}}<|im_end|>\n<|im_start|>user\nWhat is the twitter name of Running Wild?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q163173 wdt:P740 ?result}",
        "generated_sparql": "select distinct ?answer where { wd:Q163173 wdt:P740 ?answer}",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql select distinct ?answer where { wd:Q163173 wdt:P740 ?answer}``` , \"Twitter\": \"Q866\"}, \"relationships\": {\"has quality\": \"P1056\"}} , \"relationships\": {\"has quality\": \"P1056\"}} , \"relationships\": {\"has quality\": \"P1056\"}} , \"relationships\": {\"has quality\": \"P1056\"}} , \"relationships\": {\"has quality\": \"P1056\"}} , \"relationships\": {\"has quality\": \"P1056\"}} , \"relationships\": {\"has quality\": \"P1056\"}} , \"relationships\": {\"has quality\": \"P1056\"}} , \"relationships\": {\"has quality\": \"P1056\"}} , \"relationships\": {\"has quality\": \"P1056\"}} , \"relationships\": {\"has quality\": \"P1056\"}} , \"relationships\": {\"has quality\": \"P1056\"}} , \"relationships\": {\"has quality\": \"P1056\"}} , \"relationships\": {\"has quality\": \"P1056\"}} , \"relationships\": {\"has quality\": \"P1056\"}} , \"relationships\": {\"has quality\": \"P1056\"}} , \"relationships\": {\"has quality\": \"P1056\"}} , \"relationships\": {\"has quality\": \"P1056\"}} , \"relationships\": {\"has quality\": \"P1056\"}} , \"relationships\": {\"has quality\": \"P1056\"}} , \"relationships\": {\"has quality\": \"P1056\"}} , \"relationships\": {\"has quality\": \"P1056\"}} , \"relationships\": {\"has quality\": \"P1056\"}} , \"relationships\": {\"has quality\": \"P1056\"}} , \"relationships\": {\"has quality\": \"P1056\"}} , \"relationships\": {\"has quality\": \"P1056\"}} , \""
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Italian national soccer team\": \"Q676899\", \"FIFA World Cup\": \"Q19317\"}, \"relationships\": {\"winner\": \"P2522\", \"champion\": \"P3450\"}}<|im_end|>\n<|im_start|>user\nHow many times did the Italian national soccer team win the Fifa World Cup?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?win) AS ?result) WHERE {wd:Q676899 wdt:P2522 ?win. ?win wdt:P3450 wd:Q19317}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q676899 wdt:P2522 ?answer . ?answer wdt:P3450 wd:Q19317}",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q676899 wdt:P2522 ?answer . ?answer wdt:P3450 wd:Q19317}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q676899 wdt:P1344 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q676899 wdt:P1344 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q676899 wdt:P1344 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q676899 wdt:P1344 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q676899 wdt:P1344 ?answer}``` , \n , \n , \n , \n , \n wd:Q676899 wdt:P1344 ?answer}``` , \n , \n , \n , \n wd:Q676899 wdt:P1344 ?answer}``` , \n , \n , \n , \n wd:Q676899 wdt:P1344 ?answer}``` , \n , \n , \n wd:Q676899 wdt:P1344 ?answer}``` , \n , \n , \n wd:Q676899 wdt:P1344 ?answer}``` , \n , \n , \n wd:Q676899 wdt:P1344 ?answer}``` ,"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Spitsbergen\": \"Q25231\"}, \"relationships\": {\"capital\": \"P36\", \"area\": \"P2046\"}}<|im_end|>\n<|im_start|>user\nWhat is the area of the capital of Spitsbergen?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q25231 wdt:P36/wdt:P2046 ?result}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q25231 wdt:P36 ?X . ?X wdt:P2046 ?answer}",
        "question": "What is the area of the capital of Spitsbergen?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q25231 wdt:P36 ?X . ?X wdt:P2046 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q25231 wdt:P1376 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q25231 wdt:P1376 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q25231 wdt:P1376 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q25231 wdt:P1376 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q25231 wdt:P1376 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q25231 wdt:P1376 ?answer}``` , \n , \n , \n , \n , \n wd:Q25231 wdt:P1376 ?answer}``` , \n , \n , \n , \n wd:Q25231 wdt:P1376 ?answer}``` , \n , \n , \n , \n wd:Q25231 wdt:P1376 ?answer}``` , \n , \n , \n wd:Q25231 wdt:P1376 ?answer}``` , \n ,"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Andorra\": \"Q228\"}, \"relationships\": {\"percentage of area covered with water\": \"P2927\"}}<|im_end|>\n<|im_start|>user\nWhat percentage of Andorra is covered with water?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q228 wdt:P2927 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P2927 wd:Q228 }",
        "question": "What is the Fujiyama made of?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P2927 wd:Q228 }``` , \n \n , \n \n , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Lake Constance\": \"Q4127\", \"Europe\": \"Q46\"}, \"relationships\": {\"country\": \"P17\", \"continent\": \"P30\"}}<|im_end|>\n<|im_start|>user\nHow many countries are located around the euorpean Lake Constance?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?country) AS ?result) WHERE {wd:Q4127 wdt:P17 ?country. ?country wdt:P30 wd:Q46}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q4127 wdt:P17 ?answer . ?answer wdt:P30 wd:Q46}",
        "question": "What is the Fujiyama made of?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q4127 wdt:P17 ?answer . ?answer wdt:P30 wd:Q46}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q4127 wdt:P17 ?answer . ?answer wdt:P30 wd:Q46}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q4127 wdt:P17 ?answer . ?answer wdt:P30 wd:Q46}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q4127 wdt:P17 ?answer . ?answer wdt:P30 wd:Q46}``` , \n , \n , \n , \n , \n , \n , \n wd:Q4127 wdt:P17 ?answer . ?answer wdt:P30 wd:Q46}``` , \n , \n , \n , \n , \n , \n wd:Q4127 wdt:P17 ?answer . ?answer wdt:P30 wd:Q46}``` , \n , \n , \n , \n , \n wd:Q4127 wdt:P17 ?answer . ?answer wdt:P30 wd:Q46}``` , \n , \n , \n , \n wd:Q4127 wdt:P17 ?answer . ?answer wdt:P30 wd:Q46}``` , \n , \n , \n , \n wd:Q4127 wdt:P17 ?answer . ?answer wdt:P30 wd:Q46}``` , \n , \n , \n wd:Q4127 wdt:P17 ?answer . ?"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Richard Burton\": \"Q151973\"}, \"relationships\": {\"spouse\": \"P26\"}}<|im_end|>\n<|im_start|>user\nWith how many persons was Richard Burton married?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?sp) AS ?result) WHERE {wd:Q151973 wdt:P26 ?sp.}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P26 wd:Q151973 }",
        "question": "What is the Fujiyama made of?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P26 wd:Q151973 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , "
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Sender Teutoburger Wald\": \"Q1717891\"}, \"relationships\": {\"coordinate location\": \"P625\"}}<|im_end|>\n<|im_start|>user\nAt what coordinates was the \"Sender Teutoburger Wald\" erected?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1717891 wdt:P625 ?result.}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q1717891 wdt:P625 ?answer . ?answer wdt:P625 ?x FILTER(contains(?x,'48.0 -113.0'))}",
        "question": "What is the Fujiyama made of?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q1717891 wdt:P625 ?answer . ?answer wdt:P625 ?x FILTER(contains(?x,'48.0 -113.0'))}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q1717891 wdt:P625 ?x FILTER(contains(?x,'48.0 -113.0'))}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q1717891 wdt:P625 ?x FILTER(contains(?x,'48.0 -113.0'))}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q1717891 wdt:P625 ?x FILTER(contains(?x,'48.0 -113.0'))}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q1717891 wdt:P625 ?x FILTER(contains(?x,'48.0 -113.0'))}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q1717891 wdt:P625 ?x FILTER(contains(?x,'48.0 -113.0'))}``` , \n , \n , \n , \n , \n , \n , \n , \n wd:Q1717891 wdt:P625"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Alexander Pope\": \"Q923\"}, \"relationships\": {\"place of burial\": \"P119\", \"occupation\": \"P106\", \"language of work or name\": \"P407\", \"given name\": \"P735\", \"family name\": \"P734\"}}<|im_end|>\n<|im_start|>user\nWhere is the poet Alexander Pope buried?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?poet wdt:P735 wd:Q923; wdt:P734 wd:Q15840785; wdt:P106 wd:Q49757; wdt:P119 ?result}",
        "generated_sparql": "SELECT ?ans_1 ?ans_2 WHERE { wd:Q923 wdt:P119 ?ans_1 . wd:Q923 wdt:P106 ?ans_2 . wd:Q923 wdt:P407 ?ans_3 . wd:Q923 wdt:P735 ?ans_4 . wd:Q923 wdt:P734 ?ans_2 }",
        "question": "What is the Fujiyama made of?",
        "full_generated_text": "\n```sparql SELECT ?ans_1 ?ans_2 WHERE { wd:Q923 wdt:P119 ?ans_1 . wd:Q923 wdt:P106 ?ans_2 . wd:Q923 wdt:P407 ?ans_3 . wd:Q923 wdt:P735 ?ans_4 . wd:Q923 wdt:P734 ?ans_2 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n , \n \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n m.0f8l9c wdt:P112 ?x0 . ?x0 wdt:P108 wd:Q1065 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n \n \n ?x0 wdt:P108 wd:Q10"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Kandahar-downhill\": \"Q327818\"}, \"relationships\": {\"country\": \"P17\"}}<|im_end|>\n<|im_start|>user\nIn what country is the Kandahar-downhill?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q327818 wdt:P17 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P17 wd:Q327818 }",
        "question": "What is the Fujiyama made of?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P17 wd:Q327818 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n  wdt:P17 wd:Q327818 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wdt:P17 wd:Q327818 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wdt:P17 wd:Q327818 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wdt:P17 wd:Q327818 }``` , \n , \n , \n , \n , \n , \n , \n , \n wdt:P17 wd:Q327818 }``` , \n , \n , \n , \n , \n , \n , \n , \n wdt:P17 wd:Q327818 }``` , \n , \n , \n , \n , \n , \n , \n wdt:P17 wd:Q327818 }``` , \n , \n , \n , \n , \n , \n wdt:P17 wd:Q327818 }``` , \n , \n , \n , \n , \n , \n wdt:P17 wd:Q327818 }``` , \n , \n , \n , \n , \n wdt:P17 wd:Q327818 }``` , \n , \n , \n , \n , \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Elbphilharmonie\": \"Q673223\"}, \"relationships\": {\"architect\": \"P84\", \"founder\": \"P112\"}}<|im_end|>\n<|im_start|>user\nWho founded the architectural firm who planned the Elbphilharmonie?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q673223 wdt:P84/wdt:P112 ?result}",
        "generated_sparql": "SELECT ?answer WHERE { wd:Q673223 wdt:P84 ?X . ?X wdt:P112 ?answer}",
        "question": "What is the Fujiyama made of?",
        "full_generated_text": "\n```sparql SELECT ?answer WHERE { wd:Q673223 wdt:P84 ?X . ?X wdt:P112 ?answer}``` , \n \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n wd:Q673223 wdt:P112 ?X . ?X wdt:P84 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q673223 wdt:P84 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q673223 wdt:P84 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q673223 wdt:P84 ?answer}``` , \n , \n , \n , \n , \n wd:Q673223 wdt:P84 ?answer}``` , \n , \n , \n , \n wd:Q673223 wdt:P84 ?answer}``` , \n , \n , \n wd:Q673223 wdt:P84 ?answer}``` , \n , \n , \n wd:Q673223 wdt:P84 ?answer}``` , \n , \n , \n wd:Q673223 wdt:P84 ?answer}``` , \n , \n wd:Q673223 wdt:P84 ?answer}``` , \n , \n wd:Q673223 wdt:P84 ?answer}``` , \n , \n wd:Q673223 wdt:P84 ?answer}``` , \n , \n wd:Q673223 wdt:P84"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Metallica\": \"Q15920\"}, \"relationships\": {\"founder\": \"P112\", \"place of birth\": \"P19\", \"country\": \"P17\"}}<|im_end|>\n<|im_start|>user\nWhere are the founders of the band Metallica from?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q15920 wdt:P112/wdt:P19/wdt:P17 ?result}",
        "generated_sparql": "SELECT ?ans_1 ?ans_2 WHERE { wd:Q15920 wdt:P112 ?ans_1 . wd:Q15920 wdt:P19 ?ans_2 }",
        "question": "What is the Fujiyama made of?",
        "full_generated_text": "\n```sparql SELECT ?ans_1 ?ans_2 WHERE { wd:Q15920 wdt:P112 ?ans_1 . wd:Q15920 wdt:P19 ?ans_2 }``` , \n , \n , \n , \n , \n , \n , \n , \n , and \n wd:Q15920 wdt:P17 ?ans_1 . wd:Q15920 wdt:P17 ?ans_2 }``` , \n , \n , \n , \n , \n , \n , \n wd:Q15920 wdt:P17 ?ans_1 . wd:Q15920 wdt:P17 ?ans_2 }``` , \n , \n , \n , \n , \n , \n wd:Q15920 wdt:P17 ?ans_1 . wd:Q15920 wdt:P17 ?ans_2 }``` , \n , \n , \n , \n , \n wd:Q15920 wdt:P17 ?ans_1 . wd:Q15920 wdt:P17 ?ans_2 }``` , \n , \n , \n , \n wd:Q15920 wdt:P17 ?ans_1 . wd:Q15920 wdt:P17 ?ans_2 }``` , \n , \n , \n , \n wd:Q15920 wdt:P17 ?ans_1 . wd:Q15920 wdt:P17 ?ans_2 }``` , \n , \n , \n wd:Q15920 wdt:P17 ?ans_1 . wd:Q15920 wdt:P17 ?ans_2 }``` , \n , \n , \n wd:Q15920 wdt:P17 ?ans_1 . wd:Q15920 wdt:P1"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Granny Smith apple\": \"Q506040\"}, \"relationships\": {\"country of origin\": \"P495\"}}<|im_end|>\n<|im_start|>user\nWhere does the Granny Smith apple variety come from?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q506040 wdt:P495 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P495 wd:Q506040 }",
        "question": "What is the Fujiyama made of?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P495 wd:Q506040 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n }```sparql SELECT ?answer WHERE { wd:Q506040 wdt:P1672 ?X . ?X wdt:P495 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q506040 wdt:P1672 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q506040 wdt:P1672 ?answer}``` , \n , \n , \n , \n , \n , \n , \n , \n , \n wd:Q506040 wdt:P1672 ?answer}``` , \n , \n , \n , \n , \n , \n , \n wd:Q506040 wdt:P1672 ?answer}``` , \n , \n , \n , \n , \n , \n wd:Q506040 wdt:P1672 ?answer}``` , \n , \n , \n , \n , \n wd:Q506040 wdt:P1672 ?answer}``` , \n , \n , \n , \n , \n wd:Q506040 wdt:P1672 ?answer}``` , \n , \n , \n , \n wd:Q506040 wdt:P1672 ?answer}``` , \n , \n , \n"
    },
    {
        "question_prompt": "<|im_start|>system\nYou are an expert text to SparQL query translator. Users will ask you questions in English and you will generate a SparQL query based on the provided context encloses in ```sparql <respose_query>```.\nCONTEXT:\n{\"entities\": {\"Fujiyama\": \"Q39231\"}, \"relationships\": {\"material\": \"P186\"}}<|im_end|>\n<|im_start|>user\nWhat is the Fujiyama made of?<|im_end|>\n<|im_start|>assistant\n",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q39231 wdt:P186 ?result}",
        "generated_sparql": "SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P186 wd:Q39231 }",
        "question": "What is the Fujiyama made of?",
        "full_generated_text": "\n```sparql SELECT (COUNT(?sub) AS ?value ) { ?sub wdt:P186 wd:Q39231 }``` , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n , \n \n , \n \n , \n \n , \n \n , \n \n \n , \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "
    }
]
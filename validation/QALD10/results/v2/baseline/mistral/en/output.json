[
    {
        "question": "After whom is the Riemannian geometry named?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE { wd:Q761383 wdt:P138 ?result. }",
        "generated_sparql": "SELECT ?subject\r\nWHERE {\r\n  ?subject wdt:P138 ?object.\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'After whom is the Riemannian geometry named?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Riemannian geometry\": \"Q761383\"}, \"relationships\": {\"named after\": \"P138\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?subject\r\nWHERE {\r\n  ?subject wdt:P138 ?object.\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n}\r\nWHERE {\r\n  ?subject wdt:P138 ?object.\r\n  ?object wd:Q761383.\r\n}\r\n```"
    },
    {
        "question": "Which animal participated in a military operation with the Australian Defence Force?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q16521. ?mop wdt:P31 wd:Q645883; wdt:P710 ?result, wd:Q625657.}",
        "generated_sparql": "SELECT ?animal WHERE {\n  ?animal wdt:P31 wd:Q16521.\n  ?animal wdt:P710 wd:Q645883.\n  ?animal wdt:P710 wd:Q625657.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Which animal participated in a military operation with the Australian Defence Force?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"animal\": \"Q16521\", \"military operation\": \"Q645883\", \"Australian Defence Force\": \"Q625657\"}, \"relationships\": {\"instance of\": \"P31\", \"part of\": \"P710\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?animal WHERE {\n  ?animal wdt:P31 wd:Q16521.\n  ?animal wdt:P710 wd:Q645883.\n  ?animal wdt:P710 wd:Q625657.\n}\n```"
    },
    {
        "question": "among the characters in the witcher, who has two unmarried partners, Yennefer of Vengerberg and Triss Merigold?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q11835640 wdt:P674 ?result. ?result wdt:P451 ?p1, ?p2. FILTER(?p1 != ?p2 &&(?result IN (wd:Q4205826, wd:Q4463198)))}",
        "generated_sparql": "SELECT ?s\r\nWHERE {\r\n  ?s wdt:P451 ?o1 .\r\n  ?s wdt:P451 ?o2 .\r\n  ?o1 wdt:P451 ?o2 .\r\n  ?s wdt:P674 ?o1 .\r\n  ?s wdt:P674 ?o2 .\r\n  ?o1 wdt:P674 ?o2 .\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'among the characters in the witcher, who has two unmarried partners, Yennefer of Vengerberg and Triss Merigold?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Geralt of Rivia\": \"Q11835640\", \"Yennefer of Vengerberg\": \"Q4205826\", \"Triss Merigold\": \"Q4463198\"}, \"relationships\": {\"portrayed by\": \"P674\", \"spouse\": \"P451\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s\r\nWHERE {\r\n  ?s wdt:P451 ?o1 .\r\n  ?s wdt:P451 ?o2 .\r\n  ?o1 wdt:P451 ?o2 .\r\n  ?s wdt:P674 ?o1 .\r\n  ?s wdt:P674 ?o2 .\r\n  ?o1 wdt:P674 ?o2 .\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n}\r\nORDER BY ?s\r\n```"
    },
    {
        "question": "among the founders of tencent company, who has been member of national people\u2019s congress?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q860580 wdt:P112 ?result. ?result wdt:P39 wd:Q10891456.}",
        "generated_sparql": "SELECT ?founder\r\nWHERE {\r\n  ?founder wdt:P112 wd:Q860580 . # Founder of Tencent\r\n  ?founder wdt:P39 wd:Q10891456 . # Member of National People's Congress\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'among the founders of tencent company, who has been member of national people\u2019s congress?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Tencent\": \"Q860580\", \"National People's Congress\": \"Q10891456\"}, \"relationships\": {\"founder\": \"P112\", \"member of\": \"P39\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?founder\r\nWHERE {\r\n  ?founder wdt:P112 wd:Q860580 . # Founder of Tencent\r\n  ?founder wdt:P39 wd:Q10891456 . # Member of National People's Congress\r\n}\r\n```"
    },
    {
        "question": "among the other representative work of the author of hunter x hunter, which one is talking about middle school student?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q696071 wdt:P50 ?author. ?author wdt:P800 ?result. ?result wdt:P921 wd:Q16003532 FILTER(?result != wd:Q69071)}",
        "generated_sparql": "SELECT ?work\r\nWHERE {\r\n  ?author wdt:P50 ?author. \r\n  ?author wdt:P800 ?work. \r\n  ?work wdt:P921 ?middle_school_student. \r\n  ?middle_school_student wdt:P31 ?student. \r\n  ?student wdt:P367 ?school. \r\n  ?school wdt:P31 ?school_type. \r\n  FILTER(?school_type wdt:P31 ?middle_school_type)\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'among the other representative work of the author of hunter x hunter, which one is talking about middle school student?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Hunter \u00d7 Hunter\": \"Q696071\", \"middle school student\": \"Q16003532\"}, \"relationships\": {\"author\": \"P50\", \"notable work\": \"P800\", \"main character\": \"P921\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?work\r\nWHERE {\r\n  ?author wdt:P50 ?author. \r\n  ?author wdt:P800 ?work. \r\n  ?work wdt:P921 ?middle_school_student. \r\n  ?middle_school_student wdt:P31 ?student. \r\n  ?student wdt:P367 ?school. \r\n  ?school wdt:P31 ?school_type. \r\n  FILTER(?school_type wdt:P31 ?middle_school_type)\r\n}\r\n```"
    },
    {
        "question": "On which stock exchanges are Siemens AG shares traded?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q81230 wdt:P414 ?result}",
        "generated_sparql": "SELECT ?s WHERE {\r\n  ?s wdt:P414 wd:Q81230. # Siemens AG shares are traded on ?s\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'On which stock exchanges are Siemens AG shares traded?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Siemens AG\": \"Q81230\"}, \"relationships\": {\"stock exchange\": \"P414\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s WHERE {\r\n  ?s wdt:P414 wd:Q81230. # Siemens AG shares are traded on ?s\r\n}\r\n```"
    },
    {
        "question": "Apart from the book series the witcher, name all of the author\u2019s notable work.",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q11835640 wdt:P50 ?author. ?author wdt:P800 ?result. FILTER(?result != wd:Q11835640)}",
        "generated_sparql": "SELECT ?author ?notableWork\r\nWHERE {\r\n  ?author wdt:P50 ?bookSeries. # author\r\n  ?bookSeries wdt:P800 ?notableWork. # notable work\r\n  FILTER(NOT(?bookSeries = \"Q11835640\")) # exclude witcher book series\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Apart from the book series the witcher, name all of the author\u2019s notable work.' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"The Witcher\": \"Q11835640\"}, \"relationships\": {\"author\": \"P50\", \"notable work\": \"P800\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?author ?notableWork\r\nWHERE {\r\n  ?author wdt:P50 ?bookSeries. # author\r\n  ?bookSeries wdt:P800 ?notableWork. # notable work\r\n  FILTER(NOT(?bookSeries = \"Q11835640\")) # exclude witcher book series\r\n}\r\n```"
    },
    {
        "question": "are brooke raboutou and colin duffy from same state of the usa?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q2926117 wdt:P19 ?b1. wd:Q87192979 wdt:P19 ?b2. ?b1 wdt:P131* ?state. ?b2 wdt:P131* ?state. ?state wdt:P31 wd:Q35657 .}",
        "generated_sparql": "SELECT ?x ?y\r\nWHERE {\r\n  ?x wdt:P19 wd:Q35657;\r\n  ?x wdt:P131 wd:Q87192979;\r\n  ?y wdt:P19 wd:Q35657;\r\n  ?y wdt:P131 wd:Q2926117;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'are brooke raboutou and colin duffy from same state of the usa?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Brooke Raboutou\": \"Q2926117\", \"Colin Duffy\": \"Q87192979\", \"United States of America\": \"Q35657\"}, \"relationships\": {\"place of birth\": \"P19\", \"located in the administrative territorial entity\": \"P131\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x ?y\r\nWHERE {\r\n  ?x wdt:P19 wd:Q35657;\r\n  ?x wdt:P131 wd:Q87192979;\r\n  ?y wdt:P19 wd:Q35657;\r\n  ?y wdt:P131 wd:Q2926117;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(CONTAINS(str(?x), \"Brooke Raboutou\") && CONTAINS(str(?y), \"Colin Duffy\"))\r\n}\r\nORDER BY ?x ?y\r\n```"
    },
    {
        "question": "What is the boiling point of water?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q283 wdt:P2102 ?result}",
        "generated_sparql": "SELECT ?boilingPoint WHERE {\n  ?water wdt:P2102 ?boilingPoint .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What is the boiling point of water?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"water\": \"Q283\"}, \"relationships\": {\"boiling point\": \"P2102\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?boilingPoint WHERE {\n  ?water wdt:P2102 ?boilingPoint .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  WHERE {\n    ?water wikidata:Q283 .\n  }\n}\n```"
    },
    {
        "question": "At which school was Yayoi Kusama educated at?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result {wd:Q231121 wdt:P69 ?result}",
        "generated_sparql": "SELECT ?school\r\nWHERE {\r\n  ?person ?educatedAt ?school\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'At which school was Yayoi Kusama educated at?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Yayoi Kusama\": \"Q231121\"}, \"relationships\": {\"educated at\": \"P69\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?school\r\nWHERE {\r\n  ?person ?educatedAt ?school\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  WHERE {\r\n    ?person wikidata:Q231121\r\n    ?school wikidata:P69\r\n  }\r\n}\r\n```"
    },
    {
        "question": "Which High School did Allen Ginsberg attend?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result {wd:Q6711 wdt:P69 ?result. ?result wdt:P31 wd:Q9826}",
        "generated_sparql": "SELECT ?highSchool\r\nWHERE {\r\n  ?person <P69> ?highSchool\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Which High School did Allen Ginsberg attend?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Allen Ginsberg\": \"Q6711\", \"high school\": \"Q9826\"}, \"relationships\": {\"alma mater\": \"P69\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?highSchool\r\nWHERE {\r\n  ?person <P69> ?highSchool\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(CONTAINS(?person, \"Q6711\") && CONTAINS(?highSchool, \"Q9826\"))\r\n}\r\n```"
    },
    {
        "question": "On which island is the Indonesian capital located?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result {wd:Q252 wdt:P36 ?capital. ?capital wdt:P706 ?result. ?result wdt:P31 wd:Q23442}",
        "generated_sparql": "SELECT ?island WHERE {\n  ?island wdt:P706 ?capital.\n  ?capital wdt:P31 \"Q252\".\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'On which island is the Indonesian capital located?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Indonesia\": \"Q252\", \"Java\": \"Q23442\"}, \"relationships\": {\"capital\": \"P36\", \"located on island\": \"P706\", \"instance of\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?island WHERE {\n  ?island wdt:P706 ?capital.\n  ?capital wdt:P31 \"Q252\".\n}\n```"
    },
    {
        "question": "can i play don't starve on play station 4?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASk {wd:Q3208174 wdt:P400 wd:Q5014725.}",
        "generated_sparql": "SELECT ?x WHERE {\n  ?x wdt:P400 wd:Q5014725.\n  ?x wdt:P400 wd:Q3208174.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'can i play don't starve on play station 4?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Don't Starve\": \"Q3208174\", \"PlayStation 4\": \"Q5014725\"}, \"relationships\": {\"platform\": \"P400\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?x WHERE {\n  ?x wdt:P400 wd:Q5014725.\n  ?x wdt:P400 wd:Q3208174.\n}\n```"
    },
    {
        "question": "How many General Secretaries of the CPSU were there before Leonid Brezhnev?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT (COUNT(?gensec) as ?result) WHERE{wd:Q765165 p:P39 ?pos. ?pos ps:P39 wd:Q1048744; pq:P580 ?st. ?gensec p:P39 ?pos2. ?pos2 ps:P39 wd:Q1048744; pq:P580 ?st2. FILTER(?st2 < ?st)}",
        "generated_sparql": "",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many General Secretaries of the CPSU were there before Leonid Brezhnev?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"General Secretary of the CPSU\": \"Q1048744\", \"Leonid Brezhnev\": \"Q765165\"}, \"relationships\": {\"held position\": \"P39\", \"start time\": \"P580\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?g) WHERE {\r\n  ?g wdt:P39 wd:Q1048744;\r\n  ?g wdt:P580 ?t;\r\n  FILTER(?t < \"1982-03-01\" ^ \"1982-03-02\" ^ \"1982-03-03\" ^ \"1982-03-04\" ^ \"1982-03-05\" ^ \"1982-03-06\" ^ \"1982-03-07\" ^ \"1982-03-08\" ^ \"1982-03-09\" ^ \"1982-03-10\" ^ \"1982-03-11\" ^ \"1982-03-12\" ^ \"1982-03-13\" ^ \"1982-03-14\" ^ \"1982-03-15\" ^ \"1982-03-16\" ^ \"1982-03-17\" ^ \"1982-03-18\" ^ \"1982-03-19\" ^ \"1982-03-20\" ^ \"1982-03-21\" ^ \"1982-03-22\" ^ \"1982-03-23\" ^ \"1982-03-24\" ^ \"1982-03-25\" ^ \"1982-03-26\" ^ \"1982-03-27\" ^ \"1982-03-28\" ^ \"1982-03-29\" ^ \"1982-03-30\" ^ \"1982-03-31\" ^ \"1982-04-01\" ^ \"1982-04-02\" ^ \"1982-04-03\" ^ \"1982-"
    },
    {
        "question": "How many different presidents of Russia have there been that took the position after 1990?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?president) AS ?result) WHERE{?president p:P39 ?pos. ?pos ps:P39 wd:Q218295. ?pos pq:P580 ?start. FILTER((YEAR(?start)> 1990))}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?president) WHERE {\r\n  ?president wdt:P39 wd:Q218295;\r\n  ?president wdt:P580 ?startTime;\r\n  FILTER(?startTime >= \"1990-01-01T00:00:00Z\" && ?startTime < \"2022-01-01T00:00:00Z\")\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many different presidents of Russia have there been that took the position after 1990?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"President of Russia\": \"Q218295\"}, \"relationships\": {\"holds position\": \"P39\", \"start time\": \"P580\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?president) WHERE {\r\n  ?president wdt:P39 wd:Q218295;\r\n  ?president wdt:P580 ?startTime;\r\n  FILTER(?startTime >= \"1990-01-01T00:00:00Z\" && ?startTime < \"2022-01-01T00:00:00Z\")\r\n}\r\n```"
    },
    {
        "question": "Did adam ondra win a medal in the 2020 summer olympics?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK{wd:Q350568 p:P1344 ?event. ?event ps:P1344 ?eventStatement. ?eventStatement wdt:P361* wd:Q181278. ?event pq:P1352 ?ranking. FILTER(?ranking <= 3)}",
        "generated_sparql": "SELECT ?s WHERE {\n  ?s wdt:P1344 wd:Q350568.\n  ?s wdt:P1352 ?o.\n  FILTER(?o = \"Q181278\")\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Did adam ondra win a medal in the 2020 summer olympics?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Adam Ondra\": \"Q350568\", \"2020 Summer Olympics\": \"Q181278\"}, \"relationships\": {\"participant\": \"P1344\", \"medal ranking\": \"P1352\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?s WHERE {\n  ?s wdt:P1344 wd:Q350568.\n  ?s wdt:P1352 ?o.\n  FILTER(?o = \"Q181278\")\n}\n```"
    },
    {
        "question": "Did the Chicago Bulls win at least two seasons of the NBA championship?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK{{SELECT (COUNT (?season) AS ?count) WHERE {?season wdt:P3450 wd:Q155223. ?season wdt:P1346 wd:Q128109}} FILTER(?count >= 2)}",
        "generated_sparql": "",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Did the Chicago Bulls win at least two seasons of the NBA championship?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Chicago Bulls\": \"Q155223\", \"NBA championship\": \"Q128109\"}, \"relationships\": {\"participant of\": \"P1346\", \"winner\": \"P1346\", \"season of\": \"P3450\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) > 0 AS has_won_at_least_two_seasons\nWHERE {\n  ?team wd:P1346 ?championship.\n  ?championship wd:P3450 ?year.\n  ?year wd:P1346 ?championship.\n  ?team wd:P1346 ?championship.\n  ?championship wd:P3450 ?year.\n  ?year wd:P1346 ?championship.\n  ?team wd:P1346 ?championship.\n  ?championship wd:P3450 ?year.\n  ?year wd:P1346 ?championship.\n  ?championship wd:P3450 ?year.\n  ?team wd:P1346 ?championship.\n  ?championship wd:P3450 ?year.\n  ?year wd:P1346 ?championship.\n  ?championship wd:P3450 ?year.\n  ?team wd:P1346 ?championship.\n  ?championship wd:P3450 ?year.\n  ?year wd:P1346 ?championship.\n  ?championship wd:P3450 ?year.\n  ?team wd:P1346 ?championship.\n  ?championship wd:P3450 ?year.\n  ?year wd:P1346 ?championship.\n  ?championship wd:P3450 ?year.\n  ?team wd:P1346 ?championship.\n  ?championship wd:P3450 ?year.\n  ?year wd:P1346 ?championship.\n  ?championship wd:P3450 ?year.\n  ?team wd:P1346 ?championship.\n  ?championship wd:P3450 ?year.\n  ?year wd:P1346 ?championship.\n  ?championship wd:P3450 ?year.\n"
    },
    {
        "question": "Did Haruki Murakami receive the Nobel Prize in Literature?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q37922 wdt:P1346 wd:Q134798}",
        "generated_sparql": "SELECT ?s WHERE {\n  ?s wdt:P1346 ?o.\n  ?o wdt:P31 wd:Q134798.\n  ?o wdt:P31 wd:Q37922.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Did Haruki Murakami receive the Nobel Prize in Literature?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Haruki Murakami\": \"Q37922\", \"Nobel Prize in Literature\": \"Q134798\"}, \"relationships\": {\"recipient of\": \"P1346\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?s WHERE {\n  ?s wdt:P1346 ?o.\n  ?o wdt:P31 wd:Q134798.\n  ?o wdt:P31 wd:Q37922.\n}\n```"
    },
    {
        "question": "Did Kobe Bryant leave the Lakers when LeBron James joined that team?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK{wd:Q25369 p:P54 ?teamStatement. ?teamStatement ps:P54 wd:Q121783; pq:P582 ?leave. wd:Q36159 p:P54 ?teamStatement2. ?teamStatement2 ps:P54 wd:Q121783; pq:P580 ?join. FILTER(?leave = ?join)}",
        "generated_sparql": "SELECT ?s ?p ?o WHERE {\n  ?s wdt:P54 wd:Q121783.\n  ?s wdt:P582 wd:Q25369.\n  ?s wdt:P580 wd:Q36159.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Did Kobe Bryant leave the Lakers when LeBron James joined that team?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Kobe Bryant\": \"Q25369\", \"Los Angeles Lakers\": \"Q121783\", \"LeBron James\": \"Q36159\"}, \"relationships\": {\"team\": \"P54\", \"left\": \"P582\", \"joined\": \"P580\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?s ?p ?o WHERE {\n  ?s wdt:P54 wd:Q121783.\n  ?s wdt:P582 wd:Q25369.\n  ?s wdt:P580 wd:Q36159.\n}\n```"
    },
    {
        "question": "Did Rawson Marshall Thurber, the director of Red Notice also direct Titanic?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q58815001 wdt:P57 ?director. wd:Q44578 wdt:P57 ?director. FILTER(wd:Q2745616 = ?director)}",
        "generated_sparql": "SELECT ?s WHERE {\r\n  ?s wdt:P57 wd:Q2745616 .\r\n  ?s wdt:P57 wd:Q58815001 .\r\n  ?s wdt:P57 wd:Q44578 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Did Rawson Marshall Thurber, the director of Red Notice also direct Titanic?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Rawson Marshall Thurber\": \"Q2745616\", \"Red Notice\": \"Q58815001\", \"Titanic\": \"Q44578\"}, \"relationships\": {\"director\": \"P57\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s WHERE {\r\n  ?s wdt:P57 wd:Q2745616 .\r\n  ?s wdt:P57 wd:Q58815001 .\r\n  ?s wdt:P57 wd:Q44578 .\r\n}\r\n```"
    },
    {
        "question": "Did Venice at any point belong to the Austrian Empire?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q641 p:P17/ps:P17 wd:Q131964}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P17 wd:Q131964;\r\n  wd:Q641 wdt:P17 ?x;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Did Venice at any point belong to the Austrian Empire?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Venice\": \"Q641\", \"Austrian Empire\": \"Q131964\"}, \"relationships\": {\"country\": \"P17\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P17 wd:Q131964;\r\n  wd:Q641 wdt:P17 ?x;\r\n}\r\n```"
    },
    {
        "question": "Were at least two of the founders of tencent educated at the same university?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q860580 wdt:P112 ?founder. ?founder wdt:P69 ?uni. wd:Q860580 wdt:P112 ?founder2. ?founder2 wdt:P69 ?uni. FILTER(?founder != ?founder2)}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?x) ?count\r\nWHERE {\r\n  ?x wdt:P112 wd:Q860580 .\r\n  ?x wdt:P69 ?u .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Were at least two of the founders of tencent educated at the same university?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Tencent\": \"Q860580\"}, \"relationships\": {\"founder\": \"P112\", \"educated at\": \"P69\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?x) ?count\r\nWHERE {\r\n  ?x wdt:P112 wd:Q860580 .\r\n  ?x wdt:P69 ?u .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(CONTAINS(?x, \"Tencent\") && CONTAINS(?u, \"Tencent\"))\r\n  GROUP BY ?x\r\n  HAVING COUNT(*) >= 2\r\n}\r\n```"
    },
    {
        "question": "Do all of batman\u2019s partner speak english as native language?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK{{SELECT (COUNT(DISTINCT ?partner) AS ?pnum) WHERE {wd:Q2695156 wdt:P451 ?partner. ?partner wdt:P103 ?lang. MINUS{?lang wdt:P279* wd:Q1860}}} FILTER(?pnum = 0)}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P451 wd:Q2695156 .\r\n  ?x wdt:P103 wd:Q1860 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Do all of batman\u2019s partner speak english as native language?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Batman\": \"Q2695156\", \"English language\": \"Q1860\"}, \"relationships\": {\"partner\": \"P451\", \"native language\": \"P103\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P451 wd:Q2695156 .\r\n  ?x wdt:P103 wd:Q1860 .\r\n}\r\n```"
    },
    {
        "question": "How many spouses do head of states have on average?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (AVG(?spouseCount) AS ?result) WHERE {{SELECT (COUNT(DISTINCT ?spouse) AS ?spouseCount) WHERE{?country wdt:P31 wd:Q6256. ?country p:P35/ps:P35 ?hos. OPTIONAL {?hos wdt:P26 ?spouse}} GROUP BY ?hos }}",
        "generated_sparql": "SELECT AVG(COUNT(DISTINCT ?spouse)) AS avg_spouses\nWHERE {\n  ?headOfState wdt:P35 ?country.\n  ?headOfState wdt:P26 ?spouse.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many spouses do head of states have on average?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"head of state\": \"Q82955\", \"country\": \"Q6256\"}, \"relationships\": {\"head of government\": \"P35\", \"spouse\": \"P26\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT AVG(COUNT(DISTINCT ?spouse)) AS avg_spouses\nWHERE {\n  ?headOfState wdt:P35 ?country.\n  ?headOfState wdt:P26 ?spouse.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:list { bd:serviceParam wikibase:listType \"SPARQL\". }\n}\nGROUP BY ?headOfState\nHAVING ?headOfState = \"Q82955\"\n```"
    },
    {
        "question": "Was there at least one Formula 1 event on the AVUS?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK{wd:Q155810 wdt:P793 ?event. ?event wdt:P31 wd:Q108886259}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P793 wd:Q155810 ; # AVUS\r\n  ?x wdt:P31 wd:Q108886259 ; # Formula 1\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Was there at least one Formula 1 event on the AVUS?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"AVUS\": \"Q155810\", \"Formula 1\": \"Q108886259\"}, \"relationships\": {\"location\": \"P793\", \"instance of\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P793 wd:Q155810 ; # AVUS\r\n  ?x wdt:P31 wd:Q108886259 ; # Formula 1\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nGROUP BY ?x\r\nHAVING COUNT(*) >= 1\r\n```"
    },
    {
        "question": "Find all Turkish verbs ending with \u201cu\u015f\u201d with their lemma.",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {?result wikibase:lexicalCategory wd:Q24905; dct:language/wdt:P218 'tr'; wikibase:lemma ?lemma. FILTER(regex(?lemma, \"u\u015f$\"))}",
        "generated_sparql": "SELECT ?Turkish ?Lemma\r\nWHERE {\r\n  ?Turkish wdt:P518 ?Lemma ;\r\n  ?Turkish wikibase:language \"en\" ;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Find all Turkish verbs ending with \u201cu\u015f\u201d with their lemma.' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Turkish\": \"Q9129\"}, \"relationships\": {\"lexical category\": \"wdt:P518\", \"language\": \"P218\", \"lemma\": \"wikibase:lemma\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?Turkish ?Lemma\r\nWHERE {\r\n  ?Turkish wdt:P518 ?Lemma ;\r\n  ?Turkish wikibase:language \"en\" ;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }\r\n}\r\nORDER BY ?Turkish\r\n```"
    },
    {
        "question": "From which country are the beagles originally from?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q21102 wdt:P495 ?result}",
        "generated_sparql": "SELECT ?country\r\nWHERE {\r\n  ?beagle wdt:P495 ?country\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'From which country are the beagles originally from?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Beagle\": \"Q21102\"}, \"relationships\": {\"country of origin\": \"P495\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?country\r\nWHERE {\r\n  ?beagle wdt:P495 ?country\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\n```"
    },
    {
        "question": "From which country came the 2nd most winners of the Emmy Award ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {?person wdt:P166 wd:Q123737; wdt:P27 ?result} GROUP BY ?result ORDER BY DESC(COUNT (?result)) OFFSET 1 LIMIT 1",
        "generated_sparql": "SELECT DISTINCT ?country\r\nWHERE {\r\n  ?person WINNER ?award\r\n  ?award wdt:P166 wd:Q123737\r\n  ?person wdt:P27 ?country\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'From which country came the 2nd most winners of the Emmy Award ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Emmy Award\": \"Q123737\"}, \"relationships\": {\"award received\": \"P166\", \"country of citizenship\": \"P27\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT DISTINCT ?country\r\nWHERE {\r\n  ?person WINNER ?award\r\n  ?award wdt:P166 wd:Q123737\r\n  ?person wdt:P27 ?country\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n  SERVICE wikibase:label {\r\n    b"
    },
    {
        "question": "Does the music style of Helloween belong to rock music?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q158895 wdt:P136/wdt:P279* wd:Q11399}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P136 wd:Q11399;\r\n  ?x wdt:P31 wd:Q158895;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Does the music style of Helloween belong to rock music?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Helloween\": \"Q158895\", \"rock music\": \"Q11399\"}, \"relationships\": {\"genre\": \"P136\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P136 wd:Q11399;\r\n  ?x wdt:P31 wd:Q158895;\r\n}\r\n```"
    },
    {
        "question": "Does the postal code 32423 belong to Minden?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q3846 wdt:P281 \"32423\"}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P281 wd:Q3846;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Does the postal code 32423 belong to Minden?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Minden\": \"Q3846\"}, \"relationships\": {\"postal code\": \"P281\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P281 wd:Q3846;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\n```"
    },
    {
        "question": "has adam ondra been a winner of IFSC climbing world cup?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q350568 p:P1344 ?ps. ?ps ps:P1344/wdt:P3450* wd:Q1774251. {?ps pq:P1352 ?rank.} UNION {?ps pq:P166 ?gold.} FILTER(?rank = 1 || sameTerm(?gold,wd:Q406039))}",
        "generated_sparql": "SELECT ?s WHERE {\r\n  ?s wdt:P1344 ?o .\r\n  ?o wdt:P166 ?o2 .\r\n  ?o wdt:P1352 ?o3 .\r\n  ?o wdt:P3450 ?o4 .\r\n  ?s wdt:P31 wd:Q350568 .\r\n  ?s wdt:P31 wd:Q1774251 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'has adam ondra been a winner of IFSC climbing world cup?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Adam Ondra\": \"Q350568\", \"IFSC Climbing World Cup\": \"Q1774251\"}, \"relationships\": {\"winner\": \"P1344\", \"award winner\": \"P166\", \"ranking\": \"P1352\", \"gold medal\": \"P3450\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s WHERE {\r\n  ?s wdt:P1344 ?o .\r\n  ?o wdt:P166 ?o2 .\r\n  ?o wdt:P1352 ?o3 .\r\n  ?o wdt:P3450 ?o4 .\r\n  ?s wdt:P31 wd:Q350568 .\r\n  ?s wdt:P31 wd:Q1774251 .\r\n}\r\n```"
    },
    {
        "question": "has life expectancy in iran grown in any year after 1999?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q794 p:P2250 ?ols. ?ols pq:P585 ?otime. ?ols ps:P2250 ?ol.  wd:Q794 p:P2250 ?nls. ?nls pq:P585 ?ntime. ?nls ps:P2250 ?nl. FILTER((YEAR(?otime)=1999) && (YEAR(?ntime) > YEAR(?otime)) && (?nl > ?ol))}",
        "generated_sparql": "SELECT ?s WHERE {\r\n  ?s wdt:P2250 ?o;\r\n  ?s wdt:P585 ?t;\r\n  FILTER(?t >= \"1999-01-01\" && ?t <= \"2021-12-31\")\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'has life expectancy in iran grown in any year after 1999?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Iran\": \"Q794\"}, \"relationships\": {\"life expectancy\": \"P2250\", \"point in time\": \"P585\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s WHERE {\r\n  ?s wdt:P2250 ?o;\r\n  ?s wdt:P585 ?t;\r\n  FILTER(?t >= \"1999-01-01\" && ?t <= \"2021-12-31\")\r\n}\r\n```"
    },
    {
        "question": "has population of Isfahan increased at any point after 2006?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q42053 p:P1082 ?ops. ?ops pq:P585 ?otime. ?ops ps:P1082 ?op.  wd:Q42053 p:P1082 ?nps. ?nps pq:P585 ?ntime. ?nps ps:P1082 ?np. FILTER((YEAR(?otime)=2006) && (YEAR(?ntime) > YEAR(?otime)) && (?np > ?op))}",
        "generated_sparql": "SELECT ?s WHERE {\r\n  ?s wdt:P1082 ?o;\r\n  ?s wdt:P585 ?t;\r\n  FILTER(?t > \"2006-01-01T00:00:00Z\" && ?t < \"2022-01-01T00:00:00Z\")\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'has population of Isfahan increased at any point after 2006?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Isfahan\": \"Q42053\"}, \"relationships\": {\"population\": \"P1082\", \"point in time\": \"P585\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s WHERE {\r\n  ?s wdt:P1082 ?o;\r\n  ?s wdt:P585 ?t;\r\n  FILTER(?t > \"2006-01-01T00:00:00Z\" && ?t < \"2022-01-01T00:00:00Z\")\r\n}\r\n```"
    },
    {
        "question": "Did Joe Cocker play at the Woodstock festival?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q164815 wdt:P710 wd:Q190076}",
        "generated_sparql": "SELECT ?x WHERE {\n  ?x wdt:P710 ?y.\n  ?x wd:Q164815.\n  ?y wd:Q190076.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Did Joe Cocker play at the Woodstock festival?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Joe Cocker\": \"Q164815\", \"Woodstock festival\": \"Q190076\"}, \"relationships\": {\"performer\": \"P710\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?x WHERE {\n  ?x wdt:P710 ?y.\n  ?x wd:Q164815.\n  ?y wd:Q190076.\n}\n```"
    },
    {
        "question": "Did Udo B\u00f6lts participate in the Tour de France?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q66432 wdt:P1344/wdt:P31 wd:Q33881}",
        "generated_sparql": "SELECT ?s WHERE {\n  ?s wdt:P1344 wd:Q66432.\n  ?s wdt:P1344 wd:Q33881.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Did Udo B\u00f6lts participate in the Tour de France?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Udo B\u00f6lts\": \"Q66432\", \"Tour de France\": \"Q33881\"}, \"relationships\": {\"participant\": \"P1344\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?s WHERE {\n  ?s wdt:P1344 wd:Q66432.\n  ?s wdt:P1344 wd:Q33881.\n}\n```"
    },
    {
        "question": "How many of Reinhold Messner's brothers still live?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?brother) AS ?result) WHERE {wd:Q189307 wdt:P3373 ?brother. ?brother wdt:P21 wd:Q6581097. FILTER(NOT EXISTS{?brother wdt:P570 ?dod})}",
        "generated_sparql": "SELECT COUNT(*) AS num_brothers_alive\nWHERE {\n  ?brother wdt:P3373 ?sibling.\n  ?brother wdt:P21 ?gender.\n  ?brother wdt:P570 ?date_of_death.\n  FILTER(?brother != Q189307)\n  FILTER(?date_of_death = ?null)\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many of Reinhold Messner's brothers still live?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Reinhold Messner\": \"Q189307\", \"brother\": \"Q6581097\"}, \"relationships\": {\"sibling\": \"P3373\", \"gender\": \"P21\", \"date of death\": \"P570\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) AS num_brothers_alive\nWHERE {\n  ?brother wdt:P3373 ?sibling.\n  ?brother wdt:P21 ?gender.\n  ?brother wdt:P570 ?date_of_death.\n  FILTER(?brother != Q189307)\n  FILTER(?date_of_death = ?null)\n}\n```"
    },
    {
        "question": "In which manner did Hemingway die?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q23434 wdt:P1196 ?result.}",
        "generated_sparql": "SELECT ?manner_of_death WHERE {\n  ?person wdt:P1196 ?manner_of_death .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In which manner did Hemingway die?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Hemingway\": \"Q23434\"}, \"relationships\": {\"manner of death\": \"P1196\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?manner_of_death WHERE {\n  ?person wdt:P1196 ?manner_of_death .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  WHERE {\n    ?person wikidata:Q23434 .\n  }\n}\n```"
    },
    {
        "question": "In which industry does the House of Medici own a business?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q170022 wdt:P1830/wdt:P452 ?result}",
        "generated_sparql": "SELECT ?industry\r\nWHERE {\r\n  ?entity wdt:P1830 ?business.\r\n  ?business wdt:P452 ?industry.\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In which industry does the House of Medici own a business?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"House of Medici\": \"Q170022\"}, \"relationships\": {\"owns\": \"P1830\", \"industry\": \"P452\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?industry\r\nWHERE {\r\n  ?entity wdt:P1830 ?business.\r\n  ?business wdt:P452 ?industry.\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\"."
    },
    {
        "question": "How do people from Turkey call the official name of the united states of america?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {wd:Q30 wdt:P1448 ?result FILTER(langMatches(lang(?result),\"tr\"))}",
        "generated_sparql": "SELECT ?x ?y WHERE {\n  ?x wdt:P1448 wd:Q30 .\n  ?x wdt:P1448 wd:tr .\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How do people from Turkey call the official name of the united states of america?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"United States of America\": \"Q30\"}, \"relationships\": {\"official name\": \"P1448\", \"language of name\": \"tr\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?x ?y WHERE {\n  ?x wdt:P1448 wd:Q30 .\n  ?x wdt:P1448 wd:tr .\n}\n```"
    },
    {
        "question": "How high is the Cologne Cathedral ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {wd:Q4176 wdt:P2048 ?result}",
        "generated_sparql": "SELECT ?height\r\nWHERE {\r\n  ?s wdt:P2048 ?height;\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\";\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How high is the Cologne Cathedral ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Cologne Cathedral\": \"Q4176\"}, \"relationships\": {\"height\": \"P2048\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?height\r\nWHERE {\r\n  ?s wdt:P2048 ?height;\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\";\r\n  }\r\n}\r\nWHERE {\r\n  ?s wd:Q4176;\r\n}\r\n```"
    },
    {
        "question": "How is the Harz called in Mandarin Chinese?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q4186 rdfs:label ?result FILTER(langMatches(lang(?result),\"zh-cn\")) }",
        "generated_sparql": "SELECT ?label\r\nWHERE {\r\n  ?entity wdt:P31 wd:Q4186 ; # Harz\r\n  ?entity wdt:P431 ?label ; # rdfs:label\r\n  FILTER(lang(?label) = 'zh-CN') ; # Mandarin Chinese\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How is the Harz called in Mandarin Chinese?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Harz\": \"Q4186\"}, \"relationships\": {\"label\": \"rdfs:label\", \"language\": \"langMatches\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?label\r\nWHERE {\r\n  ?entity wdt:P31 wd:Q4186 ; # Harz\r\n  ?entity wdt:P431 ?label ; # rdfs:label\r\n  FILTER(lang(?label) = 'zh-CN') ; # Mandarin Chinese\r\n}\r\n```"
    },
    {
        "question": "How many international airports are located within the city of Hamburg ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?ap) AS ?result) WHERE {?ap wdt:P31 wd:Q644371. ?ap wdt:P131* wd:Q1055}",
        "generated_sparql": "SELECT COUNT(*) AS count\nWHERE {\n  ?a wdt:P31 wd:Q644371.\n  ?a wdt:P131 wd:Q1055.\n}\nGROUP BY ?a\nHAVING COUNT(*) = 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many international airports are located within the city of Hamburg ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"international airport\": \"Q644371\", \"Hamburg\": \"Q1055\"}, \"relationships\": {\"instance of\": \"P31\", \"located in the administrative territorial entity\": \"P131\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) AS count\nWHERE {\n  ?a wdt:P31 wd:Q644371.\n  ?a wdt:P131 wd:Q1055.\n}\nGROUP BY ?a\nHAVING COUNT(*) = 1\n```"
    },
    {
        "question": "On how many albums does Madonna perform?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?album) AS ?result) WHERE {?album wdt:P31 wd:Q482994. ?album wdt:P175 wd:Q1744. }",
        "generated_sparql": "SELECT COUNT(*) AS num_albums\r\nWHERE {\r\n  ?s wdt:P175 ?o .\r\n  ?s wdt:P31 ?g .\r\n  ?g wdt:P31 wd:Q1744 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'On how many albums does Madonna perform?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Madonna\": \"Q1744\", \"album\": null}, \"relationships\": {\"genre\": \"P31\", \"performer\": \"P175\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_albums\r\nWHERE {\r\n  ?s wdt:P175 ?o .\r\n  ?s wdt:P31 ?g .\r\n  ?g wdt:P31 wd:Q1744 .\r\n}\r\n```"
    },
    {
        "question": "On how many albums does Mariah Carey perform?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?album) AS ?result) WHERE {?album wdt:P31 wd:Q482994. ?album wdt:P175 wd:Q41076. }",
        "generated_sparql": "SELECT COUNT(*) AS num_albums\r\nWHERE {\r\n  ?x wdt:P31 wd:Q482994;\r\n  ?x wdt:P175 wd:Q41076;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'On how many albums does Mariah Carey perform?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Mariah Carey\": \"Q41076\", \"album\": \"Q482994\"}, \"relationships\": {\"instance of\": \"P31\", \"performer\": \"P175\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_albums\r\nWHERE {\r\n  ?x wdt:P31 wd:Q482994;\r\n  ?x wdt:P175 wd:Q41076;\r\n}\r\n```"
    },
    {
        "question": "How many studio albums has Lana Del Rey have?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?album) AS ?result) WHERE {?album wdt:P7937 wd:Q208569. ?album wdt:P175 wd:Q37150. }",
        "generated_sparql": "SELECT COUNT(*) AS num_albums\r\nWHERE {\r\n  ?artist wdt:P7937 wd:Q208569;\r\n  ?album wdt:P37150 wd:Q208569;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many studio albums has Lana Del Rey have?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Lana Del Rey\": \"Q208569\", \"studio album\": \"Q37150\"}, \"relationships\": {\"performer\": \"P7937\", \"genre\": \"P175\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_albums\r\nWHERE {\r\n  ?artist wdt:P7937 wd:Q208569;\r\n  ?album wdt:P37150 wd:Q208569;\r\n}\r\n```"
    },
    {
        "question": "How many ancient civilizations are there?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?civ) AS ?result) WHERE {?civ wdt:P31 wd:Q28171280}",
        "generated_sparql": "SELECT COUNT(*) AS num_ancient_civilizations\r\nWHERE {\r\n  ?ancient_civilization wdt:P31 wd:Q28171280\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many ancient civilizations are there?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"ancient civilization\": \"Q28171280\"}, \"relationships\": {\"instance of\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_ancient_civilizations\r\nWHERE {\r\n  ?ancient_civilization wdt:P31 wd:Q28171280\r\n}\r\n```"
    },
    {
        "question": "In how many years did Kobe Bryant receive an NBA All-Defensive Team award?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?time) AS ?result) WHERE {wd:Q25369 p:P166 ?as. ?as ps:P166 wd:Q1465181; pq:P585 ?time.}",
        "generated_sparql": "SELECT COUNT(*) AS years\nWHERE {\n  ?s wdt:P166 wd:Q25369.\n  ?s wdt:P585 ?t.\n  ?t wdt:P49 ?y.\n  FILTER(?y >= 1999 && ?y <= 2016)\n}\nGROUP BY ?s ?t ?y\nHAVING ?y > 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In how many years did Kobe Bryant receive an NBA All-Defensive Team award?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Kobe Bryant\": \"Q25369\", \"NBA All-Defensive Team\": \"Q1465181\"}, \"relationships\": {\"award recipient\": \"P166\", \"point in time\": \"P585\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) AS years\nWHERE {\n  ?s wdt:P166 wd:Q25369.\n  ?s wdt:P585 ?t.\n  ?t wdt:P49 ?y.\n  FILTER(?y >= 1999 && ?y <= 2016)\n}\nGROUP BY ?s ?t ?y\nHAVING ?y > 1\n```"
    },
    {
        "question": "How many All-NBA Team awards have Shaquille O'Neal and Kobe Bryant received in the same year?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?time) AS ?result) WHERE {wd:Q25369 p:P166 ?as. ?as ps:P166 wd:Q674359; pq:P585 ?time. wd:Q169452 p:P166 ?as2. ?as2 ps:P166 wd:Q674359; pq:P585 ?time}",
        "generated_sparql": "SELECT COUNT(*) AS num_awards\nWHERE {\n  ?s wdt:P166 wd:Q674359.\n  ?s wdt:P585 ?t.\n  ?t wdt:P585 ?t2.\n  ?s wdt:P166 ?t2.\n  FILTER(CONTAINS(STR(?s), \"Q25369\") && CONTAINS(STR(?s), \"Q169452\"))\n}\nGROUP BY ?s ?t ?t2\nHAVING COUNT(*) = 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many All-NBA Team awards have Shaquille O'Neal and Kobe Bryant received in the same year?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Shaquille O'Neal\": \"Q25369\", \"Kobe Bryant\": \"Q169452\", \"All-NBA Team\": \"Q674359\"}, \"relationships\": {\"award recipient\": \"P166\", \"point in time\": \"P585\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) AS num_awards\nWHERE {\n  ?s wdt:P166 wd:Q674359.\n  ?s wdt:P585 ?t.\n  ?t wdt:P585 ?t2.\n  ?s wdt:P166 ?t2.\n  FILTER(CONTAINS(STR(?s), \"Q25369\") && CONTAINS(STR(?s), \"Q169452\"))\n}\nGROUP BY ?s ?t ?t2\nHAVING COUNT(*) = 1\n```"
    },
    {
        "question": "How many literary works did Richard Bachman write?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?book) AS ?result) WHERE {?book wdt:P50 wd:Q39829; wdt:P31 wd:Q7725634}",
        "generated_sparql": "SELECT COUNT(*) AS num_works\nWHERE {\n  ?author wdt:P50 wd:Q39829.\n  ?author wdt:P31 wd:Q7725634.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many literary works did Richard Bachman write?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Richard Bachman\": \"Q39829\", \"literary work\": \"Q7725634\"}, \"relationships\": {\"author\": \"P50\", \"instance of\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) AS num_works\nWHERE {\n  ?author wdt:P50 wd:Q39829.\n  ?author wdt:P31 wd:Q7725634.\n}\n```"
    },
    {
        "question": "How many notable works does Sarah J. Maas have?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?notableW) AS ?result) WHERE {wd:Q20640708 wdt:P800 ?notableW}",
        "generated_sparql": "SELECT COUNT(*) AS num_notable_works\r\nWHERE {\r\n  ?author wdt:P800 wd:Q20640708\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many notable works does Sarah J. Maas have?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Sarah J. Maas\": \"Q20640708\"}, \"relationships\": {\"notable work\": \"P800\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_notable_works\r\nWHERE {\r\n  ?author wdt:P800 wd:Q20640708\r\n}\r\n```"
    },
    {
        "question": "Did Bryan Evenson work for at least one university where he was educated at?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q4963691 wdt:P108 ?uni; wdt:P69 ?uni. ?uni wdt:P31/wdt:P279* wd:Q3918.}",
        "generated_sparql": "SELECT ?b ?u\r\nWHERE {\r\n  ?b wdt:P108 ?u ; # employer\r\n  ?b wdt:P69 ?u ; # alumni of\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Did Bryan Evenson work for at least one university where he was educated at?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Bryan Evenson\": \"Q4963691\", \"university\": \"Q3918\"}, \"relationships\": {\"employer\": \"P108\", \"alumni of\": \"P69\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?b ?u\r\nWHERE {\r\n  ?b wdt:P108 ?u ; # employer\r\n  ?b wdt:P69 ?u ; # alumni of\r\n}\r\n```"
    },
    {
        "question": "How many children (including apopted ones) does Jeff Bezos have with his ex-wife?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?child) AS ?result) WHERE {wd:Q312556 p:P26 ?sps. ?sps ps:P26 ?sp. ?child wdt:P25 ?sp; wdt:P22 wd:Q312556. FILTER(EXISTS{?sps pq:P582 ?et})}",
        "generated_sparql": "",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many children (including apopted ones) does Jeff Bezos have with his ex-wife?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Jeff Bezos\": \"Q312556\"}, \"relationships\": {\"spouse\": \"P26\", \"child\": \"P40\", \"parent\": \"P25\", \"ex-spouse\": \"P582\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) AS num_children\nWHERE {\n  ?person wdt:P26 wd:Q312556.\n  ?person wdt:P40 ?child.\n  ?person wdt:P25 ?parent.\n  ?person wdt:P582 ?ex_spouse.\n  ?child wdt:P40 ?parent.\n  ?child wdt:P40 ?ex_spouse.\n  ?parent wdt:P40 ?child.\n  ?parent wdt:P40 ?ex_spouse.\n  ?ex_spouse wdt:P40 ?child.\n  ?ex_spouse wdt:P40 ?parent.\n  UNION\n  SELECT COUNT(*) AS num_children\n  WHERE {\n    ?person wdt:P26 wd:Q312556.\n    ?person wdt:P40 ?child.\n    ?person wdt:P25 ?parent.\n    ?person wdt:P582 ?ex_spouse.\n    ?child wdt:P40 ?parent.\n    ?child wdt:P40 ?ex_spouse.\n    ?parent wdt:P40 ?child.\n    ?parent wdt:P40 ?ex_spouse.\n    ?ex_spouse wdt:P40 ?child.\n    ?ex_spouse wdt:P40 ?parent.\n    ?child wdt:P40 ?ex_spouse.\n    ?parent wdt:P40 ?child.\n    ?parent wdt:P40 ?ex_spouse.\n    ?ex_spouse wdt:P40 ?child.\n    ?ex_spouse wdt:P40 ?parent.\n    ?child wdt:P40 ?ex_spouse.\n    ?parent wdt:P40 ?child.\n    ?parent wdt:P40 ?ex_spouse.\n    ?ex_spouse wdt:P40 ?child.\n    ?ex_spouse wdt:P40 ?parent.\n    ?child wdt:P40 ?ex"
    },
    {
        "question": "How many children had Paul McCartney together with his ex-wife Linda McCartney?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?child) AS ?result) WHERE {wd:Q2599 p:P26 ?sps. ?sps ps:P26 ?sp. ?child wdt:P25 ?sp; wdt:P22 wd:Q2599. FILTER((EXISTS{?sps pq:P582 ?et}) && (?sp = wd:Q228899))}",
        "generated_sparql": "SELECT COUNT(*) AS num_children\nWHERE {\n  ?p1 wdt:P26 wd:Q2599.\n  ?p2 wdt:P26 wd:Q228899.\n  ?p1 wdt:P25 wd:Q2599.\n  ?p2 wdt:P25 wd:Q228899.\n}\nGROUP BY ?p1 ?p2\nHAVING ?p1 = ?p2",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many children had Paul McCartney together with his ex-wife Linda McCartney?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Paul McCartney\": \"Q2599\", \"Linda McCartney\": \"Q228899\"}, \"relationships\": {\"spouse\": \"P26\", \"child\": \"P25\", \"parent\": \"P22\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) AS num_children\nWHERE {\n  ?p1 wdt:P26 wd:Q2599.\n  ?p2 wdt:P26 wd:Q228899.\n  ?p1 wdt:P25 wd:Q2599.\n  ?p2 wdt:P25 wd:Q228899.\n}\nGROUP BY ?p1 ?p2\nHAVING ?p1 = ?p2\n```"
    },
    {
        "question": "How many Chinese zodiac animals are there in total?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?animal) AS ?result) WHERE {?animal wdt:P31 wd:Q79226802}",
        "generated_sparql": "SELECT COUNT(*) AS total_count\r\nWHERE {\r\n  ?s wdt:P31 wd:Q79226802\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many Chinese zodiac animals are there in total?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Chinese zodiac animal\": \"Q79226802\"}, \"relationships\": {\"instance of\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS total_count\r\nWHERE {\r\n  ?s wdt:P31 wd:Q79226802\r\n}\r\n```"
    },
    {
        "question": "How many cities are part of the Pearl River Delta?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?city) AS ?result) WHERE {wd:Q1144286 wdt:P527 ?city. ?city wdt:P31/wdt:P279* wd:Q515.}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?city) WHERE {\r\n  ?city wdt:P527 wd:Q1144286 .\r\n  ?city wdt:P31 wd:Q1144286 .\r\n  ?city wdt:P279 wd:Q1144286 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many cities are part of the Pearl River Delta?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Pearl River Delta\": \"Q1144286\"}, \"relationships\": {\"has part\": \"P527\", \"instance of\": \"P31\", \"located in the administrative territorial entity\": \"P279\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?city) WHERE {\r\n  ?city wdt:P527 wd:Q1144286 .\r\n  ?city wdt:P31 wd:Q1144286 .\r\n  ?city wdt:P279 wd:Q1144286 .\r\n}\r\n```"
    },
    {
        "question": "How many city-states are currently in the world?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?cs) AS ?result) WHERE {?cs wdt:P31 wd:Q133442}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?cs) AS num_city_states\r\nWHERE {\r\n  ?cs wdt:P31 wd:Q1227. \r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many city-states are currently in the world?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"city-state\": \"?cs\"}, \"relationships\": {\"instance of\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?cs) AS num_city_states\r\nWHERE {\r\n  ?cs wdt:P31 wd:Q1227. \r\n}\r\n```"
    },
    {
        "question": "How many businesses did Steve Jobs found?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?company) AS ?result) WHERE {?company wdt:P112 wd:Q19837; wdt:P31/wdt:P279* wd:Q4830453}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?b) WHERE {\n  ?b wdt:P112 wd:Q19837.\n  ?b wdt:P31 wd:Q4830453.\n  ?b wdt:P279 wd:Q19837.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many businesses did Steve Jobs found?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Steve Jobs\": \"Q19837\", \"business\": \"Q4830453\"}, \"relationships\": {\"founder\": \"P112\", \"instance of\": \"P31\", \"part of\": \"P279\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(DISTINCT ?b) WHERE {\n  ?b wdt:P112 wd:Q19837.\n  ?b wdt:P31 wd:Q4830453.\n  ?b wdt:P279 wd:Q19837.\n}\n```"
    },
    {
        "question": "How many countries have a democracy index higher than 7 and drive on the left side ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?country) AS ?result) WHERE {?country wdt:P31 wd:Q6256; wdt:P8328 ?ind; wdt:P1622 wd:Q13196750 FILTER(?ind > 7)}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?country) WHERE {\n  ?country wdt:P31 wd:Q6256.\n  ?country wdt:P8328 ?democracyIndex.\n  ?country wdt:P1622 ?leftHandTraffic.\n  FILTER(?democracyIndex > 7)\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many countries have a democracy index higher than 7 and drive on the left side ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"country\": null, \"democracy\": \"Q6256\", \"left-hand traffic\": \"Q13196750\"}, \"relationships\": {\"instance of\": \"P31\", \"democracy index\": \"P8328\", \"drives on the left side\": \"P1622\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(DISTINCT ?country) WHERE {\n  ?country wdt:P31 wd:Q6256.\n  ?country wdt:P8328 ?democracyIndex.\n  ?country wdt:P1622 ?leftHandTraffic.\n  FILTER(?democracyIndex > 7)\n}\n```"
    },
    {
        "question": "How many countries have never been members of the UN?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?country) AS ?result) WHERE {?country wdt:P31 wd:Q6256. FILTER(NOT EXISTS{?country p:P463/ps:P463 wd:Q1065})}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?country) WHERE {\n  ?country wdt:P31 wd:Q6256.\n  !{ ?country wdt:P463 wd:Q1065 }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many countries have never been members of the UN?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"country\": null, \"Vatican City\": \"Q6256\", \"United Nations\": \"Q1065\"}, \"relationships\": {\"instance of\": \"P31\", \"member of\": \"P463\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(DISTINCT ?country) WHERE {\n  ?country wdt:P31 wd:Q6256.\n  !{ ?country wdt:P463 wd:Q1065 }\n}\n```"
    },
    {
        "question": "How many countries are on the continent of South America ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?country) AS ?result) WHERE {?country wdt:P31 wd:Q6256; wdt:P30 wd:Q18}",
        "generated_sparql": "SELECT COUNT(*) AS num_countries\r\nWHERE {\r\n  ?country wdt:P31 wd:Q18;\r\n  ?country wdt:P30 wd:Q6256;\r\n}\r\nGROUP BY ?country",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many countries are on the continent of South America ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"South America\": \"Q18\", \"continent\": \"Q6256\"}, \"relationships\": {\"instance of\": \"P31\", \"continent\": \"P30\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_countries\r\nWHERE {\r\n  ?country wdt:P31 wd:Q18;\r\n  ?country wdt:P30 wd:Q6256;\r\n}\r\nGROUP BY ?country\r\n```"
    },
    {
        "question": "How many countries have mountains whose peaks are higher than 2000m above sea level?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?country) AS ?result) WHERE {?mountain wdt:P31/wdt:P279* wd:Q8502; p:P2044/psn:P2044/wikibase:quantityAmount ?height; wdt:P17 ?country. FILTER(?height > 2000)}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?country) WHERE {\n  ?mountain wdt:P31 wd:Q122.\n  ?mountain wdt:P279 ?country.\n  ?mountain wdt:P2044 ?height.\n  FILTER(?height > 2000)\n  ?mountain wdt:P17 ?country.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many countries have mountains whose peaks are higher than 2000m above sea level?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"mountain\": \"\", \"country\": \"\"}, \"relationships\": {\"instance of\": \"P31\", \"part of\": \"P279\", \"height\": \"P2044\", \"country\": \"P17\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(DISTINCT ?country) WHERE {\n  ?mountain wdt:P31 wd:Q122.\n  ?mountain wdt:P279 ?country.\n  ?mountain wdt:P2044 ?height.\n  FILTER(?height > 2000)\n  ?mountain wdt:P17 ?country.\n}\n```"
    },
    {
        "question": "How many fictional dragons are present in Game of Thrones?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?dragon) AS ?result) WHERE {?dragon wdt:P31/wdt:P279* wd:Q30170627; wdt:P1441 wd:Q23572}",
        "generated_sparql": "SELECT COUNT(*) AS count\nWHERE {\n  ?s wdt:P31 wd:Q23572.\n  ?s wdt:P279 wd:Q30170627.\n  ?s wdt:P1441 true.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many fictional dragons are present in Game of Thrones?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Game of Thrones\": \"Q23572\", \"fictional dragon\": \"Q30170627\"}, \"relationships\": {\"instance of\": \"P31\", \"subclass of\": \"P279\", \"features as fictional creature\": \"P1441\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) AS count\nWHERE {\n  ?s wdt:P31 wd:Q23572.\n  ?s wdt:P279 wd:Q30170627.\n  ?s wdt:P1441 true.\n}\n```"
    },
    {
        "question": "how many emmy awards has the tv series game of thrones won?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?emmy) AS ?result) WHERE {wd:Q23572 wdt:P166 ?emmy. ?emmy wdt:P361/wdt:P279 wd:Q123737}",
        "generated_sparql": "SELECT COUNT(*) AS num_emmy_wins\nWHERE {\n  ?s wd:P361 wd:Q23572.\n  ?s wd:P166 wd:Q123737.\n}\nGROUP BY ?s\nHAVING ?s = wd:Q23572",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'how many emmy awards has the tv series game of thrones won?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Game of Thrones\": \"Q23572\", \"Emmy Award\": \"Q123737\"}, \"relationships\": {\"award won\": \"P166\", \"nominated for\": \"P360\", \"part of\": \"P361\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) AS num_emmy_wins\nWHERE {\n  ?s wd:P361 wd:Q23572.\n  ?s wd:P166 wd:Q123737.\n}\nGROUP BY ?s\nHAVING ?s = wd:Q23572\n```"
    },
    {
        "question": "How many films are derived from the original Ghost in the Shell Manga?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?film) AS ?result) WHERE {wd:Q92582 wdt:P4969 ?film. ?film wdt:P31/wdt:P279* wd:Q11424}",
        "generated_sparql": "SELECT COUNT(*) AS num_films\r\nWHERE {\r\n  ?film wdt:P4969 wd:Q92582 .\r\n  ?film wdt:P31 wd:Q11424 .\r\n  ?film wdt:P279 wd:Q92582 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many films are derived from the original Ghost in the Shell Manga?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Ghost in the Shell\": \"Q92582\", \"manga\": \"Q11424\"}, \"relationships\": {\"based on\": \"P4969\", \"instance of\": \"P31\", \"part of\": \"P279\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_films\r\nWHERE {\r\n  ?film wdt:P4969 wd:Q92582 .\r\n  ?film wdt:P31 wd:Q11424 .\r\n  ?film wdt:P279 wd:Q92582 .\r\n}\r\n```"
    },
    {
        "question": "How many French kings didn't die of natural causes?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?king) AS ?result) WHERE {?king wdt:P39 wd:Q18384454. MINUS{?king wdt:P1196 wd:Q3739104}}",
        "generated_sparql": "SELECT COUNT(*) AS num_kings_died_of_natural_causes\nWHERE {\n  ?king wdt:P39 wd:Q18384454.\n  ?king wdt:P1196 wd:Q3739104.\n}\nGROUP BY ?king\nHAVING COUNT(*) = 0",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many French kings didn't die of natural causes?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"king of France\": \"Q18384454\", \"natural causes\": \"Q3739104\"}, \"relationships\": {\"position held\": \"P39\", \"manner of death\": \"P1196\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) AS num_kings_died_of_natural_causes\nWHERE {\n  ?king wdt:P39 wd:Q18384454.\n  ?king wdt:P1196 wd:Q3739104.\n}\nGROUP BY ?king\nHAVING COUNT(*) = 0\n```"
    },
    {
        "question": "How many given names has Queen Elizabeth II ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?names) AS ?result) WHERE {wd:Q9682 p:P735/ps:P735 ?names}",
        "generated_sparql": "SELECT COUNT(*) AS num_given_names\r\nWHERE {\r\n  ?s wdt:P735 ?o\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many given names has Queen Elizabeth II ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Queen Elizabeth II\": \"Q9682\"}, \"relationships\": {\"given name\": \"P735\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_given_names\r\nWHERE {\r\n  ?s wdt:P735 ?o\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n  ?s wikibase:label ?label\r\n  FILTER(CONTAINS(?label, \"Queen Elizabeth II\"))\r\n}\r\n```"
    },
    {
        "question": "How many different female mayors did Hamburg have?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?fm) AS ?result) WHERE {wd:Q1055 p:P6/ps:P6 ?fm. ?fm wdt:P21 wd:Q6581072}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?female) WHERE {\r\n  ?female wdt:P21 wd:Q6581072 .\r\n  ?female wdt:P6 wd:Q1055 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many different female mayors did Hamburg have?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Hamburg\": \"Q1055\", \"female\": \"Q6581072\"}, \"relationships\": {\"head of government\": \"P6\", \"gender\": \"P21\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?female) WHERE {\r\n  ?female wdt:P21 wd:Q6581072 .\r\n  ?female wdt:P6 wd:Q1055 .\r\n}\r\n```"
    },
    {
        "question": "how many head of the state does iran have?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?hos) AS ?result) WHERE {wd:Q794 p:P35/ps:P35 ?hos.}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?x) WHERE {\n  ?x wdt:P35 wd:Q794.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'how many head of the state does iran have?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Iran\": \"Q794\"}, \"relationships\": {\"head of state\": \"P35\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(DISTINCT ?x) WHERE {\n  ?x wdt:P35 wd:Q794.\n}\n```"
    },
    {
        "question": "How many scholary articles have ImageNet as a subject?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?art) AS ?result) WHERE {?art wdt:P31 wd:Q13442814. ?art wdt:P921 wd:Q24901201.}",
        "generated_sparql": "SELECT COUNT(*) AS count\r\nWHERE {\r\n  ?s wdt:P31 wd:Q24901201 . # ImageNet is an instance of ImageNet\r\n  ?s wdt:P921 wd:Q13442814 . # scholarly article is a main subject of ImageNet\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many scholary articles have ImageNet as a subject?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"ImageNet\": \"Q24901201\", \"scholarly article\": \"Q13442814\"}, \"relationships\": {\"instance of\": \"P31\", \"main subject\": \"P921\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS count\r\nWHERE {\r\n  ?s wdt:P31 wd:Q24901201 . # ImageNet is an instance of ImageNet\r\n  ?s wdt:P921 wd:Q13442814 . # scholarly article is a main subject of ImageNet\r\n}\r\n```"
    },
    {
        "question": "How many inhabitants does the birthplace of Cristiano Ronaldo have?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q11571 wdt:P19/wdt:P1082 ?result}",
        "generated_sparql": "SELECT COUNT(?x) WHERE {\n  ?x wdt:P19 wd:Q11571.\n  ?x wdt:P1082 ?population.\n  FILTER(CONTAINS(?population, \"Cristiano Ronaldo\"))\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many inhabitants does the birthplace of Cristiano Ronaldo have?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Cristiano Ronaldo\": \"Q11571\"}, \"relationships\": {\"place of birth\": \"P19\", \"population\": \"P1082\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(?x) WHERE {\n  ?x wdt:P19 wd:Q11571.\n  ?x wdt:P1082 ?population.\n  FILTER(CONTAINS(?population, \"Cristiano Ronaldo\"))\n}\n```"
    },
    {
        "question": "How many Japanese writers received the Nobel Prize?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?writer) AS ?result) WHERE {?writer wdt:P166/wdt:P279 wd:Q7191. ?writer wdt:P27 wd:Q17; wdt:P106 wd:Q36180}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?w) WHERE {\n  ?w wd:P279 ?p.\n  ?p wd:P166 ?n.\n  ?n wikibase:label ?l.\n  FILTER(CONTAINS(?l, \"Japanese\"))\n  FILTER(CONTAINS(?l, \"writer\"))\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many Japanese writers received the Nobel Prize?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Nobel Prize\": \"Q7191\", \"Japan\": \"Q17\", \"writer\": \"Q36180\"}, \"relationships\": {\"awarded\": \"P166\", \"winner\": \"P279\", \"country of citizenship\": \"P27\", \"occupation\": \"P106\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(DISTINCT ?w) WHERE {\n  ?w wd:P279 ?p.\n  ?p wd:P166 ?n.\n  ?n wikibase:label ?l.\n  FILTER(CONTAINS(?l, \"Japanese\"))\n  FILTER(CONTAINS(?l, \"writer\"))\n}\n```"
    },
    {
        "question": "How many languages are widely used in India?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?lan) AS ?result) WHERE {wd:Q668 wdt:P2936 ?lan}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?language) WHERE {\r\n  ?language wdt:P2936 wd:Q668;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many languages are widely used in India?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"India\": \"Q668\"}, \"relationships\": {\"language used in the administrative territorial entity\": \"P2936\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?language) WHERE {\r\n  ?language wdt:P2936 wd:Q668;\r\n}\r\n```"
    },
    {
        "question": "How many different colors can water take?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?color) AS ?result) WHERE {wd:Q283 wdt:P462 ?color}",
        "generated_sparql": "SELECT DISTINCT ?color\r\nWHERE {\r\n  ?water wdt:P462 ?color\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many different colors can water take?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"water\": \"Q283\"}, \"relationships\": {\"color\": \"P462\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT DISTINCT ?color\r\nWHERE {\r\n  ?water wdt:P462 ?color\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\n```"
    },
    {
        "question": "How many locations has Georges Braque worked at (work location)?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?loc) AS ?result) WHERE {wd:Q153793 wdt:P937 ?loc}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?location) AS num_locations\r\nWHERE {\r\n  ?location wdt:P937 wd:Q153793;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many locations has Georges Braque worked at (work location)?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Georges Braque\": \"Q153793\"}, \"relationships\": {\"work location\": \"P937\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?location) AS num_locations\r\nWHERE {\r\n  ?location wdt:P937 wd:Q153793;\r\n}\r\n```"
    },
    {
        "question": "How many months does winter consist of in Germany?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?mon) AS ?result) WHERE {wd:Q1311 p:P2922 ?ms. ?ms ps:P2922 ?mon; pq:P3005/wdt:P527 ?part. wd:Q183 wdt:P361* ?part.}",
        "generated_sparql": "SELECT COUNT(*) AS num_months\nWHERE {\n  ?winter wd:P527 ?month.\n  ?month wd:P361 wd:Q183.\n  FILTER(?month wd:P527 wd:Q1311)\n}\nGROUP BY ?month\nHAVING COUNT(*) = 12",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many months does winter consist of in Germany?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"winter\": \"Q1311\", \"Germany\": \"Q183\"}, \"relationships\": {\"has part\": \"P527\", \"part of\": \"P361\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) AS num_months\nWHERE {\n  ?winter wd:P527 ?month.\n  ?month wd:P361 wd:Q183.\n  FILTER(?month wd:P527 wd:Q1311)\n}\nGROUP BY ?month\nHAVING COUNT(*) = 12\n```"
    },
    {
        "question": "How many movies does the Scream franchise have?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?film) AS ?result) WHERE {?film wdt:P31 wd:Q11424; wdt:P179 wd:Q388659}",
        "generated_sparql": "SELECT COUNT(*) AS num_movies\r\nWHERE {\r\n  ?m wdt:P31 wd:Q11424 ; # Scream franchise\r\n  ?m wdt:P179 wd:Q11424 ; # main subject\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many movies does the Scream franchise have?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Scream franchise\": \"Q11424\"}, \"relationships\": {\"instance of\": \"P31\", \"main subject\": \"P179\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_movies\r\nWHERE {\r\n  ?m wdt:P31 wd:Q11424 ; # Scream franchise\r\n  ?m wdt:P179 wd:Q11424 ; # main subject\r\n}\r\n```"
    },
    {
        "question": "How many movies has James Cameron directed prior to the year 2010?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?film) AS ?result) WHERE {?film wdt:P31 wd:Q11424; wdt:P57 wd:Q42574; wdt:P577 ?date. FILTER(YEAR(?date)<2010)}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?movie) WHERE {\n  ?film wdt:P31 wd:Q11424.\n  ?film wdt:P57 wd:Q42574.\n  ?film wdt:P577 < \"2010-01-01\".\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many movies has James Cameron directed prior to the year 2010?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"film\": \"\", \"James Cameron\": \"Q42574\", \"movie\": \"Q11424\"}, \"relationships\": {\"instance of\": \"P31\", \"director\": \"P57\", \"publication date\": \"P577\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(DISTINCT ?movie) WHERE {\n  ?film wdt:P31 wd:Q11424.\n  ?film wdt:P57 wd:Q42574.\n  ?film wdt:P577 < \"2010-01-01\".\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:list { bd:serviceParam wikibase:listType \"all\". }\n  SERVICE wikibase:list WHERE { ?film wdt:P577 < \"2010-01-01\". }\n  SERVICE wikibase:list WHERE { ?film wdt:P577 < \"2010-01-01\". }\n  SERVICE wikibase:list WHERE { ?film wdt:P577 < \"2010-01-01\". }\n  SERVICE wikibase:list WHERE { ?film wdt:P577 < \"2010-01-01\". }\n  SERVICE wikibase:list WHERE { ?film wdt:P577 < \"2010-01-01\". }\n  SERVICE wikibase:list WHERE { ?film wdt:P577 < \"2010-01-01\". }\n  SERVICE wikibase:list WHERE { ?film wdt:P577 < \"2010-01-01\". }\n  SERVICE wikibase:list WHERE { ?film wdt:P577 < \"2010-01-01\". }\n  SERVICE wikibase:list WHERE { ?film wdt:P577 < \"2010-01-01\". }\n  SERVICE wikibase:list WHERE { ?film wdt:P577 < \"2010-01-01\". }\n  SERVICE wikibase:list WHERE { ?film wdt:P577 < \"201"
    },
    {
        "question": "How many movies were directed by Akira Kurosawa ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?film) AS ?result) WHERE {?film wdt:P31 wd:Q11424; wdt:P57 wd:Q8006}",
        "generated_sparql": "SELECT COUNT(*) AS num_movies\r\nWHERE {\r\n  ?film wdt:P31 wd:Q11424 ; # instance of drama film\r\n  ?film wdt:P57 ?director ; # director of film\r\n  ?director wd:Q8006 ; # Akira Kurosawa\r\n}\r\nGROUP BY ?film",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many movies were directed by Akira Kurosawa ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"film\": \"\", \"drama film\": \"Q11424\", \"Akira Kurosawa\": \"Q8006\"}, \"relationships\": {\"instance of\": \"P31\", \"director\": \"P57\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_movies\r\nWHERE {\r\n  ?film wdt:P31 wd:Q11424 ; # instance of drama film\r\n  ?film wdt:P57 ?director ; # director of film\r\n  ?director wd:Q8006 ; # Akira Kurosawa\r\n}\r\nGROUP BY ?film\r\n```"
    },
    {
        "question": "How many musical scales are there?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?scale) AS ?result) WHERE {?scale wdt:P31 wd:Q179651}",
        "generated_sparql": "SELECT COUNT(*) AS num_scales\r\nWHERE {\r\n  ?s wdt:P31 wd:Q179651\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many musical scales are there?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"musical scale\": \"Q179651\"}, \"relationships\": {\"instance of\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_scales\r\nWHERE {\r\n  ?s wdt:P31 wd:Q179651\r\n}\r\n```"
    },
    {
        "question": "How many public holidays does the state Bavaria have in a year?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?hol) AS ?result) WHERE {wd:Q980 wdt:P832 ?hol}",
        "generated_sparql": "SELECT COUNT(*) AS num_public_holidays\r\nWHERE {\r\n  ?s wdt:P832 wd:Q980\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many public holidays does the state Bavaria have in a year?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Bavaria\": \"Q980\"}, \"relationships\": {\"public holiday\": \"P832\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_public_holidays\r\nWHERE {\r\n  ?s wdt:P832 wd:Q980\r\n}\r\n```"
    },
    {
        "question": "How many literary works besides The Picture of Dorian Gray did its author write?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?novel) AS ?result) WHERE {wd:Q82464 wdt:P50 ?aut. ?novel wdt:P31 wd:Q7725634; wdt:P50 ?aut FILTER(?novel != wd:Q82464)}",
        "generated_sparql": "",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many literary works besides The Picture of Dorian Gray did its author write?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"The Picture of Dorian Gray\": \"Q82464\"}, \"relationships\": {\"author\": \"P50\", \"instance of\": \"P31\", \"literary work\": \"\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_works\r\nWHERE {\r\n  ?work wdt:P31 wd:Q82464;\r\n  ?work wdt:P50 ?author;\r\n  ?author wdt:P31 wd:Q82464;\r\n  ?author wdt:P50 ?author_name;\r\n  ?work wdt:P49 ?title;\r\n  ?title wdt:P31 wd:Q82464;\r\n  ?title wdt:P49 ?title_name;\r\n  ?title_name wdt:P31 wd:Q82464;\r\n  ?title_name wdt:P49 ?title_name_value;\r\n  ?title_name_value wdt:P31 wd:Q82464;\r\n  ?title_name_value wdt:P49 ?title_name_value_value;\r\n  ?title_name_value_value wdt:P31 wd:Q82464;\r\n  ?title_name_value_value wdt:P49 ?title_name_value_value_value;\r\n  ?title_name_value_value_value wdt:P31 wd:Q82464;\r\n  ?title_name_value_value_value wdt:P49 ?title_name_value_value_value_value;\r\n  ?title_name_value_value_value_value wdt:P31 wd:Q82464;\r\n  ?title_name_value_value_value_value wdt:P49 ?title_name_value_value_value_value_value;\r\n  ?title_name_value_value_value_value_value wdt:P31 wd:Q82464;\r\n  ?title_name_value_value_value_value_value wdt:P49 ?title_name_value_value_value_value_value_value;\r\n  ?title_name_value_value_value_value_value wdt:P31 wd:Q82464;\r\n  ?title_name_value"
    },
    {
        "question": "How many literary works did Mark Twain write in his lifetime?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?novel) AS ?result) WHERE {?novel wdt:P31 wd:Q7725634; wdt:P50 wd:Q7245}",
        "generated_sparql": "SELECT COUNT(*) AS num_literary_works\nWHERE {\n  ?literary_work wdt:P31 wd:Q7725634.\n  ?literary_work wdt:P50 wd:Q7245.\n}\nGROUP BY ?literary_work",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many literary works did Mark Twain write in his lifetime?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"literary work\": \"Q7725634\", \"Mark Twain\": \"Q7245\"}, \"relationships\": {\"instance of\": \"P31\", \"author\": \"P50\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) AS num_literary_works\nWHERE {\n  ?literary_work wdt:P31 wd:Q7725634.\n  ?literary_work wdt:P50 wd:Q7245.\n}\nGROUP BY ?literary_work\n```"
    },
    {
        "question": "How many occupations did Mark Twain have?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?occ) AS ?result) WHERE {wd:Q7245 wdt:P106 ?occ}",
        "generated_sparql": "SELECT COUNT(*) AS num_occupations\r\nWHERE {\r\n  ?s wdt:P106 wd:Q7245\r\n}\r\nGROUP BY ?s",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many occupations did Mark Twain have?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Mark Twain\": \"Q7245\"}, \"relationships\": {\"occupation\": \"P106\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_occupations\r\nWHERE {\r\n  ?s wdt:P106 wd:Q7245\r\n}\r\nGROUP BY ?s\r\n```"
    },
    {
        "question": "how many of spiderman perfomers are citizens of the united kingdom?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?per) AS ?result) WHERE {?per wdt:P27 wd:Q145. wd:Q79037 p:P175/ps:P175 ?per}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?x) WHERE {\n  ?x wdt:P27 wd:Q145.\n  ?x wdt:P175 ?y.\n  FILTER(?y = \"Q79037\")\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'how many of spiderman perfomers are citizens of the united kingdom?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"United Kingdom\": \"Q145\", \"Spider-Man\": \"Q79037\"}, \"relationships\": {\"country of citizenship\": \"P27\", \"portrayed by\": \"P175\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(DISTINCT ?x) WHERE {\n  ?x wdt:P27 wd:Q145.\n  ?x wdt:P175 ?y.\n  FILTER(?y = \"Q79037\")\n}\n```"
    },
    {
        "question": "how many official languages does the united states of america have?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?lan) AS ?result) WHERE {wd:Q30 p:P37/ps:P37 ?lan}",
        "generated_sparql": "SELECT COUNT(*) AS num_languages\nWHERE {\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'how many official languages does the united states of america have?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"United States of America\": \"Q30\"}, \"relationships\": {\"official language\": \"P37\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) AS num_languages\nWHERE {\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:list { bd:serviceParam wikibase:listType \"all\". }\n  SERVICE wikibase:list WHERE { wikibase:item wikibase:label { bd:serviceParam wikibase:language \"en\". } wikibase:P37 ?lang }\n  FILTER(CONTAINS(?lang, \"Q30\"))\n}\n```"
    },
    {
        "question": "How many official languages has Pakistan ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?lan) AS ?result) WHERE {wd:Q843 p:P37/ps:P37 ?lan}",
        "generated_sparql": "SELECT COUNT(*) AS num_official_languages\r\nWHERE {\r\n  ?s wdt:P37 wd:Q843\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many official languages has Pakistan ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Pakistan\": \"Q843\"}, \"relationships\": {\"official language\": \"P37\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_official_languages\r\nWHERE {\r\n  ?s wdt:P37 wd:Q843\r\n}\r\n```"
    },
    {
        "question": "How many Oscars did all the movies directed by Hayao Miyazaki combined win?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?aw) AS ?result) WHERE {?film wdt:P57 wd:Q55400; wdt:P166 ?aw. ?aw  wdt:P31 wd:Q19020}",
        "generated_sparql": "SELECT COUNT(*) AS total_oscars_won\r\nWHERE {\r\n  ?movie wdt:P31 wd:Q19020. # Movie\r\n  ?movie wdt:P57 ?director. # Directed by\r\n  ?director wdt:P57 wd:Q55400. # Hayao Miyazaki\r\n  ?movie wdt:P166 ?award. # Won an Academy Award\r\n  ?award wdt:P166 wd:Q19020. # Academy Award\r\n}\r\nGROUP BY ?movie",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many Oscars did all the movies directed by Hayao Miyazaki combined win?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Hayao Miyazaki\": \"Q55400\", \"Academy Award\": \"Q19020\"}, \"relationships\": {\"director\": \"P57\", \"award\": \"P166\", \"instance of\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS total_oscars_won\r\nWHERE {\r\n  ?movie wdt:P31 wd:Q19020. # Movie\r\n  ?movie wdt:P57 ?director. # Directed by\r\n  ?director wdt:P57 wd:Q55400. # Hayao Miyazaki\r\n  ?movie wdt:P166 ?award. # Won an Academy Award\r\n  ?award wdt:P166 wd:Q19020. # Academy Award\r\n}\r\nGROUP BY ?movie\r\n```"
    },
    {
        "question": "How many paintings of Pablo Picasso were ever in a museum?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?painting) AS ?result) WHERE {?painting wdt:P31 wd:Q3305213; wdt:P170 wd:Q5593; wdt:P276 ?loc. ?loc wdt:P31/wdt:P279* wd:Q33506}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?p) WHERE {\r\n  ?p wdt:P31 wd:Q33506;\r\n  ?p wdt:P276 ?m;\r\n  ?m wdt:P31 wd:Q5593;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many paintings of Pablo Picasso were ever in a museum?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"painting\": \"\", \"Pablo Picasso\": \"Q5593\", \"museum\": \"Q33506\"}, \"relationships\": {\"creator\": \"P170\", \"location\": \"P276\", \"instance of\": \"P31\", \"part of\": \"P279\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?p) WHERE {\r\n  ?p wdt:P31 wd:Q33506;\r\n  ?p wdt:P276 ?m;\r\n  ?m wdt:P31 wd:Q5593;\r\n}\r\n```"
    },
    {
        "question": "How many people can play \"Mensch \u00e4rgere dich nicht\" at most?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q545129 wdt:P1873 ?result}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?player) ?max_players\r\nWHERE {\r\n  ?player wdt:P1873 wd:Q545129 .\r\n}\r\nGROUP BY ?player\r\nHAVING COUNT(DISTINCT ?player) = 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many people can play \"Mensch \u00e4rgere dich nicht\" at most?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Mensch \u00e4rgere dich nicht\": \"Q545129\"}, \"relationships\": {\"number of players\": \"P1873\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?player) ?max_players\r\nWHERE {\r\n  ?player wdt:P1873 wd:Q545129 .\r\n}\r\nGROUP BY ?player\r\nHAVING COUNT(DISTINCT ?player) = 1\r\n```"
    },
    {
        "question": "How many people did Oscar Pistorius kill?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?people) AS ?result) WHERE {?people wdt:P31 wd:Q5;wdt:P157 wd:Q201377}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?person) WHERE {\n  ?person wdt:P31 wd:Q201377.\n  ?person wdt:P157 wd:Q201377.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many people did Oscar Pistorius kill?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Oscar Pistorius\": \"Q201377\", \"human\": \"Q5\"}, \"relationships\": {\"instance of\": \"P31\", \"killed\": \"P157\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(DISTINCT ?person) WHERE {\n  ?person wdt:P31 wd:Q201377.\n  ?person wdt:P157 wd:Q201377.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  FILTER(REGEXP(STR(?person), \"Q5\"))\n}\n```"
    },
    {
        "question": "How many people died due to the Great Leap Forward according to the highest estimate?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (MAX(?d) AS ?result) WHERE {wd:Q58715 wdt:P1542/wdt:P1120 ?d}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?person) AS num_deaths\nWHERE {\n  ?person wdt:P1120 wd:Q58715.\n  ?person wdt:P1542 ?estimate.\n  FILTER(?estimate = \"highest estimate\")\n}\nGROUP BY ?person",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many people died due to the Great Leap Forward according to the highest estimate?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Great Leap Forward\": \"Q58715\"}, \"relationships\": {\"number of deaths\": \"P1120\", \"estimate\": \"P1542\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(DISTINCT ?person) AS num_deaths\nWHERE {\n  ?person wdt:P1120 wd:Q58715.\n  ?person wdt:P1542 ?estimate.\n  FILTER(?estimate = \"highest estimate\")\n}\nGROUP BY ?person\n```"
    },
    {
        "question": "How many people have won the Nobel Prize in Literature since its inception?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?people) AS ?result) WHERE {?people wdt:P31 wd:Q5; wdt:P166 wd:Q37922}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?person) WHERE {\n  ?person wdt:P31 wd:Q5.\n  ?person wdt:P166 wd:Q37922.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many people have won the Nobel Prize in Literature since its inception?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"human\": \"Q5\", \"Nobel Prize in Literature\": \"Q37922\"}, \"relationships\": {\"instance of\": \"P31\", \"award received\": \"P166\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(DISTINCT ?person) WHERE {\n  ?person wdt:P31 wd:Q5.\n  ?person wdt:P166 wd:Q37922.\n}\n```"
    },
    {
        "question": "How many people live in cities in the vicinity of the Nile ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (SUM (?pop) AS ?result) WHERE {?city wdt:P31 wd:Q515; wdt:P206 wd:Q3392; wdt:P1082 ?pop}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?city) AS population\r\nWHERE {\r\n  ?city wdt:P31 wd:Q515. # city\r\n  ?city wdt:P206 ?nile. # located in the administrative territorial entity\r\n  ?nile wdt:P31 wd:Q3392. # Nile\r\n  ?city wdt:P1082 ?population. # population\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many people live in cities in the vicinity of the Nile ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"city\": null, \"Nile\": \"Q3392\", \"inhabited place\": \"Q515\"}, \"relationships\": {\"instance of\": \"P31\", \"located near\": null, \"located in the administrative territorial entity\": \"P206\", \"population\": \"P1082\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?city) AS population\r\nWHERE {\r\n  ?city wdt:P31 wd:Q515. # city\r\n  ?city wdt:P206 ?nile. # located in the administrative territorial entity\r\n  ?nile wdt:P31 wd:Q3392. # Nile\r\n  ?city wdt:P1082 ?population. # population\r\n}\r\n```"
    },
    {
        "question": "How many pitch classes are part of the chromatic scale?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?note) AS ?result) WHERE {wd:Q202021 wdt:P527 ?note. ?note wdt:P31 wd:Q1760309}",
        "generated_sparql": "SELECT COUNT(*) AS num_pitch_classes\r\nWHERE {\r\n  ?chromatic_scale wdt:P31 wd:Q202021;\r\n  ?chromatic_scale wdt:P527 ?pitch_class;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many pitch classes are part of the chromatic scale?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"chromatic scale\": \"Q202021\", \"pitch class\": \"Q1760309\"}, \"relationships\": {\"has part\": \"P527\", \"instance of\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_pitch_classes\r\nWHERE {\r\n  ?chromatic_scale wdt:P31 wd:Q202021;\r\n  ?chromatic_scale wdt:P527 ?pitch_class;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  ?pitch_class wdt:P31 wd:Q1760309;\r\n}\r\nGROUP BY ?pitch_class\r\n```"
    },
    {
        "question": "how many plays has William Shakespeare written in the 16th century.",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?play) AS ?result) WHERE {?play wdt:P31 wd:Q7725634; wdt:P7937 wd:Q25379; wdt:P50 wd:Q692; wdt:P571 ?inc FILTER(YEAR(?inc) < 1600)}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?play) WHERE {\n  ?play wdt:instanceOf wd:Q7725634.\n  ?play wdt:genre wd:Q25379.\n  ?play wdt:author wd:Q692.\n  ?play wdt:inception wd:P571.\n  FILTER(YEAR(?play) >= 1500 && YEAR(?play) <= 1600)\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'how many plays has William Shakespeare written in the 16th century.' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"play\": \"?play\", \"drama\": \"Q7725634\", \"tragedy\": \"Q25379\", \"William Shakespeare\": \"Q692\"}, \"relationships\": {\"instance of\": \"P31\", \"genre\": \"P7937\", \"author\": \"P50\", \"inception\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(DISTINCT ?play) WHERE {\n  ?play wdt:instanceOf wd:Q7725634.\n  ?play wdt:genre wd:Q25379.\n  ?play wdt:author wd:Q692.\n  ?play wdt:inception wd:P571.\n  FILTER(YEAR(?play) >= 1500 && YEAR(?play) <= 1600)\n}\n```"
    },
    {
        "question": "How many poems did Allen Ginsberg published?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?poem) AS ?result) WHERE {?poem wdt:P31 wd:Q7725634; wdt:P50 wd:Q6711; wdt:P136/wdt:P279* wd:Q482}",
        "generated_sparql": "SELECT COUNT(*) AS num_poems\r\nWHERE {\r\n  ?poem wdt:P31 wd:Q7725634 .\r\n  ?poem wdt:P50 wd:Q482 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many poems did Allen Ginsberg published?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"poem\": \"\", \"Allen Ginsberg\": \"Q6711\", \"literary work\": \"Q7725634\", \"author\": \"Q482\"}, \"relationships\": {\"instance of\": \"P31\", \"author\": \"P50\", \"genre\": \"P136\", \"main subject\": \"P279\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_poems\r\nWHERE {\r\n  ?poem wdt:P31 wd:Q7725634 .\r\n  ?poem wdt:P50 wd:Q482 .\r\n}\r\n```"
    },
    {
        "question": "How many political parties have ever had seats in the German Bundestag ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?group) AS ?result) WHERE {?group wdt:P31/wdt:P279* wd:Q7278. ?group p:P1410 ?ps. ?ps pq:P194 wd:Q154797; ps:P1410 ?seats. FILTER(?seats > 0)}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?party) AS num_parties\nWHERE {\n  ?party wdt:P1410 ?num_seats.\n  ?party wdt:P194 ?country.\n  ?country wdt:P183 ?germany.\n  ?germany wdt:P154797 ?bundestag.\n  ?bundestag wdt:P31 ?party.\n  ?party wdt:P279 ?germany.\n}\nGROUP BY ?party\nHAVING ?num_seats > 0",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many political parties have ever had seats in the German Bundestag ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Germany\": \"Q183\", \"Bundestag\": \"Q154797\"}, \"relationships\": {\"instance of\": \"P31\", \"part of\": \"P279\", \"member of political party\": \"P1410\", \"number of seats\": \"P1410\", \"of\": \"P194\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(DISTINCT ?party) AS num_parties\nWHERE {\n  ?party wdt:P1410 ?num_seats.\n  ?party wdt:P194 ?country.\n  ?country wdt:P183 ?germany.\n  ?germany wdt:P154797 ?bundestag.\n  ?bundestag wdt:P31 ?party.\n  ?party wdt:P279 ?germany.\n}\nGROUP BY ?party\nHAVING ?num_seats > 0\n```"
    },
    {
        "question": "How many positions did Kobe Bryant play in his team?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?pos) AS ?result) WHERE {wd:Q25369 wdt:P413 ?pos}",
        "generated_sparql": "SELECT COUNT(*) AS num_positions\r\nWHERE {\r\n  ?s wdt:P413 wd:Q25369.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many positions did Kobe Bryant play in his team?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Kobe Bryant\": \"Q25369\"}, \"relationships\": {\"position played\": \"P413\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_positions\r\nWHERE {\r\n  ?s wdt:P413 wd:Q25369.\r\n}\r\n```"
    },
    {
        "question": "How many prizes are there established by Alfred Nobel ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?prize) AS ?result) WHERE {wd:Q7191 wdt:P527 ?prize; wdt:P112 wd:Q23810}",
        "generated_sparql": "SELECT COUNT(*) AS num_prizes\r\nWHERE {\r\n  ?prize wdt:P527 wd:Q23810 .\r\n  ?prize wdt:P112 wd:Q7191 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many prizes are there established by Alfred Nobel ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Alfred Nobel\": \"Q7191\", \"Nobel Prize\": \"Q23810\"}, \"relationships\": {\"founder\": \"P112\", \"award\": \"P527\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_prizes\r\nWHERE {\r\n  ?prize wdt:P527 wd:Q23810 .\r\n  ?prize wdt:P112 wd:Q7191 .\r\n}\r\n```"
    },
    {
        "question": "Did SpaceX ever operate a space mission that was a failed launch?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {?mission wdt:P31 wd:Q2133344, wd:Q99654400; wdt:P137 wd:Q193701}",
        "generated_sparql": "SELECT ?s WHERE {\n  ?s wdt:P31 wd:Q2133344.\n  ?s wdt:P137 wd:Q99654400.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Did SpaceX ever operate a space mission that was a failed launch?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"SpaceX\": \"Q2133344\", \"space mission\": \"\", \"failed launch\": \"Q99654400\"}, \"relationships\": {\"instance of\": \"P31\", \"operator\": \"P137\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?s WHERE {\n  ?s wdt:P31 wd:Q2133344.\n  ?s wdt:P137 wd:Q99654400.\n}\n```"
    },
    {
        "question": "How many people nominated for the nobel prize in chemistry didn't ever win it?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?peo) AS ?result) WHERE {?peo wdt:P31 wd:Q5; wdt:P1411 wd:Q44585. FILTER(NOT EXISTS{?peo wdt:P166 wd:Q44585})}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?person) WHERE {\r\n  ?person wdt:P31 wd:Q5. # human\r\n  ?person wdt:P1411 ?prize. # nominated for Nobel Prize in Chemistry\r\n  ?prize wdt:P166 ?value. # won Nobel Prize in Chemistry\r\n  FILTER(?value = false) # only count those who didn't win\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many people nominated for the nobel prize in chemistry didn't ever win it?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"human\": \"Q5\", \"Nobel Prize in Chemistry\": \"Q44585\"}, \"relationships\": {\"instance of\": \"P31\", \"nominated for\": \"P1411\", \"winner\": \"P166\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?person) WHERE {\r\n  ?person wdt:P31 wd:Q5. # human\r\n  ?person wdt:P1411 ?prize. # nominated for Nobel Prize in Chemistry\r\n  ?prize wdt:P166 ?value. # won Nobel Prize in Chemistry\r\n  FILTER(?value = false) # only count those who didn't win\r\n}\r\n```"
    },
    {
        "question": "How many seasons does Pose have?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result {wd:Q30603704 wdt:P2437 ?result}",
        "generated_sparql": "SELECT COUNT(*) AS num_seasons\r\nWHERE {\r\n  ?s wdt:P2437 wd:Q30603704 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many seasons does Pose have?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Pose\": \"Q30603704\"}, \"relationships\": {\"number of seasons\": \"P2437\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_seasons\r\nWHERE {\r\n  ?s wdt:P2437 wd:Q30603704 .\r\n}\r\n```"
    },
    {
        "question": "How many seats are there in the current German Bundestag ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {wd:Q154797 wdt:P1342 ?result}",
        "generated_sparql": "SELECT COUNT(*) AS seats\r\nWHERE {\r\n  ?s wdt:P1342 wd:Q154797;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many seats are there in the current German Bundestag ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"German Bundestag\": \"Q154797\"}, \"relationships\": {\"number of seats\": \"P1342\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS seats\r\nWHERE {\r\n  ?s wdt:P1342 wd:Q154797;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\n```"
    },
    {
        "question": "How many siblings had the author of \u201cLittle Women\u201d ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?sib) AS ?result) WHERE {wd:Q523076 wdt:P50 ?aut. ?aut wdt:P3373 ?sib}",
        "generated_sparql": "",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many siblings had the author of \u201cLittle Women\u201d ?' from the knowledge graph Wikidata with the following context: 'None'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS siblings_count\r\nWHERE {\r\n  ?author wdt:P31 wd:Q1225. # author of Little Women\r\n  ?author wdt:P31 wd:Q1225. # author of Little Women\r\n  ?author wdt:P31 wd:Q1225. # author of Little Women\r\n  ?author wdt:P31 wd:Q1225. # author of Little Women\r\n  ?author wdt:P31 wd:Q1225. # author of Little Women\r\n  ?author wdt:P31 wd:Q1225. # author of Little Women\r\n  ?author wdt:P31 wd:Q1225. # author of Little Women\r\n  ?author wdt:P31 wd:Q1225. # author of Little Women\r\n  ?author wdt:P31 wd:Q1225. # author of Little Women\r\n  ?author wdt:P31 wd:Q1225. # author of Little Women\r\n  ?author wdt:P31 wd:Q1225. # author of Little Women\r\n  ?author wdt:P31 wd:Q1225. # author of Little Women\r\n  ?author wdt:P31 wd:Q1225. # author of Little Women\r\n  ?author wdt:P31 wd:Q1225. # author of Little Women\r\n  ?author wdt:P31 wd:Q1225. # author of Little Women\r\n  ?author wdt:P31 wd:Q1225. # author of Little Women\r\n  ?author wdt:P31 wd:Q1225. # author of Little Women\r\n  ?author wdt:P31 wd:Q1225. # author of Little Women\r\n  ?author wdt:P31 wd:Q1225. # author of Little Women\r\n  ?author wdt:P31 wd:Q122"
    },
    {
        "question": "How many ski resorts were there ever in France?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?ski) AS ?result) WHERE {?ski wdt:P31 wd:Q130003; wdt:P17 wd:Q142}",
        "generated_sparql": "SELECT COUNT(*) AS num_ski_resorts\r\nWHERE {\r\n  ?s wdt:P31 wd:Q142. # ski resort\r\n  ?s wdt:P17 wd:Q142. # France\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many ski resorts were there ever in France?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"France\": \"Q142\"}, \"relationships\": {\"instance of\": \"P31\", \"country\": \"P17\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_ski_resorts\r\nWHERE {\r\n  ?s wdt:P31 wd:Q142. # ski resort\r\n  ?s wdt:P17 wd:Q142. # France\r\n}\r\n```"
    },
    {
        "question": "How many songs were composed by Jay Chou but not released in his own albums?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?song) AS ?result) WHERE {?song wdt:P31 wd:Q7366; wdt:P86 wd:Q238819; wdt:P361 ?album. ?album wdt:P31 wd:Q482994; wdt:P175 ?per FILTER(?per != wd:Q238819)}",
        "generated_sparql": "SELECT COUNT(*) AS num_songs\r\nWHERE {\r\n  ?song wdt:P86 wd:Q238819 .\r\n  ?song wdt:P31 ?genre .\r\n  ?song wdt:P175 ?performer .\r\n  ?song wdt:P86 ?album .\r\n  FILTER(?album != ?performer)\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many songs were composed by Jay Chou but not released in his own albums?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Jay Chou\": \"Q238819\", \"song\": \"\", \"album\": \"\"}, \"relationships\": {\"composer\": \"P86\", \"genre\": \"P31\", \"performer\": \"P175\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_songs\r\nWHERE {\r\n  ?song wdt:P86 wd:Q238819 .\r\n  ?song wdt:P31 ?genre .\r\n  ?song wdt:P175 ?performer .\r\n  ?song wdt:P86 ?album .\r\n  FILTER(?album != ?performer)\r\n}\r\n```"
    },
    {
        "question": "How many works that are based on Spider-Man has Venom been a part of?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?work) AS ?result) WHERE {wd:Q1621261 wdt:P1441 ?work. ?work wdt:P144 wd:Q79037}",
        "generated_sparql": "SELECT COUNT(*) AS num_works\r\nWHERE {\r\n  ?work wdt:P1441 ?spider_man .\r\n  ?spider_man wdt:P144 ?venom .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many works that are based on Spider-Man has Venom been a part of?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Venom\": \"Q1621261\", \"Spider-Man\": \"Q79037\"}, \"relationships\": {\"based on\": \"P1441\", \"character in\": \"P144\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_works\r\nWHERE {\r\n  ?work wdt:P1441 ?spider_man .\r\n  ?spider_man wdt:P144 ?venom .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(CONTAINS(?spider_man, \"Q79037\") && CONTAINS(?venom, \"Q1621261\"))\r\n}\r\n```"
    },
    {
        "question": "How many spouses had Rama V (one of the former Kings of Siam)?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?sp) AS ?result) WHERE {wd:Q158861 wdt:P26 ?sp}",
        "generated_sparql": "SELECT COUNT(*) AS num_spouses\r\nWHERE {\r\n  ?s wdt:P26 wd:Q158861.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many spouses had Rama V (one of the former Kings of Siam)?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Rama V\": \"Q158861\"}, \"relationships\": {\"spouse\": \"P26\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_spouses\r\nWHERE {\r\n  ?s wdt:P26 wd:Q158861.\r\n}\r\n```"
    },
    {
        "question": "Does Switzerland have a place north of the Point (8.57 47.8)?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q39 wdt:P1332 ?loc FILTER(?loc > \"Point(8.57 47.8)\"^^geo:wktLiteral)}",
        "generated_sparql": "SELECT ?place\r\nWHERE {\r\n  ?place wdt:P1332 wd:Q39;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Does Switzerland have a place north of the Point (8.57 47.8)?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Switzerland\": \"Q39\"}, \"relationships\": {\"location\": \"P1332\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?place\r\nWHERE {\r\n  ?place wdt:P1332 wd:Q39;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nORDER BY ?place\r\nLIMIT 1\r\n```"
    },
    {
        "question": "how many times has Giorgio Moroder won golden globe award?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?awards) AS ?result) WHERE {wd:Q312674 p:P166 ?awards. ?awards ps:P166/wdt:P31 wd:Q1011547}",
        "generated_sparql": "SELECT COUNT(*) AS num_wins\nWHERE {\n  ?person <awardReceived> ?award.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'how many times has Giorgio Moroder won golden globe award?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Giorgio Moroder\": \"Q312674\", \"Golden Globe Award\": \"Q1011547\"}, \"relationships\": {\"award received\": \"P166\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) AS num_wins\nWHERE {\n  ?person <awardReceived> ?award.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  FILTER(CONTAINS(?person, \"Giorgio Moroder\") && CONTAINS(?award, \"Golden Globe Award\"))\n}\nGROUP BY ?person\nHAVING ?person = \"Q312674\"\n```"
    },
    {
        "question": "How many Olympic Games has Kobe Bryant taken part in?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?ol) AS ?result) WHERE {wd:Q25369 wdt:P1344 ?ol. ?ol wdt:P31/wdt:P279 wd:Q5389}",
        "generated_sparql": "SELECT COUNT(*) AS num_olympic_games\nWHERE {\n  ?s wdt:P1344 ?o.\n  ?s wdt:P31 wd:Q5389.\n  ?s wdt:P279 ?o.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many Olympic Games has Kobe Bryant taken part in?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Kobe Bryant\": \"Q25369\", \"Olympic Games\": \"Q5389\"}, \"relationships\": {\"participant\": \"P1344\", \"instance of\": \"P31\", \"part of\": \"P279\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) AS num_olympic_games\nWHERE {\n  ?s wdt:P1344 ?o.\n  ?s wdt:P31 wd:Q5389.\n  ?s wdt:P279 ?o.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  WHERE {\n    ?s wikibase:label ?label.\n    FILTER(REGEXP(?label, \"Kobe Bryant\"))\n  }\n}\n```"
    },
    {
        "question": "How many times was Oskar Lafontaine elected Member of the Landtag of Saarland?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?s) AS ?result) WHERE {wd:Q110719 p:P39 ?s. ?s ps:P39 wd:Q18130478}",
        "generated_sparql": "SELECT COUNT(*) AS num_elections\r\nWHERE {\r\n  ?person wdt:P39 wd:Q18130478 .\r\n  ?person wdt:P39 wd:Q110719 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many times was Oskar Lafontaine elected Member of the Landtag of Saarland?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Oskar Lafontaine\": \"Q110719\", \"Member of the Landtag of Saarland\": \"Q18130478\"}, \"relationships\": {\"held political office\": \"P39\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_elections\r\nWHERE {\r\n  ?person wdt:P39 wd:Q18130478 .\r\n  ?person wdt:P39 wd:Q110719 .\r\n}\r\n```"
    },
    {
        "question": "How many wars did the Empire of Japan participate in?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?war) AS ?result) WHERE {wd:Q188712 wdt:P1344 ?war. ?war wdt:P31 wd:Q198}",
        "generated_sparql": "SELECT COUNT(*) AS num_wars\r\nWHERE {\r\n  ?s wd:P1344 ?o .\r\n  ?s wikidata:Q188712 ?o .\r\n}\r\nGROUP BY ?s\r\nHAVING ?s wikidata:Q188712",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many wars did the Empire of Japan participate in?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Empire of Japan\": \"Q188712\"}, \"relationships\": {\"participant of\": \"P1344\", \"instance of\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_wars\r\nWHERE {\r\n  ?s wd:P1344 ?o .\r\n  ?s wikidata:Q188712 ?o .\r\n}\r\nGROUP BY ?s\r\nHAVING ?s wikidata:Q188712\r\n```"
    },
    {
        "question": "How many women were amongst the founding members of \u201cThe Bridge\u201d (\u201cDie Br\u00fccke\u201d)?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?f) AS ?result) WHERE {wd:Q152778 wdt:P112 ?f. ?f wdt:P21 wd:Q6581072}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?w) WHERE {\r\n  ?w wd:P21 wd:Q6581072 .\r\n  ?w wd:P112 ?b .\r\n  ?b wd:Q152778 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many women were amongst the founding members of \u201cThe Bridge\u201d (\u201cDie Br\u00fccke\u201d)?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"The Bridge (Die Br\u00fccke)\": \"Q152778\", \"female\": \"Q6581072\"}, \"relationships\": {\"founding member\": \"P112\", \"sex or gender\": \"P21\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?w) WHERE {\r\n  ?w wd:P21 wd:Q6581072 .\r\n  ?w wd:P112 ?b .\r\n  ?b wd:Q152778 .\r\n}\r\n```"
    },
    {
        "question": "Who has a higher observed lifespan out of the common bottlenose dolphin and the brown bear?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P4214 ?ls. FILTER(?result IN (wd:Q174199, wd:Q36341))} ORDER BY DESC(?ls) LIMIT 1",
        "generated_sparql": "SELECT ?x WHERE {\n  ?x wdt:P4214 ?y.\n  ?x wdt:P4214 ?z.\n  ?y wdt:P4214 ?z.\n  ?x wdt:P4214 ?z.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Who has a higher observed lifespan out of the common bottlenose dolphin and the brown bear?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"common bottlenose dolphin\": \"Q174199\", \"brown bear\": \"Q36341\"}, \"relationships\": {\"observed lifespan\": \"P4214\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?x WHERE {\n  ?x wdt:P4214 ?y.\n  ?x wdt:P4214 ?z.\n  ?y wdt:P4214 ?z.\n  ?x wdt:P4214 ?z.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  FILTER(CONTAINS(?x, \"Q174199\") || CONTAINS(?x, \"Q36341\"))\n}\nORDER BY ?y DESC\nLIMIT 1\n```"
    },
    {
        "question": "What is TNFAIP1 ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {wd:Q18032040 wdt:P31 ?result}",
        "generated_sparql": "SELECT ?label\r\nWHERE {\r\n  ?s wdt:P31 wd:Q18032040.\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What is TNFAIP1 ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"TNFAIP1\": \"Q18032040\"}, \"relationships\": {\"instance of\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?label\r\nWHERE {\r\n  ?s wdt:P31 wd:Q18032040.\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\n```"
    },
    {
        "question": "How often did Naomi Novik win the nebula award?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(?award) AS ?result) WHERE {wd:Q242643 p:P166/ps:P166 ?award FILTER(?award = wd:Q194285)}",
        "generated_sparql": "SELECT COUNT(*) AS num_wins\r\nWHERE {\r\n  ?author wdt:P166 wd:Q194285 .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How often did Naomi Novik win the nebula award?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Naomi Novik\": \"Q242643\", \"Nebula Award\": \"Q194285\"}, \"relationships\": {\"award received\": \"P166\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_wins\r\nWHERE {\r\n  ?author wdt:P166 wd:Q194285 .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(str(?author) = \"Naomi Novik\")\r\n}\r\n```"
    },
    {
        "question": "How often did the Mongols try to invade Japan?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?time) AS ?result) WHERE {wd:Q208156 wdt:P585 ?time}",
        "generated_sparql": "SELECT COUNT(*) AS num_invasion_attempts\r\nWHERE {\r\n  ?s wdt:P585 ?o\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How often did the Mongols try to invade Japan?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Mongols\": \"Q208156\"}, \"relationships\": {\"invasion\": \"P585\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_invasion_attempts\r\nWHERE {\r\n  ?s wdt:P585 ?o\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n  ?s wdt:P31 wd:Q208156\r\n}\r\nGROUP BY ?s\r\nHAVING ?s = wd:Q208156\r\n```"
    },
    {
        "question": "How often was Naomi Novik nominated for a Hugo Award?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(?award) AS ?result) WHERE {wd:Q242643 p:P1411/ps:P1411 ?award FILTER(?award = wd:Q188914)}",
        "generated_sparql": "SELECT COUNT(*) AS num_nominations\r\nWHERE {\r\n  ?s wdt:P1411 ?o\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How often was Naomi Novik nominated for a Hugo Award?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Naomi Novik\": \"Q242643\", \"Hugo Award\": \"Q188914\"}, \"relationships\": {\"nominated for\": \"P1411\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_nominations\r\nWHERE {\r\n  ?s wdt:P1411 ?o\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  WHERE {\r\n    ?s wikibase:label ?l\r\n    FILTER(REGEXP(?l, \"Naomi Novik\"))\r\n    ?o wikibase:label ?l\r\n    FILTER(REGEXP(?l, \"Hugo Award\"))\r\n  }\r\n}\r\n```"
    },
    {
        "question": "How many years did the second oldest dog in the world live?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE{?dog wdt:P31 wd:Q144. ?dog wdt:P569 ?db; wdt:P570 ?dd BIND((YEAR(?dd) - YEAR(?db)) AS ?result)} ORDER BY DESC(?result) LIMIT 1 OFFSET 1",
        "generated_sparql": "",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many years did the second oldest dog in the world live?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"dog\": \"\"}, \"relationships\": {\"instance of\": \"P31\", \"birth date\": \"P569\", \"death date\": \"P570\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) AS years_lived\nFROM wikidata:Q128\nWHERE wikidata:Q128 IN (\n  SELECT wikidata:Q128\n  FROM wikidata:Q128\n  WHERE wikidata:P31 = \"P31/Q128\"\n  AND wikidata:P569 < wikidata:P570\n  AND wikidata:P569 > \"2022-01-01\"\n  AND wikidata:P570 > \"2022-01-01\"\n)\n```"
    },
    {
        "question": "if someone died in 1969, is there any chance they heard of queen\u2019s music?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q15862 wdt:P2031 ?start. FILTER(YEAR(?start) <= 1969)}",
        "generated_sparql": "SELECT ?person ?died ?heard_of_queen\r\nWHERE {\r\n  ?person wdt:P31 wd:Q15862. # Queen\r\n  ?person wdt:P431 ?died. # died\r\n  ?person wdt:P2031 ?heard_of_queen. # formation\r\n  FILTER(?died = \"1969\")\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'if someone died in 1969, is there any chance they heard of queen\u2019s music?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Queen\": \"Q15862\"}, \"relationships\": {\"formation\": \"P2031\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?person ?died ?heard_of_queen\r\nWHERE {\r\n  ?person wdt:P31 wd:Q15862. # Queen\r\n  ?person wdt:P431 ?died. # died\r\n  ?person wdt:P2031 ?heard_of_queen. # formation\r\n  FILTER(?died = \"1969\")\r\n}\r\n```"
    },
    {
        "question": "Is Dr. Pepper named after its inventor?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q623561 wdt:P138 ?na; wdt:P61 ?inv. FILTER(?inv = ?na)}",
        "generated_sparql": "SELECT ?x ?y WHERE {\n  ?x wdt:P138 wd:Q623561.\n  ?x wdt:P61 ?y.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Is Dr. Pepper named after its inventor?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Dr. Pepper\": \"Q623561\"}, \"relationships\": {\"named after\": \"P138\", \"inventor\": \"P61\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?x ?y WHERE {\n  ?x wdt:P138 wd:Q623561.\n  ?x wdt:P61 ?y.\n}\n```"
    },
    {
        "question": "In how many movies did Carey Mulligan and Ryan Gosling star together?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?movie) AS ?result) WHERE {?movie wdt:P31 wd:Q11424; wdt:P161 wd:Q193815, wd:Q219655}",
        "generated_sparql": "SELECT COUNT(*) AS num_movies\nWHERE {\n  ?m ?p31 ?p161 ?a .\n  ?a wdt:P31 wd:Q11424 .\n  ?a wdt:P161 wd:Q193815 .\n  ?a wdt:P161 wd:Q219655 .\n}\nGROUP BY ?m",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In how many movies did Carey Mulligan and Ryan Gosling star together?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Drive\": \"Q11424\", \"Ryan Gosling\": \"Q193815\", \"Carey Mulligan\": \"Q219655\"}, \"relationships\": {\"instance of\": \"P31\", \"starring\": \"P161\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) AS num_movies\nWHERE {\n  ?m ?p31 ?p161 ?a .\n  ?a wdt:P31 wd:Q11424 .\n  ?a wdt:P161 wd:Q193815 .\n  ?a wdt:P161 wd:Q219655 .\n}\nGROUP BY ?m\n```"
    },
    {
        "question": "in the country where ghost in the shell is born, who is the current head of the state?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {wd:Q92580 wdt:P495 ?country. ?country wdt:P35 ?result}",
        "generated_sparql": "SELECT ?headOfState WHERE {\n  ?country wdt:P495 wd:Q92580.\n  ?country wdt:P35 ?headOfState.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'in the country where ghost in the shell is born, who is the current head of the state?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Ghost in the Shell\": \"Q92580\"}, \"relationships\": {\"country of origin\": \"P495\", \"head of state\": \"P35\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?headOfState WHERE {\n  ?country wdt:P495 wd:Q92580.\n  ?country wdt:P35 ?headOfState.\n}\n```"
    },
    {
        "question": "How many rivers are in or next to the U.S. state where cage the elephant is from?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?bow) AS ?result) WHERE {wd:Q68061 wdt:P740/wdt:P131* ?state. ?state wdt:P31 wd:Q35657; wdt:P206 ?bow. ?bow wdt:P31 wd:Q4022}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?river) WHERE {\r\n  ?river wdt:P31 wd:Q4022. # river\r\n  ?river wdt:P131 wd:Q35657. # located in the administrative territorial entity\r\n  ?river wdt:P206 ?state. # location\r\n  ?state wdt:P740 ?cageTheElephant. # origin\r\n  ?cageTheElephant wdt:P31 wd:Q68061. # Cage the Elephant\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many rivers are in or next to the U.S. state where cage the elephant is from?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Cage the Elephant\": \"Q68061\", \"United States\": \"Q35657\", \"river\": \"Q4022\"}, \"relationships\": {\"origin\": \"P740\", \"located in the administrative territorial entity\": \"P131\", \"instance of\": \"P31\", \"location\": \"P206\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?river) WHERE {\r\n  ?river wdt:P31 wd:Q4022. # river\r\n  ?river wdt:P131 wd:Q35657. # located in the administrative territorial entity\r\n  ?river wdt:P206 ?state. # location\r\n  ?state wdt:P740 ?cageTheElephant. # origin\r\n  ?cageTheElephant wdt:P31 wd:Q68061. # Cage the Elephant\r\n}\r\n```"
    },
    {
        "question": "In which federal state is the Veltins brewery headquarter?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {wd:Q608350 wdt:P159 ?hql. ?hql wdt:P131* ?result. ?result wdt:P31 wd:Q1221156}",
        "generated_sparql": "SELECT ?hql\r\nWHERE {\r\n  ?hql wdt:P159 wd:Q608350 .\r\n  ?hql wdt:P131 wd:Q1221156 .\r\n  ?hql wdt:P31 wd:Q608350 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In which federal state is the Veltins brewery headquarter?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Veltins brewery\": \"Q608350\", \"federal state\": \"\", \"headquarter location\": \"?hql\", \"Germany\": \"Q1221156\"}, \"relationships\": {\"headquarter location\": \"P159\", \"located in the administrative territorial entity\": \"P131\", \"instance of\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?hql\r\nWHERE {\r\n  ?hql wdt:P159 wd:Q608350 .\r\n  ?hql wdt:P131 wd:Q1221156 .\r\n  ?hql wdt:P31 wd:Q608350 .\r\n}\r\n```"
    },
    {
        "question": "In which stadium do the New York Yankees play?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {wd:Q213417 wdt:P115 ?result}",
        "generated_sparql": "SELECT ?stadium WHERE {\n  ?stadium wdt:P115 wd:Q213417.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In which stadium do the New York Yankees play?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"New York Yankees\": \"Q213417\"}, \"relationships\": {\"home stadium\": \"P115\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?stadium WHERE {\n  ?stadium wdt:P115 wd:Q213417.\n}\n```"
    },
    {
        "question": "In which countries is the Himalayas located?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q5451 wdt:P17 ?result}",
        "generated_sparql": "SELECT ?country ?countryLabel\nWHERE {\n  ?country wdt:P17 wd:Q5451.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In which countries is the Himalayas located?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Himalayas\": \"Q5451\"}, \"relationships\": {\"country\": \"P17\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?country ?countryLabel\nWHERE {\n  ?country wdt:P17 wd:Q5451.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n}\nORDER BY ?countryLabel\n```"
    },
    {
        "question": "Was Isfahan a capital in the year 934?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q42053 p:P1376 ?ps. ?ps pq:P580 ?start; pq:P582 ?end. FILTER((YEAR(?start) < 934) && (YEAR(?end) > 934))}",
        "generated_sparql": "SELECT ?x WHERE {\n  ?x wdt:P1376 wd:Q42053.\n  ?x wdt:P580 ?startTime.\n  ?x wdt:P582 ?endTime.\n  FILTER(?startTime <= \"934\" && ?endTime >= \"934\")\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Was Isfahan a capital in the year 934?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Isfahan\": \"Q42053\"}, \"relationships\": {\"capital of\": \"P1376\", \"start time\": \"P580\", \"end time\": \"P582\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?x WHERE {\n  ?x wdt:P1376 wd:Q42053.\n  ?x wdt:P580 ?startTime.\n  ?x wdt:P582 ?endTime.\n  FILTER(?startTime <= \"934\" && ?endTime >= \"934\")\n}\n```"
    },
    {
        "question": "In how many countries has IKEA been established?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?c) AS ?result) WHERE {wd:Q1769361 wdt:P527 ?c. ?c p:P31/ps:P31 wd:Q6256}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?country) AS numCountries\nWHERE {\n  ?country wdt:P31 wd:Q6256.\n  ?country wdt:P527 ?ikea.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In how many countries has IKEA been established?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"IKEA\": \"Q1769361\", \"country\": \"Q6256\"}, \"relationships\": {\"founding\": \"P527\", \"instance of\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(DISTINCT ?country) AS numCountries\nWHERE {\n  ?country wdt:P31 wd:Q6256.\n  ?country wdt:P527 ?ikea.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n}\nGROUP BY ?country\nHAVING COUNT(DISTINCT ?country) > 0\n```"
    },
    {
        "question": "In which country did the United Fruit Company have their headquarters?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE{wd:Q1771942 wdt:P159/wdt:P131* ?result. ?result wdt:P31 wd:Q6256}",
        "generated_sparql": "SELECT ?country WHERE {\n  ?company wdt:P159 ?location.\n  ?location wdt:P131 ?country.\n  ?company wdt:P31.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In which country did the United Fruit Company have their headquarters?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"United Fruit Company\": \"Q1771942\"}, \"relationships\": {\"headquarters location\": \"P159\", \"located in the administrative territorial entity\": \"P131\", \"instance of\": \"P31\", \"country\": \"Q6256\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?country WHERE {\n  ?company wdt:P159 ?location.\n  ?location wdt:P131 ?country.\n  ?company wdt:P31.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:list { bd:serviceParam wikibase:listType \"all\". }\n  FILTER(CONTAINS(?country, \"Q6256\"))\n}\n```"
    },
    {
        "question": "In how many countries is pysanka practiced?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?c) AS ?result) WHERE {wd:Q3233785 wdt:P17 ?c}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?country) AS num_countries\r\nWHERE {\r\n  ?country wdt:P17 wd:Q3233785.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In how many countries is pysanka practiced?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"pysanka\": \"Q3233785\"}, \"relationships\": {\"country\": \"P17\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?country) AS num_countries\r\nWHERE {\r\n  ?country wdt:P17 wd:Q3233785.\r\n}\r\n```"
    },
    {
        "question": "In which country is Oberirrach ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {wd:Q98138090 wdt:P17 ?result}",
        "generated_sparql": "SELECT ?country\r\nWHERE {\r\n  ?country wdt:P17 wd:Q98138090.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In which country is Oberirrach ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Oberirrach\": \"Q98138090\"}, \"relationships\": {\"country\": \"P17\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?country\r\nWHERE {\r\n  ?country wdt:P17 wd:Q98138090.\r\n}\r\n```"
    },
    {
        "question": "In which country was Spotify created?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {wd:Q689141 wdt:P495 ?result}",
        "generated_sparql": "SELECT ?country\r\nWHERE {\r\n  ?entity wdt:P495 ?country;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In which country was Spotify created?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Spotify\": \"Q689141\"}, \"relationships\": {\"country of origin\": \"P495\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?country\r\nWHERE {\r\n  ?entity wdt:P495 ?country;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam"
    },
    {
        "question": "What is the song Vogue by Madonna named after?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE{wd:Q1128775 wdt:P175 wd:Q1744; wdt:P138 ?result}",
        "generated_sparql": "SELECT ?song ?name WHERE {\n  ?song wdt:P175 wd:Q1744.\n  ?song wdt:P138 ?name.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What is the song Vogue by Madonna named after?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Vogue\": \"Q1128775\", \"Madonna\": \"Q1744\"}, \"relationships\": {\"performer\": \"P175\", \"named after\": \"P138\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?song ?name WHERE {\n  ?song wdt:P175 wd:Q1744.\n  ?song wdt:P138 ?name.\n}\n```"
    },
    {
        "question": "in which language does the united stated have the shortest short name?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {wd:Q30 wdt:P1813 ?name BIND(lang(?name) AS ?result)} ORDER BY ASC(strlen(?name)) LIMIT 1",
        "generated_sparql": "SELECT ?lang\nWHERE {\n  ?country wdt:P1813 ?shortName.\n  ?country wdt:P407 ?lang.\n  FILTER(CONTAINS(?shortName, \"United States\"))\n  ORDER BY LENGTH(?shortName) ASC\n  LIMIT 1\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'in which language does the united stated have the shortest short name?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"United States\": \"Q30\"}, \"relationships\": {\"short name\": \"P1813\", \"language of work or name\": \"P407\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?lang\nWHERE {\n  ?country wdt:P1813 ?shortName.\n  ?country wdt:P407 ?lang.\n  FILTER(CONTAINS(?shortName, \"United States\"))\n  ORDER BY LENGTH(?shortName) ASC\n  LIMIT 1\n}\n```"
    },
    {
        "question": "Does Bremerhaven's local dialing code start with 4?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q2706 wdt:P473 ?code. FILTER regex(?code, \"^4\")}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P473 wd:Q2706;\r\n  FILTER(STR(?x) LIKE '4%')\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Does Bremerhaven's local dialing code start with 4?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Bremerhaven\": \"Q2706\"}, \"relationships\": {\"local dialing code\": \"P473\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P473 wd:Q2706;\r\n  FILTER(STR(?x) LIKE '4%')\r\n}\r\n```"
    },
    {
        "question": "In how many movies was Johnny Depp casted in?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?result) AS ?resultCnt) WHERE{?result wdt:P31 wd:Q11424; wdt:P161 wd:Q37175}",
        "generated_sparql": "SELECT COUNT(*) AS num_movies\r\nWHERE {\r\n  ?m wdt:P31 wd:Q11424 ; # Movie\r\n  ?m wdt:P161 ?p ; # Cast member\r\n  ?p wdt:P31 wd:Q37175 ; # Johnny Depp\r\n}\r\nGROUP BY ?m",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In how many movies was Johnny Depp casted in?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Human\": \"Q11424\", \"Johnny Depp\": \"Q37175\"}, \"relationships\": {\"instance of\": \"P31\", \"cast member\": \"P161\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_movies\r\nWHERE {\r\n  ?m wdt:P31 wd:Q11424 ; # Movie\r\n  ?m wdt:P161 ?p ; # Cast member\r\n  ?p wdt:P31 wd:Q37175 ; # Johnny Depp\r\n}\r\nGROUP BY ?m\r\n```"
    },
    {
        "question": "In which year did ABBA publish their album The Visitors ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE{wd:Q338553 wdt:P577 ?date. BIND(YEAR(?date) AS ?result)}",
        "generated_sparql": "SELECT ?year\r\nWHERE {\r\n  ?album wdt:P577 ?year\r\n  wd:Q338553 ?album\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In which year did ABBA publish their album The Visitors ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"ABBA\": \"Q338553\", \"The Visitors\": null}, \"relationships\": {\"publication date\": \"P577\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?year\r\nWHERE {\r\n  ?album wdt:P577 ?year\r\n  wd:Q338553 ?album\r\n}\r\n```"
    },
    {
        "question": "In which year was the author of \u201cThe Vanishing Half\u201d born?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {wd:Q98476957 wdt:P50/wdt:P569 ?date. BIND(YEAR(?date) AS ?result)}",
        "generated_sparql": "SELECT ?birthYear WHERE {\n  ?book wdt:P50 wd:Q98476957.\n  ?book wdt:P569 ?birthYear.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In which year was the author of \u201cThe Vanishing Half\u201d born?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"The Vanishing Half\": \"Q98476957\"}, \"relationships\": {\"author\": \"P50\", \"birth date\": \"P569\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?birthYear WHERE {\n  ?book wdt:P50 wd:Q98476957.\n  ?book wdt:P569 ?birthYear.\n}\n```"
    },
    {
        "question": "Is After Eight manufactured by Unilever?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q388973 wdt:P176 wd:Q157062}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P176 wd:Q157062;\r\n  ?x wdt:P176 wd:Q388973;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Is After Eight manufactured by Unilever?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"After Eight\": \"Q388973\", \"Unilever\": \"Q157062\"}, \"relationships\": {\"manufacturer\": \"P176\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P176 wd:Q157062;\r\n  ?x wdt:P176 wd:Q388973;\r\n}\r\n```"
    },
    {
        "question": "Is ALDI also in Italy?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q125054 wdt:P527/wdt:P17 wd:Q38}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P17 wd:Q38;\r\n  ?x wdt:P527 wd:Q125054;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Is ALDI also in Italy?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"ALDI\": \"Q125054\", \"Italy\": \"Q38\"}, \"relationships\": {\"subsidiary\": \"P527\", \"country\": \"P17\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P17 wd:Q38;\r\n  ?x wdt:P527 wd:Q125054;\r\n}\r\n```"
    },
    {
        "question": "is Isfahan a big city?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q42053 wdt:P31 wd:Q1549591}",
        "generated_sparql": "SELECT ?x WHERE {\n  ?x wdt:P31 wd:Q1549591.\n  ?x wdt:P31 wd:Q42053.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'is Isfahan a big city?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Isfahan\": \"Q42053\", \"big city\": \"Q1549591\"}, \"relationships\": {\"instance of\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?x WHERE {\n  ?x wdt:P31 wd:Q1549591.\n  ?x wdt:P31 wd:Q42053.\n}\n```"
    },
    {
        "question": "Is math related to science ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q395 ?p [?p2 wd:Q336]}",
        "generated_sparql": "SELECT ?p\r\nWHERE {\r\n  ?s wdt:P395. # mathematics\r\n  ?s wdt:P336. # science\r\n  ?s wdt:P182. # related to\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Is math related to science ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"mathematics\": \"Q395\", \"science\": \"Q336\"}, \"relationships\": {\"related to\": \"?p\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?p\r\nWHERE {\r\n  ?s wdt:P395. # mathematics\r\n  ?s wdt:P336. # science\r\n  ?s wdt:P182. # related to\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\n```"
    },
    {
        "question": "Is Python a kind of Programming languages?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q28865 p:P31/ps:P31 wd:Q9143}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P31 wd:Q9143;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Is Python a kind of Programming languages?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Python\": \"Q28865\", \"Programming languages\": \"Q9143\"}, \"relationships\": {\"instance of\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P31 wd:Q9143;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\n```"
    },
    {
        "question": "Is samurai champloo a piece of original work or an adaptation?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {wd:Q143276 wdt:P31/wdt:P279* ?result FILTER(?result IN (wd:Q104640197, wd:Q1213562))}",
        "generated_sparql": "SELECT ?s ?p ?o WHERE {\r\n  ?s wdt:P31 wd:Q143276.\r\n  ?s wdt:P279 wd:Q1213562.\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Is samurai champloo a piece of original work or an adaptation?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Samurai Champloo\": \"Q143276\", \"original work\": \"Q104640197\", \"adaptation\": \"Q1213562\"}, \"relationships\": {\"instance of\": \"P31\", \"based on\": \"P279\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s ?p ?o WHERE {\r\n  ?s wdt:P31 wd:Q143276.\r\n  ?s wdt:P279 wd:Q1213562.\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\n```"
    },
    {
        "question": "Was the first female chancellor in Germany ever married?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {{SELECT ?fc WHERE {wd:Q183 p:P6 ?ps. ?ps ps:P6 ?fc; pq:P580 ?st. ?fc wdt:P21 wd:Q6581072} ORDER BY ASC(?st) LIMIT 1} FILTER(EXISTS{?fc p:P26/ps:P26 ?sp})}",
        "generated_sparql": "SELECT ?x WHERE {\n  ?x wdt:P26 ?y.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Was the first female chancellor in Germany ever married?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"first female chancellor in Germany\": \"Q183\", \"Germany\": \"Q183\"}, \"relationships\": {\"spouse\": \"P26\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?x WHERE {\n  ?x wdt:P26 ?y.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  WHERE {\n    ?x wikibase:label ?label.\n    FILTER(REGEXP(?label, \"first female chancellor in Germany\", \"i\"))\n  }\n}\n```"
    },
    {
        "question": "Is the Mariana Trench deeper than Mount Everest is high (above sea level)?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q510 wdt:P2044 ?d. wd:Q513 wdt:P2044 ?h. FILTER(?d + ?h < 0)}",
        "generated_sparql": "SELECT ?trench ?mountain ?depth\nWHERE {\n  ?trench wdt:P31 wd:Q510.\n  ?mountain wdt:P31 wd:Q513.\n  ?trench wdt:P2044 ?depth.\n  ?mountain wdt:P2044 ?mountainHeight.\n  FILTER(?mountainHeight < ?depth)\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Is the Mariana Trench deeper than Mount Everest is high (above sea level)?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Mariana Trench\": \"Q510\", \"Mount Everest\": \"Q513\"}, \"relationships\": {\"depth\": \"P2044\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?trench ?mountain ?depth\nWHERE {\n  ?trench wdt:P31 wd:Q510.\n  ?mountain wdt:P31 wd:Q513.\n  ?trench wdt:P2044 ?depth.\n  ?mountain wdt:P2044 ?mountainHeight.\n  FILTER(?mountainHeight < ?depth)\n}\n```"
    },
    {
        "question": "Is the number of countries in Europe larger than that in Asia?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {{SELECT (COUNT (DISTINCT ?ac) AS ?acc) (COUNT (DISTINCT ?ec) AS ?ecc) WHERE {?ec p:P31/ps:P31 wd:Q6256; wdt:P30 wd:Q46. ?ac p:P31/ps:P31 wd:Q6256; wdt:P30 wd:Q48.}}FILTER(?ecc > ?acc)}",
        "generated_sparql": "",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Is the number of countries in Europe larger than that in Asia?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Europe\": \"Q46\", \"Asia\": \"Q48\", \"continent\": \"Q6256\"}, \"relationships\": {\"instance of\": \"P31\", \"continent\": \"P30\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) AS num_countries_in_Europe, COUNT(*) AS num_countries_in_Asia\nWHERE {\n  ?s wdt:P31 wd:Q46.\n  ?s wdt:P30 wd:Q6256.\n  ?s wdt:P31 wd:Q48.\n  ?s wdt:P30 wd:Q6256.\n  ?s wdt:P31 wd:Q46.\n  ?s wdt:P30 wd:Q6256.\n  ?s wdt:P31 wd:Q48.\n  ?s wdt:P30 wd:Q6256.\n  ?s wdt:P31 wd:Q46.\n  ?s wdt:P30 wd:Q6256.\n  ?s wdt:P31 wd:Q48.\n  ?s wdt:P30 wd:Q6256.\n  ?s wdt:P31 wd:Q46.\n  ?s wdt:P30 wd:Q6256.\n  ?s wdt:P31 wd:Q48.\n  ?s wdt:P30 wd:Q6256.\n  ?s wdt:P31 wd:Q46.\n  ?s wdt:P30 wd:Q6256.\n  ?s wdt:P31 wd:Q48.\n  ?s wdt:P30 wd:Q6256.\n  ?s wdt:P31 wd:Q46.\n  ?s wdt:P30 wd:Q6256.\n  ?s wdt:P31 wd:Q48.\n  ?s wdt:P30 wd:Q6256.\n  ?s wdt:P31 wd:Q46.\n  ?s wdt:P30 wd:Q6256.\n  ?s wdt"
    },
    {
        "question": "Is the production company of samurai champloo still existing?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q143276 wdt:P272 ?comp FILTER(NOT EXISTS{?comp wdt:P576 ?o})}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P272 wd:Q143276 .\r\n  ?x wdt:P576 true .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Is the production company of samurai champloo still existing?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Samurai Champloo\": \"Q143276\"}, \"relationships\": {\"production company\": \"P272\", \"dissolved, abolished or demolished\": \"P576\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P272 wd:Q143276 .\r\n  ?x wdt:P576 true .\r\n}\r\n```"
    },
    {
        "question": "is there female main character in hunter x hunter?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q696071 wdt:P674 ?char. ?char wdt:P21 wd:Q6581072}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P674 wd:Q696071 .\r\n  ?x wdt:P21 wd:Q6581072 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'is there female main character in hunter x hunter?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Hunter x Hunter\": \"Q696071\", \"female\": \"Q6581072\"}, \"relationships\": {\"main character\": \"P674\", \"gender\": \"P21\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P674 wd:Q696071 .\r\n  ?x wdt:P21 wd:Q6581072 .\r\n}\r\n```"
    },
    {
        "question": "Is water colorless?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q283 wdt:P462 wd:Q11567495}",
        "generated_sparql": "SELECT ?x ?y WHERE {\n  ?x wdt:P462 wd:Q11567495.\n  ?x wdt:P31 wd:Q283.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Is water colorless?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"water\": \"Q283\", \"colorless\": \"Q11567495\"}, \"relationships\": {\"has quality\": \"P462\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?x ?y WHERE {\n  ?x wdt:P462 wd:Q11567495.\n  ?x wdt:P31 wd:Q283.\n}\n```"
    },
    {
        "question": "Is Axel Rose a member of Guns N' Roses?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q11885 wdt:P463 wd:Q11895}",
        "generated_sparql": "SELECT ?x WHERE {\n  ?x wdt:P463 wd:Q11895.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Is Axel Rose a member of Guns N' Roses?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Axl Rose\": \"Q11885\", \"Guns N' Roses\": \"Q11895\"}, \"relationships\": {\"member of\": \"P463\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?x WHERE {\n  ?x wdt:P463 wd:Q11895.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  FILTER(CONTAINS(?x, \"Axl Rose\"))\n}\n```"
    },
    {
        "question": "Is the capital of Iran bigger than that of Germany?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q794 wdt:P36/wdt:P2046 ?a1. wd:Q183 wdt:P36/wdt:P2046 ?a2. FILTER(?a1 > ?a2)}",
        "generated_sparql": "SELECT ?Iran ?Germany ?IranPopulation ?GermanyPopulation WHERE {\n  ?Iran wdt:P36 wd:Q183.\n  ?Germany wdt:P36 wd:Q794.\n  ?Iran wdt:P2046 ?IranPopulation.\n  ?Germany wdt:P2046 ?GermanyPopulation.\n  ?IranPopulation > ?GermanyPopulation.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Is the capital of Iran bigger than that of Germany?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Iran\": \"Q794\", \"Germany\": \"Q183\"}, \"relationships\": {\"capital\": \"P36\", \"population\": \"P2046\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?Iran ?Germany ?IranPopulation ?GermanyPopulation WHERE {\n  ?Iran wdt:P36 wd:Q183.\n  ?Germany wdt:P36 wd:Q794.\n  ?Iran wdt:P2046 ?IranPopulation.\n  ?Germany wdt:P2046 ?GermanyPopulation.\n  ?IranPopulation > ?GermanyPopulation.\n}\n```"
    },
    {
        "question": "Is the Weser longer than the Rhine?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK{wd:Q1650 p:P2043/psn:P2043/wikibase:quantityAmount ?lenw. wd:Q584 p:P2043/psn:P2043/wikibase:quantityAmount ?lenr FILTER(?lenw > ?lenr)}",
        "generated_sparql": "SELECT ?weser ?rhine ?length\nWHERE {\n  ?weser wd:P31 wd:Q1650.\n  ?rhine wd:P31 wd:Q584.\n  ?weser wd:P2043 ?length.\n  ?rhine wd:P2043 ?length.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Is the Weser longer than the Rhine?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Weser\": \"Q1650\", \"Rhine\": \"Q584\"}, \"relationships\": {\"length\": \"P2043\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?weser ?rhine ?length\nWHERE {\n  ?weser wd:P31 wd:Q1650.\n  ?rhine wd:P31 wd:Q584.\n  ?weser wd:P2043 ?length.\n  ?rhine wd:P2043 ?length.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  FILTER(CONTAINS(?weser, \"Weser\") && CONTAINS(?rhine, \"Rhine\") && ?length > ?rhine)\n}\nORDER BY ?length DESC\nLIMIT 1\n```"
    },
    {
        "question": "Is Tony Blair taller than Tiger Woods?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q9545 p:P2048/psn:P2048/wikibase:quantityAmount ?hb. wd:Q10993 p:P2048/psn:P2048/wikibase:quantityAmount ?hw FILTER(?hb > ?hw)}",
        "generated_sparql": "SELECT ?t1 ?t2 ?t3 WHERE {\n  ?t1 wdt:P2048 wd:Q9545.\n  ?t2 wdt:P2048 wd:Q10993.\n  ?t3 wdt:P2048 ?t1 ?t2.\n  FILTER(?t3 < 0)\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Is Tony Blair taller than Tiger Woods?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Tony Blair\": \"Q9545\", \"Tiger Woods\": \"Q10993\"}, \"relationships\": {\"height\": \"P2048\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?t1 ?t2 ?t3 WHERE {\n  ?t1 wdt:P2048 wd:Q9545.\n  ?t2 wdt:P2048 wd:Q10993.\n  ?t3 wdt:P2048 ?t1 ?t2.\n  FILTER(?t3 < 0)\n}\n```"
    },
    {
        "question": "Is Chicago located at Lake Michigan?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q1297 wdt:P206 wd:Q1169}",
        "generated_sparql": "SELECT ?s WHERE {\n  ?s wdt:P206 wd:Q1169.\n  ?s wdt:P206 wd:Q1297.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Is Chicago located at Lake Michigan?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Chicago\": \"Q1297\", \"Lake Michigan\": \"Q1169\"}, \"relationships\": {\"located at\": \"P206\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?s WHERE {\n  ?s wdt:P206 wd:Q1169.\n  ?s wdt:P206 wd:Q1297.\n}\n```"
    },
    {
        "question": "Is the district of H\u00f6xter next to the district of Paderborn?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q6228 wdt:P47 wd:Q6224}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P47 wd:Q6228;\r\n  ?x wdt:P47 wd:Q6224;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Is the district of H\u00f6xter next to the district of Paderborn?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"H\u00f6xter\": \"Q6228\", \"Paderborn\": \"Q6224\"}, \"relationships\": {\"adjacent to\": \"P47\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P47 wd:Q6228;\r\n  ?x wdt:P47 wd:Q6224;\r\n}\r\n```"
    },
    {
        "question": "Are part of the Harz mountains in the district of Nordhausen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q4186 wdt:P131 wd:Q7858}",
        "generated_sparql": "SELECT ?s WHERE {\r\n  ?s wdt:P131 wd:Q7858 .\r\n  ?s wdt:P131 wd:Q4186 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Are part of the Harz mountains in the district of Nordhausen?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Harz\": \"Q4186\", \"Nordhausen\": \"Q7858\"}, \"relationships\": {\"located in the administrative territorial entity\": \"P131\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s WHERE {\r\n  ?s wdt:P131 wd:Q7858 .\r\n  ?s wdt:P131 wd:Q4186 .\r\n}\r\n```"
    },
    {
        "question": "How many people won the Nobel Prize in Literature or Physics since 2000?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?result) AS ?resultCnt) WHERE{?result wdt:P31 wd:Q5. ?result p:P166 ?ps. {?ps ps:P166 wd:Q37922} UNION {?ps ps:P166 wd:Q38104} ?ps pq:P585 ?time. FILTER(YEAR(?time) > 2000)}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?person)\nWHERE {\n  ?person wdt:P31 wd:Q5.\n  ?person wdt:awardReceived wd:Q37922.\n  ?person wdt:awardReceived wd:Q38104.\n  ?person wdt:pointInTime ?time.\n  FILTER(?time >= \"2000-01-01\" && ?time <= \"2021-12-31\")\n}\nGROUP BY ?person",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many people won the Nobel Prize in Literature or Physics since 2000?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"human\": \"Q5\", \"Nobel Prize in Literature\": \"Q37922\", \"Nobel Prize in Physics\": \"Q38104\"}, \"relationships\": {\"instance of\": \"P31\", \"award received\": \"P166\", \"point in time\": \"P585\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(DISTINCT ?person)\nWHERE {\n  ?person wdt:P31 wd:Q5.\n  ?person wdt:awardReceived wd:Q37922.\n  ?person wdt:awardReceived wd:Q38104.\n  ?person wdt:pointInTime ?time.\n  FILTER(?time >= \"2000-01-01\" && ?time <= \"2021-12-31\")\n}\nGROUP BY ?person\n```"
    },
    {
        "question": "How many african-american people got a star on the Hollywood Walk of Fame?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?act) AS ?result) WHERE {?act wdt:P31 wd:Q5; wdt:P166 wd:Q17985761; wdt:P172 wd:Q49085}",
        "generated_sparql": "SELECT COUNT(*) AS count\nWHERE {\n  ?person wdt:P31 wd:Q17985761.\n  ?person wdt:P166 wd:Q5.\n  ?person wdt:P172 wd:Q49085.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many african-american people got a star on the Hollywood Walk of Fame?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"African-American people\": \"Q5\", \"Hollywood Walk of Fame\": \"Q17985761\", \"human\": \"Q49085\"}, \"relationships\": {\"instance of\": \"P31\", \"award received\": \"P166\", \"country of origin\": \"P172\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) AS count\nWHERE {\n  ?person wdt:P31 wd:Q17985761.\n  ?person wdt:P166 wd:Q5.\n  ?person wdt:P172 wd:Q49085.\n}\n```"
    },
    {
        "question": "With how many countries does Australia share a border?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?country) AS ?result) WHERE {wd:Q408 wdt:P47 ?country. ?country p:P31/ps:P31 wd:Q6256}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?country) WHERE {\n  ?country wdt:P47 wd:P31 ?border.\n  ?border wdt:P47 wd:P31 ?country.\n  FILTER(?country != ?border)\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'With how many countries does Australia share a border?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Australia\": \"Q408\"}, \"relationships\": {\"border\": \"P47\", \"instance of\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(DISTINCT ?country) WHERE {\n  ?country wdt:P47 wd:P31 ?border.\n  ?border wdt:P47 wd:P31 ?country.\n  FILTER(?country != ?border)\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:interlanguageLink { bd:serviceParam wikibase:sourceLanguage \"en\". }\n  SERVICE wikibase:interlanguageLink { bd:serviceParam wikibase:targetLanguage \"en\". }\n  SERVICE wikibase:interlanguageLink { bd:serviceParam wikibase:targetLanguage \"en\". }\n  SERVICE wikibase:interlanguageLink { bd:serviceParam wikibase:targetLanguage \"en\". }\n  SERVICE wikibase:interlanguageLink { bd:serviceParam wikibase:targetLanguage \"en\". }\n  SERVICE wikibase:interlanguageLink { bd:serviceParam wikibase:targetLanguage \"en\". }\n  SERVICE wikibase:interlanguageLink { bd:serviceParam wikibase:targetLanguage \"en\". }\n  SERVICE wikibase:interlanguageLink { bd:serviceParam wikibase:targetLanguage \"en\". }\n  SERVICE wikibase:interlanguageLink { bd:serviceParam wikibase:targetLanguage \"en\". }\n  SERVICE wikibase:interlanguageLink { bd:serviceParam wikibase:targetLanguage \"en\". }\n  SERVICE wikibase:interlanguageLink { bd:serviceParam wikibase:targetLanguage \"en\". }\n  SERVICE wikibase:interlanguageLink { bd:serviceParam wikibase:targetLanguage \"en\". }\n  SERVICE wikibase:interlanguageLink { bd:serviceParam wikibase:targetLanguage \"en\". }\n  SERVICE wikibase:interlanguageLink { bd:serviceParam wikibase:targetLanguage \"en\". }\n  SERVICE wikibase:interlanguageLink"
    },
    {
        "question": "How many female Chinese Empresses have there been?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?result) AS ?resultCnt) WHERE {?result wdt:P39 wd:Q268218; wdt:P21 wd:Q6581072}",
        "generated_sparql": "SELECT COUNT(*) AS num_female_chinese_empresses WHERE {\n  ?empress wdt:P39 wd:Q268218.\n  ?empress wdt:P21 wd:Q6581072.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many female Chinese Empresses have there been?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Chinese Empress\": \"Q268218\", \"female\": \"Q6581072\"}, \"relationships\": {\"occupation\": \"P39\", \"gender\": \"P21\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) AS num_female_chinese_empresses WHERE {\n  ?empress wdt:P39 wd:Q268218.\n  ?empress wdt:P21 wd:Q6581072.\n}\n```"
    },
    {
        "question": "Of which political party was Joseph Beuys a member?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q153965 wdt:P102 ?result}",
        "generated_sparql": "SELECT ?party WHERE {\n  ?party wdt:P102 wd:Q153965.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Of which political party was Joseph Beuys a member?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Joseph Beuys\": \"Q153965\"}, \"relationships\": {\"member of political party\": \"P102\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?party WHERE {\n  ?party wdt:P102 wd:Q153965.\n}\n```"
    },
    {
        "question": "In what year did the Hollywood Walk of Fame open?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q71719 wdt:P1619 ?year. BIND(YEAR(?year) AS ?result) }",
        "generated_sparql": "SELECT ?year\r\nWHERE {\r\n  ?year wdt:P1619 wd:Q71719.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In what year did the Hollywood Walk of Fame open?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Hollywood Walk of Fame\": \"Q71719\"}, \"relationships\": {\"inception\": \"P1619\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?year\r\nWHERE {\r\n  ?year wdt:P1619 wd:Q71719.\r\n}\r\n```"
    },
    {
        "question": "on which video streaming services can i watch hunter x hunter anime series?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q70209136 wdt:P750 ?result. ?result wdt:P31 wd:Q59152282 }",
        "generated_sparql": "SELECT ?s ?p ?o WHERE {\n  ?s wdt:P31 wd:Q59152282.\n  ?s wdt:P750 ?o.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'on which video streaming services can i watch hunter x hunter anime series?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Hunter x Hunter\": \"Q70209136\", \"video streaming service\": \"Q59152282\"}, \"relationships\": {\"available on\": \"P750\", \"instance of\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?s ?p ?o WHERE {\n  ?s wdt:P31 wd:Q59152282.\n  ?s wdt:P750 ?o.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  FILTER(CONTAINS(?o, \"Hunter x Hunter\"))\n}\n```"
    },
    {
        "question": "People of what age belong to the Silent Generation ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q3044693 wdt:P582 ?time. BIND(YEAR(NOW()) - YEAR(?time) AS ?result) }",
        "generated_sparql": "SELECT ?age\r\nWHERE {\r\n  ?person wdt:P582 ?birthYear;\r\n  ?person wdt:P31 wd:Q3044693;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'People of what age belong to the Silent Generation ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Silent Generation\": \"Q3044693\"}, \"relationships\": {\"birth year\": \"P582\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?age\r\nWHERE {\r\n  ?person wdt:P582 ?birthYear;\r\n  ?person wdt:P31 wd:Q3044693;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  ?age wikibase:label ?label;\r\n}\r\nORDER BY ?age;\r\n```"
    },
    {
        "question": "In what year did the district of H\u00f6xter come into existence?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q6228 wdt:P571 ?time. BIND(YEAR(?time) AS ?result)}",
        "generated_sparql": "SELECT ?year\r\nWHERE {\r\n  ?district wdt:P571 ?year\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In what year did the district of H\u00f6xter come into existence?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"H\u00f6xter\": \"Q6228\"}, \"relationships\": {\"inception\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?year\r\nWHERE {\r\n  ?district wdt:P571 ?year\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n}\r\nWHERE {\r\n  ?district wd:Q6228\r\n}\r\n```"
    },
    {
        "question": "Is the Linux Foundation verified on Twitter?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK{wd:Q858851 p:P2002/pq:P1552 wd:Q28378282}",
        "generated_sparql": "SELECT ?s WHERE {\r\n  ?s wdt:P2002 ?o;\r\n  ?s wdt:P31 wd:Q858851;\r\n  ?s wdt:P31 wd:Q920;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Is the Linux Foundation verified on Twitter?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Linux Foundation\": \"Q858851\", \"Twitter\": \"Q920\"}, \"relationships\": {\"verified account\": \"P2002\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s WHERE {\r\n  ?s wdt:P2002 ?o;\r\n  ?s wdt:P31 wd:Q858851;\r\n  ?s wdt:P31 wd:Q920;\r\n}\r\n```"
    },
    {
        "question": "Were Angela Merkel and Tony Blair born in the same year?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q567 wdt:P569 ?da. wd:Q9545 wdt:P569 ?dt. FILTER(YEAR(?dt) = YEAR(?da))}",
        "generated_sparql": "SELECT ?x ?y WHERE {\n  ?x wdt:P569 ?y.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Were Angela Merkel and Tony Blair born in the same year?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Angela Merkel\": \"Q567\", \"Tony Blair\": \"Q9545\"}, \"relationships\": {\"date of birth\": \"P569\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?x ?y WHERE {\n  ?x wdt:P569 ?y.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  FILTER(CONTAINS(STR(?x), \"Q567\") && CONTAINS(STR(?y), \"Q9545\"))\n}\n```"
    },
    {
        "question": "Do more than 100000000 people speak Japanese?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q5287 wdt:P1098 ?num. FILTER(?num > 100000000)}",
        "generated_sparql": "SELECT COUNT(*) > 100000000 AS result\nWHERE {\n  ?s wdt:P1098 ?o.\n  ?s wd:Q5287.\n  FILTER(CONTAINS(?o, \"Japanese\"))\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Do more than 100000000 people speak Japanese?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Japanese\": \"Q5287\"}, \"relationships\": {\"number of speakers\": \"P1098\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) > 100000000 AS result\nWHERE {\n  ?s wdt:P1098 ?o.\n  ?s wd:Q5287.\n  FILTER(CONTAINS(?o, \"Japanese\"))\n}\n```"
    },
    {
        "question": "Tell me all the cast members of the film Red Notice directed by Rawson Marshall Thurber ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q58815001 wdt:P57 wd:Q2745616; wdt:P161 ?result}",
        "generated_sparql": "SELECT ?castMember ?castMemberLabel\nWHERE {\n  ?film wdt:P57 wd:Q58815001.\n  ?film wdt:P161 ?castMember.\n  ?castMember wd:P31 wd:Q2745616.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Tell me all the cast members of the film Red Notice directed by Rawson Marshall Thurber ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Red Notice\": \"Q58815001\", \"Rawson Marshall Thurber\": \"Q2745616\"}, \"relationships\": {\"director\": \"P57\", \"cast member\": \"P161\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?castMember ?castMemberLabel\nWHERE {\n  ?film wdt:P57 wd:Q58815001.\n  ?film wdt:P161 ?castMember.\n  ?castMember wd:P31 wd:Q2745616.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n}\n```"
    },
    {
        "question": "The first album of Jay Chou",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{?result wdt:P31 wd:Q482994; wdt:P175 wd:Q238819; wdt:P577 ?date. } ORDER BY ASC(?date) LIMIT 1",
        "generated_sparql": "",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'The first album of Jay Chou' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Jay Chou\": \"Q482994\"}, \"relationships\": {\"genre\": \"P31\", \"performer\": \"P175\", \"publication date\": \"P577\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?album\r\nWHERE {\r\n  ?album wdt:P31 wd:Q1340000. # genre\r\n  ?album wdt:P175 wd:Q482994. # performer\r\n  ?album wdt:P577 ?date. # publication date\r\n  ?date wdt:P577-x ?date. # publication date\r\n  ?date wdt:P577-y ?date. # publication date\r\n  ?date wdt:P577-z ?date. # publication date\r\n  ?date wdt:P577-a ?date. # publication date\r\n  ?date wdt:P577-b ?date. # publication date\r\n  ?date wdt:P577-c ?date. # publication date\r\n  ?date wdt:P577-d ?date. # publication date\r\n  ?date wdt:P577-e ?date. # publication date\r\n  ?date wdt:P577-f ?date. # publication date\r\n  ?date wdt:P577-g ?date. # publication date\r\n  ?date wdt:P577-h ?date. # publication date\r\n  ?date wdt:P577-i ?date. # publication date\r\n  ?date wdt:P577-j ?date. # publication date\r\n  ?date wdt:P577-k ?date. # publication date\r\n  ?date wdt:P577-l ?date. # publication date\r\n  ?date wdt:P577-m ?date. # publication date\r\n  ?date wdt:P577-n ?date. # publication date\r\n  ?date wdt:P577-o ?date. # publication date\r\n  ?date wdt:P577-p ?date. # publication date\r\n  ?date wdt:P577-q ?date. # publication date\r\n  ?date wdt:P577-r ?date. # publication date\r\n  ?date wdt:P5"
    },
    {
        "question": "Through which countries does the Danube go?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q1653 wdt:P17 ?result}",
        "generated_sparql": "SELECT ?country\r\nWHERE {\r\n  ?country wdt:P17 wd:Q1653;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Through which countries does the Danube go?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Danube\": \"Q1653\"}, \"relationships\": {\"country\": \"P17\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?country\r\nWHERE {\r\n  ?country wdt:P17 wd:Q1653;\r\n}\r\n```"
    },
    {
        "question": "What do sperm whales mainly eat?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q81214 wdt:P1034 ?result}",
        "generated_sparql": "SELECT ?s ?p ?o WHERE {\n  ?s wdt:P1034 ?o.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What do sperm whales mainly eat?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"sperm whale\": \"Q81214\"}, \"relationships\": {\"main food source\": \"P1034\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?s ?p ?o WHERE {\n  ?s wdt:P1034 ?o.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  WHERE {\n    ?s wikibase:label ?l.\n    FILTER(REGEXP(?l, \"sperm whale\", \"i\"))\n  }\n}\n```"
    },
    {
        "question": "Was Frida Kahlo a surrealist?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK{wd:Q5588 wdt:P135 wd:Q39427}",
        "generated_sparql": "SELECT ?x WHERE {\n  ?x wdt:P135 wd:Q39427.\n  ?x wdt:P31 wd:Q5588.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Was Frida Kahlo a surrealist?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Frida Kahlo\": \"Q5588\", \"surrealism\": \"Q39427\"}, \"relationships\": {\"movement\": \"P135\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?x WHERE {\n  ?x wdt:P135 wd:Q39427.\n  ?x wdt:P31 wd:Q5588.\n}\n```"
    },
    {
        "question": "Was Funny Games and its remake directed by different persons?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK{wd:Q696928 wdt:P57 ?dir. wd:Q951002 wdt:P57 ?dir2. FILTER(?dir != ?dir2)}",
        "generated_sparql": "SELECT ?x ?y\r\nWHERE {\r\n  ?x wdt:P57 wd:Q696928;\r\n  ?y wdt:P57 wd:Q951002;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Was Funny Games and its remake directed by different persons?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Funny Games\": \"Q696928\", \"its remake\": \"Q951002\"}, \"relationships\": {\"director\": \"P57\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x ?y\r\nWHERE {\r\n  ?x wdt:P57 wd:Q696928;\r\n  ?y wdt:P57 wd:Q951002;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nGROUP BY ?x ?y\r\nHAVING wikibase:label(?x) <> wikibase:label(?y)\r\n```"
    },
    {
        "question": "Was Google founded by Bill Gates?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK{wd:Q95 wdt:P112 wd:Q5284}",
        "generated_sparql": "SELECT ?x WHERE {\n  ?x wdt:P112 wd:Q95.\n  ?x wdt:P112 wd:Q5284.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Was Google founded by Bill Gates?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Google\": \"Q95\", \"Bill Gates\": \"Q5284\"}, \"relationships\": {\"founder\": \"P112\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?x WHERE {\n  ?x wdt:P112 wd:Q95.\n  ?x wdt:P112 wd:Q5284.\n}\n```"
    },
    {
        "question": "What is the second letter in the Greek alphabet?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{?fl wdt:P31 wd:Q19793459; wdt:P361 wd:Q8216. ?fl wdt:P156 ?result FILTER(NOT EXISTS{?fl wdt:P155 ?we})}",
        "generated_sparql": "SELECT ?letter WHERE {\n  ?letter wdt:P361 wd:Q19793459.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What is the second letter in the Greek alphabet?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Beta\": \"Q19793459\", \"Greek alphabet\": \"Q8216\"}, \"relationships\": {\"instance of\": \"P31\", \"has part\": \"P361\", \"nomenclature\": \"P156\", \"transliteration\": \"P155\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?letter WHERE {\n  ?letter wdt:P361 wd:Q19793459.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n}\n```"
    },
    {
        "question": "Was it the cancer that caused the death of Steve Jobs who was the CEO of Apple?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q19837 wdt:P509/wdt:P279* wd:Q12078 }",
        "generated_sparql": "SELECT ?s ?p ?o WHERE {\n  ?s wdt:P279 wd:Q12078.\n  ?s wdt:P509 wd:Q19837.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Was it the cancer that caused the death of Steve Jobs who was the CEO of Apple?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Steve Jobs\": \"Q19837\", \"Apple\": \"Q12078\"}, \"relationships\": {\"cause of death\": \"P509\", \"CEO\": \"P279\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?s ?p ?o WHERE {\n  ?s wdt:P279 wd:Q12078.\n  ?s wdt:P509 wd:Q19837.\n}\n```"
    },
    {
        "question": "Was Shaquille O'Neal the teammate of Kobe Bryant in the year of 2000?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q25369 p:P54 ?ps1. ?ps1 ps:P54 ?team; pq:P580 ?st1; pq:P582 ?et1. wd:Q169452 p:P54 ?ps2. ?ps2 ps:P54 ?team; pq:P580 ?st2; pq:P582 ?et2. FILTER(YEAR(?st1) <= 2000 && YEAR(?et1) >= 2000 && YEAR(?st2) <= 2000 && YEAR(?et2) >= 2000)}",
        "generated_sparql": "SELECT ?x WHERE {\n  ?x wdt:P54 wd:Q25369.\n  ?x wdt:P54 wd:Q169452.\n  FILTER(YEAR(?x) = 2000)\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Was Shaquille O'Neal the teammate of Kobe Bryant in the year of 2000?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Shaquille O'Neal\": \"Q25369\", \"Kobe Bryant\": \"Q169452\"}, \"relationships\": {\"team\": \"P54\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?x WHERE {\n  ?x wdt:P54 wd:Q25369.\n  ?x wdt:P54 wd:Q169452.\n  FILTER(YEAR(?x) = 2000)\n}\n```"
    },
    {
        "question": "Was Shaquille O'Neal, as the basketball player, also an film actor?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q169452 wdt:P106 wd:Q3665646, wd:Q10800557}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P106 wd:Q169452;\r\n  wdt:P106 wd:Q1874368.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Was Shaquille O'Neal, as the basketball player, also an film actor?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Shaquille O'Neal\": \"Q169452\"}, \"relationships\": {\"occupation\": \"P106\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P106 wd:Q169452;\r\n  wdt:P106 wd:Q1874368.\r\n}\r\n```"
    },
    {
        "question": "Was the first album of the band Darkside released in 2012?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {?album wdt:P31 wd:Q482994; wdt:P175 wd:Q16954319; wdt:P577 ?date FILTER(NOT EXISTS{?album2 wdt:P31 wd:Q482994; wdt:P175 wd:Q16954319; wdt:P577 ?date2 FILTER(?date2 < ?date)} && YEAR(?date) = 2012)}",
        "generated_sparql": "SELECT ?x WHERE {\n  ?x wdt:P31 wd:Q482994.\n  ?x wdt:P175 wd:Q16954319.\n  ?x wdt:P577 \"2012-01-01\".\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Was the first album of the band Darkside released in 2012?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Darkside\": \"Q482994\", \"Psychic\": \"Q16954319\"}, \"relationships\": {\"genre\": \"P31\", \"performer\": \"P175\", \"release date\": \"P577\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?x WHERE {\n  ?x wdt:P31 wd:Q482994.\n  ?x wdt:P175 wd:Q16954319.\n  ?x wdt:P577 \"2012-01-01\".\n}\n```"
    },
    {
        "question": "What are the spin-offs of Breaking Bad?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1079 wdt:P2512 ?result}",
        "generated_sparql": "SELECT ?s\r\nWHERE {\r\n  ?s wdt:P2512 wd:Q1079.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What are the spin-offs of Breaking Bad?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Breaking Bad\": \"Q1079\"}, \"relationships\": {\"spin-off\": \"P2512\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s\r\nWHERE {\r\n  ?s wdt:P2512 wd:Q1079.\r\n}\r\n```"
    },
    {
        "question": "Which river flows through the Grand Canyon?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q4022. wd:Q118841 wdt:P206 ?result}",
        "generated_sparql": "SELECT ?river\nWHERE {\n  ?river wdt:P31 wd:Q4022.\n  ?river wdt:P206 wd:Q118841.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Which river flows through the Grand Canyon?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Grand Canyon\": \"Q118841\", \"river\": \"Q4022\"}, \"relationships\": {\"main area of flow\": \"P206\", \"instance of\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?river\nWHERE {\n  ?river wdt:P31 wd:Q4022.\n  ?river wdt:P206 wd:Q118841.\n}\n```"
    },
    {
        "question": "What was the key event related to Salvador Dal\u00ed?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q5577 wdt:P793 ?result}",
        "generated_sparql": "SELECT ?s ?p ?o\r\nWHERE {\r\n  ?s wdt:P31 wd:Q5577. # Salvador Dal\u00ed\r\n  ?s wdt:P793 ?o. # key event\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What was the key event related to Salvador Dal\u00ed?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Salvador Dal\u00ed\": \"Q5577\"}, \"relationships\": {\"key event\": \"P793\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s ?p ?o\r\nWHERE {\r\n  ?s wdt:P31 wd:Q5577. # Salvador Dal\u00ed\r\n  ?s wdt:P793 ?o. # key event\r\n}\r\n```"
    },
    {
        "question": "Who passed the German Occupational Safety and Health Act?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?act wdt:P31 wd:Q1006079; wdt:P361 wd:Q629029; wdt:P1001 wd:Q183; wdt:P467 ?result}",
        "generated_sparql": "SELECT ?s ?p ?o WHERE {\n  ?s wdt:P31 wd:Q629029.\n  ?s wdt:P467 wd:Q183.\n  ?s wdt:P361 wd:Q1006079.\n  ?s wdt:P1001 wd:Q183.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Who passed the German Occupational Safety and Health Act?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"German Occupational Safety and Health Act\": \"Q1006079\", \"Germany\": \"Q183\", \"legislative act\": \"Q629029\"}, \"relationships\": {\"instance of\": \"P31\", \"amended by\": \"P361\", \"country\": \"P1001\", \"passed by\": \"P467\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?s ?p ?o WHERE {\n  ?s wdt:P31 wd:Q629029.\n  ?s wdt:P467 wd:Q183.\n  ?s wdt:P361 wd:Q1006079.\n  ?s wdt:P1001 wd:Q183.\n}\n```"
    },
    {
        "question": "What are the German names of academic disciplines containing \u201clinguistik\u201d?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?disc wdt:P31 wd:Q11862829; rdfs:label ?result FILTER(langMatches(lang(?result),\"de\") && regex(?result,\"linguistik\"))}",
        "generated_sparql": "SELECT ?discipline\r\nWHERE {\r\n  ?discipline wdt:P31 wd:Q11862829;\r\n  ?discipline wd:rdfs:label ?label;\r\n  FILTER(CONTAINS(?label, \"linguistik\"))\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What are the German names of academic disciplines containing \u201clinguistik\u201d?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"academic discipline\": \"Q11862829\"}, \"relationships\": {\"instance of\": \"P31\", \"label\": \"rdfs:label\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?discipline\r\nWHERE {\r\n  ?discipline wdt:P31 wd:Q11862829;\r\n  ?discipline wd:rdfs:label ?label;\r\n  FILTER(CONTAINS(?label, \"linguistik\"))\r\n}\r\n```"
    },
    {
        "question": "What are the names of the head of states of Germany and France ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {{wd:Q183 wdt:P35 ?result} UNION {wd:Q142 wdt:P35 ?result}}",
        "generated_sparql": "SELECT ?x.label\r\nWHERE {\r\n  ?x wdt:P35 wd:Q183;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What are the names of the head of states of Germany and France ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Germany\": \"Q183\", \"France\": \"Q142\"}, \"relationships\": {\"head of state\": \"P35\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x.label\r\nWHERE {\r\n  ?x wdt:P35 wd:Q183;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  UNION\r\n  SELECT ?y.label\r\n  WHERE {\r\n    ?y wdt:P35 wd:Q142;\r\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  }\r\n}\r\n```"
    },
    {
        "question": "What are the professions of John Lennon\u2019s sons?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?son wdt:P22 wd:Q1203; wdt:P31 wd:Q5; wdt:P106 ?result}",
        "generated_sparql": "SELECT ?profession\r\nWHERE {\r\n  ?person wdt:P22 wd:Q1203. # John Lennon's child\r\n  ?person wdt:P106 ?profession. # occupation\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What are the professions of John Lennon\u2019s sons?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"John Lennon\": \"Q1203\"}, \"relationships\": {\"child\": \"P22\", \"human\": \"Q5\", \"occupation\": \"P106\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?profession\r\nWHERE {\r\n  ?person wdt:P22 wd:Q1203. # John Lennon's child\r\n  ?person wdt:P106 ?profession. # occupation\r\n}\r\n```"
    },
    {
        "question": "What are the titles of the Star Wars series movies?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?film wdt:P1476 ?result; wdt:P179 wd:Q22092344 FILTER(EXISTS{?film wdt:P31/wdt:P279* wd:Q11424})}",
        "generated_sparql": "SELECT ?title\r\nWHERE {\r\n  ?film wdt:P1476 ?title ;\r\n  ?film wdt:P179 wd:Q22092344 ;\r\n  ?film wdt:P31 wd:Q11424 ;\r\n  ?film wdt:P279 wd:Q11424\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What are the titles of the Star Wars series movies?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Star Wars\": \"Q22092344\", \"film\": \"\", \"series\": \"Q11424\"}, \"relationships\": {\"title\": \"P1476\", \"part of\": \"P179\", \"instance of\": \"P31\", \"part of the series\": \"P279\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?title\r\nWHERE {\r\n  ?film wdt:P1476 ?title ;\r\n  ?film wdt:P179 wd:Q22092344 ;\r\n  ?film wdt:P31 wd:Q11424 ;\r\n  ?film wdt:P279 wd:Q11424\r\n}\r\n```"
    },
    {
        "question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{ BIND(IF(EXISTS{wd:Q201358 wdt:P580 ?date1. wd:Q1608064 wdt:P577 ?date2. FILTER(?date1 < ?date2)},wd:Q201358 , wd:Q1608064) AS ?result)}",
        "generated_sparql": "SELECT ?x ?y WHERE {\n  ?x wdt:P580 ?y.\n  ?x wdt:P577 ?y.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"The Flintstones\": \"Q201358\", \"end of racial discrimination in voting in the US\": \"Q1608064\"}, \"relationships\": {\"inception\": \"P580\", \"publication date\": \"P577\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?x ?y WHERE {\n  ?x wdt:P580 ?y.\n  ?x wdt:P577 ?y.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  FILTER(CONTAINS(str(?x), \"The Flintstones\") && CONTAINS(str(?y), \"end of racial discrimination in voting in the US\"))\n}\nORDER BY ?x ?y\n```"
    },
    {
        "question": "What colors does the German national flag have?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q48160 wdt:P462 ?result}",
        "generated_sparql": "SELECT DISTINCT ?c WHERE {\n  ?s wdt:P462 ?c.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What colors does the German national flag have?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Germany\": \"Q48160\"}, \"relationships\": {\"color\": \"P462\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT DISTINCT ?c WHERE {\n  ?s wdt:P462 ?c.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  FILTER(CONTAINS(?s, \"Q48160\") && CONTAINS(?c, \"en\"))\n}\n```"
    },
    {
        "question": "What did the suffragettes stand for?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q322170 wdt:P279/wdt:P425/wdt:P3712 ?result}",
        "generated_sparql": "SELECT ?s ?p ?o WHERE {\n  ?s wdt:P425 wd:Q322170.\n  ?s wdt:P279 ?o.\n  ?s wdt:P3712 ?o.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What did the suffragettes stand for?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"suffragettes\": \"Q322170\"}, \"relationships\": {\"advocated for\": \"P279\", \"field of work\": \"P425\", \"main subject\": \"P3712\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?s ?p ?o WHERE {\n  ?s wdt:P425 wd:Q322170.\n  ?s wdt:P279 ?o.\n  ?s wdt:P3712 ?o.\n}\n```"
    },
    {
        "question": "What do you call a female form of an emperor in English?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q39018 wdt:P2521 ?result. FILTER(langMatches(lang(?result),\"en\"))}",
        "generated_sparql": "SELECT ?label WHERE {\n  ?emperor wdt:P2521 ?femaleForm.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What do you call a female form of an emperor in English?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"emperor\": \"Q39018\"}, \"relationships\": {\"female form\": \"P2521\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?label WHERE {\n  ?emperor wdt:P2521 ?femaleForm.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  FILTER(regex(?label, \"empress\", \"i\"))\n}\n```"
    },
    {
        "question": "What event killed the most people in the years 1910 to 1920?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P1120 ?num; wdt:P580 ?st; wdt:P582 ?et. FILTER((EXISTS{?result wdt:P31/wdt:P279* wd:Q1190554}) &&(YEAR(?st) >= 1910) && (YEAR(?et) <= 1920))}ORDER BY DESC(?num) LIMIT 1",
        "generated_sparql": "SELECT ?result\r\nWHERE {\r\n  ?result wdt:P31 wd:Q1190554.\r\n  ?result wdt:P279 wd:Q1190554.\r\n  ?result wdt:P1120 ?num_deaths.\r\n  ?result wdt:P580 ?start_time.\r\n  ?result wdt:P582 ?end_time.\r\n  ?num_deaths wdt:P1120 ?max_deaths.\r\n  FILTER(?max_deaths > ?num_deaths)\r\n}\r\nORDER BY ?max_deaths DESC\r\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What event killed the most people in the years 1910 to 1920?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"event\": \"?result\", \"World War I\": \"Q1190554\"}, \"relationships\": {\"number of deaths\": \"P1120\", \"start time\": \"P580\", \"end time\": \"P582\", \"instance of\": \"P31\", \"part of\": \"P279\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?result\r\nWHERE {\r\n  ?result wdt:P31 wd:Q1190554.\r\n  ?result wdt:P279 wd:Q1190554.\r\n  ?result wdt:P1120 ?num_deaths.\r\n  ?result wdt:P580 ?start_time.\r\n  ?result wdt:P582 ?end_time.\r\n  ?num_deaths wdt:P1120 ?max_deaths.\r\n  FILTER(?max_deaths > ?num_deaths)\r\n}\r\nORDER BY ?max_deaths DESC\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Does the ATI Company still exist?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {FILTER(NOT EXISTS {wd:Q213849 wdt:P576 ?o})}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P576 wd:Q213849.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Does the ATI Company still exist?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"ATI Company\": \"Q213849\"}, \"relationships\": {\"dissolved, abolished or demolished\": \"P576\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P576 wd:Q213849.\r\n}\r\n```"
    },
    {
        "question": "What happened to the dinosaurs ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q430 wdt:P793 ?result}",
        "generated_sparql": "SELECT ?s ?p ?o\r\nWHERE {\r\n  ?s wdt:P793 wd:Q430\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What happened to the dinosaurs ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"dinosaurs\": \"Q430\"}, \"relationships\": {\"cause of extinction\": \"P793\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s ?p ?o\r\nWHERE {\r\n  ?s wdt:P793 wd:Q430\r\n}\r\n```"
    },
    {
        "question": "What instruments did Louis Armstrong play?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1779 wdt:P1303 ?result}",
        "generated_sparql": "SELECT ?instrument\r\nWHERE {\r\n  ?person <P1303> ?instrument\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What instruments did Louis Armstrong play?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Louis Armstrong\": \"Q1779\"}, \"relationships\": {\"instrument\": \"P1303\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?instrument\r\nWHERE {\r\n  ?person <P1303> ?instrument\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(CONTAINS(?person, \"Q1779\") && CONTAINS(?instrument, \"instrument\"))\r\n}\r\n```"
    },
    {
        "question": "what did the author of the phrase: \"Alea iacta est\" die of?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q271723 wdt:P50/wdt:P509 ?result}",
        "generated_sparql": "SELECT ?author ?mannerOfDeath WHERE {\n  ?author wdt:P50 wd:Q271723.\n  ?author wdt:P509 ?mannerOfDeath.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'what did the author of the phrase: \"Alea iacta est\" die of?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Julius Caesar\": \"Q271723\"}, \"relationships\": {\"author\": \"P50\", \"manner of death\": \"P509\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?author ?mannerOfDeath WHERE {\n  ?author wdt:P50 wd:Q271723.\n  ?author wdt:P509 ?mannerOfDeath.\n}\n```"
    },
    {
        "question": "What is the binary gender of the partner of Allen Ginsberg ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q6711 wdt:P451/wdt:P21 ?result}",
        "generated_sparql": "SELECT ?binaryGender\r\nWHERE {\r\n  ?person wdt:P451 wd:Q6711 ; # partner of Allen Ginsberg\r\n  ?person wdt:P21 ?binaryGender ; # binary gender of the person\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What is the binary gender of the partner of Allen Ginsberg ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Allen Ginsberg\": \"Q6711\"}, \"relationships\": {\"partner\": \"P451\", \"binary gender\": \"P21\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?binaryGender\r\nWHERE {\r\n  ?person wdt:P451 wd:Q6711 ; # partner of Allen Ginsberg\r\n  ?person wdt:P21 ?binaryGender ; # binary gender of the person\r\n}\r\n```"
    },
    {
        "question": "What is the capital of the prefecture Tokyo ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1490 wdt:P36 ?result}",
        "generated_sparql": "SELECT ?capital\r\nWHERE {\r\n  ?capital wdt:P36 wd:Q1490.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What is the capital of the prefecture Tokyo ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Tokyo\": \"Q1490\"}, \"relationships\": {\"capital\": \"P36\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?capital\r\nWHERE {\r\n  ?capital wdt:P36 wd:Q1490.\r\n}\r\n```"
    },
    {
        "question": "What is the Chinese zodiac animal that follows the ox?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q79226802; wdt:P155 wd:Q599644}",
        "generated_sparql": "SELECT ?result WHERE {\n  ?ox wdt:P31 wd:Q79226802.\n  ?ox wdt:P155 ?result.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What is the Chinese zodiac animal that follows the ox?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"ox\": \"Q79226802\", \"Chinese zodiac animal\": \"?result\"}, \"relationships\": {\"instance of\": \"P31\", \"follows\": \"P155\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?result WHERE {\n  ?ox wdt:P31 wd:Q79226802.\n  ?ox wdt:P155 ?result.\n}\n```"
    },
    {
        "question": "What is the combined total revenue of three largest Big Tech companies ordered by number of employees?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (SUM(?rev) AS ?result) WHERE {{SELECT DISTINCT ?company WHERE {?company wdt:P361 wd:Q30748112. ?company wdt:P1128 ?num} ORDER BY DESC(?num) LIMIT 3} ?company p:P2139 ?ps. ?ps ps:P2139 ?rev; pq:P585 ?time. FILTER(NOT EXISTS{?company p:P2139/pq:P585 ?time2 FILTER(?time2 > ?time)})}",
        "generated_sparql": "SELECT SUM(P2139) AS total_revenue\r\nWHERE {\r\n  ?s wdt:P361 wd:Q30748112 .\r\n  ?s wdt:P1128 ?num_employees .\r\n  ?s wdt:P2139 ?revenue .\r\n  ?s wdt:P585 ?point_in_time .\r\n  FILTER(?num_employees >= 3)\r\n}\r\nORDER BY total_revenue DESC",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What is the combined total revenue of three largest Big Tech companies ordered by number of employees?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Big Tech\": \"Q30748112\"}, \"relationships\": {\"industry\": \"P361\", \"number of employees\": \"P1128\", \"revenue\": \"P2139\", \"point in time\": \"P585\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT SUM(P2139) AS total_revenue\r\nWHERE {\r\n  ?s wdt:P361 wd:Q30748112 .\r\n  ?s wdt:P1128 ?num_employees .\r\n  ?s wdt:P2139 ?revenue .\r\n  ?s wdt:P585 ?point_in_time .\r\n  FILTER(?num_employees >= 3)\r\n}\r\nORDER BY total_revenue DESC\r\n```"
    },
    {
        "question": "What is the coordinate location of Shenzhen ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT  DISTINCT ?result WHERE {wd:Q15174 wdt:P625 ?result}",
        "generated_sparql": "SELECT ?s ?c\r\nWHERE {\r\n  ?s wdt:P625 ?c\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What is the coordinate location of Shenzhen ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Shenzhen\": \"Q15174\"}, \"relationships\": {\"coordinate location\": \"P625\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s ?c\r\nWHERE {\r\n  ?s wdt:P625 ?c\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(CONTAINS(?s, \"Q15174\"))\r\n}\r\n```"
    },
    {
        "question": "What is the Erlangen program ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q315296 wdt:P31 ?result}",
        "generated_sparql": "SELECT ?s WHERE {\r\n  ?s wdt:P31 wd:Q315296 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What is the Erlangen program ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Erlangen program\": \"Q315296\"}, \"relationships\": {\"instance of\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s WHERE {\r\n  ?s wdt:P31 wd:Q315296 .\r\n}\r\n```"
    },
    {
        "question": "Did the Roland Corporation produce synthesizers?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {?result wdt:P31 wd:Q163829; wdt:P176 wd:Q848490}",
        "generated_sparql": "SELECT ?x WHERE {\n  ?x wdt:P31 wd:Q848490.\n  ?x wdt:P176 wd:Q163829.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Did the Roland Corporation produce synthesizers?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Roland Corporation\": \"Q163829\", \"synthesizer\": \"Q848490\"}, \"relationships\": {\"instance of\": \"P31\", \"manufacturer\": \"P176\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?x WHERE {\n  ?x wdt:P31 wd:Q848490.\n  ?x wdt:P176 wd:Q163829.\n}\n```"
    },
    {
        "question": "How many perople do the Port of Rotterdam employ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1027807 wdt:P1128 ?result}",
        "generated_sparql": "SELECT COUNT(*) AS num_employees\r\nWHERE {\r\n  ?s wdt:P1128 ?o\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many perople do the Port of Rotterdam employ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Port of Rotterdam\": \"Q1027807\"}, \"relationships\": {\"number of employees\": \"P1128\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_employees\r\nWHERE {\r\n  ?s wdt:P1128 ?o\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  WHERE {\r\n    ?s wikibase:label ?l\r\n    FILTER(CONTAINS(?l, \"Port of Rotterdam\"))\r\n  }\r\n}\r\n```"
    },
    {
        "question": "what is the main subject of the manga \"your lie in april\": primary school, middle school or high school student?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q11419997 wdt:P921 ?result. FILTER(?result IN (wd:Q16003605, wd:Q16003532, wd:Q15360275))}",
        "generated_sparql": "SELECT ?subject\r\nWHERE {\r\n  ?manga wdt:P921 ?subject;\r\n  ?manga wdt:P31 wd:Q11419997;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'what is the main subject of the manga \"your lie in april\": primary school, middle school or high school student?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Your Lie in April\": \"Q11419997\", \"primary school student\": \"Q16003605\", \"middle school student\": \"Q16003532\", \"high school student\": \"Q15360275\"}, \"relationships\": {\"main subject\": \"P921\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?subject\r\nWHERE {\r\n  ?manga wdt:P921 ?subject;\r\n  ?manga wdt:P31 wd:Q11419997;\r\n}\r\n```"
    },
    {
        "question": "What is the mother tongue of the author Chimamanda Ngozi Adichie ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q230141 wdt:P103 ?result}",
        "generated_sparql": "SELECT ?language WHERE {\n  ?person wdt:P103 ?language.\n  wd:Q230141 ?person.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What is the mother tongue of the author Chimamanda Ngozi Adichie ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Chimamanda Ngozi Adichie\": \"Q230141\"}, \"relationships\": {\"native language\": \"P103\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?language WHERE {\n  ?person wdt:P103 ?language.\n  wd:Q230141 ?person.\n}\n```"
    },
    {
        "question": "Who was the partner of Allen Ginsberg?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q6711 wdt:P451 ?result}",
        "generated_sparql": "SELECT ?partner\r\nWHERE {\r\n  ?person wdt:P451 ?partner .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Who was the partner of Allen Ginsberg?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Allen Ginsberg\": \"Q6711\"}, \"relationships\": {\"partner\": \"P451\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?partner\r\nWHERE {\r\n  ?person wdt:P451 ?partner .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(CONTAINS(?person, \"Q6711\") && CONTAINS(?partner, \"Q6711\"))\r\n}\r\n```"
    },
    {
        "question": "What is the second game developed by Piranha Bytes?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{?result wdt:P178 wd:Q677273; wdt:P577 ?date} ORDER BY ASC(?date) OFFSET 1 LIMIT 1",
        "generated_sparql": "SELECT ?game\r\nWHERE {\r\n  ?game wdt:P178 wd:Q677273 .\r\n  ?game wdt:P577 ?date .\r\n  FILTER(CONTAINS(?date, '1995-06-25'))\r\n}\r\nORDER BY ?game\r\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What is the second game developed by Piranha Bytes?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Piranha Bytes\": \"Q677273\"}, \"relationships\": {\"developer\": \"P178\", \"publication date\": \"P577\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?game\r\nWHERE {\r\n  ?game wdt:P178 wd:Q677273 .\r\n  ?game wdt:P577 ?date .\r\n  FILTER(CONTAINS(?date, '1995-06-25'))\r\n}\r\nORDER BY ?game\r\nLIMIT 1\r\n```"
    },
    {
        "question": "What is the TV-show that starred Rowan Atkinson , had 4 seasons and started in 1983?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{?result wdt:P31 wd:Q5398426; wdt:P161 wd:Q23760; wdt:P2437 ?season; wdt:P580 ?time FILTER((YEAR(?time) = 1983) && (?season = 4))}",
        "generated_sparql": "SELECT ?show WHERE {\n  ?show wdt:P31 wd:Q5398426.\n  ?show wdt:P161 wd:Q23760.\n  ?show wdt:P2437 4.\n  ?show wdt:P580 \"1983\".\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What is the TV-show that starred Rowan Atkinson , had 4 seasons and started in 1983?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Blackadder\": \"Q5398426\", \"Rowan Atkinson\": \"Q23760\"}, \"relationships\": {\"instance of\": \"P31\", \"starring\": \"P161\", \"number of seasons\": \"P2437\", \"start time\": \"P580\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?show WHERE {\n  ?show wdt:P31 wd:Q5398426.\n  ?show wdt:P161 wd:Q23760.\n  ?show wdt:P2437 4.\n  ?show wdt:P580 \"1983\".\n}\n```"
    },
    {
        "question": "What is the english nickname of Ella Fitzgerald?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1768 wdt:P1449 ?result. FILTER(langMatches(lang(?result),\"en\"))}",
        "generated_sparql": "SELECT ?nickname WHERE {\n  ?person wdt:P1449 ?nickname.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What is the english nickname of Ella Fitzgerald?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Ella Fitzgerald\": \"Q1768\"}, \"relationships\": {\"nickname\": \"P1449\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?nickname WHERE {\n  ?person wdt:P1449 ?nickname.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  WHERE {\n    ?person wd:Q1768.\n  }\n}\n```"
    },
    {
        "question": "What are the occupations of Kazuo Ishiguro\u2019s daughter?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q272855 wdt:P40 ?d. ?d wdt:P21 wd:Q6581072; wdt:P106 ?result}",
        "generated_sparql": "SELECT ?occupation WHERE {\n  ?person wdt:P40 wd:Q6581072.\n  ?person wdt:P22 wd:Q272855.\n  ?person wdt:P106 ?occupation.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What are the occupations of Kazuo Ishiguro\u2019s daughter?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Kazuo Ishiguro\": \"Q272855\", \"daughter of Kazuo Ishiguro\": \"Q6581072\"}, \"relationships\": {\"child\": \"P40\", \"father\": \"P22\", \"occupation\": \"P106\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?occupation WHERE {\n  ?person wdt:P40 wd:Q6581072.\n  ?person wdt:P22 wd:Q272855.\n  ?person wdt:P106 ?occupation.\n}\n```"
    },
    {
        "question": "What are the occupations of Nat King Cole?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q137042 wdt:P106 ?result}",
        "generated_sparql": "SELECT ?occupation\r\nWHERE {\r\n  ?person wdt:P106 ?occupation\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What are the occupations of Nat King Cole?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Nat King Cole\": \"Q137042\"}, \"relationships\": {\"occupation\": \"P106\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?occupation\r\nWHERE {\r\n  ?person wdt:P106 ?occupation\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(CONTAINS(?person, \"Q137042\"))\r\n}\r\n```"
    },
    {
        "question": "what is the official language of iran?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q794 wdt:P37 ?result}",
        "generated_sparql": "SELECT ?lang WHERE {\n  ?lang wdt:P37 wd:Q794.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'what is the official language of iran?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Iran\": \"Q794\"}, \"relationships\": {\"official language\": \"P37\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?lang WHERE {\n  ?lang wdt:P37 wd:Q794.\n}\n```"
    },
    {
        "question": "What is the population in Freiburg ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q2833 wdt:P1082 ?result}",
        "generated_sparql": "SELECT ?population\r\nWHERE {\r\n  ?city wdt:P31 wd:Q2833. # Freiburg\r\n  ?city wdt:P1082 ?population. # population\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What is the population in Freiburg ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Freiburg\": \"Q2833\"}, \"relationships\": {\"population\": \"P1082\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?population\r\nWHERE {\r\n  ?city wdt:P31 wd:Q2833. # Freiburg\r\n  ?city wdt:P1082 ?population. # population\r\n}\r\n```"
    },
    {
        "question": "What is the title of the 2020 released movie in which Carey Mulligan was the main actress?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?movie wdt:P31 wd:Q11424; wdt:P161 wd:Q219655; wdt:P577 ?time; wdt:P1476 ?result FILTER(YEAR(?time) = 2020)}",
        "generated_sparql": "SELECT ?title WHERE {\n  ?movie wdt:P31 wd:Q11424.\n  ?movie wdt:P161 ?actor.\n  ?actor wdt:P31 wd:Q219655.\n  ?movie wdt:P577 ?releaseDate.\n  ?releaseDate wdt:P577-cal ?year.\n  FILTER(?year = 2020).\n  ?movie wdt:P1476 ?title.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What is the title of the 2020 released movie in which Carey Mulligan was the main actress?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"drama film\": \"Q11424\", \"Carey Mulligan\": \"Q219655\"}, \"relationships\": {\"instance of\": \"P31\", \"starring\": \"P161\", \"release date\": \"P577\", \"title\": \"P1476\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?title WHERE {\n  ?movie wdt:P31 wd:Q11424.\n  ?movie wdt:P161 ?actor.\n  ?actor wdt:P31 wd:Q219655.\n  ?movie wdt:P577 ?releaseDate.\n  ?releaseDate wdt:P577-cal ?year.\n  FILTER(?year = 2020).\n  ?movie wdt:P1476 ?title.\n}\n```"
    },
    {
        "question": "What does Ray-Ban produce primarily?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q653941 wdt:P1056 ?result}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P1056 wd:Q653941.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What does Ray-Ban produce primarily?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Ray-Ban\": \"Q653941\"}, \"relationships\": {\"product\": \"P1056\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P1056 wd:Q653941.\r\n}\r\n```"
    },
    {
        "question": "What language did the famous king, who was also a student of Aristotle's , speak?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q868 wdt:P802 ?king. ?king wdt:P97 wd:Q12097; wdt:P1412 ?result}",
        "generated_sparql": "SELECT ?language\nWHERE {\n  ?person1 wdt:P802 wd:Q12097.\n  ?person2 wdt:P97 ?person1.\n  ?person2 wdt:P1412 ?language.\n  FILTER(?person2 = Q868)\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What language did the famous king, who was also a student of Aristotle's , speak?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Aristotle\": \"Q12097\", \"the famous king\": \"Q868\"}, \"relationships\": {\"student of\": \"P802\", \"teacher\": \"P97\", \"spoken language\": \"P1412\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?language\nWHERE {\n  ?person1 wdt:P802 wd:Q12097.\n  ?person2 wdt:P97 ?person1.\n  ?person2 wdt:P1412 ?language.\n  FILTER(?person2 = Q868)\n}\n```"
    },
    {
        "question": "What language do they speak in Poland ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q36 wdt:P2936 ?result}",
        "generated_sparql": "SELECT ?lang\r\nWHERE {\r\n  ?country wdt:P36 wd:Q36;\r\n  ?country wdt:P2936 ?lang\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What language do they speak in Poland ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Poland\": \"Q36\"}, \"relationships\": {\"official language\": \"P2936\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?lang\r\nWHERE {\r\n  ?country wdt:P36 wd:Q36;\r\n  ?country wdt:P2936 ?lang\r\n}\r\n```"
    },
    {
        "question": "How many different languages are spoken in West Europe?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?lan) AS ?result) WHERE {wd:Q27496 wdt:P527/wdt:P2936 ?lan}",
        "generated_sparql": "SELECT DISTINCT ?l\r\nWHERE {\r\n  ?l wdt:P2936 wd:Q27496;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many different languages are spoken in West Europe?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"West Europe\": \"Q27496\"}, \"relationships\": {\"spoken in this territory\": \"P527\", \"language of work or name\": \"P2936\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT DISTINCT ?l\r\nWHERE {\r\n  ?l wdt:P2936 wd:Q27496;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\n```"
    },
    {
        "question": "Is Germany bigger than Poland?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q183 p:P2046/psn:P2046/wikibase:quantityAmount ?ag. wd:Q36 p:P2046/psn:P2046/wikibase:quantityAmount ?ap FILTER(?ag > ?ap)}",
        "generated_sparql": "SELECT ?x ?y WHERE {\n  ?x wdt:P2046 ?y.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Is Germany bigger than Poland?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Germany\": \"Q183\", \"Poland\": \"Q36\"}, \"relationships\": {\"area\": \"P2046\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?x ?y WHERE {\n  ?x wdt:P2046 ?y.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  FILTER(CONTAINS(?x, \"Q183\") && CONTAINS(?y, \"Q36\"))\n  FILTER(?x < ?y)\n}\n```"
    },
    {
        "question": "What notes does a C major chord consist of?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q55706505 wdt:P527 ?result. ?result wdt:P31 wd:Q263478}",
        "generated_sparql": "SELECT ?note WHERE {\n  ?note wdt:P527 wd:Q55706505.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What notes does a C major chord consist of?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"C major chord\": \"Q55706505\"}, \"relationships\": {\"has part\": \"P527\", \"instance of\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?note WHERE {\n  ?note wdt:P527 wd:Q55706505.\n}\n```"
    },
    {
        "question": "How many different occupations did/do spouses of winners of the Nobel Prize in Literature hold?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?occ) AS ?result) WHERE {?winner wdt:P166 wd:Q37922; wdt:P26/wdt:P106 ?occ}",
        "generated_sparql": "SELECT DISTINCT ?occupation\r\nWHERE {\r\n  ?person wdt:P166 wd:Q37922 . # winner of Nobel Prize in Literature\r\n  ?person wdt:P26 ?spouse . # spouse of ?person\r\n  ?spouse wdt:P106 ?occupation . # occupation of ?spouse\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many different occupations did/do spouses of winners of the Nobel Prize in Literature hold?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Nobel Prize in Literature\": \"Q37922\"}, \"relationships\": {\"winner\": \"P166\", \"spouse\": \"P26\", \"occupation\": \"P106\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT DISTINCT ?occupation\r\nWHERE {\r\n  ?person wdt:P166 wd:Q37922 . # winner of Nobel Prize in Literature\r\n  ?person wdt:P26 ?spouse . # spouse of ?person\r\n  ?spouse wdt:P106 ?occupation . # occupation of ?spouse\r\n}\r\n```"
    },
    {
        "question": "How many other video games began the same year as Dead by Daylight?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?game) AS ?result) WHERE {?game wdt:P31/wdt:P279* wd:Q7889; wdt:P577 ?gameTime. wd:Q24514682 wdt:P577 ?dbdtime. FILTER((YEAR(?gameTime) = YEAR(?dbdtime)))}",
        "generated_sparql": "",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many other video games began the same year as Dead by Daylight?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Dead by Daylight\": \"Q24514682\"}, \"relationships\": {\"instance of\": \"P31\", \"genre\": \"P279\", \"release date\": \"P577\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_games\r\nWHERE {\r\n  ?game wdt:P31 wd:Q24514682 . # Dead by Daylight\r\n  ?game wdt:P279 wd:P279 . # Video game genre\r\n  ?game wdt:P577 ?date . # Release date\r\n  ?date wdt:P577 ?year .\r\n  ?game wdt:P577 ?year .\r\n  ?game wdt:P577 ?year .\r\n  ?game wdt:P577 ?year .\r\n  ?game wdt:P577 ?year .\r\n  ?game wdt:P577 ?year .\r\n  ?game wdt:P577 ?year .\r\n  ?game wdt:P577 ?year .\r\n  ?game wdt:P577 ?year .\r\n  ?game wdt:P577 ?year .\r\n  ?game wdt:P577 ?year .\r\n  ?game wdt:P577 ?year .\r\n  ?game wdt:P577 ?year .\r\n  ?game wdt:P577 ?year .\r\n  ?game wdt:P577 ?year .\r\n  ?game wdt:P577 ?year .\r\n  ?game wdt:P577 ?year .\r\n  ?game wdt:P577 ?year .\r\n  ?game wdt:P577 ?year .\r\n  ?game wdt:P577 ?year .\r\n  ?game wdt:P577 ?year .\r\n  ?game wdt:P577 ?year .\r\n  ?game wdt:P577 ?year .\r\n  ?game wdt:P577 ?year .\r\n  ?game wdt:P577 ?year .\r\n  ?game wdt:P577 ?year .\r\n  ?game wdt:P577 ?year .\r\n  ?game wdt:P577 ?year .\r"
    },
    {
        "question": "What other civilizations existed during the Aztecs ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31/wdt:P279* wd:Q8432; wdt:P580 ?start; wdt:P582 ?end. wd:Q12542 wdt:P580 ?ast; wdt:P582 ?aet. FILTER(?start < ?aet && ?end > ?ast && ?result != wd:Q12542) }",
        "generated_sparql": "SELECT ?civilization\r\nWHERE {\r\n  ?civilization wdt:P31 wd:Q12542 . # Aztecs\r\n  ?civilization wdt:P279 wd:Q12542 . # Aztecs\r\n  ?civilization wdt:P580 ?start_time . # Aztecs\r\n  ?civilization wdt:P582 ?end_time . # Aztecs\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What other civilizations existed during the Aztecs ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Aztecs\": \"Q12542\"}, \"relationships\": {\"instance of\": \"P31\", \"part of\": \"P279\", \"start time\": \"P580\", \"end time\": \"P582\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?civilization\r\nWHERE {\r\n  ?civilization wdt:P31 wd:Q12542 . # Aztecs\r\n  ?civilization wdt:P279 wd:Q12542 . # Aztecs\r\n  ?civilization wdt:P580 ?start_time . # Aztecs\r\n  ?civilization wdt:P582 ?end_time . # Aztecs\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  ?civilization wdt:P31 ?other_civilization . # Other civilizations\r\n  ?other_civilization wdt:P31 ?civilization . # Other civilizations\r\n}\r\nORDER BY ?civilization\r\n```"
    },
    {
        "question": "What brand uses petroleum jelly?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P1056 wd:Q457239; wdt:P31/wdt:P279 wd:Q431289}",
        "generated_sparql": "SELECT ?brand WHERE {\n  ?brand wdt:P31 wd:Q457239.\n  ?brand wdt:P1056 wd:Q431289.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What brand uses petroleum jelly?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Vaseline\": \"Q457239\", \"petroleum jelly\": \"Q431289\"}, \"relationships\": {\"active ingredient\": \"P1056\", \"has part\": \"P279\", \"instance of\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?brand WHERE {\n  ?brand wdt:P31 wd:Q457239.\n  ?brand wdt:P1056 wd:Q431289.\n}\n```"
    },
    {
        "question": "How many other musical films were launched the same year as Grease?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?result) AS ?resultCnt) WHERE {?result wdt:P31/wdt:P279* wd:Q11424; wdt:P136 wd:Q842256; wdt:P577 ?date. wd:Q267721 wdt:P577 ?dateG FILTER((YEAR(?date)=YEAR(?dateG)) && (?result != wd:Q267721))}",
        "generated_sparql": "SELECT COUNT(*) AS num_films\r\nWHERE {\r\n  ?film wdt:P31 wd:Q267721 . # Grease\r\n  ?film wdt:P279 wd:Q11424 . # musical film\r\n  ?film wdt:P136 wd:Q842256 . # musical\r\n  ?film wdt:P577 ?date . # release date\r\n  ?date wdt:P577 ?year .\r\n  ?year wdt:P577 ?grease_year .\r\n  ?year <> ?grease_year .\r\n  ?film wdt:P577 ?grease_year .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many other musical films were launched the same year as Grease?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Grease\": \"Q267721\", \"musical film\": \"Q11424\"}, \"relationships\": {\"instance of\": \"P31\", \"genre\": \"P279\", \"film genre\": \"P136\", \"musical\": \"Q842256\", \"release date\": \"P577\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_films\r\nWHERE {\r\n  ?film wdt:P31 wd:Q267721 . # Grease\r\n  ?film wdt:P279 wd:Q11424 . # musical film\r\n  ?film wdt:P136 wd:Q842256 . # musical\r\n  ?film wdt:P577 ?date . # release date\r\n  ?date wdt:P577 ?year .\r\n  ?year wdt:P577 ?grease_year .\r\n  ?year <> ?grease_year .\r\n  ?film wdt:P577 ?grease_year .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nORDER BY ?year\r\n```"
    },
    {
        "question": "Which creator of The OA also acted in it?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q19798744 wdt:P170 ?result; wdt:P161 ?result}",
        "generated_sparql": "SELECT ?creator\r\nWHERE {\r\n  ?creator wdt:P170 wd:Q19798744 . # creator of The OA\r\n  ?creator wdt:P161 wd:Q19798744 . # starring in The OA\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Which creator of The OA also acted in it?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"The OA\": \"Q19798744\"}, \"relationships\": {\"creator\": \"P170\", \"starring\": \"P161\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?creator\r\nWHERE {\r\n  ?creator wdt:P170 wd:Q19798744 . # creator of The OA\r\n  ?creator wdt:P161 wd:Q19798744 . # starring in The OA\r\n}\r\n```"
    },
    {
        "question": "What albums has Atif Aslam been on?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q482994; wdt:P175 wd:Q755830}",
        "generated_sparql": "SELECT ?album\r\nWHERE {\r\n  ?album wdt:P31 wd:Q482994;\r\n  ?album wdt:P175 wd:Q755830;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What albums has Atif Aslam been on?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Atif Aslam\": \"Q755830\", \"album\": \"Q482994\"}, \"relationships\": {\"performer\": \"P175\", \"instance of\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?album\r\nWHERE {\r\n  ?album wdt:P31 wd:Q482994;\r\n  ?album wdt:P175 wd:Q755830;\r\n}\r\n```"
    },
    {
        "question": "What was Ada Lovelace\u2019s noble title?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q7259 wdt:P97 ?result}",
        "generated_sparql": "SELECT ?nobleTitle\r\nWHERE {\r\n  ?person <P97> ?nobleTitle\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What was Ada Lovelace\u2019s noble title?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Ada Lovelace\": \"Q7259\"}, \"relationships\": {\"noble title\": \"P97\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?nobleTitle\r\nWHERE {\r\n  ?person <P97> ?nobleTitle\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(CONTAINS(?person, \"Q7259\"))\r\n}\r\n```"
    },
    {
        "question": "What was Janus the god of?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q167685 wdt:P2925 ?result}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P2925 wd:Q167685.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What was Janus the god of?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Janus\": \"Q167685\"}, \"relationships\": {\"god of\": \"P2925\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P2925 wd:Q167685.\r\n}\r\n```"
    },
    {
        "question": "Who was the fellow Hobbit who was an enemy of Frodo?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q177329 wdt:P7047 ?result. ?result wdt:P31 wd:Q74359}",
        "generated_sparql": "SELECT ?frodo ?hobbit WHERE {\n  ?frodo wdt:P31 wd:Q177329.\n  ?hobbit wdt:P31 wd:Q74359.\n  ?frodo wdt:P7047 ?hobbit.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Who was the fellow Hobbit who was an enemy of Frodo?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Frodo\": \"Q177329\", \"Hobbit\": \"Q74359\"}, \"relationships\": {\"enemy of\": \"P7047\", \"instance of\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?frodo ?hobbit WHERE {\n  ?frodo wdt:P31 wd:Q177329.\n  ?hobbit wdt:P31 wd:Q74359.\n  ?frodo wdt:P7047 ?hobbit.\n}\n```"
    },
    {
        "question": "What was the last painting that Van Gogh painted?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q3305213; wdt:P170 wd:Q5582; wdt:P571 ?date} ORDER BY DESC(?date) LIMIT 1",
        "generated_sparql": "",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What was the last painting that Van Gogh painted?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Tree Roots\": \"Q3305213\", \"Vincent van Gogh\": \"Q5582\"}, \"relationships\": {\"instance of\": \"P31\", \"creator\": \"P170\", \"inception\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?painting WHERE {\n  ?painting wdt:P31 wd:Q3305213.\n  ?painting wdt:P170 wd:Q5582.\n  ?painting wdt:P571 ?date.\n  ?date wdt:P31 wd:Q3305213.\n  ?date wdt:P170 wd:Q5582.\n  ?date wdt:P571 ?date.\n  ?painting wdt:P31 ?date.\n  ?painting wdt:P170 wd:Q5582.\n  ?painting wdt:P571 ?date.\n  ?date wdt:P31 wd:Q3305213.\n  ?date wdt:P170 wd:Q5582.\n  ?date wdt:P571 ?date.\n  ?painting wdt:P31 ?date.\n  ?painting wdt:P170 wd:Q5582.\n  ?painting wdt:P571 ?date.\n  ?date wdt:P31 wd:Q3305213.\n  ?date wdt:P170 wd:Q5582.\n  ?date wdt:P571 ?date.\n  ?painting wdt:P31 ?date.\n  ?painting wdt:P170 wd:Q5582.\n  ?painting wdt:P571 ?date.\n  ?date wdt:P31 wd:Q3305213.\n  ?date wdt:P170 wd:Q5582.\n  ?date wdt:P571 ?date.\n  ?painting wdt:P31 ?date.\n  ?painting wdt:P170 wd:Q5582.\n  ?painting wdt:P571 ?date.\n "
    },
    {
        "question": "What was the main subject addressed in the Deep Purple song \u201cSmoke on the water\u201d?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q636399 wdt:P921 ?result}",
        "generated_sparql": "SELECT ?s WHERE {\n  ?s wdt:P921 wd:Q636399.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What was the main subject addressed in the Deep Purple song \u201cSmoke on the water\u201d?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Smoke on the Water\": \"Q636399\"}, \"relationships\": {\"main subject\": \"P921\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?s WHERE {\n  ?s wdt:P921 wd:Q636399.\n}\n```"
    },
    {
        "question": "When did the first sperm whales exist?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q81214 wdt:P580 ?result}",
        "generated_sparql": "SELECT ?startTime\r\nWHERE {\r\n  ?spermWhale wd:P580 ?startTime\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'When did the first sperm whales exist?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"sperm whale\": \"Q81214\"}, \"relationships\": {\"start time\": \"P580\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?startTime\r\nWHERE {\r\n  ?spermWhale wd:P580 ?startTime\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nORDER BY ?startTime\r\nLIMIT 1\r\n```"
    },
    {
        "question": "What year did the Berlin Wall fall?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q5086 wdt:P576 ?time BIND(YEAR(?time) AS ?result)}",
        "generated_sparql": "SELECT ?year WHERE {\n  ?year wdt:P576 wd:Q5086.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What year did the Berlin Wall fall?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Berlin Wall\": \"Q5086\"}, \"relationships\": {\"dissolved, abolished or demolished\": \"P576\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?year WHERE {\n  ?year wdt:P576 wd:Q5086.\n}\n```"
    },
    {
        "question": "What year was Riverdale first aired?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q23001951 wdt:P580 ?time. BIND(YEAR(?time) AS ?result)}",
        "generated_sparql": "SELECT ?year\r\nWHERE {\r\n  ?show wdt:P580 wd:Q23001951.\r\n  ?show wdt:P31 wd:Q1855566.\r\n  ?show wdt:P365 ?year\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What year was Riverdale first aired?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Riverdale\": \"Q23001951\"}, \"relationships\": {\"inception\": \"P580\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?year\r\nWHERE {\r\n  ?show wdt:P580 wd:Q23001951.\r\n  ?show wdt:P31 wd:Q1855566.\r\n  ?show wdt:P365 ?year\r\n}\r\n```"
    },
    {
        "question": "When did Allen Ginsberg die?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q6711 wdt:P570 ?result}",
        "generated_sparql": "SELECT ?date WHERE {\n  ?person wdt:P570 ?date.\n  ?person wd:Q6711.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'When did Allen Ginsberg die?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Allen Ginsberg\": \"Q6711\"}, \"relationships\": {\"date of death\": \"P570\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?date WHERE {\n  ?person wdt:P570 ?date.\n  ?person wd:Q6711.\n}\n```"
    },
    {
        "question": "When did Ella Fitzgerald die?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1768 wdt:P570 ?result}",
        "generated_sparql": "SELECT ?date WHERE {\n  ?person wdt:P570 ?date.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'When did Ella Fitzgerald die?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Ella Fitzgerald\": \"Q1768\"}, \"relationships\": {\"date of death\": \"P570\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?date WHERE {\n  ?person wdt:P570 ?date.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  WHERE {\n    ?person wikibase:label ?label.\n    FILTER(REGEXP(?label, \"Ella Fitzgerald\", \"i\"))\n  }\n}\n```"
    },
    {
        "question": "when did human first start to bouldering?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q852989 wdt:P571 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?date wdt:P571 wd:Q852989.\r\n}\r\nORDER BY ?date\r\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'when did human first start to bouldering?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"bouldering\": \"Q852989\"}, \"relationships\": {\"inception\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?date wdt:P571 wd:Q852989.\r\n}\r\nORDER BY ?date\r\nLIMIT 1\r\n```"
    },
    {
        "question": "When did Pakistan become independent?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q843 wdt:P571 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?country wdt:P571 ?date\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'When did Pakistan become independent?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Pakistan\": \"Q843\"}, \"relationships\": {\"inception\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?country wdt:P571 ?date\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n}\r\nWHERE {\r\n  ?country wd:Q843\r\n}\r\n```"
    },
    {
        "question": "When did Rumi die?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q43347 wdt:P570 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?person wdt:P570 ?date\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'When did Rumi die?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Rumi\": \"Q43347\"}, \"relationships\": {\"date of death\": \"P570\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?person wdt:P570 ?date\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(STR(?person) = \"Q43347\")\r\n}\r\n```"
    },
    {
        "question": "When did the brother of the author of Slaughterhouse Five die?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q265954 wdt:P50/wdt:P3373 ?bro. ?bro wdt:P21 wd:Q6581097; wdt:P570 ?result}",
        "generated_sparql": "SELECT ?date_of_death WHERE {\n  ?author wdt:P50 wd:Q265954.\n  ?author wdt:P3373 wd:Q6581097.\n  ?author wdt:P21 wd:Q6581097.\n  ?brother wdt:P570 ?date_of_death.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'When did the brother of the author of Slaughterhouse Five die?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Slaughterhouse Five\": \"Q265954\", \"Kurt Vonnegut's brother\": \"Q6581097\"}, \"relationships\": {\"author\": \"P50\", \"brother\": \"P3373\", \"gender\": \"P21\", \"date of death\": \"P570\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?date_of_death WHERE {\n  ?author wdt:P50 wd:Q265954.\n  ?author wdt:P3373 wd:Q6581097.\n  ?author wdt:P21 wd:Q6581097.\n  ?brother wdt:P570 ?date_of_death.\n}\n```"
    },
    {
        "question": "when was the creator of saturday night live born?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q13979 wdt:P170/wdt:P569 ?result}",
        "generated_sparql": "SELECT ?creator ?dateOfBirth\nWHERE {\n  ?creator wdt:P170 wd:Q13979.\n  ?creator wdt:P569 ?dateOfBirth.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'when was the creator of saturday night live born?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Saturday Night Live\": \"Q13979\"}, \"relationships\": {\"creator\": \"P170\", \"date of birth\": \"P569\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?creator ?dateOfBirth\nWHERE {\n  ?creator wdt:P170 wd:Q13979.\n  ?creator wdt:P569 ?dateOfBirth.\n}\n```"
    },
    {
        "question": "Who was part of the Hambach Festival?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q551416 wdt:P710 ?result}",
        "generated_sparql": "SELECT ?s WHERE {\r\n  ?s wdt:P710 wd:Q551416.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Who was part of the Hambach Festival?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Hambach Festival\": \"Q551416\"}, \"relationships\": {\"participant\": \"P710\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s WHERE {\r\n  ?s wdt:P710 wd:Q551416.\r\n}\r\n```"
    },
    {
        "question": "When did The OA was first released?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q19798744 wdt:P580 ?result}",
        "generated_sparql": "SELECT ?firstReleaseDate\r\nWHERE {\r\n  ?theOA wdt:P580 ?firstReleaseDate\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'When did The OA was first released?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"The OA\": \"Q19798744\"}, \"relationships\": {\"first release date\": \"P580\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?firstReleaseDate\r\nWHERE {\r\n  ?theOA wdt:P580 ?firstReleaseDate\r\n}\r\n```"
    },
    {
        "question": "How many casualties were a result of the Troubles?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q815436 wdt:P1120 ?result}",
        "generated_sparql": "SELECT COUNT(*) AS casualties\r\nWHERE {\r\n  ?s wdt:P1120 ?o\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many casualties were a result of the Troubles?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"The Troubles\": \"Q815436\"}, \"relationships\": {\"number of casualties\": \"P1120\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS casualties\r\nWHERE {\r\n  ?s wdt:P1120 ?o\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(str(?s) = \"Q815436\")\r\n}\r\n```"
    },
    {
        "question": "When did the Weimar Republic start?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q41304 wdt:P571 ?result}",
        "generated_sparql": "SELECT ?start\r\nWHERE {\r\n  ?s wdt:P571 wd:Q41304.\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'When did the Weimar Republic start?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Weimar Republic\": \"Q41304\"}, \"relationships\": {\"inception\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?start\r\nWHERE {\r\n  ?s wdt:P571 wd:Q41304.\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  ?s wikibase:label ?start\r\n}\r\n```"
    },
    {
        "question": "When did World War II officially end?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q362 wdt:P582 ?result}",
        "generated_sparql": "SELECT ?endTime WHERE {\n  ?s wdt:P582 ?endTime.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'When did World War II officially end?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"World War II\": \"Q362\"}, \"relationships\": {\"end time\": \"P582\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?endTime WHERE {\n  ?s wdt:P582 ?endTime.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  WHERE {\n    ?s wikibase:label ?label.\n    FILTER(REGEXP(?label, \"World War II\"))\n  }\n}\n```"
    },
    {
        "question": "when is the first ironman world championship?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q1420480 wdt:P571 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?event wdt:P571 wd:Q1420480.\r\n  ?event wdt:P31 wd:Q1420480.\r\n  ?event wdt:P360 ?date\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'when is the first ironman world championship?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Ironman World Championship\": \"Q1420480\"}, \"relationships\": {\"inception\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?event wdt:P571 wd:Q1420480.\r\n  ?event wdt:P31 wd:Q1420480.\r\n  ?event wdt:P360 ?date\r\n}\r\n```"
    },
    {
        "question": "when was the magazine in which hunter x hunter is published established?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q696071 wdt:P1433 ?mag. ?mag wdt:P31/wdt:P279* wd:Q41298; wdt:P571 ?result}",
        "generated_sparql": "SELECT ?publisher ?foundingDate\r\nWHERE {\r\n  ?publisher wdt:P31 wd:Q41298. # Shueisha\r\n  ?publisher wdt:P1433 ?magazine. # published in\r\n  ?magazine wdt:P571 ?foundingDate. # founding date\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'when was the magazine in which hunter x hunter is published established?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Hunter x Hunter\": \"Q696071\", \"Shueisha\": \"Q41298\"}, \"relationships\": {\"published in\": \"P1433\", \"instance of\": \"P31\", \"part of\": \"P279\", \"founding date\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?publisher ?foundingDate\r\nWHERE {\r\n  ?publisher wdt:P31 wd:Q41298. # Shueisha\r\n  ?publisher wdt:P1433 ?magazine. # published in\r\n  ?magazine wdt:P571 ?foundingDate. # founding date\r\n}\r\n```"
    },
    {
        "question": "When the film Red Notice was released?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q58815001 wdt:P577 ?result}",
        "generated_sparql": "SELECT ?releaseDate\r\nWHERE {\r\n  ?film wdt:P577 ?releaseDate\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'When the film Red Notice was released?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Red Notice\": \"Q58815001\"}, \"relationships\": {\"release date\": \"P577\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?releaseDate\r\nWHERE {\r\n  ?film wdt:P577 ?releaseDate\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(CONTAINS(?film, \"Red Notice\"))\r\n}\r\n```"
    },
    {
        "question": "When was Cologne Cathedral built?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q4176 wdt:P571 ?result}",
        "generated_sparql": "SELECT ?s ?p ?o WHERE {\r\n  ?s wdt:P571 wd:Q4176 .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'When was Cologne Cathedral built?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Cologne Cathedral\": \"Q4176\"}, \"relationships\": {\"inception\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s ?p ?o WHERE {\r\n  ?s wdt:P571 wd:Q4176 .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\n```"
    },
    {
        "question": "What can be done against gout?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q133087 wdt:P2176 ?result}",
        "generated_sparql": "SELECT ?treatment\r\nWHERE {\r\n  ?gout wdt:P2176 ?treatment\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What can be done against gout?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"gout\": \"Q133087\"}, \"relationships\": {\"treatments\": \"P2176\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?treatment\r\nWHERE {\r\n  ?gout wdt:P2176 ?treatment\r\n}\r\n```"
    },
    {
        "question": "When was HIV first identified?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q15787 wdt:P575 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?date wdt:P575 wd:Q15787. \r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'When was HIV first identified?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"HIV\": \"Q15787\"}, \"relationships\": {\"inception\": \"P575\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?date wdt:P575 wd:Q15787. \r\n}\r\n```"
    },
    {
        "question": "When was the first article about Liquid State Machines published?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{?art wdt:P31/wdt:P279* wd:Q191067; wdt:P921 wd:Q6557482; wdt:P577 ?result} ORDER BY ASC(?result) LIMIT 1",
        "generated_sparql": "SELECT ?publication_date\r\nWHERE {\r\n  ?article wdt:P921 wd:Q6557482 ; # main subject: Liquid State Machines\r\n  ?article wdt:P577 ?publication_date ; # publication date\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'When was the first article about Liquid State Machines published?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Liquid State Machines\": \"Q6557482\", \"article\": \"Q191067\"}, \"relationships\": {\"main subject\": \"P921\", \"publication date\": \"P577\", \"instance of\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?publication_date\r\nWHERE {\r\n  ?article wdt:P921 wd:Q6557482 ; # main subject: Liquid State Machines\r\n  ?article wdt:P577 ?publication_date ; # publication date\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nORDER BY ?publication_date\r\nLIMIT 1\r\n```"
    },
    {
        "question": "When was Marlene Dietrich born?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q4612 wdt:P569 ?result}",
        "generated_sparql": "SELECT ?birthDate\r\nWHERE {\r\n  ?person wdt:P569 ?birthDate\r\n  wd:Q4612 ?person\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'When was Marlene Dietrich born?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Marlene Dietrich\": \"Q4612\"}, \"relationships\": {\"birth date\": \"P569\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?birthDate\r\nWHERE {\r\n  ?person wdt:P569 ?birthDate\r\n  wd:Q4612 ?person\r\n}\r\n```"
    },
    {
        "question": "When was Penicillin discovered?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q12190 wdt:P575 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?penicillin wdt:P575 ?date\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'When was Penicillin discovered?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Penicillin\": \"Q12190\"}, \"relationships\": {\"inception\": \"P575\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?penicillin wdt:P575 ?date\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\n```"
    },
    {
        "question": "When was Rumi born?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q43347 wdt:P569 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?person wdt:P569 ?date\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'When was Rumi born?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Rumi\": \"Q43347\"}, \"relationships\": {\"date of birth\": \"P569\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?person wdt:P569 ?date\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n  FILTER(str(?person) = \"Q43347\")\r\n}\r\n```"
    },
    {
        "question": "When was the beginning of Romanticism ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q37068 wdt:P580 ?result}",
        "generated_sparql": "SELECT ?startTime\r\nWHERE {\r\n  ?romanticism wdt:P580 ?startTime ;\r\n  wd:Q37068 wdt:P31 ?romanticism\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'When was the beginning of Romanticism ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Romanticism\": \"Q37068\"}, \"relationships\": {\"start time\": \"P580\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?startTime\r\nWHERE {\r\n  ?romanticism wdt:P580 ?startTime ;\r\n  wd:Q37068 wdt:P31 ?romanticism\r\n}\r\n```"
    },
    {
        "question": "When was the Echo Music Prize abolished?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q703237 wdt:P576 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?prize wdt:P576 wd:Q703237.\r\n  ?date wdt:P314 ?prize.\r\n}\r\nORDER BY ?date DESC\r\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'When was the Echo Music Prize abolished?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Echo Music Prize\": \"Q703237\"}, \"relationships\": {\"abolished, dissolved or demolished\": \"P576\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?prize wdt:P576 wd:Q703237.\r\n  ?date wdt:P314 ?prize.\r\n}\r\nORDER BY ?date DESC\r\nLIMIT 1\r\n```"
    },
    {
        "question": "When was the first album of the American band Typhoon released?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{?alb wdt:P31 wd:Q482994; wdt:P175 wd:Q7861093; wdt:P577 ?result} ORDER BY ASC(?result) LIMIT 1",
        "generated_sparql": "SELECT ?releaseDate WHERE {\n  ?album wdt:P31 wd:Q1842.\n  ?album wdt:P175 ?band.\n  ?band wdt:P31 wd:Q7861093.\n  ?album wdt:P577 ?releaseDate.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'When was the first album of the American band Typhoon released?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Typhoon\": \"Q7861093\"}, \"relationships\": {\"genre\": \"P31\", \"performer\": \"P175\", \"release date\": \"P577\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?releaseDate WHERE {\n  ?album wdt:P31 wd:Q1842.\n  ?album wdt:P175 ?band.\n  ?band wdt:P31 wd:Q7861093.\n  ?album wdt:P577 ?releaseDate.\n}\n```"
    },
    {
        "question": "When was the Hamburg Airport inaugurated?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q27706 wdt:P571 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?airport wdt:P571 ?date\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'When was the Hamburg Airport inaugurated?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Hamburg Airport\": \"Q27706\"}, \"relationships\": {\"inaugurated on\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?airport wdt:P571 ?date\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(STR(?airport) = \"Q27706\")\r\n}\r\n```"
    },
    {
        "question": "When was the Hamburg S-Bahn officially opened?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q693956 wdt:P1619 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?s <- wd:Q693956\r\n  ?s wdt:P1619 ?date\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'When was the Hamburg S-Bahn officially opened?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Hamburg S-Bahn\": \"Q693956\"}, \"relationships\": {\"inception\": \"P1619\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?s <- wd:Q693956\r\n  ?s wdt:P1619 ?date\r\n}\r\n```"
    },
    {
        "question": "When was the jazz club Birdland in Hamburg founded?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q800176 wdt:P571 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?club wdt:P571 ?date\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'When was the jazz club Birdland in Hamburg founded?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Birdland\": \"Q800176\"}, \"relationships\": {\"inception\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?club wdt:P571 ?date\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(str(?club) = \"Q800176\")\r\n}\r\n```"
    },
    {
        "question": "When was the poem Howl written?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q1545259 wdt:P571 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?poem wdt:P571 ?date\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'When was the poem Howl written?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Howl\": \"Q1545259\"}, \"relationships\": {\"inception\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?poem wdt:P571 ?date\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(str(?poem) = \"Q1545259\")\r\n}\r\n```"
    },
    {
        "question": "When was the university of Cambridge founded?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q35794 wdt:P571 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?university wdt:P571 ?date\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'When was the university of Cambridge founded?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"University of Cambridge\": \"Q35794\"}, \"relationships\": {\"founding date\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?university wdt:P571 ?date\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\n```"
    },
    {
        "question": "When was the University of Hamburg founded?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q156725 wdt:P571 ?result}",
        "generated_sparql": "SELECT ?date WHERE {\n  ?university wdt:P571 ?date.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'When was the University of Hamburg founded?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"University of Hamburg\": \"Q156725\"}, \"relationships\": {\"founding date\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?date WHERE {\n  ?university wdt:P571 ?date.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  WHERE {\n    ?university wikibase:label { bd:serviceParam wikibase:language \"en\". } = \"University of Hamburg\"\n  }\n}\n```"
    },
    {
        "question": "When was the University of Saskatchewan founded?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q1514848 wdt:P571 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?university wdt:P571 ?date\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'When was the University of Saskatchewan founded?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"University of Saskatchewan\": \"Q1514848\"}, \"relationships\": {\"founding date\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?university wdt:P571 ?date\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nORDER BY ?date\r\nLIMIT 1\r\n```"
    },
    {
        "question": "When was the Vatican City created?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q237 wdt:P571 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?city wdt:P571 ?date\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'When was the Vatican City created?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Vatican City\": \"Q237\"}, \"relationships\": {\"inception\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?city wdt:P571 ?date\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(STR(?city) = \"Q237\")\r\n}\r\n```"
    },
    {
        "question": "When was United Fruit Company founded?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q1771942 wdt:P571 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?company wdt:P571 ?date\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'When was United Fruit Company founded?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"United Fruit Company\": \"Q1771942\"}, \"relationships\": {\"founding date\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?company wdt:P571 ?date\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nORDER BY ?date\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Where did Trotzky die?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q33391 wdt:P20 ?result}",
        "generated_sparql": "SELECT ?place\r\nWHERE {\r\n  ?person wdt:P20 ?place\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Where did Trotzky die?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Trotzky\": \"Q33391\"}, \"relationships\": {\"place of death\": \"P20\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?place\r\nWHERE {\r\n  ?person wdt:P20 ?place\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(CONTAINS(?place, \"Trotzky\"))\r\n}\r\n```"
    },
    {
        "question": "Where are both The Call of the Wild and White Fang set, the most two famous works of Jack London?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q476871 wdt:P840 ?result. wd:Q152267 wdt:P840 ?result}",
        "generated_sparql": "SELECT ?s\r\nWHERE {\r\n  ?s wdt:P840 ?o\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Where are both The Call of the Wild and White Fang set, the most two famous works of Jack London?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"The Call of the Wild\": \"Q476871\", \"White Fang\": \"Q152267\"}, \"relationships\": {\"setting\": \"P840\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s\r\nWHERE {\r\n  ?s wdt:P840 ?o\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(CONTAINS(?s, \"The Call of the Wild\") && CONTAINS(?s, \"White Fang\"))\r\n}\r\nORDER BY DESC(?o)\r\nLIMIT 2\r\n```"
    },
    {
        "question": "Where did the Hambach Festival happen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q551416 wdt:P276 ?result}",
        "generated_sparql": "SELECT ?location\r\nWHERE {\r\n  ?event wdt:P276 ?location .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Where did the Hambach Festival happen?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Hambach Festival\": \"Q551416\"}, \"relationships\": {\"location\": \"P276\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?location\r\nWHERE {\r\n  ?event wdt:P276 ?location .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(CONTAINS(?event, \"Hambach Festival\") && CONTAINS(?location, \"en\"))\r\n}\r\n```"
    },
    {
        "question": "Where do the novels of the franchise The Lord of the Rings take place?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q15228 wdt:P840 ?result}",
        "generated_sparql": "SELECT ?s WHERE {\n  ?s wdt:P840 ?o.\n  ?s wd:Q15228.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Where do the novels of the franchise The Lord of the Rings take place?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"The Lord of the Rings\": \"Q15228\"}, \"relationships\": {\"setting\": \"P840\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?s WHERE {\n  ?s wdt:P840 ?o.\n  ?s wd:Q15228.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:list { bd:serviceParam wikibase:listType \"SPARQL\". }\n}\n```"
    },
    {
        "question": "Where does the Nutri-Score originate from?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q46577569 wdt:P495 ?result}",
        "generated_sparql": "SELECT ?country\r\nWHERE {\r\n  ?nutriScore wdt:P495 ?country\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Where does the Nutri-Score originate from?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Nutri-Score\": \"Q46577569\"}, \"relationships\": {\"country of origin\": \"P495\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?country\r\nWHERE {\r\n  ?nutriScore wdt:P495 ?country\r\n}\r\n```"
    },
    {
        "question": "Are there at least two winners of the Academy Award for Best Actress who have been educated at the same institution?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK{?act wdt:P166 wd:Q103618; wdt:P69 ?result. ?act2 wdt:P166 wd:Q103618; wdt:P69 ?result FILTER(?act != ?act2)}",
        "generated_sparql": "SELECT DISTINCT ?a ?b WHERE {\n  ?a wd:P166 ?b .\n  ?a wd:P69 ?c .\n  ?b wd:P69 ?c .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Are there at least two winners of the Academy Award for Best Actress who have been educated at the same institution?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Academy Award for Best Actress\": \"Q103618\"}, \"relationships\": {\"winner\": \"P166\", \"educated at\": \"P69\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT DISTINCT ?a ?b WHERE {\n  ?a wd:P166 ?b .\n  ?a wd:P69 ?c .\n  ?b wd:P69 ?c .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  FILTER(CONTAINS(?a, \"Academy Award for Best Actress\") && CONTAINS(?b, \"Academy Award for Best Actress\") && LENGTH(?a) - LENGTH(REPLACE(?a, ' ', '')) + LENGTH(REPLACE(?b, ' ', '')) >= 2)\n}\n```"
    },
    {
        "question": "Where was K-pop star Lisa Manoban born?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q26707663 wdt:P19 ?result}",
        "generated_sparql": "SELECT ?place WHERE {\n  ?person wdt:P19 ?place.\n  wd:Q26707663 wdt:P19 ?place.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Where was K-pop star Lisa Manoban born?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Lisa Manoban\": \"Q26707663\"}, \"relationships\": {\"place of birth\": \"P19\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?place WHERE {\n  ?person wdt:P19 ?place.\n  wd:Q26707663 wdt:P19 ?place.\n}\n```"
    },
    {
        "question": "What is the highest point of Norway?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q20 wdt:P610 ?result}",
        "generated_sparql": "SELECT ?highestPoint\r\nWHERE {\r\n  ?country wdt:P31 wd:Q20. # Norway\r\n  ?country wdt:P610 ?highestPoint. # highest point\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What is the highest point of Norway?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Norway\": \"Q20\"}, \"relationships\": {\"highest point\": \"P610\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?highestPoint\r\nWHERE {\r\n  ?country wdt:P31 wd:Q20. # Norway\r\n  ?country wdt:P610 ?highestPoint. # highest point\r\n}\r\n```"
    },
    {
        "question": "Where did the psychedelic band \u201cKhruangbin\u201d form?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q54555985 wdt:P740 ?result}",
        "generated_sparql": "SELECT ?place\r\nWHERE {\r\n  ?band wdt:P740 ?place;\r\n  wd:Q54555985 wdt:P31 ?place;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Where did the psychedelic band \u201cKhruangbin\u201d form?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Khruangbin\": \"Q54555985\"}, \"relationships\": {\"place of formation\": \"P740\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?place\r\nWHERE {\r\n  ?band wdt:P740 ?place;\r\n  wd:Q54555985 wdt:P31 ?place;\r\n}\r\n```"
    },
    {
        "question": "Where was Caesar murdered?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1048 wdt:P20 ?result}",
        "generated_sparql": "SELECT ?place WHERE {\n  ?person wdt:P20 ?place .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Where was Caesar murdered?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Caesar\": \"Q1048\"}, \"relationships\": {\"place of death\": \"P20\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?place WHERE {\n  ?person wdt:P20 ?place .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  WHERE {\n    ?person wikidata:Q1048 .\n  }\n}\n```"
    },
    {
        "question": "Where was Goethe\u2019s unmarried partner born ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q5879 wdt:P451/wdt:P19 ?result}",
        "generated_sparql": "SELECT ?place\r\nWHERE {\r\n  ?person wdt:P451 wd:Q5879 ; # Goethe's unmarried partner\r\n  ?person wdt:P19 ?place ; # place of birth\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Where was Goethe\u2019s unmarried partner born ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Goethe\": \"Q5879\"}, \"relationships\": {\"unmarried partner\": \"P451\", \"place of birth\": \"P19\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?place\r\nWHERE {\r\n  ?person wdt:P451 wd:Q5879 ; # Goethe's unmarried partner\r\n  ?person wdt:P19 ?place ; # place of birth\r\n}\r\n```"
    },
    {
        "question": "Where was Roland Corporation founded?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q848490 wdt:P740 ?result}",
        "generated_sparql": "SELECT ?location\r\nWHERE {\r\n  ?entity wdt:P740 ?location\r\n  wd:Q848490 ?entity\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Where was Roland Corporation founded?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Roland Corporation\": \"Q848490\"}, \"relationships\": {\"founding location\": \"P740\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?location\r\nWHERE {\r\n  ?entity wdt:P740 ?location\r\n  wd:Q848490 ?entity\r\n}\r\n```"
    },
    {
        "question": "Where was the author of The Catcher in the Rye born ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q183883 wdt:P50/wdt:P19 ?result}",
        "generated_sparql": "SELECT ?birthplace WHERE {\n  ?book wdt:P50 wd:Q183883.\n  ?book wdt:P19 ?birthplace.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Where was the author of The Catcher in the Rye born ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"The Catcher in the Rye\": \"Q183883\"}, \"relationships\": {\"author\": \"P50\", \"birthplace\": \"P19\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?birthplace WHERE {\n  ?book wdt:P50 wd:Q183883.\n  ?book wdt:P19 ?birthplace.\n}\n```"
    },
    {
        "question": "Who developed the Erlangen program?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P800 wd:Q315296}",
        "generated_sparql": "SELECT ?developer\r\nWHERE {\r\n  ?program wdt:P800 ?developer\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Who developed the Erlangen program?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Erlangen program\": \"Q315296\"}, \"relationships\": {\"developer\": \"P800\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?developer\r\nWHERE {\r\n  ?program wdt:P800 ?developer\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(CONTAINS(?program, \"Erlangen program\"))\r\n}\r\n```"
    },
    {
        "question": "Which actor starring in Free Guy also starred in Deadpool?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q38685497 wdt:P161 ?result. wd:Q19347291 wdt:P161 ?result}",
        "generated_sparql": "SELECT ?actor WHERE {\n  ?actor wdt:P161 wd:Q38685497.\n  ?actor wdt:P161 wd:Q19347291.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Which actor starring in Free Guy also starred in Deadpool?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Free Guy\": \"Q38685497\", \"Deadpool\": \"Q19347291\"}, \"relationships\": {\"starring actor\": \"P161\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?actor WHERE {\n  ?actor wdt:P161 wd:Q38685497.\n  ?actor wdt:P161 wd:Q19347291.\n}\n```"
    },
    {
        "question": "Which American presidents followed in their father\u2018s step and also became the president?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P39 wd:Q11696; wdt:P22/wdt:P39 wd:Q11696}",
        "generated_sparql": "SELECT ?president\r\nWHERE {\r\n  ?president wdt:P39 wd:Q11696. # position held\r\n  ?president wdt:P22 ?father. # father\r\n  ?father wdt:P39 wd:Q11696. # position held\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Which American presidents followed in their father\u2018s step and also became the president?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"United States\": \"Q11696\"}, \"relationships\": {\"position held\": \"P39\", \"father\": \"P22\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?president\r\nWHERE {\r\n  ?president wdt:P39 wd:Q11696. # position held\r\n  ?president wdt:P22 ?father. # father\r\n  ?father wdt:P39 wd:Q11696. # position held\r\n}\r\n```"
    },
    {
        "question": "which animal can possibly live longer, panda or koala?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {BIND(IF(EXISTS{wd:Q33602 wdt:P4214 ?lp. wd:Q36101 wdt:P4214 ?lk FILTER(?lp > ?lk)},wd:Q33602,wd:Q36101)AS ?result)}",
        "generated_sparql": "SELECT ?animal WHERE {\n  ?animal wdt:P4214 ?maximum_lifespan.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'which animal can possibly live longer, panda or koala?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"panda\": \"Q33602\", \"koala\": \"Q36101\"}, \"relationships\": {\"maximum lifespan\": \"P4214\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?animal WHERE {\n  ?animal wdt:P4214 ?maximum_lifespan.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  FILTER(CONTAINS(?animal, \"panda\") || CONTAINS(?animal, \"koala\"))\n}\nORDER BY ?maximum_lifespan DESC\nLIMIT 1\n```"
    },
    {
        "question": "Which archipelago has more islands: the Gal\u00e1pagos Islands or the Hawaiian Islands ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {{SELECT (COUNT (DISTINCT ?isl) AS ?gn) WHERE{wd:Q38095 wdt:P527+ ?isl. ?isl wdt:P31/wdt:P279* wd:Q23442}}{SELECT (COUNT (DISTINCT ?isl) AS ?hn) WHERE{wd:Q192626 wdt:P527+ ?isl. ?isl wdt:P31/wdt:P279* wd:Q23442}} BIND(IF(?hn > ?gn, wd:Q192626, wd:Q38095) AS ?result)}",
        "generated_sparql": "SELECT ?x ?y WHERE {\n  ?x wdt:P527 wd:Q38095.\n  ?x wdt:P31 wd:Q192626.\n  ?x wdt:P279 wd:Q192626.\n  ?y wdt:P527 wd:Q192626.\n  ?y wdt:P31 wd:Q38095.\n  ?y wdt:P279 wd:Q38095.\n  FILTER(?x < ?y)\n}\nORDER BY (?x + ?y) DESC\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Which archipelago has more islands: the Gal\u00e1pagos Islands or the Hawaiian Islands ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Gal\u00e1pagos Islands\": \"Q38095\", \"Hawaiian Islands\": \"Q192626\"}, \"relationships\": {\"part of\": \"P527\", \"instance of\": \"P31\", \"located in the administrative territorial entity\": \"P279\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?x ?y WHERE {\n  ?x wdt:P527 wd:Q38095.\n  ?x wdt:P31 wd:Q192626.\n  ?x wdt:P279 wd:Q192626.\n  ?y wdt:P527 wd:Q192626.\n  ?y wdt:P31 wd:Q38095.\n  ?y wdt:P279 wd:Q38095.\n  FILTER(?x < ?y)\n}\nORDER BY (?x + ?y) DESC\nLIMIT 1\n```"
    },
    {
        "question": "Which art movement was Yoko Ono part of?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q117012 wdt:P135 ?result. ?result wdt:P31 wd:Q968159 }",
        "generated_sparql": "SELECT ?movement\r\nWHERE {\r\n  ?artist wdt:P31 wd:Q117012 .\r\n  ?artist wdt:P135 wd:Q968159 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Which art movement was Yoko Ono part of?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Yoko Ono\": \"Q117012\", \"Fluxus\": \"Q968159\"}, \"relationships\": {\"movement\": \"P135\", \"instance of\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?movement\r\nWHERE {\r\n  ?artist wdt:P31 wd:Q117012 .\r\n  ?artist wdt:P135 wd:Q968159 .\r\n}\r\n```"
    },
    {
        "question": "which band is created earlier, queen or pink floyd?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q15862 wdt:P571 ?q. wd:Q2306 wdt:P571 ?p. BIND(IF((?q < ?p), wd:Q15862, wd:Q2306 ) AS ?result)}",
        "generated_sparql": "SELECT ?band\r\nWHERE {\r\n  ?band wdt:P571 ?inception.\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'which band is created earlier, queen or pink floyd?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Queen\": \"Q15862\", \"Pink Floyd\": \"Q2306\"}, \"relationships\": {\"inception\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?band\r\nWHERE {\r\n  ?band wdt:P571 ?inception.\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n}\r\nORDER BY ?inception\r\nLIMIT 1\r\n```"
    },
    {
        "question": "What caused Kobe Bryant's Death?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q25369 wdt:P509 ?result}",
        "generated_sparql": "SELECT ?cause\r\nWHERE {\r\n  ?person wdt:P509 ?cause .\r\n  wd:Q25369 wdt:P509 ?cause .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What caused Kobe Bryant's Death?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Kobe Bryant\": \"Q25369\"}, \"relationships\": {\"cause of death\": \"P509\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?cause\r\nWHERE {\r\n  ?person wdt:P509 ?cause .\r\n  wd:Q25369 wdt:P509 ?cause .\r\n}\r\n```"
    },
    {
        "question": "What are the opposites of zero?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q204 wdt:P461 ?result}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P461 wd:Q204.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What are the opposites of zero?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"zero\": \"Q204\"}, \"relationships\": {\"additive inverse\": \"P461\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P461 wd:Q204.\r\n}\r\n```"
    },
    {
        "question": "Which businesses are founded by the person in charge of Tesla?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q478214 wdt:P169 ?found. ?result wdt:P112 ?found; wdt:P31/wdt:P279* wd:Q4830453}",
        "generated_sparql": "",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Which businesses are founded by the person in charge of Tesla?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Tesla\": \"Q478214\", \"business\": \"Q4830453\"}, \"relationships\": {\"founder\": \"P112\", \"instance of\": \"P31\", \"subclass of\": \"P279\", \"founder of\": \"P169\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?business\r\nWHERE {\r\n  ?person wdt:P112 ?founder. ?founder wdt:P31 ?business. ?business wdt:P279 ?person. ?person wdt:P169 ?founder. ?business wdt:P112 ?person. ?person wdt:P31 ?founder. ?founder wdt:P169 ?business. ?business wdt:P4830453. ?person wdt:P478214. ?founder wdt:P478214. ?business wdt:P478214. ?person wdt:P478214. ?founder wdt:P478214. ?business wdt:P478214. ?person wdt:P478214. ?founder wdt:P478214. ?business wdt:P478214. ?person wdt:P478214. ?founder wdt:P478214. ?business wdt:P478214. ?person wdt:P478214. ?founder wdt:P478214. ?business wdt:P478214. ?person wdt:P478214. ?founder wdt:P478214. ?business wdt:P478214. ?person wdt:P478214. ?founder wdt:P478214. ?business wdt:P478214. ?person wdt:P478214. ?founder wdt:P478214. ?business wdt:P478214. ?person wdt:P478214. ?founder wdt:P478214. ?business wdt:P478214. ?person wdt:P478214. ?founder wdt:P478214. ?business wdt:P47"
    },
    {
        "question": "Did Germany have a population growth of at least 1% since 2010?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q183 p:P1082 ?ps10, ?psNew. ?ps10 pq:P585 ?t10; ps:P1082 ?p10. ?psNew pq:P585 ?tNew; ps:P1082 ?pNew BIND(((?pNew - ?p10) / ?p10) AS ?diff) FILTER((YEAR(?t10) = 2010) && NOT EXISTS{wd:Q183 p:P1082/pq:P585 ?tt FILTER(?tt > ?tNew)} && ?diff >= 0.01)}",
        "generated_sparql": "SELECT COUNT(*) > 0 AS has_population_growth\nWHERE {\n  ?s wdt:P1082 ?o.\n  ?s wdt:P585 \"2010-01-01\".\n  ?o wdt:P1082 ?o2.\n  ?o2 wdt:P585 \"2021-01-01\".\n  ?o wdt:P1082 ?o3.\n  ?o3 wdt:P585 \"2022-01-01\".\n  ?o wdt:P1082 ?o4.\n  ?o4 wdt:P585 \"2023-01-01\".\n  FILTER(CONTAINS(STR(?o), \"Q183\") && CONTAINS(STR(?o2), \"Q183\") && CONTAINS(STR(?o3), \"Q183\") && CONTAINS(STR(?o4), \"Q183\"))\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Did Germany have a population growth of at least 1% since 2010?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Germany\": \"Q183\"}, \"relationships\": {\"population\": \"P1082\", \"point in time\": \"P585\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) > 0 AS has_population_growth\nWHERE {\n  ?s wdt:P1082 ?o.\n  ?s wdt:P585 \"2010-01-01\".\n  ?o wdt:P1082 ?o2.\n  ?o2 wdt:P585 \"2021-01-01\".\n  ?o wdt:P1082 ?o3.\n  ?o3 wdt:P585 \"2022-01-01\".\n  ?o wdt:P1082 ?o4.\n  ?o4 wdt:P585 \"2023-01-01\".\n  FILTER(CONTAINS(STR(?o), \"Q183\") && CONTAINS(STR(?o2), \"Q183\") && CONTAINS(STR(?o3), \"Q183\") && CONTAINS(STR(?o4), \"Q183\"))\n}\n```"
    },
    {
        "question": "Which aircraft did Howard Hughes build?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {?result wdt:P31/wdt:P279* wd:Q11436; wdt:P178 wd:Q189081}",
        "generated_sparql": "SELECT ?aircraft\r\nWHERE {\r\n  ?aircraft wdt:P31 wd:Q11436;\r\n  ?aircraft wdt:P279 wd:Q11436;\r\n  ?aircraft wdt:P178 wd:Q11436;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Which aircraft did Howard Hughes build?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Howard Hughes\": \"Q11436\"}, \"relationships\": {\"instance of\": \"P31\", \"part of\": \"P279\", \"designed\": \"P178\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?aircraft\r\nWHERE {\r\n  ?aircraft wdt:P31 wd:Q11436;\r\n  ?aircraft wdt:P279 wd:Q11436;\r\n  ?aircraft wdt:P178 wd:Q11436;\r\n}\r\n```"
    },
    {
        "question": "Which country has more official languages: South Africa (\u200b\u200bQ258) or Ethiopia ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {{SELECT (COUNT (DISTINCT ?lanS) AS ?lanSCount) WHERE {wd:Q258 wdt:P37 ?lanS}} {SELECT (COUNT (DISTINCT ?lanE) AS ?lanECount) WHERE {wd:Q115 wdt:P37 ?lanE}} BIND(IF(?lanSCount > ?lanECount, wd:Q258, wd:Q115) AS ?result)}",
        "generated_sparql": "SELECT ?country\r\nWHERE {\r\n  ?country wdt:P37 wd:Q258;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Which country has more official languages: South Africa (\u200b\u200bQ258) or Ethiopia ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"South Africa\": \"Q258\", \"Ethiopia\": \"Q115\"}, \"relationships\": {\"official language\": \"P37\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?country\r\nWHERE {\r\n  ?country wdt:P37 wd:Q258;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nORDER BY wdt:P37 DESC\r\nLIMIT 1;\r\n```"
    },
    {
        "question": "Is throat singing a tradition?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q1067089 wdt:P31/wdt:P279* wd:Q82821}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P31 wd:Q1067089;\r\n  ?x wdt:P279 wd:Q82821;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Is throat singing a tradition?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"throat singing\": \"Q1067089\", \"tradition\": \"Q82821\"}, \"relationships\": {\"instance of\": \"P31\", \"part of\": \"P279\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P31 wd:Q1067089;\r\n  ?x wdt:P279 wd:Q82821;\r\n}\r\n```"
    },
    {
        "question": "Which disease caused the death of Mark Twain?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q7245 wdt:P509 ?result. ?result wdt:P279* wd:Q12136}",
        "generated_sparql": "SELECT ?disease WHERE {\n  ?person wdt:P509 wd:Q7245.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Which disease caused the death of Mark Twain?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Mark Twain\": \"Q7245\", \"heart disease\": \"Q12136\"}, \"relationships\": {\"cause of death\": \"P509\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?disease WHERE {\n  ?person wdt:P509 wd:Q7245.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:list { bd:serviceParam wikibase:listType \"all\". }\n  FILTER(CONTAINS(?disease, \"heart disease\") && CONTAINS(?disease, \"cause of death\"))\n}\n```"
    },
    {
        "question": "Which diseases can be caused by smoking ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q662860 wdt:P1542 ?result. ?result wdt:P279* wd:Q12136}",
        "generated_sparql": "SELECT ?disease WHERE {\n  ?disease wdt:P1542 wd:Q662860.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Which diseases can be caused by smoking ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"smoking\": \"Q662860\", \"disease\": \"Q12136\"}, \"relationships\": {\"may cause\": \"P1542\", \"subclass of\": \"P279\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?disease WHERE {\n  ?disease wdt:P1542 wd:Q662860.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n}\n```"
    },
    {
        "question": "Which genre that Cage the Elephant belongs to has the fewest english characters?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q68061 wdt:P136 ?result. ?result rdfs:label ?label FILTER(langMatches(lang(?label),\"en\"))} ORDER BY ASC(strlen(?label)) LIMIT 1",
        "generated_sparql": "SELECT ?genre\r\nWHERE {\r\n  ?artist wdt:P136 ?genre ;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Which genre that Cage the Elephant belongs to has the fewest english characters?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Cage the Elephant\": \"Q68061\"}, \"relationships\": {\"genre\": \"P136\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?genre\r\nWHERE {\r\n  ?artist wdt:P136 ?genre ;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(LENGTH(REGEXP_REPLACE(STR(?genre), '[^a-zA-Z0-9]+', '')) < LENGTH(REGEXP_REPLACE(STR(?artist), '[^a-zA-Z0-9]+', '')))\r\n}\r\nORDER BY LENGTH(REGEXP_REPLACE(STR(?genre), '[^a-zA-Z0-9]+', ''))\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Which takes less space? 1kg of lead or 1kg of iron.",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q708 wdt:P2054 ?dl. wd:Q677 wdt:P2054 ?di. BIND(IF(?dl >= ?di, wd:Q708, wd:Q677) AS ?result)}",
        "generated_sparql": "SELECT ?x ?y WHERE {\n  ?x wdt:P2054 wd:Q708.\n  ?y wdt:P2054 wd:Q677.\n  FILTER(CONTAINS(str(?x), \"kg\") && CONTAINS(str(?y), \"kg\"))\n  FILTER(?x < ?y)\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Which takes less space? 1kg of lead or 1kg of iron.' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"lead\": \"Q708\", \"iron\": \"Q677\"}, \"relationships\": {\"density\": \"P2054\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?x ?y WHERE {\n  ?x wdt:P2054 wd:Q708.\n  ?y wdt:P2054 wd:Q677.\n  FILTER(CONTAINS(str(?x), \"kg\") && CONTAINS(str(?y), \"kg\"))\n  FILTER(?x < ?y)\n}\n```"
    },
    {
        "question": "Which kingdom preceded the Thonburi Kingdom ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1115291 wdt:P1365 ?result. ?result wdt:P122/wdt:P279* wd:Q7269}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P1365 wd:Q1115291 .\r\n  ?x wdt:P279 wd:Q7269 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Which kingdom preceded the Thonburi Kingdom ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Thonburi Kingdom\": \"Q1115291\", \"Ayutthaya Kingdom\": \"Q7269\"}, \"relationships\": {\"preceded by\": \"P1365\", \"part of\": \"P279\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P1365 wd:Q1115291 .\r\n  ?x wdt:P279 wd:Q7269 .\r\n}\r\n```"
    },
    {
        "question": "How many mountains are located in Germany?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?m) AS ?result) WHERE {?m wdt:P31 wd:Q8502; wdt:P17 wd:Q183}",
        "generated_sparql": "SELECT COUNT(*) AS num_mountains\nWHERE {\n  ?mountain wdt:P31 wd:Q183.\n  ?mountain wdt:P17 \"Q183\".\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many mountains are located in Germany?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"mountain\": null, \"Germany\": \"Q183\"}, \"relationships\": {\"instance of\": \"P31\", \"country\": \"P17\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) AS num_mountains\nWHERE {\n  ?mountain wdt:P31 wd:Q183.\n  ?mountain wdt:P17 \"Q183\".\n}\n```"
    },
    {
        "question": "Which movements is the painting \u201cLes Demoiselles d'Avignon\u201d assigned to?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q910199 wdt:P135 ?result}",
        "generated_sparql": "SELECT ?movement\r\nWHERE {\r\n  ?painting wdt:P31 wd:Q910199.\r\n  ?painting wdt:P135 ?movement.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Which movements is the painting \u201cLes Demoiselles d'Avignon\u201d assigned to?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Les Demoiselles d'Avignon\": \"Q910199\"}, \"relationships\": {\"movement\": \"P135\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?movement\r\nWHERE {\r\n  ?painting wdt:P31 wd:Q910199.\r\n  ?painting wdt:P135 ?movement.\r\n}\r\n```"
    },
    {
        "question": "Which movies belong to the Cornetto trilogy ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q169604 wdt:P527 ?result}",
        "generated_sparql": "SELECT ?m WHERE {\r\n  ?m wdt:P527 wd:Q169604;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Which movies belong to the Cornetto trilogy ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Cornetto trilogy\": \"Q169604\"}, \"relationships\": {\"has part\": \"P527\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?m WHERE {\r\n  ?m wdt:P527 wd:Q169604;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\n```"
    },
    {
        "question": "During what event was the Four Policemen Council proposed?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q2945433 wdt:P607 ?result.}",
        "generated_sparql": "SELECT ?event\r\nWHERE {\r\n  ?event wdt:P607 wd:Q2945433.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'During what event was the Four Policemen Council proposed?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Four Policemen\": \"Q2945433\"}, \"relationships\": {\"proposed during\": \"P607\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?event\r\nWHERE {\r\n  ?event wdt:P607 wd:Q2945433.\r\n}\r\n```"
    },
    {
        "question": "Which NBA teams have won the most seasons?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {{SELECT DISTINCT (COUNT(DISTINCT ?season) AS ?max) WHERE {?season wdt:P31 wd:Q27020041; wdt:P3450 wd:Q155223; wdt:P1346 ?result. ?result wdt:P31 wd:Q13393265} GROUP BY ?result ORDER BY DESC (?max) LIMIT 1} ?season wdt:P31 wd:Q27020041; wdt:P3450 wd:Q155223; wdt:P1346 ?result. ?result wdt:P31 wd:Q13393265.} GROUP BY ?result HAVING ((COUNT(DISTINCT ?season)) = MAX(?max))",
        "generated_sparql": "SELECT DISTINCT ?team\r\nWHERE {\r\n  ?team wdt:P3450 wd:Q13393265 . # NBA\r\n  ?team wdt:P31 wd:Q13393265 . # NBA\r\n  ?team wdt:P1346 ?numSeasons .\r\n  FILTER(?numSeasons >= 1) # Only include teams that have won at least one season\r\n}\r\nORDER BY ?numSeasons DESC\r\nLIMIT 10",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Which NBA teams have won the most seasons?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"NBA\": \"Q13393265\", \"Boston Celtics\": \"Q155223\", \"Los Angeles Lakers\": \"Q27020041\"}, \"relationships\": {\"league\": \"P31\", \"champion\": \"P1346\", \"team\": \"P3450\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT DISTINCT ?team\r\nWHERE {\r\n  ?team wdt:P3450 wd:Q13393265 . # NBA\r\n  ?team wdt:P31 wd:Q13393265 . # NBA\r\n  ?team wdt:P1346 ?numSeasons .\r\n  FILTER(?numSeasons >= 1) # Only include teams that have won at least one season\r\n}\r\nORDER BY ?numSeasons DESC\r\nLIMIT 10\r\n```"
    },
    {
        "question": "Which of the dragons in Game of Thrones died?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31/wdt:P279* wd:Q30170627; wdt:P1441 wd:Q23572 FILTER(EXISTS{?result wdt:P20 _:ex})}",
        "generated_sparql": "SELECT ?d WHERE {\n  ?d wdt:P31 wd:Q30170627.\n  ?d wdt:P279 wd:Q23572.\n  ?d wdt:P1196 ?c.\n  ?d wdt:P509 ?c.\n  ?d wdt:P828 ?c.\n  ?d wdt:P20 ?c.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Which of the dragons in Game of Thrones died?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"dragons in Game of Thrones\": \"Q30170627\", \"death\": \"Q23572\"}, \"relationships\": {\"instance of\": \"P31\", \"subclass of\": \"P279\", \"cause of death\": \"P1196\", \"died of\": \"P509\", \"has cause\": \"P828\", \"died\": \"P20\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?d WHERE {\n  ?d wdt:P31 wd:Q30170627.\n  ?d wdt:P279 wd:Q23572.\n  ?d wdt:P1196 ?c.\n  ?d wdt:P509 ?c.\n  ?d wdt:P828 ?c.\n  ?d wdt:P20 ?c.\n}\n```"
    },
    {
        "question": "Which other movies by the director of Another Round also starred Mads Mikkelsen ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q69303989 wdt:P57 ?dir. ?result wdt:P31 wd:Q11424; wdt:P57 ?dir; wdt:P161 wd:Q294647 FILTER(?result != wd:Q69303989)}",
        "generated_sparql": "SELECT ?movie\r\nWHERE {\r\n  ?movie wdt:P31 wd:Q11424. # instance of film\r\n  ?movie wdt:P57 ?director. # director\r\n  ?director wdt:P161 ?actor. # starring\r\n  ?actor wd:Q294647. # Mads Mikkelsen\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Which other movies by the director of Another Round also starred Mads Mikkelsen ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Another Round\": \"Q69303989\", \"Mads Mikkelsen\": \"Q294647\", \"film\": \"Q11424\"}, \"relationships\": {\"director\": \"P57\", \"instance of\": \"P31\", \"starring\": \"P161\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?movie\r\nWHERE {\r\n  ?movie wdt:P31 wd:Q11424. # instance of film\r\n  ?movie wdt:P57 ?director. # director\r\n  ?director wdt:P161 ?actor. # starring\r\n  ?actor wd:Q294647. # Mads Mikkelsen\r\n}\r\n```"
    },
    {
        "question": "Which egyptian pyramid is the tallest?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?pyr WHERE {?pyr wdt:P31/wdt:P279* wd:Q12516; p:P2048/psn:P2048/wikibase:quantityAmount ?h; wdt:P17 wd:Q79 } ORDER BY DESC(?h) LIMIT 1",
        "generated_sparql": "SELECT ?pyramid\r\nWHERE {\r\n  ?pyramid wdt:P31 wd:Q12516. # instance of pyramid\r\n  ?pyramid wdt:P279 wd:Q79. # part of Egypt\r\n  ?pyramid wdt:P2048 ?height. # height of pyramid\r\n  ?height wdt:P2048 ?maxHeight. # maximum height\r\n  FILTER(?pyramid = ?maxHeight) # select only the tallest pyramid\r\n}\r\nORDER BY ?pyramid\r\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Which egyptian pyramid is the tallest?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Egypt\": \"Q79\", \"pyramid\": \"Q12516\"}, \"relationships\": {\"instance of\": \"P31\", \"part of\": \"P279\", \"height\": \"P2048\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?pyramid\r\nWHERE {\r\n  ?pyramid wdt:P31 wd:Q12516. # instance of pyramid\r\n  ?pyramid wdt:P279 wd:Q79. # part of Egypt\r\n  ?pyramid wdt:P2048 ?height. # height of pyramid\r\n  ?height wdt:P2048 ?maxHeight. # maximum height\r\n  FILTER(?pyramid = ?maxHeight) # select only the tallest pyramid\r\n}\r\nORDER BY ?pyramid\r\nLIMIT 1\r\n```"
    },
    {
        "question": "What is the offical language of Taipei?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1867 wdt:P37 ?result}",
        "generated_sparql": "SELECT ?lang\r\nWHERE {\r\n  ?city wdt:P37 wd:Q1867;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What is the offical language of Taipei?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Taipei\": \"Q1867\"}, \"relationships\": {\"official language\": \"P37\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?lang\r\nWHERE {\r\n  ?city wdt:P37 wd:Q1867;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\n```"
    },
    {
        "question": "Which shows aired for the first time the same year as Saturday Night Live ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q13979 wdt:P580 ?snl. ?result wdt:P31 wd:Q5398426; wdt:P580 ?start. FILTER(YEAR(?snl) = YEAR(?start) && ?result != wd:Q13979)}",
        "generated_sparql": "SELECT ?show\r\nWHERE {\r\n  ?show wdt:P31 wd:Q5398426;\r\n  ?show wdt:P580 wd:Q13979;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Which shows aired for the first time the same year as Saturday Night Live ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Saturday Night Live\": \"Q13979\", \"television series\": \"Q5398426\"}, \"relationships\": {\"inception\": \"P580\", \"instance of\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?show\r\nWHERE {\r\n  ?show wdt:P31 wd:Q5398426;\r\n  ?show wdt:P580 wd:Q13979;\r\n}\r\n```"
    },
    {
        "question": "Which songs made up the album Fijaci\u00f3n Oral vol. 1 ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P361 wd:Q828282; wdt:P31 ?o FILTER(?o IN (wd:Q105543609, wd:Q134556))}",
        "generated_sparql": "SELECT ?s ?t\r\nWHERE {\r\n  ?s wdt:P361 wd:Q828282 ; # track list\r\n  ?s wdt:P31 ?g ; # genre\r\n  ?g wd:Q184286 ; # Fijaci\u00f3n Oral vol. 1\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Which songs made up the album Fijaci\u00f3n Oral vol. 1 ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Fijaci\u00f3n Oral vol. 1\": \"Q828282\"}, \"relationships\": {\"track list\": \"P361\", \"genre\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s ?t\r\nWHERE {\r\n  ?s wdt:P361 wd:Q828282 ; # track list\r\n  ?s wdt:P31 ?g ; # genre\r\n  ?g wd:Q184286 ; # Fijaci\u00f3n Oral vol. 1\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"es\".\r\n  }\r\n}\r\nORDER BY ?s\r\n```"
    },
    {
        "question": "Which started first: impressionism or expressionism (art movements)?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q40415 wdt:P571 ?imp. wd:Q80113 wdt:P580 ?exp. BIND(IF(?imp < ?exp, wd:Q40415, wd:Q80113) AS ?result)}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P571 wd:Q40415;\r\n  ?x wdt:P580 wd:Q80113;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Which started first: impressionism or expressionism (art movements)?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Impressionism\": \"Q40415\", \"Expressionism\": \"Q80113\"}, \"relationships\": {\"inception\": \"P571\", \"start time\": \"P580\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P571 wd:Q40415;\r\n  ?x wdt:P580 wd:Q80113;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nORDER BY ?x wdt:P580\r\nLIMIT 1;\r\n```"
    },
    {
        "question": "which state inside USA is batman living in?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q2695156 wdt:P551/wdt:P131 ?result. ?result wdt:P31 wd:Q35657}",
        "generated_sparql": "SELECT ?state\r\nWHERE {\r\n  ?person wdt:P551 ?state ; # residence\r\n  ?person wdt:P131 wd:Q35657 ; # located in the administrative territorial entity\r\n  ?person wdt:P31 wd:Q2695156 ; # instance of Batman\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'which state inside USA is batman living in?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Batman\": \"Q2695156\", \"United States of America\": \"Q35657\"}, \"relationships\": {\"residence\": \"P551\", \"located in the administrative territorial entity\": \"P131\", \"instance of\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?state\r\nWHERE {\r\n  ?person wdt:P551 ?state ; # residence\r\n  ?person wdt:P131 wd:Q35657 ; # located in the administrative territorial entity\r\n  ?person wdt:P31 wd:Q2695156 ; # instance of Batman\r\n}\r\n```"
    },
    {
        "question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P106 wd:Q11397897; wdt:P26/wdt:P31 wd:Q2035494; wdt:P172 wd:Q2292830}",
        "generated_sparql": "SELECT ?swordfighter\r\nWHERE {\r\n  ?swordfighter wdt:P106 wd:Q2292830 ; # swordfighter is a ranger of the north\r\n  ?swordfighter wdt:P26 ?half_elven ; # swordfighter marries a half-elven\r\n  ?half_elven wdt:P31 wd:Q2035494 ; # half-elven is a person\r\n  ?swordfighter wdt:P172 ?half_elven ; # swordfighter participates in a relationship with a half-elven\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"swordfighter\": \"\", \"half-elven\": \"Q2035494\", \"Rangers of the North\": \"Q2292830\"}, \"relationships\": {\"occupation\": \"P106\", \"spouse\": \"P26\", \"instance of\": \"P31\", \"participant of\": \"P172\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?swordfighter\r\nWHERE {\r\n  ?swordfighter wdt:P106 wd:Q2292830 ; # swordfighter is a ranger of the north\r\n  ?swordfighter wdt:P26 ?half_elven ; # swordfighter marries a half-elven\r\n  ?half_elven wdt:P31 wd:Q2035494 ; # half-elven is a person\r\n  ?swordfighter wdt:P172 ?half_elven ; # swordfighter participates in a relationship with a half-elven\r\n}\r\n```"
    },
    {
        "question": "Which teams participated in the 2020 UEFA Champions League Final ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q46569648 wdt:P1923 ?result}",
        "generated_sparql": "SELECT DISTINCT ?team\r\nWHERE {\r\n  ?team wdt:P1923 wd:Q46569648.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Which teams participated in the 2020 UEFA Champions League Final ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"2020 UEFA Champions League Final\": \"Q46569648\"}, \"relationships\": {\"participant\": \"P1923\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT DISTINCT ?team\r\nWHERE {\r\n  ?team wdt:P1923 wd:Q46569648.\r\n}\r\n```"
    },
    {
        "question": "Which universities have more than 200000 students?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q3918; wdt:P2196 ?stu. FILTER(?stu > xsd:integer(\"200000\"))}",
        "generated_sparql": "SELECT DISTINCT ?university\r\nWHERE {\r\n  ?university wdt:P31 wd:Q3918;\r\n  ?university wdt:P2196 ?numStudents;\r\n  FILTER(?numStudents > 200000)\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Which universities have more than 200000 students?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"university\": \"Q3918\"}, \"relationships\": {\"instance of\": \"P31\", \"number of students\": \"P2196\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT DISTINCT ?university\r\nWHERE {\r\n  ?university wdt:P31 wd:Q3918;\r\n  ?university wdt:P2196 ?numStudents;\r\n  FILTER(?numStudents > 200000)\r\n}\r\n```"
    },
    {
        "question": "which university is established earlier, university of oxford or university of cambridge?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q34433 wdt:P571 ?inco. wd:Q35794 wdt:P571 ?incc BIND(IF((?inco < ?incc), wd:Q34433, wd:Q35794) AS ?result)}",
        "generated_sparql": "SELECT ?x ?y WHERE {\n  ?x wdt:P571 ?y.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'which university is established earlier, university of oxford or university of cambridge?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"University of Oxford\": \"Q34433\", \"University of Cambridge\": \"Q35794\"}, \"relationships\": {\"inception\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?x ?y WHERE {\n  ?x wdt:P571 ?y.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  FILTER(CONTAINS(?x, \"University of Oxford\") || CONTAINS(?x, \"University of Cambridge\"))\n}\nORDER BY ?y ?x\n```"
    },
    {
        "question": "Who developed WordNet?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q533822 wdt:P178 ?result}",
        "generated_sparql": "SELECT ?developer\r\nWHERE {\r\n  ?developer wdt:P178 wd:Q533822.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Who developed WordNet?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"WordNet\": \"Q533822\"}, \"relationships\": {\"developer\": \"P178\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?developer\r\nWHERE {\r\n  ?developer wdt:P178 wd:Q533822.\r\n}\r\n```"
    },
    {
        "question": "Who are the actresses in Portrait of a Lady on Fire?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q63246568 wdt:P161 ?result. ?result wdt:P21 wd:Q6581072}",
        "generated_sparql": "SELECT DISTINCT ?actress WHERE {\n  ?movie wdt:P161 ?actress.\n  ?movie wdt:P21 \"female\".\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Who are the actresses in Portrait of a Lady on Fire?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Portrait of a Lady on Fire\": \"Q63246568\", \"female\": \"Q6581072\"}, \"relationships\": {\"cast member\": \"P161\", \"gender\": \"P21\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT DISTINCT ?actress WHERE {\n  ?movie wdt:P161 ?actress.\n  ?movie wdt:P21 \"female\".\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  WHERE {\n    ?movie wdt:P31 wd:Q63246568.\n  }\n}\n```"
    },
    {
        "question": "Did Michael Jordan and Kobe Bryant play for the same team?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q25369 wdt:P54 ?team. wd:Q41421 wdt:P54 ?team.}",
        "generated_sparql": "SELECT ?x ?y WHERE {\n  ?x wdt:P54 wd:Q25369.\n  ?y wdt:P54 wd:Q41421.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Did Michael Jordan and Kobe Bryant play for the same team?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Michael Jordan\": \"Q25369\", \"Kobe Bryant\": \"Q41421\"}, \"relationships\": {\"played for\": \"P54\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?x ?y WHERE {\n  ?x wdt:P54 wd:Q25369.\n  ?y wdt:P54 wd:Q41421.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  WHERE {\n    ?x wikibase:label ?l1.\n    ?y wikibase:label ?l2.\n    FILTER(CONTAINS(?l1, \"Chicago\") && CONTAINS(?l2, \"Los Angeles\"))\n  }\n}\n```"
    },
    {
        "question": "Who created the Turing machine?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q163310 wdt:P61 ?result}",
        "generated_sparql": "SELECT ?inventor WHERE {\n  ?inventor wdt:P61 wd:Q163310.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Who created the Turing machine?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Turing machine\": \"Q163310\"}, \"relationships\": {\"inventor\": \"P61\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?inventor WHERE {\n  ?inventor wdt:P61 wd:Q163310.\n}\n```"
    },
    {
        "question": "When was the Hambach Castle built?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q523286 wdt:P571 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?castle wdt:P571 ?date\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'When was the Hambach Castle built?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Hambach Castle\": \"Q523286\"}, \"relationships\": {\"inception\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?castle wdt:P571 ?date\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n}\r\n```"
    },
    {
        "question": "Who died at the North Pole?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q5; wdt:P20 wd:Q934}",
        "generated_sparql": "SELECT ?s WHERE {\n  ?s wdt:P31 wd:Q934.\n  ?s wdt:P20 wd:Q5.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Who died at the North Pole?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"human\": \"Q5\", \"North Pole\": \"Q934\"}, \"relationships\": {\"instance of\": \"P31\", \"place of death\": \"P20\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?s WHERE {\n  ?s wdt:P31 wd:Q934.\n  ?s wdt:P20 wd:Q5.\n}\n```"
    },
    {
        "question": "Who directed Anne with an E ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q28091065 wdt:P57 ?result.}",
        "generated_sparql": "SELECT ?director\r\nWHERE {\r\n  ?director wdt:P57 wd:Q28091065.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Who directed Anne with an E ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Anne with an E\": \"Q28091065\"}, \"relationships\": {\"director\": \"P57\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?director\r\nWHERE {\r\n  ?director wdt:P57 wd:Q28091065.\r\n}\r\n```"
    },
    {
        "question": "Who wrote \"Prototypical Networks for Few-shot Learning\"?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {{wd:Q44649835 wdt:P50 ?result.} UNION {wd:Q44649835 wdt:P2093 ?result}}",
        "generated_sparql": "SELECT ?author\r\nWHERE {\r\n  ?paper wdt:P50 wd:Q44649835.\r\n  ?paper wdt:P2093 ?author.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Who wrote \"Prototypical Networks for Few-shot Learning\"?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Prototypical Networks for Few-shot Learning\": \"Q44649835\"}, \"relationships\": {\"author\": \"P50\", \"creator\": \"P2093\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?author\r\nWHERE {\r\n  ?paper wdt:P50 wd:Q44649835.\r\n  ?paper wdt:P2093 ?author.\r\n}\r\n```"
    },
    {
        "question": "Who founded \u201cThe Blue Rider\u201d?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q117035 wdt:P112 ?result}",
        "generated_sparql": "SELECT ?founder\r\nWHERE {\r\n  ?founder wdt:P112 wd:Q117035.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Who founded \u201cThe Blue Rider\u201d?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"The Blue Rider\": \"Q117035\"}, \"relationships\": {\"founder\": \"P112\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?founder\r\nWHERE {\r\n  ?founder wdt:P112 wd:Q117035.\r\n}\r\n```"
    },
    {
        "question": "Who founded the Worpswede artist colony ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q479361 wdt:P112 ?result}",
        "generated_sparql": "SELECT ?founder\r\nWHERE {\r\n  ?founder wdt:P112 wd:Q479361 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Who founded the Worpswede artist colony ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Worpswede artist colony\": \"Q479361\"}, \"relationships\": {\"founder\": \"P112\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?founder\r\nWHERE {\r\n  ?founder wdt:P112 wd:Q479361 .\r\n}\r\n```"
    },
    {
        "question": "Who is the author of \u201cConvenience Store Woman\u201d ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q27863945 wdt:P50 ?result}",
        "generated_sparql": "SELECT ?author\r\nWHERE {\r\n  ?book wdt:P50 ?author;\r\n  ?book wdt:P31 wd:Q27863945;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Who is the author of \u201cConvenience Store Woman\u201d ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Convenience Store Woman\": \"Q27863945\"}, \"relationships\": {\"author\": \"P50\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?author\r\nWHERE {\r\n  ?book wdt:P50 ?author;\r\n  ?book wdt:P31 wd:Q27863945;\r\n}\r\n```"
    },
    {
        "question": "Who is the soccer player with the most goals in their career?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P106 wd:Q937857; wdt:P6509 ?goals} ORDER BY DESC(?goals) LIMIT 1",
        "generated_sparql": "SELECT ?result\nWHERE {\n  ?player wdt:P106 wd:Q937857.\n  ?player wdt:P6509 ?numGoals.\n  ?player wdt:P106 ?soccerPlayerProfession.\n  ?soccerPlayerProfession wdt:P6509 ?numGoals.\n  ?player wdt:P6509 MAX(?numGoals) ?maxNumGoals.\n  FILTER(?player = ?soccerPlayerProfession)\n  FILTER(?maxNumGoals > 0)\n  FILTER(?maxNumGoals = MAX(?numGoals))\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Who is the soccer player with the most goals in their career?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"soccer player\": \"?result\"}, \"relationships\": {\"occupation\": \"P106\", \"number of goals scored\": \"P6509\", \"soccer player profession\": \"Q937857\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?result\nWHERE {\n  ?player wdt:P106 wd:Q937857.\n  ?player wdt:P6509 ?numGoals.\n  ?player wdt:P106 ?soccerPlayerProfession.\n  ?soccerPlayerProfession wdt:P6509 ?numGoals.\n  ?player wdt:P6509 MAX(?numGoals) ?maxNumGoals.\n  FILTER(?player = ?soccerPlayerProfession)\n  FILTER(?maxNumGoals > 0)\n  FILTER(?maxNumGoals = MAX(?numGoals))\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wik"
    },
    {
        "question": "Who is the creator of the Dinosaurs tv show ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1211977 wdt:P170 ?result}",
        "generated_sparql": "SELECT ?creator WHERE {\n  ?creator wdt:P170 wd:Q1211977.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Who is the creator of the Dinosaurs tv show ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Dinosaurs\": \"Q1211977\"}, \"relationships\": {\"creator\": \"P170\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?creator WHERE {\n  ?creator wdt:P170 wd:Q1211977.\n}\n```"
    },
    {
        "question": "Who is the current president of the German Bundestag currently?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q154797 wdt:P488 ?result}",
        "generated_sparql": "SELECT ?president WHERE {\n  ?president wdt:P488 wd:Q154797.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Who is the current president of the German Bundestag currently?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"German Bundestag\": \"Q154797\"}, \"relationships\": {\"current president\": \"P488\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?president WHERE {\n  ?president wdt:P488 wd:Q154797.\n}\n```"
    },
    {
        "question": "Who is the most wealthy entrepreneur?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P2218 ?net; wdt:P106 wd:Q131524} ORDER BY DESC(?net) LIMIT 1",
        "generated_sparql": "SELECT ?person ?netWorth\nWHERE {\n  ?person wdt:P106 wd:Q131524.\n  ?person wdt:P2218 ?netWorth.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  GROUP BY ?person ?netWorth\n  ORDER BY ?netWorth DESC\n  LIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Who is the most wealthy entrepreneur?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"entrepreneur\": \"Q131524\"}, \"relationships\": {\"net worth\": \"P2218\", \"occupation\": \"P106\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?person ?netWorth\nWHERE {\n  ?person wdt:P106 wd:Q131524.\n  ?person wdt:P2218 ?netWorth.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  GROUP BY ?person ?netWorth\n  ORDER BY ?netWorth DESC\n  LIMIT 1\n}\n```"
    },
    {
        "question": "Who is the oldest cast member of the Netflix show \u201cQueer Eye\u201d ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q48817408 wdt:P161 ?result. ?result wdt:P569 ?time} ORDER BY ASC(?time) LIMIT 1",
        "generated_sparql": "SELECT ?person\r\nWHERE {\r\n  ?person wdt:P161 wd:Q48817408 .\r\n  ?person wdt:P569 ?birthDate .\r\n  ?birthDate wdt:P569-max ?maxAge .\r\n  ?person wdt:P569 ?maxAge .\r\n}\r\nORDER BY ?maxAge DESC\r\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Who is the oldest cast member of the Netflix show \u201cQueer Eye\u201d ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Queer Eye\": \"Q48817408\"}, \"relationships\": {\"cast member\": \"P161\", \"date of birth\": \"P569\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?person\r\nWHERE {\r\n  ?person wdt:P161 wd:Q48817408 .\r\n  ?person wdt:P569 ?birthDate .\r\n  ?birthDate wdt:P569-max ?maxAge .\r\n  ?person wdt:P569 ?maxAge .\r\n}\r\nORDER BY ?maxAge DESC\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Who is the publisher of Smite ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q2357719 wdt:P123 ?result}",
        "generated_sparql": "SELECT ?publisher\r\nWHERE {\r\n  ?publisher wdt:P123 wd:Q2357719.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Who is the publisher of Smite ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Smite\": \"Q2357719\"}, \"relationships\": {\"publisher\": \"P123\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?publisher\r\nWHERE {\r\n  ?publisher wdt:P123 wd:Q2357719.\r\n}\r\n```"
    },
    {
        "question": "Who wrote the Erlangen program?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P800 wd:Q315296}",
        "generated_sparql": "SELECT ?author\r\nWHERE {\r\n  ?program wdt:P800 ?author\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Who wrote the Erlangen program?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Erlangen program\": \"Q315296\"}, \"relationships\": {\"author\": \"P800\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?author\r\nWHERE {\r\n  ?program wdt:P800 ?author\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\n```"
    },
    {
        "question": "In which country is the Nanga Parbat located?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE { wd:Q130736 wdt:P17 ?result. }",
        "generated_sparql": "SELECT ?country WHERE {\n  ?country wdt:P17 wd:Q130736.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In which country is the Nanga Parbat located?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Nanga Parbat\": \"Q130736\"}, \"relationships\": {\"country\": \"P17\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?country WHERE {\n  ?country wdt:P17 wd:Q130736.\n}\n```"
    },
    {
        "question": "who produced Star Wars: Episode VI \u2013 Return of the Jedi?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q181803 wdt:P162 ?result}",
        "generated_sparql": "SELECT ?producer WHERE {\n  ?producer wdt:P162 wd:Q181803.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'who produced Star Wars: Episode VI \u2013 Return of the Jedi?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Star Wars: Episode VI \u2013 Return of the Jedi\": \"Q181803\"}, \"relationships\": {\"producer\": \"P162\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?producer WHERE {\n  ?producer wdt:P162 wd:Q181803.\n}\n```"
    },
    {
        "question": "Who was an actor in more movies, Daniel Day Lewis or Paul Dano ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {{SELECT (COUNT (DISTINCT ?film) AS ?ddl) WHERE {?film wdt:P161 wd:Q166389; wdt:P31 wd:Q11424}} {SELECT (COUNT (DISTINCT ?film) AS ?pd) WHERE {?film wdt:P161 wd:Q343616; wdt:P31 wd:Q11424}} BIND(IF((?ddl > ?pd), wd:Q166389, wd:Q343616) AS ?result)}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?film) AS num_films\nWHERE {\n  ?actor wdt:P161 ?film.\n  ?actor wdt:P31 wd:Q11424.\n  ?actor wdt:P31 wd:Q166389.\n  ?actor wdt:P31 wd:Q343616.\n}\nGROUP BY ?actor\nHAVING COUNT(DISTINCT ?film) > 1\nORDER BY COUNT(DISTINCT ?film) DESC\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Who was an actor in more movies, Daniel Day Lewis or Paul Dano ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Daniel Day Lewis\": \"Q166389\", \"Paul Dano\": \"Q343616\"}, \"relationships\": {\"actor\": \"P161\", \"instance of\": \"P31\", \"film\": \"Q11424\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(DISTINCT ?film) AS num_films\nWHERE {\n  ?actor wdt:P161 ?film.\n  ?actor wdt:P31 wd:Q11424.\n  ?actor wdt:P31 wd:Q166389.\n  ?actor wdt:P31 wd:Q343616.\n}\nGROUP BY ?actor\nHAVING COUNT(DISTINCT ?film) > 1\nORDER BY COUNT(DISTINCT ?film) DESC\nLIMIT 1;\n```"
    },
    {
        "question": "For what literature prize was Simone de Beauvoir nominated?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q7197 wdt:P1411 ?result. ?result wdt:P31 wd:Q378427}",
        "generated_sparql": "SELECT ?p1411\r\nWHERE {\r\n  ?s dbp:P1411 ?p1411\r\n  ?s wdt:P31 wd:Q7197\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'For what literature prize was Simone de Beauvoir nominated?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Simone de Beauvoir\": \"Q7197\"}, \"relationships\": {\"nominated for\": \"P1411\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?p1411\r\nWHERE {\r\n  ?s dbp:P1411 ?p1411\r\n  ?s wdt:P31 wd:Q7197\r\n}\r\n```"
    },
    {
        "question": "What is the website of NPR's \u201cTiny Desk Concert\u201d?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q30588383 wdt:P856 ?result}",
        "generated_sparql": "SELECT ?website\r\nWHERE {\r\n  ?concert wdt:P30588383. # Tiny Desk Concert\r\n  ?concert wdt:P856 ?website. # official website\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What is the website of NPR's \u201cTiny Desk Concert\u201d?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Tiny Desk Concert\": \"Q30588383\"}, \"relationships\": {\"official website\": \"P856\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?website\r\nWHERE {\r\n  ?concert wdt:P30588383. # Tiny Desk Concert\r\n  ?concert wdt:P856 ?website. # official website\r\n}\r\n```"
    },
    {
        "question": "Who was the creator of Boo-Boo Bear ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q2394280 wdt:P170 ?result}",
        "generated_sparql": "SELECT ?creator WHERE {\n  ?creator wdt:P170 wd:Q2394280.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Who was the creator of Boo-Boo Bear ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Boo-Boo Bear\": \"Q2394280\"}, \"relationships\": {\"creator\": \"P170\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?creator WHERE {\n  ?creator wdt:P170 wd:Q2394280.\n}\n```"
    },
    {
        "question": "Who was the creator of Unbreakable Kimmy Schmidt ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q16889037 wdt:P170 ?result}",
        "generated_sparql": "SELECT ?creator WHERE {\n  ?creator wdt:P170 wd:Q16889037.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Who was the creator of Unbreakable Kimmy Schmidt ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Unbreakable Kimmy Schmidt\": \"Q16889037\"}, \"relationships\": {\"creator\": \"P170\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?creator WHERE {\n  ?creator wdt:P170 wd:Q16889037.\n}\n```"
    },
    {
        "question": "Who was the director of Llamas with Hats ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q55621114 wdt:P57 ?result}",
        "generated_sparql": "SELECT ?director\r\nWHERE {\r\n  ?director wdt:P57 wd:Q55621114.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Who was the director of Llamas with Hats ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Llamas with Hats\": \"Q55621114\"}, \"relationships\": {\"director\": \"P57\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?director\r\nWHERE {\r\n  ?director wdt:P57 wd:Q55621114.\r\n}\r\n```"
    },
    {
        "question": "Who founded the Roland Corporation?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q848490 wdt:P112 ?result}",
        "generated_sparql": "SELECT ?founder WHERE {\n  ?founder wdt:P112 wd:Q848490.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Who founded the Roland Corporation?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Roland Corporation\": \"Q848490\"}, \"relationships\": {\"founder\": \"P112\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?founder WHERE {\n  ?founder wdt:P112 wd:Q848490.\n}\n```"
    },
    {
        "question": "Who was the original actor who played Pinhead ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q2518973 wdt:P175 ?result}",
        "generated_sparql": "SELECT ?actor\r\nWHERE {\r\n  ?actor wdt:P175 wd:Q2518973.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Who was the original actor who played Pinhead ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Pinhead\": \"Q2518973\"}, \"relationships\": {\"played by\": \"P175\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?actor\r\nWHERE {\r\n  ?actor wdt:P175 wd:Q2518973.\r\n}\r\n```"
    },
    {
        "question": "Who were the parents of Socrates ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {{wd:Q913 wdt:P25 ?result} UNION {wd:Q913 wdt:P22 ?result}}",
        "generated_sparql": "SELECT ?parent\r\nWHERE {\r\n  ?parent wdt:P22 wd:Q913;\r\n  ?parent wdt:P25 wd:Q913;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Who were the parents of Socrates ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Socrates\": \"Q913\"}, \"relationships\": {\"mother\": \"P25\", \"father\": \"P22\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?parent\r\nWHERE {\r\n  ?parent wdt:P22 wd:Q913;\r\n  ?parent wdt:P25 wd:Q913;\r\n}\r\n```"
    },
    {
        "question": "Who wrote Anne of Green Gables ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q565911 wdt:P50 ?result}",
        "generated_sparql": "SELECT ?author\r\nWHERE {\r\n  ?author wdt:P50 wd:Q565911.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Who wrote Anne of Green Gables ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Anne of Green Gables\": \"Q565911\"}, \"relationships\": {\"author\": \"P50\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?author\r\nWHERE {\r\n  ?author wdt:P50 wd:Q565911.\r\n}\r\n```"
    },
    {
        "question": "Who wrote the poem Howl ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1545259 wdt:P50 ?result}",
        "generated_sparql": "SELECT ?author\r\nWHERE {\r\n  ?author wdt:P50 wd:Q1545259.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Who wrote the poem Howl ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Howl\": \"Q1545259\"}, \"relationships\": {\"author\": \"P50\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?author\r\nWHERE {\r\n  ?author wdt:P50 wd:Q1545259.\r\n}\r\n```"
    },
    {
        "question": "Who's the author of The Hellbound Heart ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q3521239 wdt:P50 ?result}",
        "generated_sparql": "SELECT ?author\r\nWHERE {\r\n  ?book wdt:P50 ?author;\r\n  wd:Q3521239 wdt:P31 ?book\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Who's the author of The Hellbound Heart ?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"The Hellbound Heart\": \"Q3521239\"}, \"relationships\": {\"author\": \"P50\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?author\r\nWHERE {\r\n  ?book wdt:P50 ?author;\r\n  wd:Q3521239 wdt:P31 ?book\r\n}\r\n```"
    },
    {
        "question": "Whom did Clara Westhoff marry?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q462333 wdt:P26 ?result}",
        "generated_sparql": "SELECT ?spouse\r\nWHERE {\r\n  ?person wdt:P26 ?spouse;\r\n  wd:Q462333 wdt:P31 ?person;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Whom did Clara Westhoff marry?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Clara Westhoff\": \"Q462333\"}, \"relationships\": {\"spouse\": \"P26\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?spouse\r\nWHERE {\r\n  ?person wdt:P26 ?spouse;\r\n  wd:Q462333 wdt:P31 ?person;\r\n}\r\n```"
    },
    {
        "question": "what is the oldest film festival?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q220505; wdt:P571 ?inc FILTER(isLiteral(?inc))} ORDER BY ASC(?inc) LIMIT 1",
        "generated_sparql": "SELECT ?festival\r\nWHERE {\r\n  ?festival wdt:P31 wd:Q220505 .\r\n  ?festival wdt:P571 ?inception .\r\n  FILTER(CONTAINS(?inception, \"oldest\"))\r\n}\r\nORDER BY ?inception DESC\r\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'what is the oldest film festival?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"film festival\": \"Q220505\"}, \"relationships\": {\"instance of\": \"P31\", \"inception\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?festival\r\nWHERE {\r\n  ?festival wdt:P31 wd:Q220505 .\r\n  ?festival wdt:P571 ?inception .\r\n  FILTER(CONTAINS(?inception, \"oldest\"))\r\n}\r\nORDER BY ?inception DESC\r\nLIMIT 1\r\n```"
    },
    {
        "question": "When was Athens founded?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1524 wdt:P571 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?city wdt:P571 ?date\r\n  wd:Q1524 wdt:P31 ?city\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'When was Athens founded?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Athens\": \"Q1524\"}, \"relationships\": {\"founding date\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?city wdt:P571 ?date\r\n  wd:Q1524 wdt:P31 ?city\r\n}\r\n```"
    },
    {
        "question": "which river is longer, the Seine or Elbe\uff1f",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1471 wdt:P2043 ?ls. wd:Q1644 wdt:P2043 ?le. BIND(IF((?ls > ?le), wd:Q1471, wd:Q1644) AS ?result)}",
        "generated_sparql": "SELECT ?river\nWHERE {\n  ?river wdt:P2043 ?length.\n  FILTER(CONTAINS(?river, \"Seine\") || CONTAINS(?river, \"Elbe\"))\n}\nORDER BY ?length DESC\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'which river is longer, the Seine or Elbe\uff1f' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Seine\": \"Q1471\", \"Elbe\": \"Q1644\"}, \"relationships\": {\"length\": \"P2043\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?river\nWHERE {\n  ?river wdt:P2043 ?length.\n  FILTER(CONTAINS(?river, \"Seine\") || CONTAINS(?river, \"Elbe\"))\n}\nORDER BY ?length DESC\nLIMIT 1\n```"
    },
    {
        "question": "which game is created earlier, super mario bros or Pac-Man?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q11168 wdt:P577 ?cm. wd:Q173626 wdt:P577 ?cp. BIND(IF((?cm < ?cp), wd:Q11168, wd:Q173626) AS ?result)}",
        "generated_sparql": "SELECT ?game1 ?game2 ?date1 ?date2\nWHERE {\n  ?game1 wdt:P577 ?date1.\n  ?game2 wdt:P577 ?date2.\n  ?game1 wd:Q11168.\n  ?game2 wd:Q173626.\n  FILTER(CONTAINS(?date1, \"earlier\") && CONTAINS(?date2, \"later\"))\n}\nORDER BY ?date1 ?date2\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'which game is created earlier, super mario bros or Pac-Man?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Super Mario Bros\": \"Q11168\", \"Pac-Man\": \"Q173626\"}, \"relationships\": {\"release date\": \"P577\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?game1 ?game2 ?date1 ?date2\nWHERE {\n  ?game1 wdt:P577 ?date1.\n  ?game2 wdt:P577 ?date2.\n  ?game1 wd:Q11168.\n  ?game2 wd:Q173626.\n  FILTER(CONTAINS(?date1, \"earlier\") && CONTAINS(?date2, \"later\"))\n}\nORDER BY ?date1 ?date2\nLIMIT 1\n```"
    },
    {
        "question": "who is the youngested member in g-idle?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P463 wd:Q51885404; wdt:P569 ?date} ORDER BY DESC(?date) LIMIT 1",
        "generated_sparql": "SELECT ?person\r\nWHERE {\r\n  ?person wdt:P463 wd:Q51885404 .\r\n  ?person wdt:P569 ?dateOfBirth .\r\n  FILTER(?dateOfBirth < \"2000-01-01\" ^ \"2000-02-01\" ^ \"2000-03-01\")\r\n}\r\nORDER BY ?dateOfBirth\r\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'who is the youngested member in g-idle?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"(G)I-DLE\": \"Q51885404\"}, \"relationships\": {\"member of\": \"P463\", \"date of birth\": \"P569\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?person\r\nWHERE {\r\n  ?person wdt:P463 wd:Q51885404 .\r\n  ?person wdt:P569 ?dateOfBirth .\r\n  FILTER(?dateOfBirth < \"2000-01-01\" ^ \"2000-02-01\" ^ \"2000-03-01\")\r\n}\r\nORDER BY ?dateOfBirth\r\nLIMIT 1\r\n```"
    },
    {
        "question": "who is older, Lionel Messi or Cristiano Ronaldo\uff1f",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q615 wdt:P569 ?number. wd:Q11571 wdt:P569 ?number2. BIND(IF(?number < ?number2, wd:Q615, wd:Q11571) AS ?result)}",
        "generated_sparql": "SELECT ?x ?y WHERE {\n  ?x wdt:P569 ?birthDate.\n  ?y wdt:P569 ?birthDate.\n  ?x wd:Q615.\n  ?y wd:Q11571.\n  FILTER(?birthDate < ?y)\n}\nORDER BY ?birthDate DESC\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'who is older, Lionel Messi or Cristiano Ronaldo\uff1f' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Lionel Messi\": \"Q615\", \"Cristiano Ronaldo\": \"Q11571\"}, \"relationships\": {\"date of birth\": \"P569\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?x ?y WHERE {\n  ?x wdt:P569 ?birthDate.\n  ?y wdt:P569 ?birthDate.\n  ?x wd:Q615.\n  ?y wd:Q11571.\n  FILTER(?birthDate < ?y)\n}\nORDER BY ?birthDate DESC\nLIMIT 1\n```"
    },
    {
        "question": "Is heidelberg university or university hamburg founded earlier?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q151510 wdt:P571 ?number. wd:Q156725 wdt:P571 ?number2. BIND(IF(?number < ?number2, wd:Q151510, wd:Q156725) AS ?result)}",
        "generated_sparql": "SELECT ?x ?y\r\nWHERE {\r\n  ?x wdt:P571 ?y\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Is heidelberg university or university hamburg founded earlier?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Heidelberg University\": \"Q151510\", \"University of Hamburg\": \"Q156725\"}, \"relationships\": {\"founding date\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x ?y\r\nWHERE {\r\n  ?x wdt:P571 ?y\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n}\r\nWHERE {\r\n  ?x wdt:P31 wd:Q151510\r\n  UNION\r\n  ?x wdt:P31 wd:Q156725\r\n}\r\nORDER BY ?y\r\n```"
    },
    {
        "question": "which forest is bigger, Amazon Rainforest or Congo Basin?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q177567 wdt:P2046 ?aa. wd:Q932289 wdt:P2046 ?ac. BIND(IF((?aa > ?ac), wd:Q177567, wd:Q932289) AS ?result)}",
        "generated_sparql": "SELECT ?x ?y WHERE {\n  ?x wdt:P2046 ?y.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'which forest is bigger, Amazon Rainforest or Congo Basin?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Amazon Rainforest\": \"Q177567\", \"Congo Basin\": \"Q932289\"}, \"relationships\": {\"area\": \"P2046\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?x ?y WHERE {\n  ?x wdt:P2046 ?y.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  FILTER(CONTAINS(str(?x), \"Amazon Rainforest\") || CONTAINS(str(?y), \"Congo Basin\"))\n}\nORDER BY ?y DESC\nLIMIT 1\n```"
    },
    {
        "question": "Does Samsung Electronics or Apple have more employees?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q20718 wdt:P1128 ?se. wd:Q312 wdt:P1128 ?ae. BIND(IF((?se > ?ae), wd:Q20718, wd:Q312) AS ?result)}",
        "generated_sparql": "SELECT ?x ?y WHERE {\n  ?x wdt:P1128 ?y.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Does Samsung Electronics or Apple have more employees?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Samsung Electronics\": \"Q20718\", \"Apple\": \"Q312\"}, \"relationships\": {\"number of employees\": \"P1128\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?x ?y WHERE {\n  ?x wdt:P1128 ?y.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  FILTER(CONTAINS(?x, \"Samsung Electronics\") || CONTAINS(?x, \"Apple\"))\n}\nORDER BY ?y DESC\nLIMIT 1\n```"
    },
    {
        "question": "which company is founded later, samsung or sony?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q20716 wdt:P571 ?sa. wd:Q41187 wdt:P571 ?so. BIND(IF((?sa > ?so), wd:Q20716, wd:Q41187) AS ?result)}",
        "generated_sparql": "SELECT ?company\r\nWHERE {\r\n  ?company wdt:P571 ?foundingDate\r\n  FILTER(CONTAINS(?company, \"Samsung\") || CONTAINS(?company, \"Sony\"))\r\n}\r\nORDER BY ?foundingDate DESC\r\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'which company is founded later, samsung or sony?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Samsung\": \"Q20716\", \"Sony\": \"Q41187\"}, \"relationships\": {\"founding date\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?company\r\nWHERE {\r\n  ?company wdt:P571 ?foundingDate\r\n  FILTER(CONTAINS(?company, \"Samsung\") || CONTAINS(?company, \"Sony\"))\r\n}\r\nORDER BY ?foundingDate DESC\r\nLIMIT 1\r\n```"
    },
    {
        "question": "who is taller, Lionel Messi or Cristiano Ronaldo\uff1f",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q615 wdt:P2048 ?number. wd:Q11571 wdt:P2048 ?number2. BIND(IF(?number > ?number2, wd:Q615, wd:Q11571) AS ?result)}",
        "generated_sparql": "SELECT ?x WHERE {\n  ?x wdt:P2048 wd:Q615.\n  FILTER(CONTAINS(str(?x), \"m\"))\n  UNION\n  ?x wdt:P2048 wd:Q11571.\n  FILTER(CONTAINS(str(?x), \"m\"))\n}\nORDER BY ?x DESC\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'who is taller, Lionel Messi or Cristiano Ronaldo\uff1f' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Lionel Messi\": \"Q615\", \"Cristiano Ronaldo\": \"Q11571\"}, \"relationships\": {\"height\": \"P2048\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?x WHERE {\n  ?x wdt:P2048 wd:Q615.\n  FILTER(CONTAINS(str(?x), \"m\"))\n  UNION\n  ?x wdt:P2048 wd:Q11571.\n  FILTER(CONTAINS(str(?x), \"m\"))\n}\nORDER BY ?x DESC\nLIMIT 1\n```"
    },
    {
        "question": "who has won more NBA awards, Michael Jordan or Kobe Bean Bryant\uff1f",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {{SELECT (COUNT (DISTINCT ?number) AS ?mj) WHERE {wd:Q41421 p:P166/ps:P166 ?number.}} {SELECT (COUNT (DISTINCT ?number2) AS ?kb) WHERE {wd:Q25369 p:P166/ps:P166 ?number2.}}  BIND(IF(?mj > ?kb, wd:Q41421, wd:Q25369) AS ?result)}",
        "generated_sparql": "SELECT ?winner\nWHERE {\n  ?person1 wd:P166 ?award1.\n  ?person2 wd:P166 ?award2.\n  ?person1 wikidata:Q41421.\n  ?person2 wikidata:Q25369.\n  FILTER(CONTAINS(?award1, \"NBA\") && CONTAINS(?award2, \"NBA\"))\n  FILTER(?award1 > ?award2)\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'who has won more NBA awards, Michael Jordan or Kobe Bean Bryant\uff1f' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Michael Jordan\": \"Q41421\", \"Kobe Bryant\": \"Q25369\"}, \"relationships\": {\"award winner\": \"P166\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?winner\nWHERE {\n  ?person1 wd:P166 ?award1.\n  ?person2 wd:P166 ?award2.\n  ?person1 wikidata:Q41421.\n  ?person2 wikidata:Q25369.\n  FILTER(CONTAINS(?award1, \"NBA\") && CONTAINS(?award2, \"NBA\"))\n  FILTER(?award1 > ?award2)\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wik"
    },
    {
        "question": "Did Michael Jordan ever weigh more than Kobe Bean Bryant\uff1f",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q41421 p:P2067/psn:P2067/wikibase:quantityAmount ?mj. wd:Q25369 p:P2067/psn:P2067/wikibase:quantityAmount ?kb. BIND(IF(?mj > ?kb, wd:Q41421, wd:Q25369) AS ?result)}",
        "generated_sparql": "SELECT ?x ?y WHERE {\n  ?x wdt:P2067 ?y.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Did Michael Jordan ever weigh more than Kobe Bean Bryant\uff1f' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Michael Jordan\": \"Q41421\", \"Kobe Bryant\": \"Q25369\"}, \"relationships\": {\"weight\": \"P2067\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?x ?y WHERE {\n  ?x wdt:P2067 ?y.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  FILTER(CONTAINS(?x, \"Q41421\") && CONTAINS(?y, \"Q25369\"))\n}\n```"
    },
    {
        "question": "Who is older, Sebastian Vettel or Lewis Hamilton?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q42311 wdt:P569 ?bv. wd:Q9673 wdt:P569 ?bh. BIND(IF(?bv < ?bh, wd:Q42311, wd:Q9673) AS ?result)}",
        "generated_sparql": "SELECT ?x ?y WHERE {\n  ?x wdt:P569 ?birthDate.\n  ?y wdt:P569 ?birthDate2.\n  FILTER(CONTAINS(STR(?birthDate), \"1987\") && CONTAINS(STR(?birthDate2), \"1985\"))\n  FILTER(?x = Q42311 && ?y = Q9673)\n}\nORDER BY ?birthDate DESC\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Who is older, Sebastian Vettel or Lewis Hamilton?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Sebastian Vettel\": \"Q42311\", \"Lewis Hamilton\": \"Q9673\"}, \"relationships\": {\"date of birth\": \"P569\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?x ?y WHERE {\n  ?x wdt:P569 ?birthDate.\n  ?y wdt:P569 ?birthDate2.\n  FILTER(CONTAINS(STR(?birthDate), \"1987\") && CONTAINS(STR(?birthDate2), \"1985\"))\n  FILTER(?x = Q42311 && ?y = Q9673)\n}\nORDER BY ?birthDate DESC\nLIMIT 1\n```"
    },
    {
        "question": "which city is more populated, copenhagen or amsterdam?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1748 wdt:P1082 ?popc. wd:Q727 wdt:P1082 ?popa. BIND(IF((?popc > ?popa), wd:Q1748, wd:Q727) AS ?result)}",
        "generated_sparql": "SELECT ?city ?population\nWHERE {\n  ?city wdt:P1082 ?population.\n  ?city wd:Q1748.\n  ?city wd:Q727.\n}\nORDER BY ?population DESC\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'which city is more populated, copenhagen or amsterdam?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Copenhagen\": \"Q1748\", \"Amsterdam\": \"Q727\"}, \"relationships\": {\"population\": \"P1082\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?city ?population\nWHERE {\n  ?city wdt:P1082 ?population.\n  ?city wd:Q1748.\n  ?city wd:Q727.\n}\nORDER BY ?population DESC\nLIMIT 1\n```"
    },
    {
        "question": "How many things are part of the \"One Piece\" Franchise?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?part) AS ?result) WHERE {wd:Q673 wdt:P527 ?part}",
        "generated_sparql": "SELECT COUNT(*) AS count\r\nWHERE {\r\n  ?s wdt:P527 wd:Q673;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many things are part of the \"One Piece\" Franchise?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"One Piece\": \"Q673\"}, \"relationships\": {\"has part\": \"P527\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS count\r\nWHERE {\r\n  ?s wdt:P527 wd:Q673;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nGROUP BY ?s\r\nHAVING wikibase:label = \"One Piece\"\r\n```"
    },
    {
        "question": "How many fictional female swordfighters are there?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?sf) AS ?result) WHERE {?sf wdt:P31/wdt:P279* wd:Q95074; wdt:P106 wd:Q11397897; wdt:P21 wd:Q6581072}",
        "generated_sparql": "SELECT COUNT(*) AS count\nWHERE {\n  ?fictionalFemale swordfighter.occupation ?occupation.value.en.\n  ?occupation wdt:subclass ?subclass.\n  ?subclass wdt:instance ?human.\n  ?human wdt:gender ?gender.\n  FILTER(?gender = \"Q6581072\" && ?occupation.value.en = \"swordfighter\")\n}\nGROUP BY ?fictionalFemale\nHAVING COUNT(*) > 0",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many fictional female swordfighters are there?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"fictional female swordfighter\": \"Q11397897\", \"human\": \"Q95074\", \"female\": \"Q6581072\"}, \"relationships\": {\"instance of\": \"P31\", \"subclass of\": \"P279\", \"occupation\": \"P106\", \"gender\": \"P21\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) AS count\nWHERE {\n  ?fictionalFemale swordfighter.occupation ?occupation.value.en.\n  ?occupation wdt:subclass ?subclass.\n  ?subclass wdt:instance ?human.\n  ?human wdt:gender ?gender.\n  FILTER(?gender = \"Q6581072\" && ?occupation.value.en = \"swordfighter\")\n}\nGROUP BY ?fictionalFemale\nHAVING COUNT(*) > 0\n```"
    },
    {
        "question": "which company started earlier, Black Diamond Equipment or la sportiva?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q2905359 wdt:P571 ?incbd. wd:Q3821214 wdt:P571 ?incls. BIND(IF((?incbd < ?incls), wd:Q2905359, wd:Q3821214) AS ?result)}",
        "generated_sparql": "SELECT ?company\r\nWHERE {\r\n  ?company wdt:P571 ?foundingDate\r\n  FILTER(CONTAINS(?company, \"Black Diamond Equipment\") || CONTAINS(?company, \"La Sportiva\"))\r\n}\r\nORDER BY ?foundingDate",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'which company started earlier, Black Diamond Equipment or la sportiva?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Black Diamond Equipment\": \"Q2905359\", \"La Sportiva\": \"Q3821214\"}, \"relationships\": {\"founding date\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?company\r\nWHERE {\r\n  ?company wdt:P571 ?foundingDate\r\n  FILTER(CONTAINS(?company, \"Black Diamond Equipment\") || CONTAINS(?company, \"La Sportiva\"))\r\n}\r\nORDER BY ?foundingDate\r\n```"
    },
    {
        "question": "which desert is bigger, sahara desert or arabian desert?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q6583 wdt:P2046 ?as. wd:Q208299 wdt:P2046 ?aa. BIND(IF((?as > ?aa), wd:Q6583, wd:Q208299) AS ?result)}",
        "generated_sparql": "SELECT ?s ?o WHERE {\n  ?s wdt:P2046 ?o.\n  ?s wdt:P31 wd:Q6583.\n  ?o wdt:P31 wd:Q208299.\n  FILTER(CONTAINS(?o, \"sq km\"))\n}\nORDER BY ?o DESC\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'which desert is bigger, sahara desert or arabian desert?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Sahara Desert\": \"Q6583\", \"Arabian Desert\": \"Q208299\"}, \"relationships\": {\"area\": \"P2046\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?s ?o WHERE {\n  ?s wdt:P2046 ?o.\n  ?s wdt:P31 wd:Q6583.\n  ?o wdt:P31 wd:Q208299.\n  FILTER(CONTAINS(?o, \"sq km\"))\n}\nORDER BY ?o DESC\nLIMIT 1\n```"
    },
    {
        "question": "who lives longer, series black or bellatrix Lestrange?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q713701 wdt:P570 ?ds. wd:Q1057918 wdt:P570 ?db. BIND(IF((?ds > ?db), wd:Q713701, wd:Q1057918) AS ?result)}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P570 ?y\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'who lives longer, series black or bellatrix Lestrange?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Series Black\": \"Q713701\", \"Bellatrix Lestrange\": \"Q1057918\"}, \"relationships\": {\"date of death\": \"P570\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P570 ?y\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n  ?x wdt:P31 ?z\r\n  FILTER(CONTAINS(?z, \"Series Black\") || CONTAINS(?z, \"Bellatrix Lestrange\"))\r\n}\r\nORDER BY ?y DESC\r\nLIMIT 1\r\n```"
    },
    {
        "question": "What is the area of the great lakes?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q7347 wdt:P2046 ?result}",
        "generated_sparql": "SELECT (SELECT ?x WHERE { ?x wdt:P2046 wikibase:label \"Great Lakes\" }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What is the area of the great lakes?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Great Lakes\": \"Q7347\"}, \"relationships\": {\"area\": \"P2046\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT (SELECT ?x WHERE { ?x wdt:P2046 wikibase:label \"Great Lakes\" }) AS area\nFROM wikibase:entity WHERE wikibase:label \"Great Lakes\"\n```"
    },
    {
        "question": "What is native name of the composer of the Japanese national anthem?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q17 wdt:P85/wdt:P86/wdt:P1559 ?result}",
        "generated_sparql": "SELECT ?composer ?composerLabel ?nativeName WHERE {\n  ?composer wdt:P85 wd:Q17.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What is native name of the composer of the Japanese national anthem?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Japan\": \"Q17\"}, \"relationships\": {\"composer\": \"P85\", \"lyricist\": \"P86\", \"native name\": \"P1559\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?composer ?composerLabel ?nativeName WHERE {\n  ?composer wdt:P85 wd:Q17.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  ?composer wdt:P1559 ?nativeName.\n}\n```"
    },
    {
        "question": "Who is the founder of the capital of Vietnam?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q881 wdt:P36/wdt:P112 ?result}",
        "generated_sparql": "SELECT ?founder WHERE {\n  ?capital wdt:P36 wd:Q881.\n  ?capital wdt:P112 ?founder.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Who is the founder of the capital of Vietnam?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Vietnam\": \"Q881\"}, \"relationships\": {\"capital\": \"P36\", \"founder\": \"P112\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?founder WHERE {\n  ?capital wdt:P36 wd:Q881.\n  ?capital wdt:P112 ?founder.\n}\n```"
    },
    {
        "question": "Who is the manager of the operator of Neumayer III?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q7933 wdt:P137/wdt:P1037 ?result}",
        "generated_sparql": "SELECT ?manager\r\nWHERE {\r\n  ?operator wdt:P137 wd:Q7933.\r\n  ?operator wdt:P1037 ?manager.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Who is the manager of the operator of Neumayer III?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Neumayer III\": \"Q7933\"}, \"relationships\": {\"operator\": \"P137\", \"manager\": \"P1037\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?manager\r\nWHERE {\r\n  ?operator wdt:P137 wd:Q7933.\r\n  ?operator wdt:P1037 ?manager.\r\n}\r\n```"
    },
    {
        "question": "How high is the mountain on which G\u00fcnther Messner died?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q195351 wdt:P20/wdt:P2044 ?result}",
        "generated_sparql": "SELECT ?mountain ?elevation\nWHERE {\n  ?mountain wdt:P20 wd:Q195351.\n  ?mountain wdt:P2044 ?elevation.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How high is the mountain on which G\u00fcnther Messner died?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"G\u00fcnther Messner\": \"Q195351\"}, \"relationships\": {\"place of death\": \"P20\", \"elevation above sea level\": \"P2044\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?mountain ?elevation\nWHERE {\n  ?mountain wdt:P20 wd:Q195351.\n  ?mountain wdt:P2044 ?elevation.\n}\n```"
    },
    {
        "question": "What is the twitter name of Running Wild?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q163173 wdt:P740 ?result}",
        "generated_sparql": "SELECT ?twitterName\r\nWHERE {\r\n  ?entity wdt:P740 ?twitterName;\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\";\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What is the twitter name of Running Wild?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Running Wild\": \"Q163173\"}, \"relationships\": {\"Twitter username\": \"P740\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?twitterName\r\nWHERE {\r\n  ?entity wdt:P740 ?twitterName;\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\";\r\n  }\r\n  ?entity wdt:P31 wd:Q163173;\r\n}\r\n```"
    },
    {
        "question": "How many times did the Italian national soccer team win the Fifa World Cup?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?win) AS ?result) WHERE {wd:Q676899 wdt:P2522 ?win. ?win wdt:P3450 wd:Q19317}",
        "generated_sparql": "SELECT COUNT(*) AS wins\nWHERE {\n  ?team Q676899.\n  ?team wdt:P2522 ?event.\n  ?event Q19317.\n}\nGROUP BY ?team",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many times did the Italian national soccer team win the Fifa World Cup?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Italian national soccer team\": \"Q676899\", \"FIFA World Cup\": \"Q19317\"}, \"relationships\": {\"winner\": \"P2522\", \"champion\": \"P3450\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) AS wins\nWHERE {\n  ?team Q676899.\n  ?team wdt:P2522 ?event.\n  ?event Q19317.\n}\nGROUP BY ?team\n```"
    },
    {
        "question": "What is the area of the capital of Spitsbergen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q25231 wdt:P36/wdt:P2046 ?result}",
        "generated_sparql": "SELECT ?capital ?area WHERE {\n  ?capital wdt:P36 wd:Q25231.\n  ?capital wdt:P2046 ?area.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What is the area of the capital of Spitsbergen?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Spitsbergen\": \"Q25231\"}, \"relationships\": {\"capital\": \"P36\", \"area\": \"P2046\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?capital ?area WHERE {\n  ?capital wdt:P36 wd:Q25231.\n  ?capital wdt:P2046 ?area.\n}\n```"
    },
    {
        "question": "What percentage of Andorra is covered with water?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q228 wdt:P2927 ?result}",
        "generated_sparql": "SELECT (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM wikibase:label WHERE wikibase:label = 'Andorra' AND wikibase:language = 'en')\r\nWHERE {\r\n  wikibase:label {\r\n    bd:serviceParam wikibase:language 'en'.\r\n    bd:serviceParam wikibase:label 'Andorra'.\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What percentage of Andorra is covered with water?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Andorra\": \"Q228\"}, \"relationships\": {\"percentage of area covered with water\": \"P2927\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM wikibase:label WHERE wikibase:label = 'Andorra' AND wikibase:language = 'en')\r\nWHERE {\r\n  wikibase:label {\r\n    bd:serviceParam wikibase:language 'en'.\r\n    bd:serviceParam wikibase:label 'Andorra'.\r\n  }\r\n  wikibase:entity {\r\n    wikibase:id 'Q228'.\r\n  }\r\n  wikibase:property {\r\n    wikibase:id 'P2927'.\r\n    wikibase:value {\r\n      bd:type xsd:decimal;\r\n      bd:value '0.0'.\r\n    }\r\n  }\r\n}\r\n```"
    },
    {
        "question": "How many countries are located around the euorpean Lake Constance?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?country) AS ?result) WHERE {wd:Q4127 wdt:P17 ?country. ?country wdt:P30 wd:Q46}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?c) WHERE {\r\n  ?c wdt:P17 wd:Q4127;\r\n  ?c wdt:P30 wd:Q46;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'How many countries are located around the euorpean Lake Constance?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Lake Constance\": \"Q4127\", \"Europe\": \"Q46\"}, \"relationships\": {\"country\": \"P17\", \"continent\": \"P30\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?c) WHERE {\r\n  ?c wdt:P17 wd:Q4127;\r\n  ?c wdt:P30 wd:Q46;\r\n}\r\n```"
    },
    {
        "question": "With how many persons was Richard Burton married?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?sp) AS ?result) WHERE {wd:Q151973 wdt:P26 ?sp.}",
        "generated_sparql": "SELECT COUNT(*) AS num_marriages\r\nWHERE {\r\n  ?person wdt:P26 wd:Q151973 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'With how many persons was Richard Burton married?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Richard Burton\": \"Q151973\"}, \"relationships\": {\"spouse\": \"P26\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_marriages\r\nWHERE {\r\n  ?person wdt:P26 wd:Q151973 .\r\n}\r\n```"
    },
    {
        "question": "At what coordinates was the \"Sender Teutoburger Wald\" erected?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1717891 wdt:P625 ?result.}",
        "generated_sparql": "SELECT ?coordinate\r\nWHERE {\r\n  ?senderTeutoburgerWald wdt:P625 ?coordinate. \r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'At what coordinates was the \"Sender Teutoburger Wald\" erected?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Sender Teutoburger Wald\": \"Q1717891\"}, \"relationships\": {\"coordinate location\": \"P625\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?coordinate\r\nWHERE {\r\n  ?senderTeutoburgerWald wdt:P625 ?coordinate. \r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\n```"
    },
    {
        "question": "Where is the poet Alexander Pope buried?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?poet wdt:P735 wd:Q923; wdt:P734 wd:Q15840785; wdt:P106 wd:Q49757; wdt:P119 ?result}",
        "generated_sparql": "SELECT ?place WHERE {\n  ?person wdt:P106 wd:Q923.\n  ?person wdt:P119 ?place.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Where is the poet Alexander Pope buried?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Alexander Pope\": \"Q923\"}, \"relationships\": {\"place of burial\": \"P119\", \"occupation\": \"P106\", \"language of work or name\": \"P407\", \"given name\": \"P735\", \"family name\": \"P734\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?place WHERE {\n  ?person wdt:P106 wd:Q923.\n  ?person wdt:P119 ?place.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n}\n```"
    },
    {
        "question": "In what country is the Kandahar-downhill?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q327818 wdt:P17 ?result}",
        "generated_sparql": "SELECT ?country\r\nWHERE {\r\n  ?country wdt:P17 wd:Q327818.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In what country is the Kandahar-downhill?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Kandahar-downhill\": \"Q327818\"}, \"relationships\": {\"country\": \"P17\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?country\r\nWHERE {\r\n  ?country wdt:P17 wd:Q327818.\r\n}\r\n```"
    },
    {
        "question": "Who founded the architectural firm who planned the Elbphilharmonie?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q673223 wdt:P84/wdt:P112 ?result}",
        "generated_sparql": "SELECT ?architect ?founder WHERE {\n  ?architect wdt:P84 wd:Q673223.\n  ?architect wdt:P112 ?founder.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Who founded the architectural firm who planned the Elbphilharmonie?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Elbphilharmonie\": \"Q673223\"}, \"relationships\": {\"architect\": \"P84\", \"founder\": \"P112\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?architect ?founder WHERE {\n  ?architect wdt:P84 wd:Q673223.\n  ?architect wdt:P112 ?founder.\n}\n```"
    },
    {
        "question": "Where are the founders of the band Metallica from?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q15920 wdt:P112/wdt:P19/wdt:P17 ?result}",
        "generated_sparql": "SELECT ?place ?country WHERE {\n  ?band wdt:P112 ?founder.\n  ?founder wdt:P19 ?place.\n  ?place wdt:P17 ?country.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Where are the founders of the band Metallica from?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Metallica\": \"Q15920\"}, \"relationships\": {\"founder\": \"P112\", \"place of birth\": \"P19\", \"country\": \"P17\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?place ?country WHERE {\n  ?band wdt:P112 ?founder.\n  ?founder wdt:P19 ?place.\n  ?place wdt:P17 ?country.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam"
    },
    {
        "question": "Where does the Granny Smith apple variety come from?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q506040 wdt:P495 ?result}",
        "generated_sparql": "SELECT ?country\nWHERE {\n  ?apple wdt:P495 ?country.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Where does the Granny Smith apple variety come from?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Granny Smith apple\": \"Q506040\"}, \"relationships\": {\"country of origin\": \"P495\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?country\nWHERE {\n  ?apple wdt:P495 ?country.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  FILTER(CONTAINS(?country, \"New Zealand\") && CONTAINS(?apple, \"Granny Smith apple\"))\n}\n```"
    },
    {
        "question": "What is the Fujiyama made of?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q39231 wdt:P186 ?result}",
        "generated_sparql": "SELECT ?material\r\nWHERE {\r\n  ?f :P186 ?material\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'What is the Fujiyama made of?' from the knowledge graph Wikidata with the following context: '{\"entities\": {\"Fujiyama\": \"Q39231\"}, \"relationships\": {\"material\": \"P186\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?material\r\nWHERE {\r\n  ?f :P186 ?material\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n  ?f wdt:P39231\r\n}\r\n```"
    }
]
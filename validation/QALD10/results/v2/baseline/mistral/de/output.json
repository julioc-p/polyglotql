[
    {
        "question": "Nach wem ist die Riemannsche Geometrie benannt?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE { wd:Q761383 wdt:P138 ?result. }",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P138 wd:Q761383.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Nach wem ist die Riemannsche Geometrie benannt?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Riemannsche Geometrie\": \"Q761383\"}, \"beziehungen\": {\"benannt nach\": \"P138\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P138 wd:Q761383.\r\n}\r\n```"
    },
    {
        "question": "Welches Tier war an einer milit\u00e4rischen Operation der australischen Streitkr\u00e4fte beteiligt?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q16521. ?mop wdt:P31 wd:Q645883; wdt:P710 ?result, wd:Q625657.}",
        "generated_sparql": "SELECT ?tier\r\nWHERE {\r\n  ?tier wdt:P31 wd:Q625657;\r\n  ?tier wdt:P710 wd:Q645883;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welches Tier war an einer milit\u00e4rischen Operation der australischen Streitkr\u00e4fte beteiligt?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Australien\": \"Q16521\", \"milit\u00e4rische Operation\": \"Q645883\", \"Streitkr\u00e4fte\": \"Q625657\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"Teil von\": \"P710\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?tier\r\nWHERE {\r\n  ?tier wdt:P31 wd:Q625657;\r\n  ?tier wdt:P710 wd:Q645883;\r\n}\r\n```"
    },
    {
        "question": "Wer von den Charakteren aus der Geralt-Saga hat zwei unverheiratete Partner, Yennefer of Vengerberg oder Triss Merigold?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q11835640 wdt:P674 ?result. ?result wdt:P451 ?p1, ?p2. FILTER(?p1 != ?p2 &&(?result IN (wd:Q4205826, wd:Q4463198)))}",
        "generated_sparql": "SELECT ?s ?p ?o\r\nWHERE {\r\n  ?s wdt:P451 ?p ?o\r\n  ?s wdt:P674 \"Q11835640\".\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer von den Charakteren aus der Geralt-Saga hat zwei unverheiratete Partner, Yennefer of Vengerberg oder Triss Merigold?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Yennefer von Vengerberg\": \"Q4205826\", \"Triss Merigold\": \"Q4463198\", \"Geralt-Saga\": \"Q11835640\"}, \"beziehungen\": {\"Partner\": \"P451\", \"Autor\": \"P674\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s ?p ?o\r\nWHERE {\r\n  ?s wdt:P451 ?p ?o\r\n  ?s wdt:P674 \"Q11835640\".\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n}\r\nORDER BY ?s\r\n```"
    },
    {
        "question": "Welcher der Gr\u00fcnder von Tencent ist Mitglied im Nationalen Volkskongress?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q860580 wdt:P112 ?result. ?result wdt:P39 wd:Q10891456.}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P112 wd:Q860580 .\r\n  ?x wdt:P39 wd:Q10891456 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welcher der Gr\u00fcnder von Tencent ist Mitglied im Nationalen Volkskongress?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Tencent\": \"Q860580\", \"Nationaler Volkskongress\": \"Q10891456\"}, \"beziehungen\": {\"Gr\u00fcnder\": \"P112\", \"Mitglied\": \"P39\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P112 wd:Q860580 .\r\n  ?x wdt:P39 wd:Q10891456 .\r\n}\r\n```"
    },
    {
        "question": "In welchem der anderen repr\u00e4sentativen Werke des Autors von Hunter X Hunter geht es um Sch\u00fcler:innen der Mittelstufe?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q696071 wdt:P50 ?author. ?author wdt:P800 ?result. ?result wdt:P921 wd:Q16003532 FILTER(?result != wd:Q69071)}",
        "generated_sparql": "",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In welchem der anderen repr\u00e4sentativen Werke des Autors von Hunter X Hunter geht es um Sch\u00fcler:innen der Mittelstufe?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Hunter X Hunter\": \"Q69071\", \"Mittelstufe\": \"Q16003532\"}, \"beziehungen\": {\"Autor\": \"P50\", \"thematisiert\": \"P921\", \"erstellt\": \"P800\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?w\r\nWHERE {\r\n  ?w wdt:P50 wd:Q69071 ; # Autor\r\n  ?w wdt:P921 wd:Q16003532 ; # Thematisiert\r\n  ?w wdt:P800 ?t ; # Erstellt\r\n  ?t wdt:P50 wd:Q69071 ; # Autor\r\n  ?t wdt:P921 wd:Q16003532 ; # Thematisiert\r\n  ?t wdt:P800 ?m ; # Erstellt\r\n  ?m wdt:P50 wd:Q69071 ; # Autor\r\n  ?m wdt:P921 wd:Q16003532 ; # Thematisiert\r\n  ?m wdt:P800 ?s ; # Erstellt\r\n  ?s wdt:P50 wd:Q69071 ; # Autor\r\n  ?s wdt:P921 wd:Q16003532 ; # Thematisiert\r\n  ?s wdt:P800 ?o ; # Erstellt\r\n  ?o wdt:P50 wd:Q69071 ; # Autor\r\n  ?o wdt:P921 wd:Q16003532 ; # Thematisiert\r\n  ?o wdt:P800 ?c ; # Erstellt\r\n  ?c wdt:P50 wd:Q69071 ; # Autor\r\n  ?c wdt:P921 wd:Q16003532 ; # Thematisiert\r\n  ?c wdt:P800 ?r ; # Erstellt\r\n  ?r wdt:P50 wd:Q69071 ; # Autor\r\n  ?r wdt:P921 wd:Q16003532 ; # Thematisiert\r\n  ?r wdt"
    },
    {
        "question": "An welchen B\u00f6rsen werden Aktien der Siemens AG gehandelt?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q81230 wdt:P414 ?result}",
        "generated_sparql": "SELECT ?b\u00f6rse\r\nWHERE {\r\n  ?b\u00f6rse wdt:P414 wd:Q81230. # Siemens AG is listed on ?b\u00f6rse\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'An welchen B\u00f6rsen werden Aktien der Siemens AG gehandelt?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Siemens AG\": \"Q81230\"}, \"beziehungen\": {\"an der B\u00f6rse gelistet\": \"P414\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?b\u00f6rse\r\nWHERE {\r\n  ?b\u00f6rse wdt:P414 wd:Q81230. # Siemens AG is listed on ?b\u00f6rse\r\n}\r\n```"
    },
    {
        "question": "Nennen Sie alle weiteren bekannten Werke des Autors von The Witcher.",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q11835640 wdt:P50 ?author. ?author wdt:P800 ?result. FILTER(?result != wd:Q11835640)}",
        "generated_sparql": "SELECT ?w.label\r\nWHERE {\r\n  ?w wdt:P50 wd:Q11835640 . # Autor von The Witcher\r\n  ?w wdt:P800 ?w2 . # geschrieben von\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Nennen Sie alle weiteren bekannten Werke des Autors von The Witcher.' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"The Witcher\": \"Q11835640\"}, \"beziehungen\": {\"Autor\": \"P50\", \"geschrieben\": \"P800\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?w.label\r\nWHERE {\r\n  ?w wdt:P50 wd:Q11835640 . # Autor von The Witcher\r\n  ?w wdt:P800 ?w2 . # geschrieben von\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  ?w2 wdt:P50 wd:Q11835640 . # Autor von The Witcher\r\n}\r\n```"
    },
    {
        "question": "Kommen Brooke Raboutou und Colin Duffy aus dem selben Bundesstaat der USA?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q2926117 wdt:P19 ?b1. wd:Q87192979 wdt:P19 ?b2. ?b1 wdt:P131* ?state. ?b2 wdt:P131* ?state. ?state wdt:P31 wd:Q35657 .}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P19 wd:Q35657. # Vereinigte Staaten von Amerika\r\n  ?x wdt:P31 wd:Q2926117. # Brooke Raboutou\r\n  ?x wdt:P31 wd:Q87192979. # Colin Duffy\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Kommen Brooke Raboutou und Colin Duffy aus dem selben Bundesstaat der USA?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Brooke Raboutou\": \"Q2926117\", \"Colin Duffy\": \"Q87192979\", \"Vereinigte Staaten von Amerika\": \"Q35657\"}, \"beziehungen\": {\"Ort\": \"P19\", \"Instanz von\": \"P31\", \"Verwaltungseinheit\": \"P131\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P19 wd:Q35657. # Vereinigte Staaten von Amerika\r\n  ?x wdt:P31 wd:Q2926117. # Brooke Raboutou\r\n  ?x wdt:P31 wd:Q87192979. # Colin Duffy\r\n}\r\n```"
    },
    {
        "question": "Wo liegt der Siedepunkt von Wasser?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q283 wdt:P2102 ?result}",
        "generated_sparql": "SELECT ?s\r\nWHERE {\r\n  ?s wdt:P2102 wd:Q283.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wo liegt der Siedepunkt von Wasser?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Wasser\": \"Q283\"}, \"beziehungen\": {\"Siedepunkt\": \"P2102\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s\r\nWHERE {\r\n  ?s wdt:P2102 wd:Q283.\r\n}\r\n```"
    },
    {
        "question": "An welcher Schule wurde Yayoi Kusama unterrichtet?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result {wd:Q231121 wdt:P69 ?result}",
        "generated_sparql": "SELECT ?school\r\nWHERE {\r\n  ?person wdt:P69 ?school ;\r\n  wd:Q231121 ?person\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'An welcher Schule wurde Yayoi Kusama unterrichtet?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Yayoi Kusama\": \"Q231121\"}, \"beziehungen\": {\"unterrichtet\": \"P69\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?school\r\nWHERE {\r\n  ?person wdt:P69 ?school ;\r\n  wd:Q231121 ?person\r\n}\r\n```"
    },
    {
        "question": "Welche weiterf\u00fchrende Schule besuchte Allen Ginsberg?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result {wd:Q6711 wdt:P69 ?result. ?result wdt:P31 wd:Q9826}",
        "generated_sparql": "SELECT ?s WHERE {\r\n  ?s wdt:P31 wd:Q9826;\r\n  ?s wdt:P69 wd:Q6711;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welche weiterf\u00fchrende Schule besuchte Allen Ginsberg?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Allen Ginsberg\": \"Q6711\", \"weiterf\u00fchrende Schule\": \"Q9826\"}, \"beziehungen\": {\"besuchte\": \"P69\", \"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s WHERE {\r\n  ?s wdt:P31 wd:Q9826;\r\n  ?s wdt:P69 wd:Q6711;\r\n}\r\n```"
    },
    {
        "question": "Auf welcher Insel liegt die Hauptstadt Indonesiens?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result {wd:Q252 wdt:P36 ?capital. ?capital wdt:P706 ?result. ?result wdt:P31 wd:Q23442}",
        "generated_sparql": "SELECT ?island\r\nWHERE {\r\n  ?city wdt:P31 wd:Q252 ; # Hauptstadt von Indonesien\r\n  ?city wdt:P36 wd:Q23442 ; # Insel\r\n  ?city wdt:P706 ?island ; # auf Insel\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Auf welcher Insel liegt die Hauptstadt Indonesiens?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Hauptstadt von Indonesien\": \"Q252\", \"Insel\": \"Q23442\"}, \"beziehungen\": {\"Hauptstadt\": \"P36\", \"auf\": \"P706\", \"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?island\r\nWHERE {\r\n  ?city wdt:P31 wd:Q252 ; # Hauptstadt von Indonesien\r\n  ?city wdt:P36 wd:Q23442 ; # Insel\r\n  ?city wdt:P706 ?island ; # auf Insel\r\n}\r\n```"
    },
    {
        "question": "Kann man Don't Starve auf der Playstaton 4 spielen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASk {wd:Q3208174 wdt:P400 wd:Q5014725.}",
        "generated_sparql": "SELECT ?game\r\nWHERE {\r\n  ?game wdt:P400 wd:Q5014725 .\r\n  ?game wdt:P31 wd:Q3208174 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Kann man Don't Starve auf der Playstaton 4 spielen?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Don't Starve\": \"Q3208174\", \"PlayStation 4\": \"Q5014725\"}, \"beziehungen\": {\"Plattform\": \"P400\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?game\r\nWHERE {\r\n  ?game wdt:P400 wd:Q5014725 .\r\n  ?game wdt:P31 wd:Q3208174 .\r\n}\r\n```"
    },
    {
        "question": "Wie viele Generalsekret\u00e4re der KPdSU gab es vor Leonid Brezhnev?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT (COUNT(?gensec) as ?result) WHERE{wd:Q765165 p:P39 ?pos. ?pos ps:P39 wd:Q1048744; pq:P580 ?st. ?gensec p:P39 ?pos2. ?pos2 ps:P39 wd:Q1048744; pq:P580 ?st2. FILTER(?st2 < ?st)}",
        "generated_sparql": "SELECT COUNT(*) AS count\r\nWHERE {\r\n  ?s wdt:P39 wd:Q1048744 .\r\n  ?s wdt:P580 ?t .\r\n  FILTER(?t < \"1982-01-01\" && ?t > \"1964-01-01\")\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele Generalsekret\u00e4re der KPdSU gab es vor Leonid Brezhnev?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Leonid Brezhnev\": \"Q1048744\", \"KPdSU\": \"Q765165\"}, \"beziehungen\": {\"Generalsekret\u00e4r\": \"P39\", \"Startzeit\": \"P580\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS count\r\nWHERE {\r\n  ?s wdt:P39 wd:Q1048744 .\r\n  ?s wdt:P580 ?t .\r\n  FILTER(?t < \"1982-01-01\" && ?t > \"1964-01-01\")\r\n}\r\n```"
    },
    {
        "question": "Wieviele unterschiedliche Pr\u00e4sident:innen Russlands haben seit 1990 das Amt angetreten?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?president) AS ?result) WHERE{?president p:P39 ?pos. ?pos ps:P39 wd:Q218295. ?pos pq:P580 ?start. FILTER((YEAR(?start)> 1990))}",
        "generated_sparql": "",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wieviele unterschiedliche Pr\u00e4sident:innen Russlands haben seit 1990 das Amt angetreten?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Russland\": \"Q218295\", \"Pr\u00e4sident\": \"Q2981816\"}, \"beziehungen\": {\"Inhaber\": \"P39\", \"Inhaber von\": \"P39\", \"Startzeitpunkt\": \"P580\", \"Jahr\": \"\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?president) AS num_presidents\r\nWHERE {\r\n  ?president wdt:P39 wd:Q2981816;\r\n  ?president wdt:P39 wd:Q218295;\r\n  ?president wdt:P580 ?start_time;\r\n  ?president wdt:P580 ?end_time;\r\n  ?president wdt:P580 ?start_time ?end_time;\r\n  ?president wdt:P580 ?start_time ?end_time ?year;\r\n  ?president wdt:P580 ?start_time ?end_time ?year ?year_value;\r\n  ?president wdt:P580 ?start_time ?end_time ?year ?year_value ?value;\r\n  ?president wdt:P580 ?start_time ?end_time ?year ?year_value ?value ?value_type;\r\n  ?president wdt:P580 ?start_time ?end_time ?year ?year_value ?value ?value_type ?value_type_label;\r\n  ?president wdt:P580 ?start_time ?end_time ?year ?year_value ?value ?value_type ?value_type_label ?value_type_label_value;\r\n  ?president wdt:P580 ?start_time ?end_time ?year ?year_value ?value ?value_type ?value_type_label ?value_type_label_value ?value_type_label_value_value;\r\n  ?president wdt:P580 ?start_time ?end_time ?year ?year_value ?value ?value_type ?value_type_label ?value_type_label_value ?value_type_label_value_value ?value_type_label_value_value ?value_type_label_value_value ?value_type_label_value_value ?value_type_label_value_value ?value_type_label_value_value ?value_type_label_value_value ?value_type_label_value_value ?value_"
    },
    {
        "question": "Gewann Adam Ondra bei den Olympischen Sommerspielen 2020 eine Medaille?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK{wd:Q350568 p:P1344 ?event. ?event ps:P1344 ?eventStatement. ?eventStatement wdt:P361* wd:Q181278. ?event pq:P1352 ?ranking. FILTER(?ranking <= 3)}",
        "generated_sparql": "SELECT ?s ?p ?o WHERE {\r\n  ?s wdt:P31 wd:Q181278. # Olympische Sommerspiele 2020\r\n  ?s wdt:P361 ?o. # Rang\r\n  ?s wdt:P1352 ?o. # Medaillengewinner\r\n  ?s wdt:P1344 ?o. # Gewinner\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Gewann Adam Ondra bei den Olympischen Sommerspielen 2020 eine Medaille?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Adam Ondra\": \"Q350568\", \"Olympische Sommerspiele 2020\": \"Q181278\"}, \"beziehungen\": {\"Gewinner\": \"P1344\", \"Medaillengewinner\": \"P1352\", \"Rang\": \"P361\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s ?p ?o WHERE {\r\n  ?s wdt:P31 wd:Q181278. # Olympische Sommerspiele 2020\r\n  ?s wdt:P361 ?o. # Rang\r\n  ?s wdt:P1352 ?o. # Medaillengewinner\r\n  ?s wdt:P1344 ?o. # Gewinner\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\n```"
    },
    {
        "question": "Haben die Chicago Bulls mindestens zwei Saisons der NBA-Meisterschaft gewonnen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK{{SELECT (COUNT (?season) AS ?count) WHERE {?season wdt:P3450 wd:Q155223. ?season wdt:P1346 wd:Q128109}} FILTER(?count >= 2)}",
        "generated_sparql": "SELECT COUNT(*) AS num_titles\r\nWHERE {\r\n  ?team wdt:P3450 wd:Q155223 .\r\n  ?team wdt:P1346 wd:Q128109 .\r\n}\r\nGROUP BY ?team\r\nHAVING num_titles >= 2",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Haben die Chicago Bulls mindestens zwei Saisons der NBA-Meisterschaft gewonnen?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Chicago Bulls\": \"Q155223\", \"NBA-Meisterschaft\": \"Q128109\"}, \"beziehungen\": {\"Gewinner\": \"P1346\", \"Mannschaft\": \"P3450\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_titles\r\nWHERE {\r\n  ?team wdt:P3450 wd:Q155223 .\r\n  ?team wdt:P1346 wd:Q128109 .\r\n}\r\nGROUP BY ?team\r\nHAVING num_titles >= 2\r\n```"
    },
    {
        "question": "Hat Haruki Murakami den Nobelpreis f\u00fcr Literatur erhalten?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q37922 wdt:P1346 wd:Q134798}",
        "generated_sparql": "SELECT ?s WHERE {\r\n  ?s wdt:P1346 ?o .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Hat Haruki Murakami den Nobelpreis f\u00fcr Literatur erhalten?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Haruki Murakami\": \"Q37922\", \"Nobelpreis f\u00fcr Literatur\": \"Q134798\"}, \"beziehungen\": {\"Preistr\u00e4ger\": \"P1346\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s WHERE {\r\n  ?s wdt:P1346 ?o .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(CONTAINS(?s, \"Haruki Murakami\") && CONTAINS(?o, \"Nobelpreis f\u00fcr Literatur\"))\r\n}\r\n```"
    },
    {
        "question": "Hat Kobe Bryant die Lakers zu dem Zeitpunkt verlassen, als LeBron James dem Team beitrat?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK{wd:Q25369 p:P54 ?teamStatement. ?teamStatement ps:P54 wd:Q121783; pq:P582 ?leave. wd:Q36159 p:P54 ?teamStatement2. ?teamStatement2 ps:P54 wd:Q121783; pq:P580 ?join. FILTER(?leave = ?join)}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P54 wd:Q121783 .\r\n  ?x wdt:P582 wd:Q25369 .\r\n  ?x wdt:P580 wd:Q36159 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Hat Kobe Bryant die Lakers zu dem Zeitpunkt verlassen, als LeBron James dem Team beitrat?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Kobe Bryant\": \"Q25369\", \"LeBron James\": \"Q36159\", \"Los Angeles Lakers\": \"Q121783\"}, \"beziehungen\": {\"Teammitglied\": \"P54\", \"Verlassen\": \"P582\", \"Beitreten\": \"P580\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P54 wd:Q121783 .\r\n  ?x wdt:P582 wd:Q25369 .\r\n  ?x wdt:P580 wd:Q36159 .\r\n}\r\n```"
    },
    {
        "question": "F\u00fchrte Rawson Marshall Thurber, der Regisseur von Red Notice, auch bei Titantic Regie?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q58815001 wdt:P57 ?director. wd:Q44578 wdt:P57 ?director. FILTER(wd:Q2745616 = ?director)}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P57 wd:Q2745616 .\r\n  ?x wdt:P57 wd:Q58815001 .\r\n  ?x wdt:P57 wd:Q44578 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'F\u00fchrte Rawson Marshall Thurber, der Regisseur von Red Notice, auch bei Titantic Regie?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Rawson Marshall Thurber\": \"Q2745616\", \"Red Notice\": \"Q58815001\", \"Titantic\": \"Q44578\"}, \"beziehungen\": {\"Regisseur\": \"P57\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P57 wd:Q2745616 .\r\n  ?x wdt:P57 wd:Q58815001 .\r\n  ?x wdt:P57 wd:Q44578 .\r\n}\r\n```"
    },
    {
        "question": "Geh\u00f6rte Venedig zu irgendeinem Zeitpunkt dem Kaisertum \u00d6sterreich an?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q641 p:P17/ps:P17 wd:Q131964}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P17 wd:Q641;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Geh\u00f6rte Venedig zu irgendeinem Zeitpunkt dem Kaisertum \u00d6sterreich an?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Venedig\": \"Q641\", \"Kaisertum \u00d6sterreich\": \"Q131964\"}, \"beziehungen\": {\"Teil von\": \"P17\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P17 wd:Q641;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\n```"
    },
    {
        "question": "Haben wenigstens zwei der Gr\u00fcnder von Tencent an der selben Universit\u00e4t studiert?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q860580 wdt:P112 ?founder. ?founder wdt:P69 ?uni. wd:Q860580 wdt:P112 ?founder2. ?founder2 wdt:P69 ?uni. FILTER(?founder != ?founder2)}",
        "generated_sparql": "SELECT COUNT(*) > 0 AS hat_wenigstens_zwei_gr\u00fcnder\r\nWHERE {\r\n  ?g1 wd:P112 ?u1 .\r\n  ?g2 wd:P112 ?u2 .\r\n  ?g1 wd:P69 ?u1 .\r\n  ?g2 wd:P69 ?u2 .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Haben wenigstens zwei der Gr\u00fcnder von Tencent an der selben Universit\u00e4t studiert?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Tencent\": \"Q860580\"}, \"beziehungen\": {\"Gr\u00fcnder\": \"P112\", \"studiert an\": \"P69\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) > 0 AS hat_wenigstens_zwei_gr\u00fcnder\r\nWHERE {\r\n  ?g1 wd:P112 ?u1 .\r\n  ?g2 wd:P112 ?u2 .\r\n  ?g1 wd:P69 ?u1 .\r\n  ?g2 wd:P69 ?u2 .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"de\". }\r\n  FILTER(CONTAINS(?u1, \"Tencent\") && CONTAINS(?u2, \"Tencent\"))\r\n}\r\n```"
    },
    {
        "question": "Ist Englisch die Muttersprache aller Partner:innen von Batman?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK{{SELECT (COUNT(DISTINCT ?partner) AS ?pnum) WHERE {wd:Q2695156 wdt:P451 ?partner. ?partner wdt:P103 ?lang. MINUS{?lang wdt:P279* wd:Q1860}}} FILTER(?pnum = 0)}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P451 wd:Q2695156 .\r\n  ?x wdt:P103 wd:Q1860 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Ist Englisch die Muttersprache aller Partner:innen von Batman?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Batman\": \"Q2695156\", \"Englisch\": \"Q1860\"}, \"beziehungen\": {\"Partner\": \"P451\", \"Muttersprache\": \"P103\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P451 wd:Q2695156 .\r\n  ?x wdt:P103 wd:Q1860 .\r\n}\r\n```"
    },
    {
        "question": "Wieviele Ehepartner:innen haben Staatsoberh\u00e4upter im Durchschnitt?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (AVG(?spouseCount) AS ?result) WHERE {{SELECT (COUNT(DISTINCT ?spouse) AS ?spouseCount) WHERE{?country wdt:P31 wd:Q6256. ?country p:P35/ps:P35 ?hos. OPTIONAL {?hos wdt:P26 ?spouse}} GROUP BY ?hos }}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?s) AS count\r\nWHERE {\r\n  ?s wdt:P31 wd:Q6256;\r\n  ?s wdt:P26 ?o;\r\n  ?o wdt:P35 ?p;\r\n}\r\nGROUP BY ?s;",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wieviele Ehepartner:innen haben Staatsoberh\u00e4upter im Durchschnitt?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Staatsoberhaupt\": \"Q6256\"}, \"beziehungen\": {\"Ehepartner\": \"P26\", \"Instanz von\": \"P31\", \"Staatsoberhaupt\": \"P35\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?s) AS count\r\nWHERE {\r\n  ?s wdt:P31 wd:Q6256;\r\n  ?s wdt:P26 ?o;\r\n  ?o wdt:P35 ?p;\r\n}\r\nGROUP BY ?s;\r\n```"
    },
    {
        "question": "Gab es mindestens ein Formel-1-Event auf der AVUS?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK{wd:Q155810 wdt:P793 ?event. ?event wdt:P31 wd:Q108886259}",
        "generated_sparql": "SELECT COUNT(*) AS count\r\nWHERE {\r\n  ?s wdt:P31 wd:Q108886259 .\r\n  ?s wdt:P793 wd:Q155810 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Gab es mindestens ein Formel-1-Event auf der AVUS?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"AVUS\": \"Q155810\", \"Formel-1-Event\": \"Q108886259\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \" Austragungsort\": \"P793\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS count\r\nWHERE {\r\n  ?s wdt:P31 wd:Q108886259 .\r\n  ?s wdt:P793 wd:Q155810 .\r\n}\r\n```"
    },
    {
        "question": "Finde alle t\u00fcrkischen Verben, die mit \u201cu\u015f\u201d enden, als Lemma.",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {?result wikibase:lexicalCategory wd:Q24905; dct:language/wdt:P218 'tr'; wikibase:lemma ?lemma. FILTER(regex(?lemma, \"u\u015f$\"))}",
        "generated_sparql": "SELECT ?v\r\nWHERE {\r\n  ?v wikibase:lexicalCategory ?w.\r\n  ?v wikibase:lemma ?l.\r\n  ?v dct:language ?s.\r\n  ?s = \"t\u00fcrkisch\".\r\n  ?l LIKE \"%u\u015f%\".\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Finde alle t\u00fcrkischen Verben, die mit \u201cu\u015f\u201d enden, als Lemma.' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"t\u00fcrkisch\": \"Q882\", \"Verb\": \"Q24905\"}, \"beziehungen\": {\"Lemma\": \"wikibase:lemma\", \"Sprache\": \"dct:language\", \"Wortart\": \"wikibase:lexicalCategory\", \"Sprachcode\": \"P218\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?v\r\nWHERE {\r\n  ?v wikibase:lexicalCategory ?w.\r\n  ?v wikibase:lemma ?l.\r\n  ?v dct:language ?s.\r\n  ?s = \"t\u00fcrkisch\".\r\n  ?l LIKE \"%u\u015f%\".\r\n}\r\n```"
    },
    {
        "question": "Aus welchem Land stammen Beagles urspr\u00fcnglich?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q21102 wdt:P495 ?result}",
        "generated_sparql": "SELECT ?land\r\nWHERE {\r\n  ?beagle wdt:P495 ?land\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Aus welchem Land stammen Beagles urspr\u00fcnglich?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Beagles\": \"Q21102\"}, \"beziehungen\": {\"Herkunftsland\": \"P495\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?land\r\nWHERE {\r\n  ?beagle wdt:P495 ?land\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n}\r\n```"
    },
    {
        "question": "Aus welchem Land kommen die zweitmeisten bisherigen Gewinner:innen des Emmy Awards?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {?person wdt:P166 wd:Q123737; wdt:P27 ?result} GROUP BY ?result ORDER BY DESC(COUNT (?result)) OFFSET 1 LIMIT 1",
        "generated_sparql": "SELECT DISTINCT ?country\r\nWHERE {\r\n  ?person wdt:P166 wd:Q123737.\r\n  ?person wdt:P27 ?country.\r\n}\r\nORDER BY ?country DESC\r\nLIMIT 2",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Aus welchem Land kommen die zweitmeisten bisherigen Gewinner:innen des Emmy Awards?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Emmy Award\": \"Q123737\"}, \"beziehungen\": {\"Gewinner\": \"P166\", \"Staatsangeh\u00f6rigkeit\": \"P27\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT DISTINCT ?country\r\nWHERE {\r\n  ?person wdt:P166 wd:Q123737.\r\n  ?person wdt:P27 ?country.\r\n}\r\nORDER BY ?country DESC\r\nLIMIT 2\r\n```"
    },
    {
        "question": "Wird der Musikstil von Helloween der Rockmusik zugeordnet?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q158895 wdt:P136/wdt:P279* wd:Q11399}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P136 wd:Q11399;\r\n  ?x wdt:P279 wd:Q158895;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wird der Musikstil von Helloween der Rockmusik zugeordnet?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Helloween\": \"Q158895\", \"Rockmusik\": \"Q11399\"}, \"beziehungen\": {\"Musikstil\": \"P136\", \"Unterklasse\": \"P279\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P136 wd:Q11399;\r\n  ?x wdt:P279 wd:Q158895;\r\n}\r\n```"
    },
    {
        "question": "Geh\u00f6rt die Postleitzahl 32423 zu Minden?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q3846 wdt:P281 \"32423\"}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P281 wd:Q3846.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Geh\u00f6rt die Postleitzahl 32423 zu Minden?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Minden\": \"Q3846\"}, \"beziehungen\": {\"Postleitzahl\": \"P281\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P281 wd:Q3846.\r\n}\r\n```"
    },
    {
        "question": "Hat Adam Ondra schon einmal die IFSC Weltmeisterschaft im Klettern gewonnen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q350568 p:P1344 ?ps. ?ps ps:P1344/wdt:P3450* wd:Q1774251. {?ps pq:P1352 ?rank.} UNION {?ps pq:P166 ?gold.} FILTER(?rank = 1 || sameTerm(?gold,wd:Q406039))}",
        "generated_sparql": "SELECT ?s ?p ?o WHERE {\r\n  ?s wdt:P350568. # Adam Ondra\r\n  ?s wdt:P166 ?o. # IFSC Weltmeisterschaft im Klettern\r\n  ?s wdt:P1344 ?o. # Gewinner\r\n  FILTER(?o = \"Q1774251\"). # IFSC Weltmeisterschaft im Klettern\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Hat Adam Ondra schon einmal die IFSC Weltmeisterschaft im Klettern gewonnen?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Adam Ondra\": \"Q350568\", \"IFSC Weltmeisterschaft im Klettern\": \"Q1774251\"}, \"beziehungen\": {\"Gewinner\": \"P1344\", \"Wettbewerb\": \"P166\", \"Goldmedaille\": \"P1352\", \"Rang\": \"P3450\", \"Wert\": \"pq\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s ?p ?o WHERE {\r\n  ?s wdt:P350568. # Adam Ondra\r\n  ?s wdt:P166 ?o. # IFSC Weltmeisterschaft im Klettern\r\n  ?s wdt:P1344 ?o. # Gewinner\r\n  FILTER(?o = \"Q1774251\"). # IFSC Weltmeisterschaft im Klettern\r\n}\r\n```"
    },
    {
        "question": "Ist die Lebenserwartung im Iran in irgendeinem Jahr nach 1999 gewachsen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q794 p:P2250 ?ols. ?ols pq:P585 ?otime. ?ols ps:P2250 ?ol.  wd:Q794 p:P2250 ?nls. ?nls pq:P585 ?ntime. ?nls ps:P2250 ?nl. FILTER((YEAR(?otime)=1999) && (YEAR(?ntime) > YEAR(?otime)) && (?nl > ?ol))}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P2250 wd:P585 ?y.\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Ist die Lebenserwartung im Iran in irgendeinem Jahr nach 1999 gewachsen?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Iran\": \"Q794\"}, \"beziehungen\": {\"Lebenserwartung\": \"P2250\", \"Wert\": \"pq\", \"Zeitpunkt\": \"P585\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P2250 wd:P585 ?y.\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(CONTAINS(?x, \"Iran\") && CONTAINS(?y, \"1999\") && ?x > ?y)\r\n}\r\n```"
    },
    {
        "question": "Ist die Einwohnerzahl von Isfahan an irgendeinem Punkt nach 2006 gestiegen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q42053 p:P1082 ?ops. ?ops pq:P585 ?otime. ?ops ps:P1082 ?op.  wd:Q42053 p:P1082 ?nps. ?nps pq:P585 ?ntime. ?nps ps:P1082 ?np. FILTER((YEAR(?otime)=2006) && (YEAR(?ntime) > YEAR(?otime)) && (?np > ?op))}",
        "generated_sparql": "SELECT COUNT(*) > 0 AS ist_gestiegen\r\nWHERE {\r\n  ?s wdt:P1082 ?o .\r\n  ?s wdt:P585 ?t .\r\n  ?o ?p ?q .\r\n  ?p ?s ?t .\r\n  ?q ?p ?s ?t .\r\n  ?s wdt:P42053 .\r\n  FILTER(?t >= \"2006-01-01\" && ?t <= \"2021-12-31\")\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Ist die Einwohnerzahl von Isfahan an irgendeinem Punkt nach 2006 gestiegen?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Isfahan\": \"Q42053\"}, \"beziehungen\": {\"Einwohnerzahl\": \"P1082\", \"Zeitpunkt\": \"P585\", \"Wert\": \"pq\", \"bezieht sich auf\": \"ps\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) > 0 AS ist_gestiegen\r\nWHERE {\r\n  ?s wdt:P1082 ?o .\r\n  ?s wdt:P585 ?t .\r\n  ?o ?p ?q .\r\n  ?p ?s ?t .\r\n  ?q ?p ?s ?t .\r\n  ?s wdt:P42053 .\r\n  FILTER(?t >= \"2006-01-01\" && ?t <= \"2021-12-31\")\r\n}\r\n```"
    },
    {
        "question": "Hat Joe Cocker auf dem Woodstock Festival gespielt?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q164815 wdt:P710 wd:Q190076}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P710 wd:Q164815 ; # Joe Cocker\r\n  ?x wdt:P710 wd:Q190076 ; # Woodstock Festival\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Hat Joe Cocker auf dem Woodstock Festival gespielt?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Joe Cocker\": \"Q164815\", \"Woodstock Festival\": \"Q190076\"}, \"beziehungen\": {\"teilgenommen an\": \"P710\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P710 wd:Q164815 ; # Joe Cocker\r\n  ?x wdt:P710 wd:Q190076 ; # Woodstock Festival\r\n}\r\n```"
    },
    {
        "question": "Hat Udo B\u00f6lts an der Tour de France teilgenommen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q66432 wdt:P1344/wdt:P31 wd:Q33881}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P31 wd:Q33881;\r\n  ?x wdt:P1344 wd:Q66432;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Hat Udo B\u00f6lts an der Tour de France teilgenommen?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Udo B\u00f6lts\": \"Q66432\", \"Tour de France\": \"Q33881\"}, \"beziehungen\": {\"Teilnehmer\": \"P1344\", \"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P31 wd:Q33881;\r\n  ?x wdt:P1344 wd:Q66432;\r\n}\r\n```"
    },
    {
        "question": "Wie viele Br\u00fcder von Reinhold Messner leben noch?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?brother) AS ?result) WHERE {wd:Q189307 wdt:P3373 ?brother. ?brother wdt:P21 wd:Q6581097. FILTER(NOT EXISTS{?brother wdt:P570 ?dod})}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?brother) WHERE {\r\n  ?brother wdt:P3373 wd:Q189307 .\r\n  FILTER(?brother wdt:P21 wd:Q6581097) # Filter for male brothers\r\n  FILTER(?brother wdt:P570 ?date) # Filter for brothers who are still alive\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele Br\u00fcder von Reinhold Messner leben noch?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Reinhold Messner\": \"Q189307\"}, \"beziehungen\": {\"Bruder\": \"P3373\", \"Geschlecht\": \"P21\", \"m\u00e4nnlich\": \"Q6581097\", \"Todesdatum\": \"P570\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?brother) WHERE {\r\n  ?brother wdt:P3373 wd:Q189307 .\r\n  FILTER(?brother wdt:P21 wd:Q6581097) # Filter for male brothers\r\n  FILTER(?brother wdt:P570 ?date) # Filter for brothers who are still alive\r\n}\r\n```"
    },
    {
        "question": "Auf welche Weise ist Hemingway gestorben?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q23434 wdt:P1196 ?result.}",
        "generated_sparql": "SELECT ?t\r\nWHERE {\r\n  ?p wdt:P1196 ?t\r\n  wd:Q23434 wdt:P31 ?t\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Auf welche Weise ist Hemingway gestorben?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Hemingway\": \"Q23434\"}, \"beziehungen\": {\"Todesursache\": \"P1196\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?t\r\nWHERE {\r\n  ?p wdt:P1196 ?t\r\n  wd:Q23434 wdt:P31 ?t\r\n}\r\n```"
    },
    {
        "question": "In welcher Branche f\u00fchrt das Haus der Medici ein Unternehmen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q170022 wdt:P1830/wdt:P452 ?result}",
        "generated_sparql": "SELECT ?b WHERE {\r\n  ?b wdt:P452 wd:Q170022;\r\n  ?b wdt:P1830 ?t;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In welcher Branche f\u00fchrt das Haus der Medici ein Unternehmen?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Haus der Medici\": \"Q170022\"}, \"beziehungen\": {\"Branche\": \"P452\", \"T\u00e4tigkeit\": \"P1830\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?b WHERE {\r\n  ?b wdt:P452 wd:Q170022;\r\n  ?b wdt:P1830 ?t;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"de\". }\r\n}\r\nORDER BY ?b\r\n```"
    },
    {
        "question": "Wie ist der offizielle Name der USA auf t\u00fcrkisch?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {wd:Q30 wdt:P1448 ?result FILTER(langMatches(lang(?result),\"tr\"))}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P1448 wd:Q30\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie ist der offizielle Name der USA auf t\u00fcrkisch?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"USA\": \"Q30\"}, \"beziehungen\": {\"offizieller Name\": \"P1448\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P1448 wd:Q30\r\n}\r\n```"
    },
    {
        "question": "Wie hoch ist der K\u00f6lner Dom?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {wd:Q4176 wdt:P2048 ?result}",
        "generated_sparql": "SELECT ?h\r\nWHERE {\r\n  ?s wdt:P2048 ?h;\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\";\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie hoch ist der K\u00f6lner Dom?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"K\u00f6lner Dom\": \"Q4176\"}, \"beziehungen\": {\"H\u00f6he\": \"P2048\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?h\r\nWHERE {\r\n  ?s wdt:P2048 ?h;\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\";\r\n  }\r\n}\r\nWHERE {\r\n  ?s wd:Q4176;\r\n}\r\n```"
    },
    {
        "question": "Wie lautet der mandarin-chinesische Name des Harz?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q4186 rdfs:label ?result FILTER(langMatches(lang(?result),\"zh-cn\")) }",
        "generated_sparql": "SELECT ?label\r\nWHERE {\r\n  ?s wdt:P31 wd:Q4186. # Harz\r\n  ?s wdt:P431 ?label. # Bezeichnung\r\n  ?s wdt:P180 ?lang. # Sprache\r\n  FILTER(CONTAINS(?lang, 'mandarin-chinese'))\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie lautet der mandarin-chinesische Name des Harz?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Harz\": \"Q4186\"}, \"beziehungen\": {\"Bezeichnung\": \"rdfs:label\", \"Sprache\": \"langMatches\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?label\r\nWHERE {\r\n  ?s wdt:P31 wd:Q4186. # Harz\r\n  ?s wdt:P431 ?label. # Bezeichnung\r\n  ?s wdt:P180 ?lang. # Sprache\r\n  FILTER(CONTAINS(?lang, 'mandarin-chinese'))\r\n}\r\n```"
    },
    {
        "question": "Wieviele internationale Flugh\u00e4fen gibt es in der Stadt Hamburg?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?ap) AS ?result) WHERE {?ap wdt:P31 wd:Q644371. ?ap wdt:P131* wd:Q1055}",
        "generated_sparql": "SELECT COUNT(*) AS count\nWHERE {\n  ?s wdt:P31 wd:Q644371.\n  ?s wdt:P131 ?o.\n  ?o wdt:P31 wd:Q1055.\n}\nGROUP BY ?s\nHAVING ?s = wd:Q1055",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wieviele internationale Flugh\u00e4fen gibt es in der Stadt Hamburg?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Hamburg\": \"Q1055\", \"internationaler Flughafen\": \"Q644371\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"Ort\": \"P131\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) AS count\nWHERE {\n  ?s wdt:P31 wd:Q644371.\n  ?s wdt:P131 ?o.\n  ?o wdt:P31 wd:Q1055.\n}\nGROUP BY ?s\nHAVING ?s = wd:Q1055\n```"
    },
    {
        "question": "An wie vielen Alben hat Madonna mitgewirkt?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?album) AS ?result) WHERE {?album wdt:P31 wd:Q482994. ?album wdt:P175 wd:Q1744. }",
        "generated_sparql": "SELECT COUNT(*) AS num_albums\r\nWHERE {\r\n  ?s wdt:P31 wd:Q482994;\r\n  ?s wdt:P175 ?o;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'An wie vielen Alben hat Madonna mitgewirkt?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Madonna\": \"Q1744\", \"Musikalbum\": \"Q482994\"}, \"beziehungen\": {\"Mitwirkender\": \"P175\", \"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_albums\r\nWHERE {\r\n  ?s wdt:P31 wd:Q482994;\r\n  ?s wdt:P175 ?o;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"de\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"fr\". }\r\n}\r\nGROUP BY ?s\r\nHAVING ?s = \"Q1744\"\r\n```"
    },
    {
        "question": "An wie vielen Alben hat Maria Carey mitgewirkt?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?album) AS ?result) WHERE {?album wdt:P31 wd:Q482994. ?album wdt:P175 wd:Q41076. }",
        "generated_sparql": "SELECT COUNT(*) AS num_albums\r\nWHERE {\r\n  ?x wdt:P31 wd:Q1156469 .\r\n  ?x wdt:P175 wd:Q482994 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'An wie vielen Alben hat Maria Carey mitgewirkt?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Mariah Carey\": \"Q482994\", \"Album\": \"\", \"Musiker\": \"Q1156469\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"Mitwirkender\": \"P175\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_albums\r\nWHERE {\r\n  ?x wdt:P31 wd:Q1156469 .\r\n  ?x wdt:P175 wd:Q482994 .\r\n}\r\n```"
    },
    {
        "question": "Wie viele Studio-Alben hat Lan Del Rey?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?album) AS ?result) WHERE {?album wdt:P7937 wd:Q208569. ?album wdt:P175 wd:Q37150. }",
        "generated_sparql": "SELECT COUNT(*) AS num_albums\r\nWHERE {\r\n  ?artist wdt:P175 wd:Q37150 ; # Lana Del Rey\r\n  ?album wdt:P7937 ?artist ; # Studioalbum\r\n}\r\nGROUP BY ?artist\r\nHAVING ?artist = wd:Q37150 ; # Lana Del Rey",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele Studio-Alben hat Lan Del Rey?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Lana Del Rey\": \"Q37150\", \"Studioalbum\": \"Q208569\"}, \"beziehungen\": {\"K\u00fcnstler\": \"P175\", \"Albumtyp\": \"P7937\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_albums\r\nWHERE {\r\n  ?artist wdt:P175 wd:Q37150 ; # Lana Del Rey\r\n  ?album wdt:P7937 ?artist ; # Studioalbum\r\n}\r\nGROUP BY ?artist\r\nHAVING ?artist = wd:Q37150 ; # Lana Del Rey\r\n```"
    },
    {
        "question": "Wieviele antike Zivilisationen gab es?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?civ) AS ?result) WHERE {?civ wdt:P31 wd:Q28171280}",
        "generated_sparql": "",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wieviele antike Zivilisationen gab es?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"antike Zivilisation\": \"Q28171280\"}, \"beziehungen\": {\"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS antike_zivilisationen\r\nFROM wikidata:Q28171280\r\nWHERE wikidata:P31 = wikidata:Q28171280\r\n```"
    },
    {
        "question": "In wievielen Jahren wurde Kobe Bryant mit dem \"NBA All-Defensive Team Award\" ausgezeichnet?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?time) AS ?result) WHERE {wd:Q25369 p:P166 ?as. ?as ps:P166 wd:Q1465181; pq:P585 ?time.}",
        "generated_sparql": "SELECT COUNT(*) AS years\nWHERE {\n  ?s wdt:P166 wd:Q1465181.\n  ?s wdt:P585 ?t.\n  FILTER(CONTAINS(STR(?t), \"Kobe Bryant\")).\n}\nGROUP BY ?s\nHAVING COUNT(*) > 0",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In wievielen Jahren wurde Kobe Bryant mit dem \"NBA All-Defensive Team Award\" ausgezeichnet?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Kobe Bryant\": \"Q25369\", \"NBA All-Defensive Team Award\": \"Q1465181\"}, \"beziehungen\": {\"Auszeichnung\": \"P166\", \"Zeitpunkt\": \"P585\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) AS years\nWHERE {\n  ?s wdt:P166 wd:Q1465181.\n  ?s wdt:P585 ?t.\n  FILTER(CONTAINS(STR(?t), \"Kobe Bryant\")).\n}\nGROUP BY ?s\nHAVING COUNT(*) > 0\n```"
    },
    {
        "question": "Wie h\u00e4ufig haben Shaqulle O'Neal und Kobe Bryant im selben Jahr eine All-NBA Team Auszeichnung erhalten?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?time) AS ?result) WHERE {wd:Q25369 p:P166 ?as. ?as ps:P166 wd:Q674359; pq:P585 ?time. wd:Q169452 p:P166 ?as2. ?as2 ps:P166 wd:Q674359; pq:P585 ?time}",
        "generated_sparql": "",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie h\u00e4ufig haben Shaqulle O'Neal und Kobe Bryant im selben Jahr eine All-NBA Team Auszeichnung erhalten?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Shaquille O'Neal\": \"Q25369\", \"Kobe Bryant\": \"Q169452\", \"All-NBA Team\": \"Q674359\"}, \"beziehungen\": {\"erhalten\": \"P166\", \"Saison\": \"P585\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS frequency\r\nWHERE {\r\n  ?s <- wd:Q674359\r\n  ?p <- wd:P166\r\n  ?o1 <- wd:Q25369\r\n  ?o2 <- wd:Q169452\r\n  ?o1 ?p ?o2\r\n  FILTER(?s ?p ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o2 ?o1 ?o"
    },
    {
        "question": "Wie viele literarische Werke hat Richard Bachman geschrieben?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?book) AS ?result) WHERE {?book wdt:P50 wd:Q39829; wdt:P31 wd:Q7725634}",
        "generated_sparql": "SELECT COUNT(*) AS num_works\r\nWHERE {\r\n  ?author wdt:P50 wd:Q39829;\r\n  ?author wdt:P31 wd:Q7725634;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele literarische Werke hat Richard Bachman geschrieben?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Richard Bachman\": \"Q39829\", \"literarische Werke\": \"Q7725634\"}, \"beziehungen\": {\"Autor\": \"P50\", \"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_works\r\nWHERE {\r\n  ?author wdt:P50 wd:Q39829;\r\n  ?author wdt:P31 wd:Q7725634;\r\n}\r\n```"
    },
    {
        "question": "Wie viele bedeutende Arbeiten hat Sarah J. Maas?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?notableW) AS ?result) WHERE {wd:Q20640708 wdt:P800 ?notableW}",
        "generated_sparql": "SELECT COUNT(*) AS num_works\r\nWHERE {\r\n  ?s wdt:P800 ?w .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele bedeutende Arbeiten hat Sarah J. Maas?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Sarah J. Maas\": \"Q20640708\"}, \"beziehungen\": {\"bedeutende Arbeit\": \"P800\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_works\r\nWHERE {\r\n  ?s wdt:P800 ?w .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(CONTAINS(?s, \"Q20640708\") && CONTAINS(?w, \"bedeutende Arbeit\"))\r\n}\r\n```"
    },
    {
        "question": "Hat Bryan Evenson mindestens f\u00fcr eine Universt\u00e4t gearbeitet an der er auch studiert hat?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q4963691 wdt:P108 ?uni; wdt:P69 ?uni. ?uni wdt:P31/wdt:P279* wd:Q3918.}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P31 wd:Q3918. # Universit\u00e4t\r\n  ?x wdt:P69 ?y. # Alma Mater\r\n  ?x wdt:P108 ?z. # Arbeitgeber\r\n  ?y wdt:P279 ?z. # Unterklasse von\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Hat Bryan Evenson mindestens f\u00fcr eine Universt\u00e4t gearbeitet an der er auch studiert hat?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Bryan Evenson\": \"Q4963691\", \"Universit\u00e4t\": \"Q3918\"}, \"beziehungen\": {\"Arbeitgeber\": \"P108\", \"Alma Mater\": \"P69\", \"Instanz von\": \"P31\", \"Unterklasse von\": \"P279\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P31 wd:Q3918. # Universit\u00e4t\r\n  ?x wdt:P69 ?y. # Alma Mater\r\n  ?x wdt:P108 ?z. # Arbeitgeber\r\n  ?y wdt:P279 ?z. # Unterklasse von\r\n}\r\n```"
    },
    {
        "question": "Wieviele Kinder (inklusive adoptierter) hat Jeff Bezos mit seiner Ex-Frau?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?child) AS ?result) WHERE {wd:Q312556 p:P26 ?sps. ?sps ps:P26 ?sp. ?child wdt:P25 ?sp; wdt:P22 wd:Q312556. FILTER(EXISTS{?sps pq:P582 ?et})}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?child) AS num_children\r\nWHERE {\r\n  ?parent ?rel ?child\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wieviele Kinder (inklusive adoptierter) hat Jeff Bezos mit seiner Ex-Frau?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Jeff Bezos\": \"Q312556\"}, \"beziehungen\": {\"Ehepartner\": \"P26\", \"Elternteil\": \"P25\", \"Geschlecht\": \"P22\", \"Ex-Ehepartner\": \"P582\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?child) AS num_children\r\nWHERE {\r\n  ?parent ?rel ?child\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(?parent = Q312556)\r\n  FILTER(?rel IN (P25, P26))\r\n}\r\n```"
    },
    {
        "question": "Wie viele Kinder hat Paul McCartney zusammen mit seiner Ex-Frau Linda McCartney?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?child) AS ?result) WHERE {wd:Q2599 p:P26 ?sps. ?sps ps:P26 ?sp. ?child wdt:P25 ?sp; wdt:P22 wd:Q2599. FILTER((EXISTS{?sps pq:P582 ?et}) && (?sp = wd:Q228899))}",
        "generated_sparql": "SELECT COUNT(*) AS num_children\nWHERE {\n  ?p1 wdt:P2599.\n  ?p2 wdt:P228899.\n  ?p1 wdt:P26 ?p2.\n  ?p1 wdt:P22 ?p2.\n  ?p1 wdt:P25 ?p2.\n  ?p1 wdt:P582 ?p2.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele Kinder hat Paul McCartney zusammen mit seiner Ex-Frau Linda McCartney?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Paul McCartney\": \"Q2599\", \"Linda McCartney\": \"Q228899\"}, \"beziehungen\": {\"Ehepartner\": \"P26\", \"Elternteil\": \"P22\", \"Geschwister\": \"P25\", \"zur Trennung gekommen\": \"P582\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) AS num_children\nWHERE {\n  ?p1 wdt:P2599.\n  ?p2 wdt:P228899.\n  ?p1 wdt:P26 ?p2.\n  ?p1 wdt:P22 ?p2.\n  ?p1 wdt:P25 ?p2.\n  ?p1 wdt:P582 ?p2.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"de\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"fr\". }\n}\nGROUP BY ?p1 ?p2\nHAVING wikibase:label(?p1) = \"Paul McCartney\" AND wikibase:label(?p2) = \"Linda McCartney\"\n```"
    },
    {
        "question": "Wie viele Tiere gibt es insgesamt im chinesischen Tierkreis?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?animal) AS ?result) WHERE {?animal wdt:P31 wd:Q79226802}",
        "generated_sparql": "SELECT COUNT(*) AS total_count\r\nWHERE {\r\n  ?s wdt:P31 wd:Q79226802 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele Tiere gibt es insgesamt im chinesischen Tierkreis?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"chinesischer Tierkreis\": \"Q79226802\"}, \"beziehungen\": {\"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS total_count\r\nWHERE {\r\n  ?s wdt:P31 wd:Q79226802 .\r\n}\r\n```"
    },
    {
        "question": "Wie viele St\u00e4dte sind Teil des Perlflussdeltas?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?city) AS ?result) WHERE {wd:Q1144286 wdt:P527 ?city. ?city wdt:P31/wdt:P279* wd:Q515.}",
        "generated_sparql": "SELECT COUNT(*) AS count\r\nWHERE {\r\n  ?s wdt:P527 wd:Q1144286 .\r\n  ?s wdt:P31 wd:Q1144286 .\r\n  ?s wdt:P279 ?p .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele St\u00e4dte sind Teil des Perlflussdeltas?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Perlflussdelta\": \"Q1144286\"}, \"beziehungen\": {\"Teil von\": \"P527\", \"Instanz von\": \"P31\", \"liegt in\": \"P279\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS count\r\nWHERE {\r\n  ?s wdt:P527 wd:Q1144286 .\r\n  ?s wdt:P31 wd:Q1144286 .\r\n  ?s wdt:P279 ?p .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nGROUP BY ?s\r\nHAVING count > 0\r\n```"
    },
    {
        "question": "Wie viele Stadtstaaten gibt es aktuell auf der Welt?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?cs) AS ?result) WHERE {?cs wdt:P31 wd:Q133442}",
        "generated_sparql": "SELECT COUNT(*) AS count\r\nWHERE {\r\n  ?s wdt:P31 wd:Q133442\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele Stadtstaaten gibt es aktuell auf der Welt?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Stadtstaat\": \"Q133442\"}, \"beziehungen\": {\"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS count\r\nWHERE {\r\n  ?s wdt:P31 wd:Q133442\r\n}\r\n```"
    },
    {
        "question": "Wieviele Unternehmen hat Steve Jobs gegr\u00fcndet?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?company) AS ?result) WHERE {?company wdt:P112 wd:Q19837; wdt:P31/wdt:P279* wd:Q4830453}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?o) WHERE {\n  ?o wdt:P112 ?p.\n  ?o wdt:P31 wd:Q4830453.\n  ?o wdt:P279 wd:Q19837.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wieviele Unternehmen hat Steve Jobs gegr\u00fcndet?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Steve Jobs\": \"Q19837\", \"Unternehmen\": \"Q4830453\"}, \"beziehungen\": {\"Gr\u00fcnder\": \"P112\", \"Instanz von\": \"P31\", \"Unternehmen\": \"P279\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(DISTINCT ?o) WHERE {\n  ?o wdt:P112 ?p.\n  ?o wdt:P31 wd:Q4830453.\n  ?o wdt:P279 wd:Q19837.\n}\n```"
    },
    {
        "question": "Wie viele Staaten haben einen Demokratieindex gr\u00f6\u00dfer als 7 und haben Linksverkehr?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?country) AS ?result) WHERE {?country wdt:P31 wd:Q6256; wdt:P8328 ?ind; wdt:P1622 wd:Q13196750 FILTER(?ind > 7)}",
        "generated_sparql": "SELECT COUNT(*) AS num_countries\r\nWHERE {\r\n  ?s wdt:P31 wd:Q6256. # Staaten\r\n  ?s wdt:P8328 ?d. # Demokratieindex\r\n  ?d > 7. # Demokratieindex > 7\r\n  ?s wdt:P1622 ?t. # Verkehrsrecht\r\n  ?t = \"Q13196750\". # Linksverkehr\r\n}\r\nGROUP BY ?s",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele Staaten haben einen Demokratieindex gr\u00f6\u00dfer als 7 und haben Linksverkehr?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Staat\": \"Q6256\", \"Linksverkehr\": \"Q13196750\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"Demokratieindex\": \"P8328\", \"Verkehrsrecht\": \"P1622\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_countries\r\nWHERE {\r\n  ?s wdt:P31 wd:Q6256. # Staaten\r\n  ?s wdt:P8328 ?d. # Demokratieindex\r\n  ?d > 7. # Demokratieindex > 7\r\n  ?s wdt:P1622 ?t. # Verkehrsrecht\r\n  ?t = \"Q13196750\". # Linksverkehr\r\n}\r\nGROUP BY ?s\r\n```"
    },
    {
        "question": "Wieviele Staaten waren nie Mitglied der UN?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?country) AS ?result) WHERE {?country wdt:P31 wd:Q6256. FILTER(NOT EXISTS{?country p:P463/ps:P463 wd:Q1065})}",
        "generated_sparql": "SELECT COUNT(*) AS count\r\nWHERE {\r\n  ?s wdt:P463 wd:Q1065 .\r\n  ?s wdt:P31 wd:Q6256 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wieviele Staaten waren nie Mitglied der UN?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Vatikanstadt\": \"Q6256\", \"Vereinte Nationen\": \"Q1065\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"Mitgliedstaat\": \"P463\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS count\r\nWHERE {\r\n  ?s wdt:P463 wd:Q1065 .\r\n  ?s wdt:P31 wd:Q6256 .\r\n}\r\n```"
    },
    {
        "question": "Wieviele L\u00e4nder liegen auf dem Kontinent S\u00fcdamerika?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?country) AS ?result) WHERE {?country wdt:P31 wd:Q6256; wdt:P30 wd:Q18}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?country) AS numCountries\r\nWHERE {\r\n  ?country wdt:P31 wd:Q18;\r\n  ?country wdt:P30 wd:Q6256;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wieviele L\u00e4nder liegen auf dem Kontinent S\u00fcdamerika?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"S\u00fcdamerika\": \"Q18\", \"Kontinent\": \"Q6256\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"auf dem Kontinent\": \"P30\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?country) AS numCountries\r\nWHERE {\r\n  ?country wdt:P31 wd:Q18;\r\n  ?country wdt:P30 wd:Q6256;\r\n}\r\n```"
    },
    {
        "question": "Wieviele L\u00e4nder haben Berge, deren Gipfel mehr als 2000m \u00fcber dem Meeresspiegel liegen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?country) AS ?result) WHERE {?mountain wdt:P31/wdt:P279* wd:Q8502; p:P2044/psn:P2044/wikibase:quantityAmount ?height; wdt:P17 ?country. FILTER(?height > 2000)}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?country) AS num_countries\r\nWHERE {\r\n  ?country wdt:P279 wd:Q8502. # L\u00e4nder\r\n  ?country wdt:P2044 ?height. # H\u00f6he\r\n  ?height > 2000. # Gipfel \u00fcber 2000m\r\n  ?country wdt:P17 ?mountain. # Berge\r\n}\r\nGROUP BY ?country\r\nHAVING COUNT(DISTINCT ?mountain) > 0",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wieviele L\u00e4nder haben Berge, deren Gipfel mehr als 2000m \u00fcber dem Meeresspiegel liegen?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Berg\": \"Q8502\"}, \"beziehungen\": {\"H\u00f6he\": \"P2044\", \"Teil von\": \"P279\", \"Instanz von\": \"P31\", \"in\": \"P17\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?country) AS num_countries\r\nWHERE {\r\n  ?country wdt:P279 wd:Q8502. # L\u00e4nder\r\n  ?country wdt:P2044 ?height. # H\u00f6he\r\n  ?height > 2000. # Gipfel \u00fcber 2000m\r\n  ?country wdt:P17 ?mountain. # Berge\r\n}\r\nGROUP BY ?country\r\nHAVING COUNT(DISTINCT ?mountain) > 0\r\n```"
    },
    {
        "question": "Wie viele fiktive Drachen gibt es in Game of Thrones?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?dragon) AS ?result) WHERE {?dragon wdt:P31/wdt:P279* wd:Q30170627; wdt:P1441 wd:Q23572}",
        "generated_sparql": "SELECT COUNT(*) AS count\r\nWHERE {\r\n  ?s wdt:P31 wd:Q30170627 . # Game of Thrones\r\n  ?s wdt:P279 wd:Q23572 . # Drache\r\n  FILTER(CONTAINS(str(?s), \"fiktiv\"))\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele fiktive Drachen gibt es in Game of Thrones?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Game of Thrones\": \"Q30170627\", \"Drache\": \"Q23572\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"Unterklasse von\": \"P279\", \"fiktiv\": \"P1441\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS count\r\nWHERE {\r\n  ?s wdt:P31 wd:Q30170627 . # Game of Thrones\r\n  ?s wdt:P279 wd:Q23572 . # Drache\r\n  FILTER(CONTAINS(str(?s), \"fiktiv\"))\r\n}\r\n```"
    },
    {
        "question": "Wie viele Emmy Awards hat die TV-Serie Game of Thrones gewonnen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?emmy) AS ?result) WHERE {wd:Q23572 wdt:P166 ?emmy. ?emmy wdt:P361/wdt:P279 wd:Q123737}",
        "generated_sparql": "SELECT COUNT(*) AS won_emmy_awards\nWHERE {\n  ?s wd:P361 wd:Q23572.\n  ?s wd:P166 ?a.\n  ?a wd:P279 ?n.\n  FILTER(CONTAINS(?n, \"Emmy Award\"))\n}\nGROUP BY ?s",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele Emmy Awards hat die TV-Serie Game of Thrones gewonnen?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Game of Thrones\": \"Q23572\"}, \"beziehungen\": {\"gewonnen\": \"P166\", \"Auszeichnung\": \"P279\", \"Kategorie\": \"P361\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) AS won_emmy_awards\nWHERE {\n  ?s wd:P361 wd:Q23572.\n  ?s wd:P166 ?a.\n  ?a wd:P279 ?n.\n  FILTER(CONTAINS(?n, \"Emmy Award\"))\n}\nGROUP BY ?s\n```"
    },
    {
        "question": "Wieviele Filme orientieren sich am originalen \"Ghost in the Shell\"-Manga?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?film) AS ?result) WHERE {wd:Q92582 wdt:P4969 ?film. ?film wdt:P31/wdt:P279* wd:Q11424}",
        "generated_sparql": "SELECT COUNT(*) AS count\r\nWHERE {\r\n  ?film wdt:P4969 wd:Q92582 .\r\n  ?film wdt:P31 wd:Q11424 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wieviele Filme orientieren sich am originalen \"Ghost in the Shell\"-Manga?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Ghost in the Shell\": \"Q92582\", \"Manga\": \"Q11424\"}, \"beziehungen\": {\"basierend auf\": \"P4969\", \"Instanz von\": \"P31\", \"Teil von\": \"P279\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS count\r\nWHERE {\r\n  ?film wdt:P4969 wd:Q92582 .\r\n  ?film wdt:P31 wd:Q11424 .\r\n}\r\n```"
    },
    {
        "question": "Wie viele franz\u00f6sische K\u00f6nige sind nicht auf nat\u00fcrliche Weise gestorben?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?king) AS ?result) WHERE {?king wdt:P39 wd:Q18384454. MINUS{?king wdt:P1196 wd:Q3739104}}",
        "generated_sparql": "SELECT COUNT(*) AS count\r\nWHERE {\r\n  ?s wdt:P39 wd:Q142.\r\n  ?s wdt:P1196 wd:Q3739104.\r\n  ?s wdt:P1196 wd:Q18384454.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele franz\u00f6sische K\u00f6nige sind nicht auf nat\u00fcrliche Weise gestorben?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Frankreich\": \"Q142\", \"K\u00f6nig\": \"Q18384454\", \"nat\u00fcrlicher Tod\": \"Q3739104\"}, \"beziehungen\": {\"Todesursache\": \"P1196\", \"Position\": \"P39\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS count\r\nWHERE {\r\n  ?s wdt:P39 wd:Q142.\r\n  ?s wdt:P1196 wd:Q3739104.\r\n  ?s wdt:P1196 wd:Q18384454.\r\n}\r\n```"
    },
    {
        "question": "Wieviele Vornamen hat Queen Elizabeth II?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?names) AS ?result) WHERE {wd:Q9682 p:P735/ps:P735 ?names}",
        "generated_sparql": "SELECT COUNT(*) AS num_names\r\nWHERE {\r\n  ?person wdt:P735 ?name\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wieviele Vornamen hat Queen Elizabeth II?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Queen Elizabeth II\": \"Q9682\"}, \"beziehungen\": {\"Vorname\": \"P735\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_names\r\nWHERE {\r\n  ?person wdt:P735 ?name\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n  ?person wd:Q9682\r\n}\r\nGROUP BY ?name\r\n```"
    },
    {
        "question": "Wieviele unterschiedliche B\u00fcrgermeisterinnen hatte Hamburg?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?fm) AS ?result) WHERE {wd:Q1055 p:P6/ps:P6 ?fm. ?fm wdt:P21 wd:Q6581072}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?b) AS num_burgermeisterinnen\r\nWHERE {\r\n  ?b wdt:P6 wd:Q1055 .\r\n  ?b wdt:P21 wd:Q6581072 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wieviele unterschiedliche B\u00fcrgermeisterinnen hatte Hamburg?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Hamburg\": \"Q1055\", \"weiblich\": \"Q6581072\"}, \"beziehungen\": {\"B\u00fcrgermeister\": \"P6\", \"Geschlecht\": \"P21\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?b) AS num_burgermeisterinnen\r\nWHERE {\r\n  ?b wdt:P6 wd:Q1055 .\r\n  ?b wdt:P21 wd:Q6581072 .\r\n}\r\n```"
    },
    {
        "question": "Wieviele Staatsoberh\u00e4upter hat der Iran?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?hos) AS ?result) WHERE {wd:Q794 p:P35/ps:P35 ?hos.}",
        "generated_sparql": "SELECT COUNT(*) AS count\r\nWHERE {\r\n  ?s wdt:P35 wd:Q794\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wieviele Staatsoberh\u00e4upter hat der Iran?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Iran\": \"Q794\"}, \"beziehungen\": {\"Staatsoberhaupt\": \"P35\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS count\r\nWHERE {\r\n  ?s wdt:P35 wd:Q794\r\n}\r\n```"
    },
    {
        "question": "Wieviele wissenschaftliche Artikel behandeln ImageNet?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?art) AS ?result) WHERE {?art wdt:P31 wd:Q13442814. ?art wdt:P921 wd:Q24901201.}",
        "generated_sparql": "SELECT COUNT(*) AS artikel_count\r\nWHERE {\r\n  ?s wd:P31 wd:Q13442814 ; # Instanz von ImageNet\r\n  ?s wd:P921 ?a. ; # Behandelt einen Artikel\r\n  ?a wd:P921 ?b. ; # Behandelt ein Artikel\r\n}\r\nGROUP BY ?s\r\nHAVING COUNT(*) > 0",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wieviele wissenschaftliche Artikel behandeln ImageNet?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"ImageNet\": \"Q13442814\", \"wissenschaftlicher Artikel\": \"Q24901201\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"behandelt\": \"P921\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS artikel_count\r\nWHERE {\r\n  ?s wd:P31 wd:Q13442814 ; # Instanz von ImageNet\r\n  ?s wd:P921 ?a. ; # Behandelt einen Artikel\r\n  ?a wd:P921 ?b. ; # Behandelt ein Artikel\r\n}\r\nGROUP BY ?s\r\nHAVING COUNT(*) > 0\r\n```"
    },
    {
        "question": "Wie viele Einwohner hat der Geburtsort von Christiano Ronaldo?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q11571 wdt:P19/wdt:P1082 ?result}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?x) WHERE {\n  ?x wdt:P19 wd:Q11571.\n  ?x wdt:P1082 ?population.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele Einwohner hat der Geburtsort von Christiano Ronaldo?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Christiano Ronaldo\": \"Q11571\"}, \"beziehungen\": {\"Geburtsort\": \"P19\", \"Einwohner\": \"P1082\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(DISTINCT ?x) WHERE {\n  ?x wdt:P19 wd:Q11571.\n  ?x wdt:P1082 ?population.\n}\n```"
    },
    {
        "question": "Wieviele japanische Autor:innen erhielten den Nobelpreis?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?writer) AS ?result) WHERE {?writer wdt:P166/wdt:P279 wd:Q7191. ?writer wdt:P27 wd:Q17; wdt:P106 wd:Q36180}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?x) AS japanische_nobelpreis_tr\u00e4ger\nWHERE {\n  ?x wdt:P27 wd:Q17.\n  ?x wdt:P106 wd:Q36180.\n  ?x wdt:P279 wd:Q7191.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wieviele japanische Autor:innen erhielten den Nobelpreis?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Japan\": \"Q17\", \"Nobelpreis\": \"Q7191\", \"Schriftsteller\": \"Q36180\"}, \"beziehungen\": {\"erhielt\": \"P166\", \"Tr\u00e4ger\": \"P279\", \"Staatsangeh\u00f6rigkeit\": \"P27\", \"Beruf\": \"P106\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(DISTINCT ?x) AS japanische_nobelpreis_tr\u00e4ger\nWHERE {\n  ?x wdt:P27 wd:Q17.\n  ?x wdt:P106 wd:Q36180.\n  ?x wdt:P279 wd:Q7191.\n}\n```"
    },
    {
        "question": "Wie viele Sprachen sind in Indien weit verbreitet?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?lan) AS ?result) WHERE {wd:Q668 wdt:P2936 ?lan}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?s) AS sprachen_in_indien\r\nWHERE {\r\n  ?s wdt:P2936 wd:Q668;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele Sprachen sind in Indien weit verbreitet?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Indien\": \"Q668\"}, \"beziehungen\": {\"offizielle Sprache\": \"P2936\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?s) AS sprachen_in_indien\r\nWHERE {\r\n  ?s wdt:P2936 wd:Q668;\r\n}\r\n```"
    },
    {
        "question": "Wie viele verschiedene Farben kann Wasser annehmen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?color) AS ?result) WHERE {wd:Q283 wdt:P462 ?color}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?farbe) AS num_farben\r\nWHERE {\r\n  ?wasser wdt:P462 ?farbe .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele verschiedene Farben kann Wasser annehmen?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Wasser\": \"Q283\"}, \"beziehungen\": {\"Farbe\": \"P462\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?farbe) AS num_farben\r\nWHERE {\r\n  ?wasser wdt:P462 ?farbe .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nGROUP BY ?wasser\r\nHAVING ?wasser = \"Q283\"\r\n```"
    },
    {
        "question": "An wie vielen Orten hat Georges Braque gearbeitet?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?loc) AS ?result) WHERE {wd:Q153793 wdt:P937 ?loc}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?s) AS num_locations\r\nWHERE {\r\n  ?s wdt:P937 wd:Q153793.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'An wie vielen Orten hat Georges Braque gearbeitet?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Georges Braque\": \"Q153793\"}, \"beziehungen\": {\"Arbeitsort\": \"P937\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?s) AS num_locations\r\nWHERE {\r\n  ?s wdt:P937 wd:Q153793.\r\n}\r\n```"
    },
    {
        "question": "\u00dcber wieviele Monate erstreckt sich der Winter in Deutschland?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?mon) AS ?result) WHERE {wd:Q1311 p:P2922 ?ms. ?ms ps:P2922 ?mon; pq:P3005/wdt:P527 ?part. wd:Q183 wdt:P361* ?part.}",
        "generated_sparql": "SELECT COUNT(MONTH(P3005)) AS monate\nWHERE {\n  ?s wdt:P527 wd:Q183.\n  ?s wdt:P361 wd:Q1311.\n  ?s wdt:P2922 ?m.\n  ?s wdt:P3005 ?a.\n  FILTER(MONTH(?a) = ?m)\n}\nGROUP BY ?m",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: '\u00dcber wieviele Monate erstreckt sich der Winter in Deutschland?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Deutschland\": \"Q183\", \"Winter\": \"Q1311\"}, \"beziehungen\": {\"Teil von\": \"P527\", \"hat Teil\": \"P361\", \"Monat\": \"P2922\", \"Anfangsdatum\": \"P3005\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(MONTH(P3005)) AS monate\nWHERE {\n  ?s wdt:P527 wd:Q183.\n  ?s wdt:P361 wd:Q1311.\n  ?s wdt:P2922 ?m.\n  ?s wdt:P3005 ?a.\n  FILTER(MONTH(?a) = ?m)\n}\nGROUP BY ?m\n```"
    },
    {
        "question": "Wieviele Filme hat die Scream-Reihe?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?film) AS ?result) WHERE {?film wdt:P31 wd:Q11424; wdt:P179 wd:Q388659}",
        "generated_sparql": "SELECT COUNT(*) AS num_films\r\nWHERE {\r\n  ?film wdt:P31 wd:Q11424;\r\n  ?film wdt:P179 wd:Q388659;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wieviele Filme hat die Scream-Reihe?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Scream-Reihe\": \"Q11424\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"Titel\": \"P179\", \"Scream\": \"Q388659\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_films\r\nWHERE {\r\n  ?film wdt:P31 wd:Q11424;\r\n  ?film wdt:P179 wd:Q388659;\r\n}\r\n```"
    },
    {
        "question": "Bei wie vielen Filmen hat James Cameron vor 2010 Regie gef\u00fchrt?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?film) AS ?result) WHERE {?film wdt:P31 wd:Q11424; wdt:P57 wd:Q42574; wdt:P577 ?date. FILTER(YEAR(?date)<2010)}",
        "generated_sparql": "SELECT COUNT(*) AS num_films\r\nWHERE {\r\n  ?film wdt:P31 wd:Q11424. # Film\r\n  ?film wdt:P57 wd:Q42574. # James Cameron\r\n  ?film wdt:P577 ?start_time. # Startzeit\r\n  FILTER(?start_time < \"2010-01-01T00:00:00Z\"). # Only films released before 2010\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Bei wie vielen Filmen hat James Cameron vor 2010 Regie gef\u00fchrt?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"James Cameron\": \"Q42574\", \"Film\": \"Q11424\"}, \"beziehungen\": {\"Regisseur\": \"P57\", \"Instanz von\": \"P31\", \"Startzeit\": \"P577\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_films\r\nWHERE {\r\n  ?film wdt:P31 wd:Q11424. # Film\r\n  ?film wdt:P57 wd:Q42574. # James Cameron\r\n  ?film wdt:P577 ?start_time. # Startzeit\r\n  FILTER(?start_time < \"2010-01-01T00:00:00Z\"). # Only films released before 2010\r\n}\r\n```"
    },
    {
        "question": "Bei wievielen Filmen f\u00fchrte Akira Kurosawa Regie? ",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?film) AS ?result) WHERE {?film wdt:P31 wd:Q11424; wdt:P57 wd:Q8006}",
        "generated_sparql": "SELECT COUNT(*) AS num_films\nWHERE {\n  ?film wdt:P31 wd:Q11424.\n  ?film wdt:P57 ?regisseur.\n  ?regisseur wdt:P31 wd:Q8006.\n}\nGROUP BY ?film",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Bei wievielen Filmen f\u00fchrte Akira Kurosawa Regie? ' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Akira Kurosawa\": \"Q8006\", \"Film\": \"Q11424\"}, \"beziehungen\": {\"Regisseur\": \"P57\", \"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) AS num_films\nWHERE {\n  ?film wdt:P31 wd:Q11424.\n  ?film wdt:P57 ?regisseur.\n  ?regisseur wdt:P31 wd:Q8006.\n}\nGROUP BY ?film\n```"
    },
    {
        "question": "Wie viele Tonleitern gibt es?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?scale) AS ?result) WHERE {?scale wdt:P31 wd:Q179651}",
        "generated_sparql": "SELECT COUNT(*) AS TonleiterCount\r\nWHERE {\r\n  ?s wdt:P31 wd:Q179651\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele Tonleitern gibt es?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Tonleiter\": \"Q179651\"}, \"beziehungen\": {\"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS TonleiterCount\r\nWHERE {\r\n  ?s wdt:P31 wd:Q179651\r\n}\r\n```"
    },
    {
        "question": "Wie viele Feiertage hat der Freistaat Bayern in einem Jahr?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?hol) AS ?result) WHERE {wd:Q980 wdt:P832 ?hol}",
        "generated_sparql": "SELECT COUNT(*) AS num_holidays\r\nWHERE {\r\n  ?s wdt:P832 ?o\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele Feiertage hat der Freistaat Bayern in einem Jahr?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Freistaat Bayern\": \"Q980\"}, \"beziehungen\": {\"Feiertag\": \"P832\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_holidays\r\nWHERE {\r\n  ?s wdt:P832 ?o\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(CONTAINS(?o, \"Freistaat Bayern\"))\r\n}\r\n```"
    },
    {
        "question": "Wie viele literarische Werke hat der Autor von Das Bildnis des Dorian Gray ausserdem geschrieben?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?novel) AS ?result) WHERE {wd:Q82464 wdt:P50 ?aut. ?novel wdt:P31 wd:Q7725634; wdt:P50 ?aut FILTER(?novel != wd:Q82464)}",
        "generated_sparql": "SELECT COUNT(*) AS num_works\r\nWHERE {\r\n  ?work wdt:P31 wd:Q82464;\r\n  ?work wdt:P50 wd:Q7725634;\r\n}\r\nGROUP BY ?work\r\nHAVING ?work != Das Bildnis des Dorian Gray",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele literarische Werke hat der Autor von Das Bildnis des Dorian Gray ausserdem geschrieben?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Das Bildnis des Dorian Gray\": \"Q82464\", \"Oscar Wilde\": \"Q7725634\"}, \"beziehungen\": {\"Autor\": \"P50\", \"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_works\r\nWHERE {\r\n  ?work wdt:P31 wd:Q82464;\r\n  ?work wdt:P50 wd:Q7725634;\r\n}\r\nGROUP BY ?work\r\nHAVING ?work != Das Bildnis des Dorian Gray\r\n```"
    },
    {
        "question": "Wie viele literarische Werke hat Mark Twain in seinem Leben geschrieben?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?novel) AS ?result) WHERE {?novel wdt:P31 wd:Q7725634; wdt:P50 wd:Q7245}",
        "generated_sparql": "SELECT COUNT(*) AS num_works\r\nWHERE {\r\n  ?work wdt:P31 wd:Q7245;\r\n  ?work wdt:P50 wd:Q7725634;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele literarische Werke hat Mark Twain in seinem Leben geschrieben?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Roman\": \"Q7245\", \"Mark Twain\": \"Q7725634\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"Autor\": \"P50\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_works\r\nWHERE {\r\n  ?work wdt:P31 wd:Q7245;\r\n  ?work wdt:P50 wd:Q7725634;\r\n}\r\n```"
    },
    {
        "question": "Wie viele Berufe hatte Mark Twain?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?occ) AS ?result) WHERE {wd:Q7245 wdt:P106 ?occ}",
        "generated_sparql": "SELECT COUNT(*) AS num_berufe\r\nWHERE {\r\n  ?s wdt:P106 wd:Q7245;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele Berufe hatte Mark Twain?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Mark Twain\": \"Q7245\"}, \"beziehungen\": {\"Beruf\": \"P106\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_berufe\r\nWHERE {\r\n  ?s wdt:P106 wd:Q7245;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nGROUP BY ?s\r\nHAVING ?s = \"Mark Twain\"\r\n```"
    },
    {
        "question": "Wie viele der Spiderman Darsteller sind Staatsangeh\u00f6rige des Vereinigten K\u00f6nigreichs?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?per) AS ?result) WHERE {?per wdt:P27 wd:Q145. wd:Q79037 p:P175/ps:P175 ?per}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?x) AS count\nWHERE {\n  ?x wdt:P175 wd:Q79037.\n  ?x wdt:P27 wd:Q145.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele der Spiderman Darsteller sind Staatsangeh\u00f6rige des Vereinigten K\u00f6nigreichs?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Vereinigtes K\u00f6nigreich\": \"Q145\", \"Spider-Man\": \"Q79037\"}, \"beziehungen\": {\"Staatsangeh\u00f6rigkeit\": \"P27\", \"Darsteller\": \"P175\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(DISTINCT ?x) AS count\nWHERE {\n  ?x wdt:P175 wd:Q79037.\n  ?x wdt:P27 wd:Q145.\n}\n```"
    },
    {
        "question": "Wie viele offzielle Sprachen haben die Vereinigten Staaten von Amerika?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?lan) AS ?result) WHERE {wd:Q30 p:P37/ps:P37 ?lan}",
        "generated_sparql": "SELECT COUNT(*) AS num_official_languages\r\nWHERE {\r\n  ?country wdt:P37 wd:Q30;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele offzielle Sprachen haben die Vereinigten Staaten von Amerika?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Vereinigte Staaten von Amerika\": \"Q30\"}, \"beziehungen\": {\"offizielle Sprache\": \"P37\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_official_languages\r\nWHERE {\r\n  ?country wdt:P37 wd:Q30;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\n```"
    },
    {
        "question": "Wie viele offizielle Sprachen hat Pakistan?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?lan) AS ?result) WHERE {wd:Q843 p:P37/ps:P37 ?lan}",
        "generated_sparql": "SELECT COUNT(*) AS count\r\nWHERE {\r\n  ?s wdt:P37 wd:Q843 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele offizielle Sprachen hat Pakistan?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Pakistan\": \"Q843\"}, \"beziehungen\": {\"offizielle Sprache\": \"P37\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS count\r\nWHERE {\r\n  ?s wdt:P37 wd:Q843 .\r\n}\r\n```"
    },
    {
        "question": "Wieviele Oscars haben die Filme, bei denen Hayao Miyazaki Regie gef\u00fchrt hat, insgesamt gewonnen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?aw) AS ?result) WHERE {?film wdt:P57 wd:Q55400; wdt:P166 ?aw. ?aw  wdt:P31 wd:Q19020}",
        "generated_sparql": "SELECT COUNT(*) AS total_oscars\r\nWHERE {\r\n  ?film wdt:P31 wd:Q19020. # Film\r\n  ?film wdt:P57 ?regisseur. # Regisseur\r\n  ?regisseur wdt:P57 ?film. # Regisseur\r\n  ?regisseur wdt:P31 wd:Q55400. # Hayao Miyazaki\r\n  ?film wdt:P166 ?regisseur. # Gewinner\r\n}\r\nGROUP BY ?film\r\nHAVING ?film wdt:P31 wd:Q19020",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wieviele Oscars haben die Filme, bei denen Hayao Miyazaki Regie gef\u00fchrt hat, insgesamt gewonnen?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Hayao Miyazaki\": \"Q55400\", \"Oscar\": \"Q19020\"}, \"beziehungen\": {\"Regisseur\": \"P57\", \"Gewinner\": \"P166\", \"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS total_oscars\r\nWHERE {\r\n  ?film wdt:P31 wd:Q19020. # Film\r\n  ?film wdt:P57 ?regisseur. # Regisseur\r\n  ?regisseur wdt:P57 ?film. # Regisseur\r\n  ?regisseur wdt:P31 wd:Q55400. # Hayao Miyazaki\r\n  ?film wdt:P166 ?regisseur. # Gewinner\r\n}\r\nGROUP BY ?film\r\nHAVING ?film wdt:P31 wd:Q19020\r\n```"
    },
    {
        "question": "Wieviele Gem\u00e4lde von Pablo Picasso waren jemals in einem Museum?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?painting) AS ?result) WHERE {?painting wdt:P31 wd:Q3305213; wdt:P170 wd:Q5593; wdt:P276 ?loc. ?loc wdt:P31/wdt:P279* wd:Q33506}",
        "generated_sparql": "SELECT COUNT(*) AS num_paintings\r\nWHERE {\r\n  ?p :P31 ?m .\r\n  ?p :P170 \"Q5593\".\r\n  ?m :P276 ?museum .\r\n  ?p :P279 ?museum .\r\n}\r\nGROUP BY ?museum\r\nHAVING COUNT(*) > 0",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wieviele Gem\u00e4lde von Pablo Picasso waren jemals in einem Museum?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Pablo Picasso\": \"Q5593\", \"Museum\": \"Q33506\", \"Gem\u00e4lde\": \"Q3305213\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"Sch\u00f6pfer\": \"P170\", \"Ort\": \"P276\", \"Teil von\": \"P279\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_paintings\r\nWHERE {\r\n  ?p :P31 ?m .\r\n  ?p :P170 \"Q5593\".\r\n  ?m :P276 ?museum .\r\n  ?p :P279 ?museum .\r\n}\r\nGROUP BY ?museum\r\nHAVING COUNT(*) > 0\r\n```"
    },
    {
        "question": "Wieviele Personen k\u00f6nnen h\u00f6chstens gleichzeitig \"Mensch \u00e4rgere dich nicht\" spielen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q545129 wdt:P1873 ?result}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?p) AS max_players\r\nWHERE {\r\n  ?p wdt:P1873 ?g. \r\n  ?g wdt:P31 wd:Q545129. \r\n}\r\nGROUP BY ?p\r\nHAVING COUNT(DISTINCT ?p) = 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wieviele Personen k\u00f6nnen h\u00f6chstens gleichzeitig \"Mensch \u00e4rgere dich nicht\" spielen?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Mensch \u00e4rgere dich nicht\": \"Q545129\"}, \"beziehungen\": {\"Anzahl der Spieler\": \"P1873\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?p) AS max_players\r\nWHERE {\r\n  ?p wdt:P1873 ?g. \r\n  ?g wdt:P31 wd:Q545129. \r\n}\r\nGROUP BY ?p\r\nHAVING COUNT(DISTINCT ?p) = 1\r\n```"
    },
    {
        "question": "Wieviele Menschen hat Oscar Pistorius umgebracht?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?people) AS ?result) WHERE {?people wdt:P31 wd:Q5;wdt:P157 wd:Q201377}",
        "generated_sparql": "SELECT COUNT(*) AS num_victims\r\nWHERE {\r\n  ?victim wdt:P31 wd:Q5;\r\n  ?victim wdt:P157 wd:Q201377;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wieviele Menschen hat Oscar Pistorius umgebracht?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Mensch\": \"Q5\", \"Oscar Pistorius\": \"Q201377\"}, \"beziehungen\": {\"T\u00e4ter\": \"P157\", \"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_victims\r\nWHERE {\r\n  ?victim wdt:P31 wd:Q5;\r\n  ?victim wdt:P157 wd:Q201377;\r\n}\r\n```"
    },
    {
        "question": "Wie viele Menschen starben nach der h\u00f6chsten Sch\u00e4tzung durch den Gro\u00dfen Sprung nach vorn?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (MAX(?d) AS ?result) WHERE {wd:Q58715 wdt:P1542/wdt:P1120 ?d}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?x) AS Todesopferzahl\r\nWHERE {\r\n  ?x wdt:P1120 wd:Q58715;\r\n  ?x wdt:P1542 ?Sch\u00e4tzung;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele Menschen starben nach der h\u00f6chsten Sch\u00e4tzung durch den Gro\u00dfen Sprung nach vorn?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Gro\u00dfer Sprung nach vorn\": \"Q58715\"}, \"beziehungen\": {\"Todesopferzahl\": \"P1120\", \"Sch\u00e4tzung\": \"P1542\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?x) AS Todesopferzahl\r\nWHERE {\r\n  ?x wdt:P1120 wd:Q58715;\r\n  ?x wdt:P1542 ?Sch\u00e4tzung;\r\n}\r\n```"
    },
    {
        "question": "Wie viele Personen haben den Literatur-Nobelpreis seit seiner Einf\u00fchrung gewonnen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?people) AS ?result) WHERE {?people wdt:P31 wd:Q5; wdt:P166 wd:Q37922}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?p) AS num_winners\r\nWHERE {\r\n  ?p ?a ?b\r\n  WHERE {\r\n    ?a wdt:P31. # Instanz von\r\n    ?b wdt:P166. # ausgezeichnet als\r\n    ?b wd:Q37922. # Literatur-Nobelpreis\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele Personen haben den Literatur-Nobelpreis seit seiner Einf\u00fchrung gewonnen?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Literatur-Nobelpreis\": \"Q37922\", \"Mensch\": \"Q5\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"ausgezeichnet als\": \"P166\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?p) AS num_winners\r\nWHERE {\r\n  ?p ?a ?b\r\n  WHERE {\r\n    ?a wdt:P31. # Instanz von\r\n    ?b wdt:P166. # ausgezeichnet als\r\n    ?b wd:Q37922. # Literatur-Nobelpreis\r\n  }\r\n}\r\n```"
    },
    {
        "question": "Wie viele Menschen leben in St\u00e4dten in der N\u00e4he des Nil?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (SUM (?pop) AS ?result) WHERE {?city wdt:P31 wd:Q515; wdt:P206 wd:Q3392; wdt:P1082 ?pop}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?s) AS population\r\nWHERE {\r\n  ?s wdt:P1082 ?population. \r\n  ?s wdt:P31 wd:Q515. \r\n  ?s wdt:P206 ?height. \r\n  FILTER(?height < 10000000) \r\n  FILTER(?height > 0) \r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele Menschen leben in St\u00e4dten in der N\u00e4he des Nil?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Nil\": \"Q3392\", \"Stadt\": \"Q515\"}, \"beziehungen\": {\"gelegen in\": \"P31\", \"H\u00f6he \u00fcber dem Meeresspiegel\": \"P206\", \"Anzahl der Bewohner\": \"P1082\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?s) AS population\r\nWHERE {\r\n  ?s wdt:P1082 ?population. \r\n  ?s wdt:P31 wd:Q515. \r\n  ?s wdt:P206 ?height. \r\n  FILTER(?height < 10000000) \r\n  FILTER(?height > 0) \r\n}\r\n```"
    },
    {
        "question": "Wie viele Tonklassen beschreibt der chromatische Tonleiter?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?note) AS ?result) WHERE {wd:Q202021 wdt:P527 ?note. ?note wdt:P31 wd:Q1760309}",
        "generated_sparql": "SELECT COUNT(*) AS num_ton_classes\r\nWHERE {\r\n  ?chromatischerTonleiter wdt:P527 ?tonklasse .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele Tonklassen beschreibt der chromatische Tonleiter?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"chromatischer Tonleiter\": \"Q202021\", \"Tonklasse\": \"Q1760309\"}, \"beziehungen\": {\"hat Teil\": \"P527\", \"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_ton_classes\r\nWHERE {\r\n  ?chromatischerTonleiter wdt:P527 ?tonklasse .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(CONTAINS(?chromatischerTonleiter, \"Q202021\") && CONTAINS(?tonklasse, \"Q1760309\"))\r\n}\r\n```"
    },
    {
        "question": "Wie viele Theaterst\u00fccke hat William Shakespeare im 16. Jahrhundert geschrieben?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?play) AS ?result) WHERE {?play wdt:P31 wd:Q7725634; wdt:P7937 wd:Q25379; wdt:P50 wd:Q692; wdt:P571 ?inc FILTER(YEAR(?inc) < 1600)}",
        "generated_sparql": "SELECT COUNT(*) AS num_plays\nWHERE {\n  ?play wdt:P31 wd:Q7725634.\n  ?play wdt:P7937 wd:Q25379.\n  ?play wdt:P50 wd:Q692.\n  ?play wdt:P571 ?date.\n  FILTER(YEAR(?date) >= 1500 && YEAR(?date) <= 1600)\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele Theaterst\u00fccke hat William Shakespeare im 16. Jahrhundert geschrieben?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Theaterst\u00fcck\": \"Q7725634\", \"Drama\": \"Q25379\", \"William Shakespeare\": \"Q692\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"Gattung\": \"P7937\", \"Autor\": \"P50\", \"Beginn\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) AS num_plays\nWHERE {\n  ?play wdt:P31 wd:Q7725634.\n  ?play wdt:P7937 wd:Q25379.\n  ?play wdt:P50 wd:Q692.\n  ?play wdt:P571 ?date.\n  FILTER(YEAR(?date) >= 1500 && YEAR(?date) <= 1600)\n}\n```"
    },
    {
        "question": "Wie viele Gedichte hat Allen Ginsberg ver\u00f6ffentlicht?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?poem) AS ?result) WHERE {?poem wdt:P31 wd:Q7725634; wdt:P50 wd:Q6711; wdt:P136/wdt:P279* wd:Q482}",
        "generated_sparql": "SELECT COUNT(*) AS num_poems\r\nWHERE {\r\n  ?poem wdt:P31 wd:Q482;\r\n  ?poem wdt:P50 wd:Q6711;\r\n  ?poem wdt:P136 wd:P279;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele Gedichte hat Allen Ginsberg ver\u00f6ffentlicht?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Gedicht\": \"Q482\", \"Allen Ginsberg\": \"Q6711\", \"Geschrieben von\": \"Q7725634\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"Autor\": \"P50\", \"Thematische Kategorie\": \"P136\", \"Unterkategorie\": \"P279\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_poems\r\nWHERE {\r\n  ?poem wdt:P31 wd:Q482;\r\n  ?poem wdt:P50 wd:Q6711;\r\n  ?poem wdt:P136 wd:P279;\r\n}\r\n```"
    },
    {
        "question": "Wie viele unterschiedliche politische Parteien hatten jemals Sitze im Deutschen Bundestag?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?group) AS ?result) WHERE {?group wdt:P31/wdt:P279* wd:Q7278. ?group p:P1410 ?ps. ?ps pq:P194 wd:Q154797; ps:P1410 ?seats. FILTER(?seats > 0)}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?p) ?p\r\nWHERE {\r\n  ?p wdt:P31 wd:Q7278 . # Deutsches Bundestag ist eine Instanz von Parlament\r\n  ?p wdt:P279 wd:Q7278 . # Deutsches Bundestag ist ein Teil von Parlament\r\n  ?p wdt:P1410 ?p . # Jede politische Partei ist Mitglied der politischen Partei\r\n  ?p wdt:P194 ?p . # Jede politische Partei hat Sitze im Deutschen Bundestag\r\n}\r\nGROUP BY ?p",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele unterschiedliche politische Parteien hatten jemals Sitze im Deutschen Bundestag?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Deutscher Bundestag\": \"Q7278\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"Teil von\": \"P279\", \"Mitglied der politischen Partei\": \"P1410\", \"Sitz\": \"P194\", \"Anzahl der Sitze\": \"ps\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?p) ?p\r\nWHERE {\r\n  ?p wdt:P31 wd:Q7278 . # Deutsches Bundestag ist eine Instanz von Parlament\r\n  ?p wdt:P279 wd:Q7278 . # Deutsches Bundestag ist ein Teil von Parlament\r\n  ?p wdt:P1410 ?p . # Jede politische Partei ist Mitglied der politischen Partei\r\n  ?p wdt:P194 ?p . # Jede politische Partei hat Sitze im Deutschen Bundestag\r\n}\r\nGROUP BY ?p\r\n```"
    },
    {
        "question": "Auf wievielen Positionen spielte Kobe Bryant in seinem Team?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?pos) AS ?result) WHERE {wd:Q25369 wdt:P413 ?pos}",
        "generated_sparql": "SELECT COUNT(*) AS position_count\r\nWHERE {\r\n  ?s wdt:P413 wd:Q25369.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Auf wievielen Positionen spielte Kobe Bryant in seinem Team?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Kobe Bryant\": \"Q25369\"}, \"beziehungen\": {\"Position\": \"P413\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS position_count\r\nWHERE {\r\n  ?s wdt:P413 wd:Q25369.\r\n}\r\n```"
    },
    {
        "question": "Wie viele Preise wurden von Alfred Nobel eingef\u00fchrt?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?prize) AS ?result) WHERE {wd:Q7191 wdt:P527 ?prize; wdt:P112 wd:Q23810}",
        "generated_sparql": "SELECT COUNT(*) AS num_prices\r\nWHERE {\r\n  ?p112 wdt:P112 wd:Q7191 .\r\n  ?p527 wdt:P527 wd:Q7191 .\r\n  ?p527 wdt:P527 wd:Q23810 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele Preise wurden von Alfred Nobel eingef\u00fchrt?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Alfred Nobel\": \"Q7191\"}, \"beziehungen\": {\"Gr\u00fcnder\": \"P112\", \"Preis\": \"P527\", \"Physik\": \"Q23810\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_prices\r\nWHERE {\r\n  ?p112 wdt:P112 wd:Q7191 .\r\n  ?p527 wdt:P527 wd:Q7191 .\r\n  ?p527 wdt:P527 wd:Q23810 .\r\n}\r\n```"
    },
    {
        "question": "Hat SpaceX jemals eine Weltraum-Mission durchgef\u00fchrt, bei der der Start mi\u00dfgl\u00fcckte?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {?mission wdt:P31 wd:Q2133344, wd:Q99654400; wdt:P137 wd:Q193701}",
        "generated_sparql": "SELECT ?s ?p ?o WHERE {\n  ?s wdt:P31 wd:Q99654400.\n  ?s wdt:P137 ?o.\n  FILTER(CONTAINS(str(?s), \"Q2133344\") && CONTAINS(str(?o), \"false\"))\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Hat SpaceX jemals eine Weltraum-Mission durchgef\u00fchrt, bei der der Start mi\u00dfgl\u00fcckte?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"SpaceX\": \"Q2133344\", \"Weltraum-Mission\": \"Q99654400\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"Erfolg\": \"P137\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?s ?p ?o WHERE {\n  ?s wdt:P31 wd:Q99654400.\n  ?s wdt:P137 ?o.\n  FILTER(CONTAINS(str(?s), \"Q2133344\") && CONTAINS(str(?o), \"false\"))\n}\n```"
    },
    {
        "question": "Wie viele Personen die f\u00fcr den Chemie-Nobelpreis nominiert wurden, haben ihn niemals gewonnen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?peo) AS ?result) WHERE {?peo wdt:P31 wd:Q5; wdt:P1411 wd:Q44585. FILTER(NOT EXISTS{?peo wdt:P166 wd:Q44585})}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?p) WHERE {\n  ?p wdt:P31 wd:Q44585.\n  ?p wdt:P1411 ?c.\n  FILTER(NOT EXISTS { ?c wdt:P166 ?p }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele Personen die f\u00fcr den Chemie-Nobelpreis nominiert wurden, haben ihn niemals gewonnen?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Chemie-Nobelpreis\": \"Q44585\", \"Mensch\": \"Q5\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"Nominiert f\u00fcr\": \"P1411\", \"Gewinner von\": \"P166\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(DISTINCT ?p) WHERE {\n  ?p wdt:P31 wd:Q44585.\n  ?p wdt:P1411 ?c.\n  FILTER(NOT EXISTS { ?c wdt:P166 ?p })\n}\n```"
    },
    {
        "question": "Wieviele Staffeln hat Pose?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result {wd:Q30603704 wdt:P2437 ?result}",
        "generated_sparql": "SELECT COUNT(*) AS staffeln_anzahl\r\nWHERE {\r\n  ?s wdt:P2437 wd:Q30603704 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wieviele Staffeln hat Pose?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Pose\": \"Q30603704\"}, \"beziehungen\": {\"Anzahl der Staffeln\": \"P2437\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS staffeln_anzahl\r\nWHERE {\r\n  ?s wdt:P2437 wd:Q30603704 .\r\n}\r\n```"
    },
    {
        "question": "Wieviele Sitze gibt es aktuell im Deutschen Bundestag?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {wd:Q154797 wdt:P1342 ?result}",
        "generated_sparql": "SELECT COUNT(*) AS sitze\r\nWHERE {\r\n  ?s wdt:P1342 ?o\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"de\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wieviele Sitze gibt es aktuell im Deutschen Bundestag?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Deutscher Bundestag\": \"Q154797\"}, \"beziehungen\": {\"Anzahl der Sitze\": \"P1342\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS sitze\r\nWHERE {\r\n  ?s wdt:P1342 ?o\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"de\". }\r\n  FILTER(CONTAINS(?s, \"Q154797\"))\r\n}\r\n```"
    },
    {
        "question": "Wieviele Geschwister hatte der/die Autor:in von \"Little Women\"?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?sib) AS ?result) WHERE {wd:Q523076 wdt:P50 ?aut. ?aut wdt:P3373 ?sib}",
        "generated_sparql": "SELECT COUNT(*) AS num_siblings\r\nWHERE {\r\n  ?author wdt:P50 wd:Q523076;\r\n  ?author wdt:P3373 ?sibling;\r\n}\r\nGROUP BY ?author\r\nHAVING ?author = wd:Q523076",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wieviele Geschwister hatte der/die Autor:in von \"Little Women\"?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Little Women\": \"Q523076\", \"Autor:in\": \"Q523076\"}, \"beziehungen\": {\"Geschwister\": \"P3373\", \"verfasst von\": \"P50\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_siblings\r\nWHERE {\r\n  ?author wdt:P50 wd:Q523076;\r\n  ?author wdt:P3373 ?sibling;\r\n}\r\nGROUP BY ?author\r\nHAVING ?author = wd:Q523076\r\n```"
    },
    {
        "question": "Wieviele Ski-Resorts gab es jemals in Frankreich?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?ski) AS ?result) WHERE {?ski wdt:P31 wd:Q130003; wdt:P17 wd:Q142}",
        "generated_sparql": "SELECT COUNT(*) AS count\nWHERE {\n  ?s wdt:P31 wd:Q142.\n  ?s wdt:P17 wd:Q142.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wieviele Ski-Resorts gab es jemals in Frankreich?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Frankreich\": \"Q142\", \"Ski-Resort\": \"\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"Land\": \"P17\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) AS count\nWHERE {\n  ?s wdt:P31 wd:Q142.\n  ?s wdt:P17 wd:Q142.\n}\n```"
    },
    {
        "question": "Wie viele Lieder wurden von Jay Chou komponiert aber nicht in seinen eigenen Alben ver\u00f6ffentlicht?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?song) AS ?result) WHERE {?song wdt:P31 wd:Q7366; wdt:P86 wd:Q238819; wdt:P361 ?album. ?album wdt:P31 wd:Q482994; wdt:P175 ?per FILTER(?per != wd:Q238819)}",
        "generated_sparql": "",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele Lieder wurden von Jay Chou komponiert aber nicht in seinen eigenen Alben ver\u00f6ffentlicht?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Jay Chou\": \"Q238819\", \"Lied\": \"Q7366\", \"Album\": \"Q482994\"}, \"beziehungen\": {\"Komponist\": \"P86\", \"Instanz von\": \"P31\", \"enth\u00e4lt\": \"P361\", \"Interpret\": \"P175\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_songs\r\nWHERE {\r\n  ?s ?p86 ?o .\r\n  ?s ?p31 ?a .\r\n  ?s ?p361 ?a .\r\n  ?s ?p175 ?a .\r\n  ?s ?p31 ?a .\r\n  ?s ?p361 ?a .\r\n  ?s ?p175 ?a .\r\n  ?s ?p31 ?a .\r\n  ?s ?p361 ?a .\r\n  ?s ?p175 ?a .\r\n  ?s ?p31 ?a .\r\n  ?s ?p361 ?a .\r\n  ?s ?p175 ?a .\r\n  ?s ?p31 ?a .\r\n  ?s ?p361 ?a .\r\n  ?s ?p175 ?a .\r\n  ?s ?p31 ?a .\r\n  ?s ?p361 ?a .\r\n  ?s ?p175 ?a .\r\n  ?s ?p31 ?a .\r\n  ?s ?p361 ?a .\r\n  ?s ?p175 ?a .\r\n  ?s ?p31 ?a .\r\n  ?s ?p361 ?a .\r\n  ?s ?p175 ?a .\r\n  ?s ?p31 ?a .\r\n  ?s ?p361 ?a .\r\n  ?s ?p175 ?a .\r\n  ?s ?p31 ?a .\r\n  ?s ?p361 ?a .\r\n  ?s ?p175 ?a .\r\n  ?s ?p31 ?a .\r\n  ?s ?p361 ?a .\r\n  ?s ?p175 ?a .\r\n  ?s ?p31 ?a .\r\n  ?s ?p361 ?a .\r\n  ?s ?p175 ?a .\r\n  ?s ?p31 ?a .\r\n  ?s ?p361 ?a"
    },
    {
        "question": "Bei wievielen auf Spiderman basierenden Werken kam Venom vor?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?work) AS ?result) WHERE {wd:Q1621261 wdt:P1441 ?work. ?work wdt:P144 wd:Q79037}",
        "generated_sparql": "SELECT COUNT(*) AS count\r\nWHERE {\r\n  ?x wdt:P1441 wd:Q1621261 .\r\n  ?x wdt:P144 wd:Q79037 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Bei wievielen auf Spiderman basierenden Werken kam Venom vor?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Venom\": \"Q1621261\", \"Spider-Man\": \"Q79037\"}, \"beziehungen\": {\"basierend auf\": \"P1441\", \"Charakter\": \"P144\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS count\r\nWHERE {\r\n  ?x wdt:P1441 wd:Q1621261 .\r\n  ?x wdt:P144 wd:Q79037 .\r\n}\r\n```"
    },
    {
        "question": "Was kam zuerst: die Fernsehsendung Familie Feuerstein oder das Ende der rassistischen Diskriminierung im US-Wahlrecht?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?sp) AS ?result) WHERE {wd:Q158861 wdt:P26 ?sp}",
        "generated_sparql": "SELECT ?s\r\nWHERE {\r\n  ?s wdt:P31 wd:Q1012. # TV show\r\n  ?s wdt:P31 wd:Q1012. # End of discriminatory practices in US elections\r\n}\r\nORDER BY ?s\r\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Was kam zuerst: die Fernsehsendung Familie Feuerstein oder das Ende der rassistischen Diskriminierung im US-Wahlrecht?' from the knowledge graph Wikidata with the following context: 'None'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s\r\nWHERE {\r\n  ?s wdt:P31 wd:Q1012. # TV show\r\n  ?s wdt:P31 wd:Q1012. # End of discriminatory practices in US elections\r\n}\r\nORDER BY ?s\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Gibt es in der Schweiz einen Ort n\u00f6rdlich der Koordinaten (8.57 47.8)?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q39 wdt:P1332 ?loc FILTER(?loc > \"Point(8.57 47.8)\"^^geo:wktLiteral)}",
        "generated_sparql": "SELECT ?ort\r\nWHERE {\r\n  ?ort wdt:P1332 wd:Q39;\r\n  FILTER(CONTAINS(str(?ort), '8.57 47.8'))\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Gibt es in der Schweiz einen Ort n\u00f6rdlich der Koordinaten (8.57 47.8)?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Schweiz\": \"Q39\"}, \"beziehungen\": {\"Lage\": \"P1332\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?ort\r\nWHERE {\r\n  ?ort wdt:P1332 wd:Q39;\r\n  FILTER(CONTAINS(str(?ort), '8.57 47.8'))\r\n}\r\n```"
    },
    {
        "question": "Wie oft gewann Giorgio Moroder den Golden Globe?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?awards) AS ?result) WHERE {wd:Q312674 p:P166 ?awards. ?awards ps:P166/wdt:P31 wd:Q1011547}",
        "generated_sparql": "SELECT COUNT(*) AS gewonnen_golden_globes\r\nWHERE {\r\n  ?s wdt:P166 wd:Q1011547 .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie oft gewann Giorgio Moroder den Golden Globe?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Giorgio Moroder\": \"Q312674\", \"Golden Globe\": \"Q1011547\"}, \"beziehungen\": {\"Gewinner\": \"P166\", \"ausgezeichnet als\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS gewonnen_golden_globes\r\nWHERE {\r\n  ?s wdt:P166 wd:Q1011547 .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nGROUP BY ?s\r\nHAVING ?s wdt:P166 wd:Q312674\r\n```"
    },
    {
        "question": "An wie vielen Olympischen Spielen hat Kobe Bryant teilgenommen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?ol) AS ?result) WHERE {wd:Q25369 wdt:P1344 ?ol. ?ol wdt:P31/wdt:P279 wd:Q5389}",
        "generated_sparql": "SELECT COUNT(*) AS num_olympic_games\nWHERE {\n  ?s wdt:P1344 ?o.\n  ?s wdt:P31 wd:Q5389.\n  ?o wdt:P279 wd:Q25369.\n}\nGROUP BY ?s\nHAVING ?s = wd:Q25369",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'An wie vielen Olympischen Spielen hat Kobe Bryant teilgenommen?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Kobe Bryant\": \"Q25369\", \"Olympische Spiele\": \"Q5389\"}, \"beziehungen\": {\"Teilnahme\": \"P1344\", \"Instanz von\": \"P31\", \"Unterklasse von\": \"P279\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) AS num_olympic_games\nWHERE {\n  ?s wdt:P1344 ?o.\n  ?s wdt:P31 wd:Q5389.\n  ?o wdt:P279 wd:Q25369.\n}\nGROUP BY ?s\nHAVING ?s = wd:Q25369\n```"
    },
    {
        "question": "Wie oft wurde Oskar Lafontaine zum Mitglied des saarl\u00e4ndischen Landtags gew\u00e4hlt?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?s) AS ?result) WHERE {wd:Q110719 p:P39 ?s. ?s ps:P39 wd:Q18130478}",
        "generated_sparql": "SELECT COUNT(*) AS gew\u00e4hlt_mal\r\nWHERE {\r\n  ?s wdt:P39 wd:Q18130478 .\r\n  ?s wdt:P39 wd:Q110719 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie oft wurde Oskar Lafontaine zum Mitglied des saarl\u00e4ndischen Landtags gew\u00e4hlt?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Oskar Lafontaine\": \"Q110719\", \"Mitglied des saarl\u00e4ndischen Landtags\": \"Q18130478\"}, \"beziehungen\": {\"Mitglied der legislativen K\u00f6rperschaft\": \"P39\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS gew\u00e4hlt_mal\r\nWHERE {\r\n  ?s wdt:P39 wd:Q18130478 .\r\n  ?s wdt:P39 wd:Q110719 .\r\n}\r\n```"
    },
    {
        "question": "An wie vielen Kriegen war das Kaiserreich Japan beteiligt?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?war) AS ?result) WHERE {wd:Q188712 wdt:P1344 ?war. ?war wdt:P31 wd:Q198}",
        "generated_sparql": "SELECT COUNT(*) AS num_wars\r\nWHERE {\r\n  ?s wdt:P1344 wd:Q188712 .\r\n  ?s wdt:P31 wd:Q188712 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'An wie vielen Kriegen war das Kaiserreich Japan beteiligt?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Kaiserreich Japan\": \"Q188712\"}, \"beziehungen\": {\"Teilnahme\": \"P1344\", \"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_wars\r\nWHERE {\r\n  ?s wdt:P1344 wd:Q188712 .\r\n  ?s wdt:P31 wd:Q188712 .\r\n}\r\n```"
    },
    {
        "question": "Wieviele Frauen waren unter den Gr\u00fcndungsmitgliedern von \"Die Br\u00fccke\"?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?f) AS ?result) WHERE {wd:Q152778 wdt:P112 ?f. ?f wdt:P21 wd:Q6581072}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?x) AS count\r\nWHERE {\r\n  ?x wdt:P112 wd:Q152778;\r\n  ?x wdt:P21 wd:Q6581072;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wieviele Frauen waren unter den Gr\u00fcndungsmitgliedern von \"Die Br\u00fccke\"?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Die Br\u00fccke\": \"Q152778\", \"weiblich\": \"Q6581072\"}, \"beziehungen\": {\"Gr\u00fcnder\": \"P112\", \"Geschlecht\": \"P21\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?x) AS count\r\nWHERE {\r\n  ?x wdt:P112 wd:Q152778;\r\n  ?x wdt:P21 wd:Q6581072;\r\n}\r\n```"
    },
    {
        "question": "Wer hat eine h\u00f6here beobachtete Lebenserwartung, der Gro\u00dfe T\u00fcmmler oder der Braunb\u00e4r? ",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P4214 ?ls. FILTER(?result IN (wd:Q174199, wd:Q36341))} ORDER BY DESC(?ls) LIMIT 1",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P4214 wikibase:value ?value;\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\";\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer hat eine h\u00f6here beobachtete Lebenserwartung, der Gro\u00dfe T\u00fcmmler oder der Braunb\u00e4r? ' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Gro\u00dfer T\u00fcmmler\": \"Q174199\", \"Braunb\u00e4r\": \"Q36341\"}, \"beziehungen\": {\"beobachtete Lebenserwartung\": \"P4214\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P4214 wikibase:value ?value;\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\";\r\n  }\r\n}\r\nWHERE {\r\n  ?x wdt:P4214 wikibase:value ?value;\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\";\r\n  }\r\n}\r\nWHERE {\r\n  ?x wdt:P4214 wikibase:value ?value;\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\";\r\n  }\r\n}\r\nWHERE {\r\n  ?x wdt:P4214 wikibase:value ?value;\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\";\r\n  }\r\n}\r\nWHERE {\r\n  ?x wdt:P4214 wikibase:value ?value;\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\";\r\n  }\r\n}\r\nWHERE {\r\n  ?x wdt:P4214 wikibase:value ?value;\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\";\r\n  }\r\n}\r\nWHERE {\r\n  ?x wdt:P4214 wikibase:value ?value;\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\";\r\n  }\r\n}\r\nWHERE {\r\n  ?x wdt:P4214 wikibase:value ?value;\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\";\r\n  }\r\n}\r\nWHERE {\r\n  ?x wdt:P4214 wikibase:value ?value;\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikib"
    },
    {
        "question": "Was ist TNFAIP1?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {wd:Q18032040 wdt:P31 ?result}",
        "generated_sparql": "SELECT ?label\r\nWHERE {\r\n  ?s wdt:P31 wd:Q18032040.\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Was ist TNFAIP1?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"TNFAIP1\": \"Q18032040\"}, \"beziehungen\": {\"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?label\r\nWHERE {\r\n  ?s wdt:P31 wd:Q18032040.\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\n```"
    },
    {
        "question": "Wie oft gewann Naomi Novik den Nebula Award?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(?award) AS ?result) WHERE {wd:Q242643 p:P166/ps:P166 ?award FILTER(?award = wd:Q194285)}",
        "generated_sparql": "SELECT COUNT(*) AS wonCount\r\nWHERE {\r\n  ?s wdt:P166 wd:Q242643 .\r\n  ?s wdt:P166 wd:Q194285 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie oft gewann Naomi Novik den Nebula Award?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Naomi Novik\": \"Q242643\", \"Nebula Award\": \"Q194285\"}, \"beziehungen\": {\"gewonnen\": \"P166\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS wonCount\r\nWHERE {\r\n  ?s wdt:P166 wd:Q242643 .\r\n  ?s wdt:P166 wd:Q194285 .\r\n}\r\n```"
    },
    {
        "question": "Wie oft haben die Mongolen eine Invasion Japans versucht?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?time) AS ?result) WHERE {wd:Q208156 wdt:P585 ?time}",
        "generated_sparql": "SELECT COUNT(*) AS invasion_count\r\nWHERE {\r\n  ?mongol wdt:P31 wd:Q1226. \r\n  ?mongol wdt:P431 ?japan. \r\n  ?japan wdt:P431 ?mongol. \r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie oft haben die Mongolen eine Invasion Japans versucht?' from the knowledge graph Wikidata with the following context: 'None'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS invasion_count\r\nWHERE {\r\n  ?mongol wdt:P31 wd:Q1226. \r\n  ?mongol wdt:P431 ?japan. \r\n  ?japan wdt:P431 ?mongol. \r\n}\r\n```"
    },
    {
        "question": "Wie oft war Naomi Novik f\u00fcr einen Hugo Award nominiert?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(?award) AS ?result) WHERE {wd:Q242643 p:P1411/ps:P1411 ?award FILTER(?award = wd:Q188914)}",
        "generated_sparql": "SELECT COUNT(*) AS count\r\nWHERE {\r\n  ?s wdt:P1411 ?o\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie oft war Naomi Novik f\u00fcr einen Hugo Award nominiert?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Naomi Novik\": \"Q242643\", \"Hugo Award\": \"Q188914\"}, \"beziehungen\": {\"Nominiert f\u00fcr\": \"P1411\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS count\r\nWHERE {\r\n  ?s wdt:P1411 ?o\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  ?s wikibase:label ?label\r\n  ?o wikibase:label ?oLabel\r\n  FILTER(CONTAINS(?label, \"Naomi Novik\") && CONTAINS(?oLabel, \"Hugo Award\"))\r\n}\r\n```"
    },
    {
        "question": "Wie viele Jahre hat der zweit\u00e4lteste Hund der Welt gelebt?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE{?dog wdt:P31 wd:Q144. ?dog wdt:P569 ?db; wdt:P570 ?dd BIND((YEAR(?dd) - YEAR(?db)) AS ?result)} ORDER BY DESC(?result) LIMIT 1 OFFSET 1",
        "generated_sparql": "",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele Jahre hat der zweit\u00e4lteste Hund der Welt gelebt?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Hund\": \"Q144\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"Geburtsdatum\": \"P569\", \"Todestag\": \"P570\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS years_lived\r\nFROM wikidata:Q144\r\nWHERE wikidata:P31 = wikidata:Q144\r\nAND wikidata:P569 > wikidata:P570\r\nAND wikidata:P569 > (\r\n    SELECT MAX(wikidata:P569) FROM wikidata:Q144\r\n    WHERE wikidata:P31 = wikidata:Q144\r\n    AND wikidata:P569 > wikidata:P570\r\n)\r\n```"
    },
    {
        "question": "Wenn jemand im Jahre 1969 verstarb, ist es m\u00f6glich, dass er/sie von Queens Musik erfahren hatte?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q15862 wdt:P2031 ?start. FILTER(YEAR(?start) <= 1969)}",
        "generated_sparql": "",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wenn jemand im Jahre 1969 verstarb, ist es m\u00f6glich, dass er/sie von Queens Musik erfahren hatte?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Queen\": \"Q15862\"}, \"beziehungen\": {\"Gr\u00fcndung\": \"P2031\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P31 wd:Q15862. # Queen\r\n  ?x wdt:P31 wd:Q15862. # Queen\r\n  ?x wdt:P31 wd:Q15862. # Queen\r\n  ?x wdt:P31 wd:Q15862. # Queen\r\n  ?x wdt:P31 wd:Q15862. # Queen\r\n  ?x wdt:P31 wd:Q15862. # Queen\r\n  ?x wdt:P31 wd:Q15862. # Queen\r\n  ?x wdt:P31 wd:Q15862. # Queen\r\n  ?x wdt:P31 wd:Q15862. # Queen\r\n  ?x wdt:P31 wd:Q15862. # Queen\r\n  ?x wdt:P31 wd:Q15862. # Queen\r\n  ?x wdt:P31 wd:Q15862. # Queen\r\n  ?x wdt:P31 wd:Q15862. # Queen\r\n  ?x wdt:P31 wd:Q15862. # Queen\r\n  ?x wdt:P31 wd:Q15862. # Queen\r\n  ?x wdt:P31 wd:Q15862. # Queen\r\n  ?x wdt:P31 wd:Q15862. # Queen\r\n  ?x wdt:P31 wd:Q15862. # Queen\r\n  ?x wdt:P31 wd:Q15862. # Queen\r\n  ?x wdt:P31 wd:Q15862. # Queen\r\n  ?x wdt:P31 wd:Q15862. # Queen\r\n  ?x wdt:P31 wd:Q1"
    },
    {
        "question": "Wurde Dr. Pepper nach dem/der Erfinder/in benannt?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q623561 wdt:P138 ?na; wdt:P61 ?inv. FILTER(?inv = ?na)}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P138 wd:Q623561 .\r\n  ?x wdt:P61 ?p .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wurde Dr. Pepper nach dem/der Erfinder/in benannt?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Dr. Pepper\": \"Q623561\"}, \"beziehungen\": {\"benannt nach\": \"P138\", \"Erfinder\": \"P61\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P138 wd:Q623561 .\r\n  ?x wdt:P61 ?p .\r\n}\r\n```"
    },
    {
        "question": "In wievielen Filmen kamen Carey Mulligan und Ryan Gosling gemeinsam vor?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?movie) AS ?result) WHERE {?movie wdt:P31 wd:Q11424; wdt:P161 wd:Q193815, wd:Q219655}",
        "generated_sparql": "SELECT COUNT(*) AS num_films\nWHERE {\n  ?m Q11424.\n  ?m P161 ?p.\n  ?p Q193815.\n  ?p Q219655.\n}\nGROUP BY ?m\nHAVING COUNT(*) > 0",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In wievielen Filmen kamen Carey Mulligan und Ryan Gosling gemeinsam vor?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Carey Mulligan\": \"Q193815\", \"Ryan Gosling\": \"Q219655\", \"Schauspieler\": \"Q11424\"}, \"beziehungen\": {\"in\": \"P161\", \"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) AS num_films\nWHERE {\n  ?m Q11424.\n  ?m P161 ?p.\n  ?p Q193815.\n  ?p Q219655.\n}\nGROUP BY ?m\nHAVING COUNT(*) > 0\n```"
    },
    {
        "question": "Wer ist in dem Land, in dem Ghost in the Shell erfunden wurde, aktuell das Staatsoberhaupt?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {wd:Q92580 wdt:P495 ?country. ?country wdt:P35 ?result}",
        "generated_sparql": "SELECT ?land ?landLabel ?sohLabel\r\nWHERE {\r\n  ?land wdt:P495 wd:Q92580.\r\n  ?land wdt:P35 ?soh.\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer ist in dem Land, in dem Ghost in the Shell erfunden wurde, aktuell das Staatsoberhaupt?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Ghost in the Shell\": \"Q92580\"}, \"beziehungen\": {\"Ursprungsland\": \"P495\", \"Staatsoberhaupt\": \"P35\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?land ?landLabel ?sohLabel\r\nWHERE {\r\n  ?land wdt:P495 wd:Q92580.\r\n  ?land wdt:P35 ?soh.\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nORDER BY ?landLabel\r\n```"
    },
    {
        "question": "Wieviele Fl\u00fcsse sind angrenzend zum oder innerhalb des U.S. Staats, aus dem Cage the Elephant herkommen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?bow) AS ?result) WHERE {wd:Q68061 wdt:P740/wdt:P131* ?state. ?state wdt:P31 wd:Q35657; wdt:P206 ?bow. ?bow wdt:P31 wd:Q4022}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?fluss) AS num_fluss\r\nWHERE {\r\n  ?fluss wdt:P131 wd:Q35657;\r\n  ?fluss wdt:P206 wd:Q68061;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wieviele Fl\u00fcsse sind angrenzend zum oder innerhalb des U.S. Staats, aus dem Cage the Elephant herkommen?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Cage the Elephant\": \"Q68061\", \"Vereinigte Staaten\": \"Q35657\", \"Fluss\": \"Q4022\"}, \"beziehungen\": {\"Herstellerland\": \"P740\", \"Teil von\": \"P131\", \"enth\u00e4lt\": \"P206\", \"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?fluss) AS num_fluss\r\nWHERE {\r\n  ?fluss wdt:P131 wd:Q35657;\r\n  ?fluss wdt:P206 wd:Q68061;\r\n}\r\n```"
    },
    {
        "question": "In welchem Bundesland hat die Veltins Brauerei ihren Hauptsitz?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {wd:Q608350 wdt:P159 ?hql. ?hql wdt:P131* ?result. ?result wdt:P31 wd:Q1221156}",
        "generated_sparql": "SELECT ?b\r\nWHERE {\r\n  ?b wdt:P159 wd:Q608350 .\r\n  ?b wdt:P131 wd:Q1221156 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In welchem Bundesland hat die Veltins Brauerei ihren Hauptsitz?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Veltins Brauerei\": \"Q608350\", \"Bundesland\": \"Q1221156\"}, \"beziehungen\": {\"Hauptsitz\": \"P159\", \"Teil von\": \"P131\", \"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?b\r\nWHERE {\r\n  ?b wdt:P159 wd:Q608350 .\r\n  ?b wdt:P131 wd:Q1221156 .\r\n}\r\n```"
    },
    {
        "question": "In welchem Stadion spielen die New York Yankees?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {wd:Q213417 wdt:P115 ?result}",
        "generated_sparql": "SELECT ?stadion\r\nWHERE {\r\n  ?stadion wdt:P115 wd:Q213417.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In welchem Stadion spielen die New York Yankees?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"New York Yankees\": \"Q213417\"}, \"beziehungen\": {\"Spielst\u00e4tte\": \"P115\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?stadion\r\nWHERE {\r\n  ?stadion wdt:P115 wd:Q213417.\r\n}\r\n```"
    },
    {
        "question": "In welchen L\u00e4ndern liegt der Himalaya?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q5451 wdt:P17 ?result}",
        "generated_sparql": "SELECT ?country\r\nWHERE {\r\n  ?country wdt:P17 wd:Q5451 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In welchen L\u00e4ndern liegt der Himalaya?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Himalaya\": \"Q5451\"}, \"beziehungen\": {\"liegt in\": \"P17\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?country\r\nWHERE {\r\n  ?country wdt:P17 wd:Q5451 .\r\n}\r\n```"
    },
    {
        "question": "War Isfahan im Jahre 934 eine Hauptstadt?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q42053 p:P1376 ?ps. ?ps pq:P580 ?start; pq:P582 ?end. FILTER((YEAR(?start) < 934) && (YEAR(?end) > 934))}",
        "generated_sparql": "SELECT ?s WHERE {\r\n  ?s wdt:P1376 wd:Q42053;\r\n  ?s wdt:P580 ?begin;\r\n  ?s wdt:P582 ?end;\r\n  FILTER(?begin <= \"934\" && ?end >= \"934\")\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'War Isfahan im Jahre 934 eine Hauptstadt?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Isfahan\": \"Q42053\"}, \"beziehungen\": {\"Hauptstadt\": \"P1376\", \"Beginn\": \"P580\", \"Ende\": \"P582\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s WHERE {\r\n  ?s wdt:P1376 wd:Q42053;\r\n  ?s wdt:P580 ?begin;\r\n  ?s wdt:P582 ?end;\r\n  FILTER(?begin <= \"934\" && ?end >= \"934\")\r\n}\r\n```"
    },
    {
        "question": "In wie vielen L\u00e4ndern gibt es Niederlassungen von IKEA?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?c) AS ?result) WHERE {wd:Q1769361 wdt:P527 ?c. ?c p:P31/ps:P31 wd:Q6256}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?land) AS num_lands\r\nWHERE {\r\n  ?land wdt:P31 wd:Q6256. # Land\r\n  ?land wdt:P527 ?unternehmen. # Niederlassung\r\n  ?unternehmen wdt:P31 wd:Q6881511. # IKEA\r\n}\r\nGROUP BY ?land",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In wie vielen L\u00e4ndern gibt es Niederlassungen von IKEA?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"IKEA\": \"Q1769361\", \"Unternehmen\": \"Q6881511\", \"Land\": \"Q6256\"}, \"beziehungen\": {\"hat Niederlassung\": \"P527\", \"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?land) AS num_lands\r\nWHERE {\r\n  ?land wdt:P31 wd:Q6256. # Land\r\n  ?land wdt:P527 ?unternehmen. # Niederlassung\r\n  ?unternehmen wdt:P31 wd:Q6881511. # IKEA\r\n}\r\nGROUP BY ?land\r\n```"
    },
    {
        "question": "In welchem Land hatte die United Fruit Company ihren Hauptsitz?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE{wd:Q1771942 wdt:P159/wdt:P131* ?result. ?result wdt:P31 wd:Q6256}",
        "generated_sparql": "SELECT ?country\r\nWHERE {\r\n  ?company wdt:P31 wd:Q1771942 . # United Fruit Company\r\n  ?company wdt:P159 ?country . # Hauptsitz\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In welchem Land hatte die United Fruit Company ihren Hauptsitz?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"United Fruit Company\": \"Q1771942\", \"Vereinigte Staaten\": \"Q6256\"}, \"beziehungen\": {\"Hauptsitz\": \"P159\", \"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?country\r\nWHERE {\r\n  ?company wdt:P31 wd:Q1771942 . # United Fruit Company\r\n  ?company wdt:P159 ?country . # Hauptsitz\r\n}\r\n```"
    },
    {
        "question": "In wie vielen L\u00e4ndern wird Pysanka praktiziert?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?c) AS ?result) WHERE {wd:Q3233785 wdt:P17 ?c}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?country) ?count\r\nWHERE {\r\n  ?country wdt:P17 wd:Q3233785;\r\n}\r\nGROUP BY ?country",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In wie vielen L\u00e4ndern wird Pysanka praktiziert?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Pysanka\": \"Q3233785\"}, \"beziehungen\": {\"praktiziert in\": \"P17\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?country) ?count\r\nWHERE {\r\n  ?country wdt:P17 wd:Q3233785;\r\n}\r\nGROUP BY ?country\r\n```"
    },
    {
        "question": "In welchem Land befindet sich Oberirrach?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {wd:Q98138090 wdt:P17 ?result}",
        "generated_sparql": "SELECT ?land\r\nWHERE {\r\n  ?land wdt:P17 wd:Q98138090.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In welchem Land befindet sich Oberirrach?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Oberirrach\": \"Q98138090\"}, \"beziehungen\": {\"befindet sich in\": \"P17\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?land\r\nWHERE {\r\n  ?land wdt:P17 wd:Q98138090.\r\n}\r\n```"
    },
    {
        "question": "In welchem Land wurde Spotify gegr\u00fcndet?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {wd:Q689141 wdt:P495 ?result}",
        "generated_sparql": "SELECT ?land WHERE {\r\n  ?land wdt:P495 wd:Q689141.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In welchem Land wurde Spotify gegr\u00fcndet?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Spotify\": \"Q689141\"}, \"beziehungen\": {\"Gr\u00fcndungsort\": \"P495\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?land WHERE {\r\n  ?land wdt:P495 wd:Q689141.\r\n}\r\n```"
    },
    {
        "question": "Wonach ist das Lied Vogue von Madonna benannt?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE{wd:Q1128775 wdt:P175 wd:Q1744; wdt:P138 ?result}",
        "generated_sparql": "SELECT ?lied\r\nWHERE {\r\n  ?lied wdt:P138 wd:Q1128775 .\r\n  ?lied wdt:P175 wd:Q1744 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wonach ist das Lied Vogue von Madonna benannt?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Vogue\": \"Q1128775\", \"Madonna\": \"Q1744\"}, \"beziehungen\": {\"benannt nach\": \"P138\", \"interpretiert von\": \"P175\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?lied\r\nWHERE {\r\n  ?lied wdt:P138 wd:Q1128775 .\r\n  ?lied wdt:P175 wd:Q1744 .\r\n}\r\n```"
    },
    {
        "question": "In welcher Sprache haben die Vereinigten Staaten die k\u00fcrzeste Kurzbezeichnung?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {wd:Q30 wdt:P1813 ?name BIND(lang(?name) AS ?result)} ORDER BY ASC(strlen(?name)) LIMIT 1",
        "generated_sparql": "SELECT ?lang\r\nWHERE {\r\n  ?country wdt:P30 wd:Q30;\r\n  ?country wdt:P1813 ?lang\r\n}\r\nORDER BY LENGTH(?lang) ASC\r\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In welcher Sprache haben die Vereinigten Staaten die k\u00fcrzeste Kurzbezeichnung?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Vereinigte Staaten\": \"Q30\"}, \"beziehungen\": {\"Kurzbezeichnung\": \"P1813\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?lang\r\nWHERE {\r\n  ?country wdt:P30 wd:Q30;\r\n  ?country wdt:P1813 ?lang\r\n}\r\nORDER BY LENGTH(?lang) ASC\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Beginnt die Vorwahl von Bremerhaven mit 4?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q2706 wdt:P473 ?code. FILTER regex(?code, \"^4\")}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P473 wd:Q2706 .\r\n  FILTER(CONTAINS(str(?x), \"4\"))\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Beginnt die Vorwahl von Bremerhaven mit 4?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Bremerhaven\": \"Q2706\"}, \"beziehungen\": {\"Wahlkreis\": \"P473\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P473 wd:Q2706 .\r\n  FILTER(CONTAINS(str(?x), \"4\"))\r\n}\r\n```"
    },
    {
        "question": "In wievielen Filmen spielte Johnny Depp eine Rolle?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?result) AS ?resultCnt) WHERE{?result wdt:P31 wd:Q11424; wdt:P161 wd:Q37175}",
        "generated_sparql": "SELECT COUNT(*) AS num_films\r\nWHERE {\r\n  ?film wdt:P161 wd:Q37175 .\r\n  ?film wdt:P31 wd:Q18743448 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In wievielen Filmen spielte Johnny Depp eine Rolle?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Johnny Depp\": \"Q37175\"}, \"beziehungen\": {\"Darsteller\": \"P161\", \"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_films\r\nWHERE {\r\n  ?film wdt:P161 wd:Q37175 .\r\n  ?film wdt:P31 wd:Q18743448 .\r\n}\r\n```"
    },
    {
        "question": "In welchem Jahr hat ABBA ihr Album The Visitors ver\u00f6ffentlicht?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE{wd:Q338553 wdt:P577 ?date. BIND(YEAR(?date) AS ?result)}",
        "generated_sparql": "SELECT ?year\r\nWHERE {\r\n  ?album wdt:P577 wd:Q338553 .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In welchem Jahr hat ABBA ihr Album The Visitors ver\u00f6ffentlicht?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"ABBA\": \"Q338553\", \"The Visitors\": null}, \"beziehungen\": {\"Ver\u00f6ffentlichung\": \"P577\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?year\r\nWHERE {\r\n  ?album wdt:P577 wd:Q338553 .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nORDER BY ?year\r\nLIMIT 1\r\n```"
    },
    {
        "question": "In welchem Jahr wurde die Autorin von The Vanishing Half geboren?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {wd:Q98476957 wdt:P50/wdt:P569 ?date. BIND(YEAR(?date) AS ?result)}",
        "generated_sparql": "SELECT ?year\r\nWHERE {\r\n  ?book wdt:P50 wd:Q98476957 . # The Vanishing Half\r\n  ?book wdt:P569 ?year . # Geburtsdatum\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In welchem Jahr wurde die Autorin von The Vanishing Half geboren?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"The Vanishing Half\": \"Q98476957\"}, \"beziehungen\": {\"Autor\": \"P50\", \"Geburtsdatum\": \"P569\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?year\r\nWHERE {\r\n  ?book wdt:P50 wd:Q98476957 . # The Vanishing Half\r\n  ?book wdt:P569 ?year . # Geburtsdatum\r\n}\r\n```"
    },
    {
        "question": "Wird After Eight von Unilever hergestellt?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q388973 wdt:P176 wd:Q157062}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P176 wd:Q157062;\r\n  ?x wdt:P31 wd:Q388973;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wird After Eight von Unilever hergestellt?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"After Eight\": \"Q388973\", \"Unilever\": \"Q157062\"}, \"beziehungen\": {\"Hersteller\": \"P176\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P176 wd:Q157062;\r\n  ?x wdt:P31 wd:Q388973;\r\n}\r\n```"
    },
    {
        "question": "Gibt es ALDI in Italien?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q125054 wdt:P527/wdt:P17 wd:Q38}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P527 wd:Q38;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Gibt es ALDI in Italien?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"ALDI\": \"Q125054\", \"Italien\": \"Q38\"}, \"beziehungen\": {\"Sitz\": \"P527\", \"Land\": \"P17\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P527 wd:Q38;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\n```"
    },
    {
        "question": "Ist Isfahan eine Gro\u00dfstadt?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q42053 wdt:P31 wd:Q1549591}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P31 wd:Q1549591;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Ist Isfahan eine Gro\u00dfstadt?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Isfahan\": \"Q42053\", \"Gro\u00dfstadt\": \"Q1549591\"}, \"beziehungen\": {\"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P31 wd:Q1549591;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\n```"
    },
    {
        "question": "Ist Mathematik verwandt mit Wissenschaft?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q395 ?p [?p2 wd:Q336]}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P31 wd:Q395;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Ist Mathematik verwandt mit Wissenschaft?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Mathematik\": \"Q395\", \"Wissenschaft\": \"Q336\"}, \"beziehungen\": {\"Unterklasse von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P31 wd:Q395;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\n```"
    },
    {
        "question": "Ist Python eine Programmiersprache?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q28865 p:P31/ps:P31 wd:Q9143}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P31 wd:Q9143;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Ist Python eine Programmiersprache?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Python\": \"Q28865\", \"Programmiersprache\": \"Q9143\"}, \"beziehungen\": {\"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P31 wd:Q9143;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\n```"
    },
    {
        "question": "Ist Samurai Champloo ein originales Werk oder eine Adaption?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {wd:Q143276 wdt:P31/wdt:P279* ?result FILTER(?result IN (wd:Q104640197, wd:Q1213562))}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P31 wd:Q143276;\r\n  ?x wdt:P279 wd:Q1213562;\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Ist Samurai Champloo ein originales Werk oder eine Adaption?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Samurai Champloo\": \"Q143276\", \"Adaption\": \"Q1213562\", \"originales Werk\": \"Q104640197\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"basierend auf\": \"P279\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P31 wd:Q143276;\r\n  ?x wdt:P279 wd:Q1213562;\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n}\r\n```"
    },
    {
        "question": "War die erste weibliche Kanzlerin Deutschlands jemals verheiratet?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {{SELECT ?fc WHERE {wd:Q183 p:P6 ?ps. ?ps ps:P6 ?fc; pq:P580 ?st. ?fc wdt:P21 wd:Q6581072} ORDER BY ASC(?st) LIMIT 1} FILTER(EXISTS{?fc p:P26/ps:P26 ?sp})}",
        "generated_sparql": "",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'War die erste weibliche Kanzlerin Deutschlands jemals verheiratet?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"erste weibliche Kanzlerin Deutschlands\": \"Q183\"}, \"beziehungen\": {\"Ehepartner\": \"P26\", \"Geschlecht\": \"P21\", \"weiblich\": \"Q6581072\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?x WHERE {\n  ?x wdt:P26 ?y.\n  ?x wdt:P21 ?z.\n  ?y wdt:P21 ?w.\n  ?z wdt:P21 ?g.\n  ?w wdt:P21 ?t.\n  ?t wdt:P21 ?r.\n  ?r wdt:P21 ?m.\n  ?m wdt:P21 ?l.\n  ?l wdt:P21 ?b.\n  ?b wdt:P21 ?a.\n  ?a wdt:P21 ?c.\n  ?c wdt:P21 ?d.\n  ?d wdt:P21 ?e.\n  ?e wdt:P21 ?f.\n  ?f wdt:P21 ?g.\n  ?g wdt:P21 ?h.\n  ?h wdt:P21 ?i.\n  ?i wdt:P21 ?j.\n  ?j wdt:P21 ?k.\n  ?k wdt:P21 ?l.\n  ?l wdt:P21 ?m.\n  ?m wdt:P21 ?n.\n  ?n wdt:P21 ?o.\n  ?o wdt:P21 ?p.\n  ?p wdt:P21 ?q.\n  ?q wdt:P21 ?r.\n  ?r wdt:P21 ?s.\n  ?s wdt:P21 ?t.\n  ?t wdt:P21 ?u.\n  ?u wdt:P21 ?v.\n  ?v wdt:P21 ?w.\n  ?w wdt:P21 ?x.\n  ?x wdt:P21 ?y.\n  ?y wdt:P21 ?z.\n  ?z wdt:P21 ?a.\n  ?a wdt:P21 ?b.\n  ?b wdt:P21 ?c.\n  ?c wdt:P21 ?d.\n  ?d wdt:P"
    },
    {
        "question": "Ist der Marianengraben tiefer als der Mount Everest hoch ist (\u00fcber dem Meeresspiegel)?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q510 wdt:P2044 ?d. wd:Q513 wdt:P2044 ?h. FILTER(?d + ?h < 0)}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P2044 wd:Q510;\r\n  ?x wdt:P2044 wd:Q513;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Ist der Marianengraben tiefer als der Mount Everest hoch ist (\u00fcber dem Meeresspiegel)?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Marianengraben\": \"Q510\", \"Mount Everest\": \"Q513\"}, \"beziehungen\": {\"H\u00f6he\": \"P2044\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P2044 wd:Q510;\r\n  ?x wdt:P2044 wd:Q513;\r\n}\r\n```"
    },
    {
        "question": "Ist die Anzahl der L\u00e4nder in Europa gr\u00f6\u00dfer als die der L\u00e4nder in Asien?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {{SELECT (COUNT (DISTINCT ?ac) AS ?acc) (COUNT (DISTINCT ?ec) AS ?ecc) WHERE {?ec p:P31/ps:P31 wd:Q6256; wdt:P30 wd:Q46. ?ac p:P31/ps:P31 wd:Q6256; wdt:P30 wd:Q48.}}FILTER(?ecc > ?acc)}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?c) AS europa_count, COUNT(DISTINCT ?a) AS asia_count\r\nWHERE {\r\n  ?c wdt:P31 wd:Q46. # Europa\r\n  ?a wdt:P31 wd:Q48. # Asien\r\n  ?c wdt:P30 ?a. # L\u00e4nder\r\n}\r\nGROUP BY ?c\r\nHAVING COUNT(DISTINCT ?c) > COUNT(DISTINCT ?a)",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Ist die Anzahl der L\u00e4nder in Europa gr\u00f6\u00dfer als die der L\u00e4nder in Asien?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Asien\": \"Q48\", \"Europa\": \"Q46\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"auf\": \"P30\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?c) AS europa_count, COUNT(DISTINCT ?a) AS asia_count\r\nWHERE {\r\n  ?c wdt:P31 wd:Q46. # Europa\r\n  ?a wdt:P31 wd:Q48. # Asien\r\n  ?c wdt:P30 ?a. # L\u00e4nder\r\n}\r\nGROUP BY ?c\r\nHAVING COUNT(DISTINCT ?c) > COUNT(DISTINCT ?a)\r\n```"
    },
    {
        "question": "Existiert die Produktionsfirma von Samurai Champloo noch?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q143276 wdt:P272 ?comp FILTER(NOT EXISTS{?comp wdt:P576 ?o})}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P272 wd:Q143276 .\r\n  OPTIONAL { ?x wdt:P576 true . }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Existiert die Produktionsfirma von Samurai Champloo noch?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Samurai Champloo\": \"Q143276\"}, \"beziehungen\": {\"Produktionsfirma\": \"P272\", \"Aufl\u00f6sung\": \"P576\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P272 wd:Q143276 .\r\n  OPTIONAL { ?x wdt:P576 true . }\r\n}\r\n```"
    },
    {
        "question": "Gibt es bei Hunter X Hunter eine weibliche Hauptfigur?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q696071 wdt:P674 ?char. ?char wdt:P21 wd:Q6581072}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P674 wd:Q696071 .\r\n  ?x wdt:P21 wd:Q6581072 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Gibt es bei Hunter X Hunter eine weibliche Hauptfigur?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Hunter X Hunter\": \"Q696071\", \"weiblich\": \"Q6581072\"}, \"beziehungen\": {\"Hauptfigur\": \"P674\", \"Geschlecht\": \"P21\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P674 wd:Q696071 .\r\n  ?x wdt:P21 wd:Q6581072 .\r\n}\r\n```"
    },
    {
        "question": "Ist Wasser farblos?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q283 wdt:P462 wd:Q11567495}",
        "generated_sparql": "SELECT ?w.label\r\nWHERE {\r\n  ?w wdt:P462 wd:Q11567495 .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Ist Wasser farblos?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Wasser\": \"Q283\", \"farblos\": \"Q11567495\"}, \"beziehungen\": {\"Farbe\": \"P462\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?w.label\r\nWHERE {\r\n  ?w wdt:P462 wd:Q11567495 .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\n```"
    },
    {
        "question": "Ist Axel Rose ein Mitglied von Guns N\u2019 Roses?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q11885 wdt:P463 wd:Q11895}",
        "generated_sparql": "SELECT ?x WHERE {\n  ?x wdt:P463 wd:Q11895.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Ist Axel Rose ein Mitglied von Guns N\u2019 Roses?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Axl Rose\": \"Q11885\", \"Guns N' Roses\": \"Q11895\"}, \"beziehungen\": {\"Mitglied von\": \"P463\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?x WHERE {\n  ?x wdt:P463 wd:Q11895.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  FILTER(CONTAINS(?x, \"Axl Rose\"))\n}\n```"
    },
    {
        "question": "Ist die Hauptstadt Irans gr\u00f6\u00dfer als die Deutschlands?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q794 wdt:P36/wdt:P2046 ?a1. wd:Q183 wdt:P36/wdt:P2046 ?a2. FILTER(?a1 > ?a2)}",
        "generated_sparql": "SELECT ?x ?y WHERE {\n  ?x wdt:P36 wd:Q794.\n  ?y wdt:P36 wd:Q183.\n  ?x wdt:P2046 ?z.\n  ?y wdt:P2046 ?w.\n  FILTER(?z > ?w)\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Ist die Hauptstadt Irans gr\u00f6\u00dfer als die Deutschlands?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Iran\": \"Q794\", \"Deutschland\": \"Q183\"}, \"beziehungen\": {\"Hauptstadt\": \"P36\", \"Einwohnerzahl\": \"P2046\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?x ?y WHERE {\n  ?x wdt:P36 wd:Q794.\n  ?y wdt:P36 wd:Q183.\n  ?x wdt:P2046 ?z.\n  ?y wdt:P2046 ?w.\n  FILTER(?z > ?w)\n}\n```"
    },
    {
        "question": "Ist die Weser l\u00e4nger als der Rhein?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK{wd:Q1650 p:P2043/psn:P2043/wikibase:quantityAmount ?lenw. wd:Q584 p:P2043/psn:P2043/wikibase:quantityAmount ?lenr FILTER(?lenw > ?lenr)}",
        "generated_sparql": "SELECT ?weser ?rhein ?l\u00e4nge\r\nWHERE {\r\n  ?weser wd:P31 wd:Q1650; # Weser\r\n  ?rhein wd:P31 wd:Q584; # Rhein\r\n  ?weser wd:P2043 ?l\u00e4nge; # L\u00e4nge\r\n  ?rhein wd:P2043 ?l\u00e4nge;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Ist die Weser l\u00e4nger als der Rhein?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Weser\": \"Q1650\", \"Rhein\": \"Q584\"}, \"beziehungen\": {\"L\u00e4nge\": \"P2043\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?weser ?rhein ?l\u00e4nge\r\nWHERE {\r\n  ?weser wd:P31 wd:Q1650; # Weser\r\n  ?rhein wd:P31 wd:Q584; # Rhein\r\n  ?weser wd:P2043 ?l\u00e4nge; # L\u00e4nge\r\n  ?rhein wd:P2043 ?l\u00e4nge;\r\n}\r\n```"
    },
    {
        "question": "Ist Tony Blair gr\u00f6\u00dfer als Tiger Woods?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q9545 p:P2048/psn:P2048/wikibase:quantityAmount ?hb. wd:Q10993 p:P2048/psn:P2048/wikibase:quantityAmount ?hw FILTER(?hb > ?hw)}",
        "generated_sparql": "SELECT ?x ?y\r\nWHERE {\r\n  ?x wdt:P2048 wd:Q9545 .\r\n  ?y wdt:P2048 wd:Q10993 .\r\n  FILTER(?x > ?y)\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Ist Tony Blair gr\u00f6\u00dfer als Tiger Woods?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Tony Blair\": \"Q9545\", \"Tiger Woods\": \"Q10993\"}, \"beziehungen\": {\"Gr\u00f6\u00dfe\": \"P2048\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x ?y\r\nWHERE {\r\n  ?x wdt:P2048 wd:Q9545 .\r\n  ?y wdt:P2048 wd:Q10993 .\r\n  FILTER(?x > ?y)\r\n}\r\n```"
    },
    {
        "question": "Liegt Chicago am Michigansee?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q1297 wdt:P206 wd:Q1169}",
        "generated_sparql": "SELECT ?s\r\nWHERE {\r\n  ?s wdt:P206 wd:Q1169 .\r\n  ?s wdt:P206 wd:Q1297 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Liegt Chicago am Michigansee?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Chicago\": \"Q1297\", \"Michigansee\": \"Q1169\"}, \"beziehungen\": {\"liegt am\": \"P206\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s\r\nWHERE {\r\n  ?s wdt:P206 wd:Q1169 .\r\n  ?s wdt:P206 wd:Q1297 .\r\n}\r\n```"
    },
    {
        "question": "Liegt der Kreis H\u00f6xter neben dem Kreis Paderborn?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q6228 wdt:P47 wd:Q6224}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P47 wd:Q6228 .\r\n  ?x wdt:P47 wd:Q6224 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Liegt der Kreis H\u00f6xter neben dem Kreis Paderborn?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Kreis H\u00f6xter\": \"Q6228\", \"Kreis Paderborn\": \"Q6224\"}, \"beziehungen\": {\"liegt neben\": \"P47\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P47 wd:Q6228 .\r\n  ?x wdt:P47 wd:Q6224 .\r\n}\r\n```"
    },
    {
        "question": "Liegt ein Teil des Harzgebirges im Landkreis Nordhausen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q4186 wdt:P131 wd:Q7858}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P131 wd:Q4186 .\r\n  ?x wdt:P131 wd:Q7858 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Liegt ein Teil des Harzgebirges im Landkreis Nordhausen?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Harz\": \"Q4186\", \"Landkreis Nordhausen\": \"Q7858\"}, \"beziehungen\": {\"liegt in\": \"P131\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P131 wd:Q4186 .\r\n  ?x wdt:P131 wd:Q7858 .\r\n}\r\n```"
    },
    {
        "question": "Wieviele Personen gewannen den Literaturnobelpreis oder Nobelpreis f\u00fcr Physik seit 2000?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?result) AS ?resultCnt) WHERE{?result wdt:P31 wd:Q5. ?result p:P166 ?ps. {?ps ps:P166 wd:Q37922} UNION {?ps ps:P166 wd:Q38104} ?ps pq:P585 ?time. FILTER(YEAR(?time) > 2000)}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?p) AS won_prizes\r\nWHERE {\r\n  ?p ?p:P5 ?p:P31 ?p:P166 ?p:P585 ?p:ps ?p:YEAR >= \"2000\".\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wieviele Personen gewannen den Literaturnobelpreis oder Nobelpreis f\u00fcr Physik seit 2000?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Literaturnobelpreis\": \"Q37922\", \"Nobelpreis f\u00fcr Physik\": \"Q38104\", \"Mensch\": \"Q5\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"erhielt\": \"P166\", \"Preistr\u00e4ger\": \"pq:P585\", \"Zeitpunkt\": \"ps\", \"Jahr\": \"YEAR\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?p) AS won_prizes\r\nWHERE {\r\n  ?p ?p:P5 ?p:P31 ?p:P166 ?p:P585 ?p:ps ?p:YEAR >= \"2000\".\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nGROUP BY ?p\r\nHAVING won_prizes > 0\r\n```"
    },
    {
        "question": "Wie viele afroamerikanische Personen haben einen Stern auf dem Hollywood Walk of Fame?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?act) AS ?result) WHERE {?act wdt:P31 wd:Q5; wdt:P166 wd:Q17985761; wdt:P172 wd:Q49085}",
        "generated_sparql": "SELECT COUNT(*) AS count\r\nWHERE {\r\n  ?p17985761 wdt:P31 wd:Q5. # Hollywood Walk of Fame is an instance of an Afro-American Person\r\n  ?p17985761 wdt:P166 wd:Q49085. # Hollywood Walk of Fame is an award\r\n  ?p17985761 wdt:P172 wd:Q17985761. # Hollywood Walk of Fame is located in Los Angeles\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele afroamerikanische Personen haben einen Stern auf dem Hollywood Walk of Fame?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"afroamerikanische Person\": \"Q5\", \"Hollywood Walk of Fame\": \"Q17985761\", \"Stern\": \"Q49085\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"Auszeichnung\": \"P166\", \"Ort\": \"P172\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS count\r\nWHERE {\r\n  ?p17985761 wdt:P31 wd:Q5. # Hollywood Walk of Fame is an instance of an Afro-American Person\r\n  ?p17985761 wdt:P166 wd:Q49085. # Hollywood Walk of Fame is an award\r\n  ?p17985761 wdt:P172 wd:Q17985761. # Hollywood Walk of Fame is located in Los Angeles\r\n}\r\n```"
    },
    {
        "question": "Mit wie vielen L\u00e4ndern hat Australien eine gemeinsame Grenze?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT(DISTINCT ?country) AS ?result) WHERE {wd:Q408 wdt:P47 ?country. ?country p:P31/ps:P31 wd:Q6256}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?country) AS num_countries\r\nWHERE {\r\n  ?country wdt:P47 wd:Q408 .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Mit wie vielen L\u00e4ndern hat Australien eine gemeinsame Grenze?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Australien\": \"Q408\"}, \"beziehungen\": {\"grenzt an\": \"P47\", \"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?country) AS num_countries\r\nWHERE {\r\n  ?country wdt:P47 wd:Q408 .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\n```"
    },
    {
        "question": "Wie viele chinesische Kaiserinnen gab es?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?result) AS ?resultCnt) WHERE {?result wdt:P39 wd:Q268218; wdt:P21 wd:Q6581072}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?result) AS chinesische_kaiserinnen\r\nWHERE {\r\n  ?result wdt:P39 wd:P21 wd:Q6581072 wd:Q268218\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele chinesische Kaiserinnen gab es?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"chinesische Kaiserin\": \"?result\"}, \"beziehungen\": {\"Titel\": \"P39\", \"Geschlecht\": \"P21\", \"chinesisch\": \"Q6581072\", \"Kaiserin\": \"Q268218\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?result) AS chinesische_kaiserinnen\r\nWHERE {\r\n  ?result wdt:P39 wd:P21 wd:Q6581072 wd:Q268218\r\n}\r\n```"
    },
    {
        "question": "Bei welcher politischen Partei war Joseph Beuys Mitglied?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q153965 wdt:P102 ?result}",
        "generated_sparql": "SELECT ?p ?o WHERE {\r\n  ?p wdt:P102 wd:Q153965 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Bei welcher politischen Partei war Joseph Beuys Mitglied?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Joseph Beuys\": \"Q153965\"}, \"beziehungen\": {\"Mitglied der politischen Partei\": \"P102\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?p ?o WHERE {\r\n  ?p wdt:P102 wd:Q153965 .\r\n}\r\n```"
    },
    {
        "question": "In welchem Jahr wurde der Hollywood Walk of Fame er\u00f6ffnet?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q71719 wdt:P1619 ?year. BIND(YEAR(?year) AS ?result) }",
        "generated_sparql": "SELECT ?year\r\nWHERE {\r\n  ?entit\u00e4t wd:P1619 ?year\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In welchem Jahr wurde der Hollywood Walk of Fame er\u00f6ffnet?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Hollywood Walk of Fame\": \"Q71719\"}, \"beziehungen\": {\"Er\u00f6ffnungsdatum\": \"P1619\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?year\r\nWHERE {\r\n  ?entit\u00e4t wd:P1619 ?year\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(CONTAINS(?entit\u00e4t, \"Hollywood Walk of Fame\"))\r\n}\r\n```"
    },
    {
        "question": "Auf welcher Streaming-Plattform kann ich die Anime-Serie \"Hunter X Hunter\" schauen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q70209136 wdt:P750 ?result. ?result wdt:P31 wd:Q59152282 }",
        "generated_sparql": "SELECT ?streamingPlatform\r\nWHERE {\r\n  ?anime wdt:P31 wd:Q59152282 .\r\n  ?anime wdt:P750 ?streamingPlatform .\r\n  FILTER(CONTAINS(?anime, \"Hunter X Hunter\"))\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Auf welcher Streaming-Plattform kann ich die Anime-Serie \"Hunter X Hunter\" schauen?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Hunter X Hunter\": \"Q70209136\", \"Anime\": \"Q59152282\"}, \"beziehungen\": {\"verf\u00fcgbar auf\": \"P750\", \"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?streamingPlatform\r\nWHERE {\r\n  ?anime wdt:P31 wd:Q59152282 .\r\n  ?anime wdt:P750 ?streamingPlatform .\r\n  FILTER(CONTAINS(?anime, \"Hunter X Hunter\"))\r\n}\r\n```"
    },
    {
        "question": "Personen welchen Alters geh\u00f6ren der Silent Generation an?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q3044693 wdt:P582 ?time. BIND(YEAR(NOW()) - YEAR(?time) AS ?result) }",
        "generated_sparql": "SELECT ?person\r\nWHERE {\r\n  ?person wdt:P582 ?birthYear\r\n  ?person wdt:P3044693 ?silentGeneration\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Personen welchen Alters geh\u00f6ren der Silent Generation an?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Silent Generation\": \"Q3044693\"}, \"beziehungen\": {\"Geburtsjahr\": \"P582\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?person\r\nWHERE {\r\n  ?person wdt:P582 ?birthYear\r\n  ?person wdt:P3044693 ?silentGeneration\r\n}\r\n```"
    },
    {
        "question": "In welchem Jahr ist der Kreis H\u00f6xter entstanden?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q6228 wdt:P571 ?time. BIND(YEAR(?time) AS ?result)}",
        "generated_sparql": "SELECT ?year\r\nWHERE {\r\n  ?s wdt:P571 ?year\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In welchem Jahr ist der Kreis H\u00f6xter entstanden?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Kreis H\u00f6xter\": \"Q6228\"}, \"beziehungen\": {\"Gr\u00fcndungsjahr\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?year\r\nWHERE {\r\n  ?s wdt:P571 ?year\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n}\r\n```"
    },
    {
        "question": "Ist die Linux Foundation auf Twitter verifiziert?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK{wd:Q858851 p:P2002/pq:P1552 wd:Q28378282}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P1552 ?y.\r\n  ?x wdt:P2002 ?z.\r\n  ?y wdt:P31 wd:Q918.\r\n  ?z wdt:P31 wd:Q858851.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Ist die Linux Foundation auf Twitter verifiziert?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Linux Foundation\": \"Q858851\", \"Twitter\": \"Q918\"}, \"beziehungen\": {\"verifiziert\": \"P2002\", \"Verifizierungsstatus\": \"P1552\", \"Twitter-Account\": \"Q28378282\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P1552 ?y.\r\n  ?x wdt:P2002 ?z.\r\n  ?y wdt:P31 wd:Q918.\r\n  ?z wdt:P31 wd:Q858851.\r\n}\r\n```"
    },
    {
        "question": "Wurden Angela Merkel und Tony Blair im selben Jahr geboren?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q567 wdt:P569 ?da. wd:Q9545 wdt:P569 ?dt. FILTER(YEAR(?dt) = YEAR(?da))}",
        "generated_sparql": "SELECT ?x ?y\r\nWHERE {\r\n  ?x wdt:P569 ?y\r\n  wd:Q567 ?x\r\n  wd:Q9545 ?y\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wurden Angela Merkel und Tony Blair im selben Jahr geboren?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Angela Merkel\": \"Q567\", \"Tony Blair\": \"Q9545\"}, \"beziehungen\": {\"Geburtsdatum\": \"P569\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x ?y\r\nWHERE {\r\n  ?x wdt:P569 ?y\r\n  wd:Q567 ?x\r\n  wd:Q9545 ?y\r\n}\r\n```"
    },
    {
        "question": "Sprechen mehr als 100000000 Menschen japanisch?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q5287 wdt:P1098 ?num. FILTER(?num > 100000000)}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?x) ?count\r\nWHERE {\r\n  ?x wdt:P1098 ?y.\r\n  ?y wdt:P31 wd:Q5287.\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Sprechen mehr als 100000000 Menschen japanisch?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Japanisch\": \"Q5287\"}, \"beziehungen\": {\"Anzahl der Sprecher\": \"P1098\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?x) ?count\r\nWHERE {\r\n  ?x wdt:P1098 ?y.\r\n  ?y wdt:P31 wd:Q5287.\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nGROUP BY ?x\r\nHAVING ?count > 100000000\r\n```"
    },
    {
        "question": "Nennen Sie alle Darsteller:innen des Films Red Notice, bei welchem Rawson Marshall Thurber Regie f\u00fchrte.",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q58815001 wdt:P57 wd:Q2745616; wdt:P161 ?result}",
        "generated_sparql": "SELECT ?Darsteller\r\nWHERE {\r\n  ?Film wdt:P57 wd:Q58815001 . # Red Notice\r\n  ?Darsteller wdt:P161 ?Film . # Darsteller\r\n  ?Darsteller wdt:P57 ?Regisseur . # Regisseur\r\n  ?Regisseur wdt:P57 wd:Q2745616 . # Rawson Marshall Thurber\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Nennen Sie alle Darsteller:innen des Films Red Notice, bei welchem Rawson Marshall Thurber Regie f\u00fchrte.' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Red Notice\": \"Q58815001\", \"Rawson Marshall Thurber\": \"Q2745616\"}, \"beziehungen\": {\"Regisseur\": \"P57\", \"Darsteller\": \"P161\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?Darsteller\r\nWHERE {\r\n  ?Film wdt:P57 wd:Q58815001 . # Red Notice\r\n  ?Darsteller wdt:P161 ?Film . # Darsteller\r\n  ?Darsteller wdt:P57 ?Regisseur . # Regisseur\r\n  ?Regisseur wdt:P57 wd:Q2745616 . # Rawson Marshall Thurber\r\n}\r\n```"
    },
    {
        "question": "Das erste Album von Jay Chou.",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{?result wdt:P31 wd:Q482994; wdt:P175 wd:Q238819; wdt:P577 ?date. } ORDER BY ASC(?date) LIMIT 1",
        "generated_sparql": "SELECT ?album\r\nWHERE {\r\n  ?album wdt:P31 wd:Q238819 . # Instanz von\r\n  ?album wdt:P175 wd:Q238819 . # K\u00fcnstler\r\n  ?album wdt:P577 ?date . # Ver\u00f6ffentlichungsdatum\r\n  FILTER(?date = \"2000-01-01\"^^xsd:date) # Das erste Album von Jay Chou\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Das erste Album von Jay Chou.' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Jay Chou\": \"Q238819\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"K\u00fcnstler\": \"P175\", \"Ver\u00f6ffentlichungsdatum\": \"P577\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?album\r\nWHERE {\r\n  ?album wdt:P31 wd:Q238819 . # Instanz von\r\n  ?album wdt:P175 wd:Q238819 . # K\u00fcnstler\r\n  ?album wdt:P577 ?date . # Ver\u00f6ffentlichungsdatum\r\n  FILTER(?date = \"2000-01-01\"^^xsd:date) # Das erste Album von Jay Chou\r\n}\r\n```"
    },
    {
        "question": "Durch welche L\u00e4nder flie\u00dft die Donau?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q1653 wdt:P17 ?result}",
        "generated_sparql": "SELECT ?country\r\nWHERE {\r\n  ?country wdt:P17 wd:Q1653;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Durch welche L\u00e4nder flie\u00dft die Donau?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Donau\": \"Q1653\"}, \"beziehungen\": {\"durchflie\u00dft\": \"P17\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?country\r\nWHERE {\r\n  ?country wdt:P17 wd:Q1653;\r\n}\r\n```"
    },
    {
        "question": "Was fressen Pottwale haupts\u00e4chlich?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q81214 wdt:P1034 ?result}",
        "generated_sparql": "SELECT ?Pottwal\r\nWHERE {\r\n  ?Pottwal wdt:P1034 wd:Q1034. # Pottwal haupts\u00e4chlich\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Was fressen Pottwale haupts\u00e4chlich?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Pottwal\": \"Q81214\"}, \"beziehungen\": {\"haupts\u00e4chliche Nahrung\": \"P1034\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?Pottwal\r\nWHERE {\r\n  ?Pottwal wdt:P1034 wd:Q1034. # Pottwal haupts\u00e4chlich\r\n}\r\n```"
    },
    {
        "question": "War Frida Kahlo eine Surrealistin?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK{wd:Q5588 wdt:P135 wd:Q39427}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P39427 wd:Q5588.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'War Frida Kahlo eine Surrealistin?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Frida Kahlo\": \"Q5588\", \"Surrealismus\": \"Q39427\"}, \"beziehungen\": {\"Bewegung\": \"P135\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P39427 wd:Q5588.\r\n}\r\n```"
    },
    {
        "question": "Wurde die Regie von Funny Games und dessen Neuauflage von unterschiedlichen Menschen gef\u00fchrt?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK{wd:Q696928 wdt:P57 ?dir. wd:Q951002 wdt:P57 ?dir2. FILTER(?dir != ?dir2)}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P57 wd:Q696928 .\r\n  ?x wdt:P57 wd:Q951002 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wurde die Regie von Funny Games und dessen Neuauflage von unterschiedlichen Menschen gef\u00fchrt?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Funny Games\": \"Q696928\", \"Neuauflage\": \"Q951002\"}, \"beziehungen\": {\"Regie\": \"P57\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P57 wd:Q696928 .\r\n  ?x wdt:P57 wd:Q951002 .\r\n}\r\n```"
    },
    {
        "question": "Wurde Google von Bill Gates gegr\u00fcndet?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK{wd:Q95 wdt:P112 wd:Q5284}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P112 wd:Q5284 .\r\n  ?x wdt:P112 wd:Q95 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wurde Google von Bill Gates gegr\u00fcndet?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Google\": \"Q95\", \"Bill Gates\": \"Q5284\"}, \"beziehungen\": {\"Gr\u00fcnder\": \"P112\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P112 wd:Q5284 .\r\n  ?x wdt:P112 wd:Q95 .\r\n}\r\n```"
    },
    {
        "question": "Was ist der 2. Buchstabe im griechischen Alphabet?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{?fl wdt:P31 wd:Q19793459; wdt:P361 wd:Q8216. ?fl wdt:P156 ?result FILTER(NOT EXISTS{?fl wdt:P155 ?we})}",
        "generated_sparql": "SELECT ?greekAlphabet ?secondLetter\nWHERE {\n  ?greekAlphabet wdt:P31 wd:Q8216.\n  ?greekAlphabet wdt:P156 ?secondLetter.\n  ?secondLetter wdt:P155 ?greekAlphabet.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Was ist der 2. Buchstabe im griechischen Alphabet?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"griechisches Alphabet\": \"Q8216\", \"B\": \"Q19793459\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"Position\": \"P156\", \"Vorg\u00e4nger\": \"P155\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?greekAlphabet ?secondLetter\nWHERE {\n  ?greekAlphabet wdt:P31 wd:Q8216.\n  ?greekAlphabet wdt:P156 ?secondLetter.\n  ?secondLetter wdt:P155 ?greekAlphabet.\n}\n```"
    },
    {
        "question": "War Krebs die Ursache f\u00fcr den Tod Steve Jobs', welcher der CEO von Apple war?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q19837 wdt:P509/wdt:P279* wd:Q12078 }",
        "generated_sparql": "SELECT ?s ?p ?o WHERE {\n  ?s wd:P410 ?o.\n  ?s wd:P509 ?o.\n  ?s wd:P108 ?o.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'War Krebs die Ursache f\u00fcr den Tod Steve Jobs', welcher der CEO von Apple war?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Steve Jobs\": \"Q19837\", \"Krebs\": \"Q12078\", \"Apple\": \"Q37922\"}, \"beziehungen\": {\"Todesursache\": \"P509\", \"CEO von\": \"P410\", \"Arbeitgeber\": \"P108\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?s ?p ?o WHERE {\n  ?s wd:P410 ?o.\n  ?s wd:P509 ?o.\n  ?s wd:P108 ?o.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"de\". }\n  FILTER(CONTAINS(?s, \"Q19837\") && CONTAINS(?o, \"Q12078\") && CONTAINS(?o, \"Q37922\"))\n}\n```"
    },
    {
        "question": "War Shaquille O'Neal der Mannschaftskollege von Kobe Bryant im Jahr 2000?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q25369 p:P54 ?ps1. ?ps1 ps:P54 ?team; pq:P580 ?st1; pq:P582 ?et1. wd:Q169452 p:P54 ?ps2. ?ps2 ps:P54 ?team; pq:P580 ?st2; pq:P582 ?et2. FILTER(YEAR(?st1) <= 2000 && YEAR(?et1) >= 2000 && YEAR(?st2) <= 2000 && YEAR(?et2) >= 2000)}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P54 wd:Q25369 .\r\n  ?x wdt:P54 wd:Q169452 .\r\n  FILTER(YEAR(?x) = 2000)\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'War Shaquille O'Neal der Mannschaftskollege von Kobe Bryant im Jahr 2000?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Shaquille O'Neal\": \"Q25369\", \"Kobe Bryant\": \"Q169452\"}, \"beziehungen\": {\"Mannschaftskollege\": \"P54\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P54 wd:Q25369 .\r\n  ?x wdt:P54 wd:Q169452 .\r\n  FILTER(YEAR(?x) = 2000)\r\n}\r\n```"
    },
    {
        "question": "War der Basketballspieler Shaquille O'Neal auch ein Filmschauspieler?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q169452 wdt:P106 wd:Q3665646, wd:Q10800557}",
        "generated_sparql": "SELECT ?x ?y WHERE {\n  ?x wdt:P106 wd:Q10800557.\n  ?x wdt:P39 wd:Q3665646.\n  ?x wdt:P39 wd:Q169452.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'War der Basketballspieler Shaquille O'Neal auch ein Filmschauspieler?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Shaquille O'Neal\": \"Q169452\", \"Basketballspieler\": \"Q3665646\", \"Filmschauspieler\": \"Q10800557\"}, \"beziehungen\": {\"Beruf\": \"P106\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?x ?y WHERE {\n  ?x wdt:P106 wd:Q10800557.\n  ?x wdt:P39 wd:Q3665646.\n  ?x wdt:P39 wd:Q169452.\n}\n```"
    },
    {
        "question": "Wurde das erste Album der Band Darkside in 2012 herausgebracht?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {?album wdt:P31 wd:Q482994; wdt:P175 wd:Q16954319; wdt:P577 ?date FILTER(NOT EXISTS{?album2 wdt:P31 wd:Q482994; wdt:P175 wd:Q16954319; wdt:P577 ?date2 FILTER(?date2 < ?date)} && YEAR(?date) = 2012)}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P31 wd:Q16954319;\r\n  ?x wdt:P577 wd:2012-01-01;\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\";\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wurde das erste Album der Band Darkside in 2012 herausgebracht?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Darkside\": \"Q482994\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"Band\": \"Q16954319\", \"Ver\u00f6ffentlichungsdatum\": \"P577\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P31 wd:Q16954319;\r\n  ?x wdt:P577 wd:2012-01-01;\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\";\r\n  }\r\n}\r\n```"
    },
    {
        "question": "Welche Spin-offs von Breaking Bad gibt es?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1079 wdt:P2512 ?result}",
        "generated_sparql": "SELECT ?s\r\nWHERE {\r\n  ?s wdt:P2512 wd:Q1079 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welche Spin-offs von Breaking Bad gibt es?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Breaking Bad\": \"Q1079\"}, \"beziehungen\": {\"Spin-off von\": \"P2512\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s\r\nWHERE {\r\n  ?s wdt:P2512 wd:Q1079 .\r\n}\r\n```"
    },
    {
        "question": "Welcher Fluss flie\u00dft durch den Grand Canyon?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q4022. wd:Q118841 wdt:P206 ?result}",
        "generated_sparql": "SELECT ?Fluss\nWHERE {\n  ?Fluss wdt:P31 wd:Q4022.\n  ?Fluss wdt:P206 wd:Q118841.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welcher Fluss flie\u00dft durch den Grand Canyon?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Grand Canyon\": \"Q118841\", \"Fluss\": \"Q4022\"}, \"beziehungen\": {\"durchflie\u00dft\": \"P206\", \"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?Fluss\nWHERE {\n  ?Fluss wdt:P31 wd:Q4022.\n  ?Fluss wdt:P206 wd:Q118841.\n}\n```"
    },
    {
        "question": "Welches Schl\u00fcsselereignis gab es im Zusammenhang mit Salvador Dal\u00ed?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q5577 wdt:P793 ?result}",
        "generated_sparql": "SELECT ?event\r\nWHERE {\r\n  ?event wdt:P793 wd:Q5577 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welches Schl\u00fcsselereignis gab es im Zusammenhang mit Salvador Dal\u00ed?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Salvador Dal\u00ed\": \"Q5577\"}, \"beziehungen\": {\"Schl\u00fcsselereignis\": \"P793\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?event\r\nWHERE {\r\n  ?event wdt:P793 wd:Q5577 .\r\n}\r\n```"
    },
    {
        "question": "Wer erlie\u00df das Gesetz \u00fcber die Durchf\u00fchrung von Ma\u00dfnahmen des Arbeitsschutzes zur Verbesserung der Sicherheit und des Gesundheitsschutzes?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?act wdt:P31 wd:Q1006079; wdt:P361 wd:Q629029; wdt:P1001 wd:Q183; wdt:P467 ?result}",
        "generated_sparql": "SELECT ?title\r\nWHERE {\r\n  ?gesetz wdt:P31 wd:Q629029 .\r\n  ?gesetz wdt:P361 ?instanz .\r\n  ?instanz wdt:P1001 ?title .\r\n  ?gesetz wdt:erlassen_durch ?verordneter .\r\n  ?verordneter wdt:P467 ?verordneter_name .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer erlie\u00df das Gesetz \u00fcber die Durchf\u00fchrung von Ma\u00dfnahmen des Arbeitsschutzes zur Verbesserung der Sicherheit und des Gesundheitsschutzes?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Gesetz \u00fcber die Durchf\u00fchrung von Ma\u00dfnahmen des Arbeitsschutzes zur Verbesserung der Sicherheit und des Gesundheitsschutzes\": \"Q629029\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"Verordnet in\": \"P361\", \"Titel\": \"P1001\", \"erlassen durch\": \"P467\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?title\r\nWHERE {\r\n  ?gesetz wdt:P31 wd:Q629029 .\r\n  ?gesetz wdt:P361 ?instanz .\r\n  ?instanz wdt:P1001 ?title .\r\n  ?gesetz wdt:erlassen_durch ?verordneter .\r\n  ?verordneter wdt:P467 ?verordneter_name .\r\n}\r\n```"
    },
    {
        "question": "Wie lauten die deutschen Namen akademischer Fachrichtungen, die \"Linguistik\" beinhalten?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?disc wdt:P31 wd:Q11862829; rdfs:label ?result FILTER(langMatches(lang(?result),\"de\") && regex(?result,\"linguistik\"))}",
        "generated_sparql": "SELECT ?label\r\nWHERE {\r\n  ?entity wdt:P31 wd:Q11862829;\r\n  ?entity wd:rdfs:label ?label\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie lauten die deutschen Namen akademischer Fachrichtungen, die \"Linguistik\" beinhalten?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Linguistik\": \"Q11862829\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"Bezeichnung\": \"rdfs:label\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?label\r\nWHERE {\r\n  ?entity wdt:P31 wd:Q11862829;\r\n  ?entity wd:rdfs:label ?label\r\n}\r\n```"
    },
    {
        "question": "Wie lauten die Namen der Staatsoberh\u00e4upter Deutschlands und Frankreichs?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {{wd:Q183 wdt:P35 ?result} UNION {wd:Q142 wdt:P35 ?result}}",
        "generated_sparql": "SELECT ?label\r\nWHERE {\r\n  ?s wdt:P35 ?o.\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie lauten die Namen der Staatsoberh\u00e4upter Deutschlands und Frankreichs?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Deutschland\": \"Q183\", \"Frankreich\": \"Q142\"}, \"beziehungen\": {\"Staatsoberhaupt\": \"P35\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?label\r\nWHERE {\r\n  ?s wdt:P35 ?o.\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(CONTAINS(?label, \"Deutschland\") || CONTAINS(?label, \"Frankreich\"))\r\n}\r\n```"
    },
    {
        "question": "Was sind die Berufe von John Lennons S\u00f6hnen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?son wdt:P22 wd:Q1203; wdt:P31 wd:Q5; wdt:P106 ?result}",
        "generated_sparql": "SELECT ?b.label\r\nWHERE {\r\n  ?p106 wdt:P106 wd:Q1203.\r\n  ?p106 wdt:P22 ?p31.\r\n  ?p31 wdt:P31 ?b.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Was sind die Berufe von John Lennons S\u00f6hnen?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"John Lennon\": \"Q1203\", \"Sohn\": \"Q5\"}, \"beziehungen\": {\"Vater\": \"P22\", \"Instanz von\": \"P31\", \"Beruf\": \"P106\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?b.label\r\nWHERE {\r\n  ?p106 wdt:P106 wd:Q1203.\r\n  ?p106 wdt:P22 ?p31.\r\n  ?p31 wdt:P31 ?b.\r\n}\r\n```"
    },
    {
        "question": "Wie lauten die Filmtitel der \"Star Wars\"-Reihe?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?film wdt:P1476 ?result; wdt:P179 wd:Q22092344 FILTER(EXISTS{?film wdt:P31/wdt:P279* wd:Q11424})}",
        "generated_sparql": "SELECT ?title\r\nWHERE {\r\n  ?film wdt:P1476 ?title ;\r\n  ?film wdt:P31 wd:Q22092344 ;\r\n  ?film wdt:P279 wd:Q11424 ;\r\n  ?film wdt:P179 wd:Q11424\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie lauten die Filmtitel der \"Star Wars\"-Reihe?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Star Wars\": \"Q22092344\", \"Film\": \"Q11424\"}, \"beziehungen\": {\"Titel\": \"P1476\", \"Instanz von\": \"P31\", \"Teil von\": \"P279\", \"Serie\": \"P179\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?title\r\nWHERE {\r\n  ?film wdt:P1476 ?title ;\r\n  ?film wdt:P31 wd:Q22092344 ;\r\n  ?film wdt:P279 wd:Q11424 ;\r\n  ?film wdt:P179 wd:Q11424\r\n}\r\n```"
    },
    {
        "question": "Was kam zuerst: die Fernsehsendung Familie Feuerstein oder das Ende der rassistischen Diskriminierung im US-Wahlrecht ?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{ BIND(IF(EXISTS{wd:Q201358 wdt:P580 ?date1. wd:Q1608064 wdt:P577 ?date2. FILTER(?date1 < ?date2)},wd:Q201358 , wd:Q1608064) AS ?result)}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P580 wd:Q201358;\r\n  ?x wdt:P577 wd:Q1608064;\r\n}\r\nORDER BY ?x wdt:P577 DESC\r\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Was kam zuerst: die Fernsehsendung Familie Feuerstein oder das Ende der rassistischen Diskriminierung im US-Wahlrecht ?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Familie Feuerstein\": \"Q201358\", \"Ende der rassistischen Diskriminierung im US-Wahlrecht\": \"Q1608064\"}, \"beziehungen\": {\"Erstausstrahlung\": \"P580\", \"Erscheinungsdatum\": \"P577\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P580 wd:Q201358;\r\n  ?x wdt:P577 wd:Q1608064;\r\n}\r\nORDER BY ?x wdt:P577 DESC\r\nLIMIT 1;\r\n```"
    },
    {
        "question": "Welche Farben hat die deutsche Flagge?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q48160 wdt:P462 ?result}",
        "generated_sparql": "SELECT ?Farbe\r\nWHERE {\r\n  ?S PARTIAL \"Q48160\".\r\n  ?S wdt:P462 ?Farbe.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welche Farben hat die deutsche Flagge?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Deutschland\": \"Q48160\"}, \"beziehungen\": {\"Farbe\": \"P462\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?Farbe\r\nWHERE {\r\n  ?S PARTIAL \"Q48160\".\r\n  ?S wdt:P462 ?Farbe.\r\n}\r\n```"
    },
    {
        "question": "Wof\u00fcr standen die Suffragetten?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q322170 wdt:P279/wdt:P425/wdt:P3712 ?result}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P279 wd:Q322170 .\r\n  ?x wdt:P425 wd:Q322170 .\r\n  ?x wdt:P3712 wd:Q322170 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wof\u00fcr standen die Suffragetten?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Suffragetten\": \"Q322170\"}, \"beziehungen\": {\"f\u00fcr\": \"P279\", \"Zweck\": \"P425\", \"Anliegen\": \"P3712\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P279 wd:Q322170 .\r\n  ?x wdt:P425 wd:Q322170 .\r\n  ?x wdt:P3712 wd:Q322170 .\r\n}\r\n```"
    },
    {
        "question": "Wie nennt man die weibliche Form eines Kaisers auf Englisch?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q39018 wdt:P2521 ?result. FILTER(langMatches(lang(?result),\"en\"))}",
        "generated_sparql": "SELECT ?label\r\nWHERE {\r\n  ?s wdt:P2521 ?o;\r\n  wd:Q39018 ?s;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie nennt man die weibliche Form eines Kaisers auf Englisch?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Kaiser\": \"Q39018\"}, \"beziehungen\": {\"weibliche Form\": \"P2521\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?label\r\nWHERE {\r\n  ?s wdt:P2521 ?o;\r\n  wd:Q39018 ?s;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\n```"
    },
    {
        "question": "Welches Ereignis zwischen 1910 und 1920 t\u00f6tete die meisten Menschen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P1120 ?num; wdt:P580 ?st; wdt:P582 ?et. FILTER((EXISTS{?result wdt:P31/wdt:P279* wd:Q1190554}) &&(YEAR(?st) >= 1910) && (YEAR(?et) <= 1920))}ORDER BY DESC(?num) LIMIT 1",
        "generated_sparql": "SELECT ?result\r\nWHERE {\r\n  ?result wdt:P1120 ?todesopfer;\r\n  ?result wdt:P580 ?beginn;\r\n  ?result wdt:P582 ?ende;\r\n  ?result wikibase:instanceOf wikibase:Ereignis;\r\n  ?result wikibase:P279 wikibase:SpanischerGrippe;\r\n  FILTER(?beginn <= \"1910\" && ?beginn <= \"1920\" && ?todesopfer > 0)\r\n}\r\nORDER BY ?todesopfer DESC\r\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welches Ereignis zwischen 1910 und 1920 t\u00f6tete die meisten Menschen?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Ereignis\": \"?result\", \"Spanischer Grippe\": \"Q1190554\"}, \"beziehungen\": {\"Anzahl der Todesopfer\": \"P1120\", \"Beginn\": \"P580\", \"Ende\": \"P582\", \"Instanz von\": \"P31\", \"Unterklasse von\": \"P279\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?result\r\nWHERE {\r\n  ?result wdt:P1120 ?todesopfer;\r\n  ?result wdt:P580 ?beginn;\r\n  ?result wdt:P582 ?ende;\r\n  ?result wikibase:instanceOf wikibase:Ereignis;\r\n  ?result wikibase:P279 wikibase:SpanischerGrippe;\r\n  FILTER(?beginn <= \"1910\" && ?beginn <= \"1920\" && ?todesopfer > 0)\r\n}\r\nORDER BY ?todesopfer DESC\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Existiert das Unternehmen ATI noch?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {FILTER(NOT EXISTS {wd:Q213849 wdt:P576 ?o})}",
        "generated_sparql": "SELECT COUNT(*) > 0 AS existiert\r\nWHERE {\r\n  ?s wdt:P576 ?o\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Existiert das Unternehmen ATI noch?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"ATI\": \"Q213849\"}, \"beziehungen\": {\"Aufl\u00f6sungsdatum\": \"P576\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) > 0 AS existiert\r\nWHERE {\r\n  ?s wdt:P576 ?o\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  WHERE {\r\n    ?s wikibase:label ?l\r\n    FILTER(CONTAINS(?l, \"ATI\"))\r\n  }\r\n}\r\n```"
    },
    {
        "question": "Was geschah mit den Dinosauriern?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q430 wdt:P793 ?result}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P793 wd:Q430\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Was geschah mit den Dinosauriern?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Dinosaurier\": \"Q430\"}, \"beziehungen\": {\"Ursache des Todes\": \"P793\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P793 wd:Q430\r\n}\r\n```"
    },
    {
        "question": "Welche Instrumente spielte Louis Armstrong?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1779 wdt:P1303 ?result}",
        "generated_sparql": "SELECT ?instrument\r\nWHERE {\r\n  ?instrument wdt:P1303 wd:Q1779.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welche Instrumente spielte Louis Armstrong?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Louis Armstrong\": \"Q1779\"}, \"beziehungen\": {\"Instrument\": \"P1303\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?instrument\r\nWHERE {\r\n  ?instrument wdt:P1303 wd:Q1779.\r\n}\r\n```"
    },
    {
        "question": "Woran ist der Autor der Redewendung \"Alea iacta est\" gestorben?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q271723 wdt:P50/wdt:P509 ?result}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P509 ?y\r\n  ?x wdt:P50 ?z\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Woran ist der Autor der Redewendung \"Alea iacta est\" gestorben?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Autor der Redewendung 'Alea iacta est'\": \"Q271723\"}, \"beziehungen\": {\"Todesursache\": \"P509\", \"Tod\": \"P50\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P509 ?y\r\n  ?x wdt:P50 ?z\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n  FILTER(CONTAINS(?y, \"Alea iacta est\"))\r\n}\r\n```"
    },
    {
        "question": "Welches bin\u00e4re Geschlecht hat der/die Partner:in von Allen Ginsberg?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q6711 wdt:P451/wdt:P21 ?result}",
        "generated_sparql": "SELECT ?partner ?gender\r\nWHERE {\r\n  ?person wdt:P451 ?partner .\r\n  ?person wdt:P21 ?gender .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welches bin\u00e4re Geschlecht hat der/die Partner:in von Allen Ginsberg?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Allen Ginsberg\": \"Q6711\"}, \"beziehungen\": {\"Partner\": \"P451\", \"Geschlecht\": \"P21\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?partner ?gender\r\nWHERE {\r\n  ?person wdt:P451 ?partner .\r\n  ?person wdt:P21 ?gender .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"de\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"fr\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"es\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"it\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"pt\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"ru\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"zh-cn\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"zh-tw\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"ar\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"he\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"fa\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"ur\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"sw\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"am\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"so\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"rw\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikib"
    },
    {
        "question": "Was ist die Hauptstadt des Verwaltungsbezirks Tokio?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1490 wdt:P36 ?result}",
        "generated_sparql": "SELECT ?s\r\nWHERE {\r\n  ?s wdt:P36 wd:Q1490.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Was ist die Hauptstadt des Verwaltungsbezirks Tokio?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Tokio\": \"Q1490\"}, \"beziehungen\": {\"Hauptstadt\": \"P36\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s\r\nWHERE {\r\n  ?s wdt:P36 wd:Q1490.\r\n}\r\n```"
    },
    {
        "question": "Welches Tier kommt im chinesischen Tierkreis nach dem B\u00fcffel?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q79226802; wdt:P155 wd:Q599644}",
        "generated_sparql": "SELECT ?tier\r\nWHERE {\r\n  ?tier wdt:P31 wd:Q79226802 ; # Instanz von chinesischer Tierkreis\r\n  ?tier wdt:P155 wd:Q599644 ; # nach B\u00fcffel\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welches Tier kommt im chinesischen Tierkreis nach dem B\u00fcffel?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"chinesischer Tierkreis\": \"Q79226802\", \"B\u00fcffel\": \"Q599644\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"nach\": \"P155\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?tier\r\nWHERE {\r\n  ?tier wdt:P31 wd:Q79226802 ; # Instanz von chinesischer Tierkreis\r\n  ?tier wdt:P155 wd:Q599644 ; # nach B\u00fcffel\r\n}\r\n```"
    },
    {
        "question": "Was ist der gemeinsame Umsatz der drei, nach Anzahl an Besch\u00e4ftigten, gr\u00f6\u00dften Tech Unternehmen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (SUM(?rev) AS ?result) WHERE {{SELECT DISTINCT ?company WHERE {?company wdt:P361 wd:Q30748112. ?company wdt:P1128 ?num} ORDER BY DESC(?num) LIMIT 3} ?company p:P2139 ?ps. ?ps ps:P2139 ?rev; pq:P585 ?time. FILTER(NOT EXISTS{?company p:P2139/pq:P585 ?time2 FILTER(?time2 > ?time)})}",
        "generated_sparql": "SELECT (SUM(?w.P2139) / COUNT(DISTINCT ?w.P361)) AS gemeinsamer_Umsatz\r\nWHERE {\r\n  ?w wdt:P1128 ?wdt:P361;\r\n  ?w wdt:P2139 ?wdt:P361;\r\n  ?w wdt:P585 ?wdt:P361;\r\n}\r\nGROUP BY ?w\r\nHAVING COUNT(DISTINCT ?w.P361) = 3",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Was ist der gemeinsame Umsatz der drei, nach Anzahl an Besch\u00e4ftigten, gr\u00f6\u00dften Tech Unternehmen?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Tech-Unternehmen\": \"Q30748112\"}, \"beziehungen\": {\"Anzahl der Besch\u00e4ftigten\": \"P1128\", \"Umsatz\": \"P2139\", \"Zeitpunkt\": \"P585\", \"Wert\": \"P2139\", \"Unternehmen\": \"P361\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT (SUM(?w.P2139) / COUNT(DISTINCT ?w.P361)) AS gemeinsamer_Umsatz\r\nWHERE {\r\n  ?w wdt:P1128 ?wdt:P361;\r\n  ?w wdt:P2139 ?wdt:P361;\r\n  ?w wdt:P585 ?wdt:P361;\r\n}\r\nGROUP BY ?w\r\nHAVING COUNT(DISTINCT ?w.P361) = 3\r\n```"
    },
    {
        "question": "Wie lauten die Koordinaten von Shenzhen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT  DISTINCT ?result WHERE {wd:Q15174 wdt:P625 ?result}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P625 wd:Q15174.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie lauten die Koordinaten von Shenzhen?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Shenzhen\": \"Q15174\"}, \"beziehungen\": {\"Koordinaten\": \"P625\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P625 wd:Q15174.\r\n}\r\n```"
    },
    {
        "question": "Was ist das Erlangen Programm?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q315296 wdt:P31 ?result}",
        "generated_sparql": "SELECT ?programm\r\nWHERE {\r\n  ?programm wdt:P31 wd:Q315296.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Was ist das Erlangen Programm?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Erlangen\": \"Q315296\"}, \"beziehungen\": {\"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?programm\r\nWHERE {\r\n  ?programm wdt:P31 wd:Q315296.\r\n}\r\n```"
    },
    {
        "question": "Produzierte die Roland Corporation Synthesizers?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {?result wdt:P31 wd:Q163829; wdt:P176 wd:Q848490}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P31 wd:Q848490;\r\n  ?x wdt:P176 wd:Q163829;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Produzierte die Roland Corporation Synthesizers?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Roland Corporation\": \"Q163829\", \"Synthesizer\": \"Q848490\"}, \"beziehungen\": {\"Hersteller\": \"P176\", \"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P31 wd:Q848490;\r\n  ?x wdt:P176 wd:Q163829;\r\n}\r\n```"
    },
    {
        "question": "Wie viele Personen besch\u00e4ftigt der Hafen von Rotterdam?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1027807 wdt:P1128 ?result}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?x) AS Anzahl_der_Besch\u00e4ftigten\r\nWHERE {\r\n  ?x wdt:P1128 wd:Q1027807.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele Personen besch\u00e4ftigt der Hafen von Rotterdam?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Hafen von Rotterdam\": \"Q1027807\"}, \"beziehungen\": {\"Anzahl der Besch\u00e4ftigten\": \"P1128\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?x) AS Anzahl_der_Besch\u00e4ftigten\r\nWHERE {\r\n  ?x wdt:P1128 wd:Q1027807.\r\n}\r\n```"
    },
    {
        "question": "Was ist das Hauptthema des Manga \"your lie in april\": Sch\u00fcler von Grundschule, Realschule oder Gymnasium?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q11419997 wdt:P921 ?result. FILTER(?result IN (wd:Q16003605, wd:Q16003532, wd:Q15360275))}",
        "generated_sparql": "SELECT ?hauptthema\r\nWHERE {\r\n  ?manga wdt:P921 ?hauptthema;\r\n  wd:Q11419997 wdt:P31 ?manga;\r\n  ?manga wdt:P31 ?school;\r\n  wd:Q16003605 wdt:P31 ?school;\r\n  wd:Q16003532 wdt:P31 ?school;\r\n  wd:Q15360275 wdt:P31 ?school;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Was ist das Hauptthema des Manga \"your lie in april\": Sch\u00fcler von Grundschule, Realschule oder Gymnasium?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Your Lie in April\": \"Q11419997\", \"Grundschule\": \"Q16003605\", \"Realschule\": \"Q16003532\", \"Gymnasium\": \"Q15360275\"}, \"beziehungen\": {\"Hauptthema\": \"P921\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?hauptthema\r\nWHERE {\r\n  ?manga wdt:P921 ?hauptthema;\r\n  wd:Q11419997 wdt:P31 ?manga;\r\n  ?manga wdt:P31 ?school;\r\n  wd:Q16003605 wdt:P31 ?school;\r\n  wd:Q16003532 wdt:P31 ?school;\r\n  wd:Q15360275 wdt:P31 ?school;\r\n}\r\n```"
    },
    {
        "question": "Was ist die Muttersprache der Autorin Chimamanda Ngozi Adichie?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q230141 wdt:P103 ?result}",
        "generated_sparql": "SELECT ?muttersprache\nWHERE {\n  ?person wdt:P103 ?muttersprache.\n  wd:Q230141 wdt:P31 ?person.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Was ist die Muttersprache der Autorin Chimamanda Ngozi Adichie?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Chimamanda Ngozi Adichie\": \"Q230141\"}, \"beziehungen\": {\"Muttersprache\": \"P103\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?muttersprache\nWHERE {\n  ?person wdt:P103 ?muttersprache.\n  wd:Q230141 wdt:P31 ?person.\n}\n```"
    },
    {
        "question": "Wer war der Partner von Allen Ginsberg?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q6711 wdt:P451 ?result}",
        "generated_sparql": "SELECT ?partner\r\nWHERE {\r\n  ?person wdt:P451 ?partner .\r\n  ?person wd:Q6711 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer war der Partner von Allen Ginsberg?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Allen Ginsberg\": \"Q6711\"}, \"beziehungen\": {\"Partner\": \"P451\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?partner\r\nWHERE {\r\n  ?person wdt:P451 ?partner .\r\n  ?person wd:Q6711 .\r\n}\r\n```"
    },
    {
        "question": "Wie hei\u00dft das zweite Spiel von Piranha Bytes?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{?result wdt:P178 wd:Q677273; wdt:P577 ?date} ORDER BY ASC(?date) OFFSET 1 LIMIT 1",
        "generated_sparql": "SELECT ?game\r\nWHERE {\r\n  ?game wdt:P178 wd:Q677273 .\r\n  ?game wdt:P577 ?date .\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie hei\u00dft das zweite Spiel von Piranha Bytes?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Piranha Bytes\": \"Q677273\"}, \"beziehungen\": {\"Entwickler\": \"P178\", \"Ver\u00f6ffentlichungsdatum\": \"P577\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?game\r\nWHERE {\r\n  ?game wdt:P178 wd:Q677273 .\r\n  ?game wdt:P577 ?date .\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n}\r\nORDER BY ?date DESC\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Wie lautet die Fernsehsendung mit Rowan Atkinson, welche 4 Staffeln hatte und im Jahre 1983 startete?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{?result wdt:P31 wd:Q5398426; wdt:P161 wd:Q23760; wdt:P2437 ?season; wdt:P580 ?time FILTER((YEAR(?time) = 1983) && (?season = 4))}",
        "generated_sparql": "SELECT ?Fernsehsendung\r\nWHERE {\r\n  ?Fernsehsendung wdt:P31. # Instanz von Fernsehsendung\r\n  ?Fernsehsendung wdt:P161 ?RowanAtkinson. # Darsteller Rowan Atkinson\r\n  ?Fernsehsendung wdt:P2437 ?Staffeln. # Anzahl der Staffeln\r\n  ?Fernsehsendung wdt:P580 ?Startdatum. # Startdatum\r\n  FILTER(?Startdatum = \"1983-01-01\".)\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie lautet die Fernsehsendung mit Rowan Atkinson, welche 4 Staffeln hatte und im Jahre 1983 startete?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Rowan Atkinson\": \"Q23760\", \"Fernsehsendung\": \"Q5398426\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"Darsteller\": \"P161\", \"Anzahl der Staffeln\": \"P2437\", \"Startdatum\": \"P580\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?Fernsehsendung\r\nWHERE {\r\n  ?Fernsehsendung wdt:P31. # Instanz von Fernsehsendung\r\n  ?Fernsehsendung wdt:P161 ?RowanAtkinson. # Darsteller Rowan Atkinson\r\n  ?Fernsehsendung wdt:P2437 ?Staffeln. # Anzahl der Staffeln\r\n  ?Fernsehsendung wdt:P580 ?Startdatum. # Startdatum\r\n  FILTER(?Startdatum = \"1983-01-01\".)\r\n}\r\n```"
    },
    {
        "question": "Wie lautet der englische Spitzname von Ella Fitzgerald?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1768 wdt:P1449 ?result. FILTER(langMatches(lang(?result),\"en\"))}",
        "generated_sparql": "SELECT ?label\r\nWHERE {\r\n  ?s wdt:P1449 ?label\r\n  wd:Q1768 wdt:P31 ?s\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie lautet der englische Spitzname von Ella Fitzgerald?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Ella Fitzgerald\": \"Q1768\"}, \"beziehungen\": {\"Spitzname\": \"P1449\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?label\r\nWHERE {\r\n  ?s wdt:P1449 ?label\r\n  wd:Q1768 wdt:P31 ?s\r\n}\r\n```"
    },
    {
        "question": "Welche Berufe hat Kazuo Ishiguros Tochter?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q272855 wdt:P40 ?d. ?d wdt:P21 wd:Q6581072; wdt:P106 ?result}",
        "generated_sparql": "SELECT ?b.label\r\nWHERE {\r\n  ?p := wd:P40\r\n  ?c := wd:Q6581072\r\n  ?g := wd:P21\r\n  ?b := wd:Q272855\r\n  ?b wd:P106 ?c\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welche Berufe hat Kazuo Ishiguros Tochter?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Kazuo Ishiguro\": \"Q272855\", \"Tochter\": \"Q6581072\"}, \"beziehungen\": {\"Tochter\": \"P40\", \"Geschlecht\": \"P21\", \"Beruf\": \"P106\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?b.label\r\nWHERE {\r\n  ?p := wd:P40\r\n  ?c := wd:Q6581072\r\n  ?g := wd:P21\r\n  ?b := wd:Q272855\r\n  ?b wd:P106 ?c\r\n}\r\n```"
    },
    {
        "question": "Welche Berufe hatte Nat King Cole?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q137042 wdt:P106 ?result}",
        "generated_sparql": "SELECT ?b\r\nWHERE {\r\n  ?p wdt:P106 wd:Q137042.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welche Berufe hatte Nat King Cole?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Nat King Cole\": \"Q137042\"}, \"beziehungen\": {\"Beruf\": \"P106\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?b\r\nWHERE {\r\n  ?p wdt:P106 wd:Q137042.\r\n}\r\n```"
    },
    {
        "question": "Was ist die offizielle Landessprache in Iran?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q794 wdt:P37 ?result}",
        "generated_sparql": "SELECT ?lang\nWHERE {\n  ?entit\u00e4t wdt:P37 ?lang.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Was ist die offizielle Landessprache in Iran?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Iran\": \"Q794\"}, \"beziehungen\": {\"offizielle Landessprache\": \"P37\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?lang\nWHERE {\n  ?entit\u00e4t wdt:P37 ?lang.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  FILTER(CONTAINS(?entit\u00e4t, \"Iran\") && CONTAINS(?lang, \"Persian\"))\n}\n```"
    },
    {
        "question": "Wie hoch ist die Bev\u00f6lkerungszahl von Freiburg?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q2833 wdt:P1082 ?result}",
        "generated_sparql": "SELECT ?bev\u00f6lkerung\r\nWHERE {\r\n  ?s wdt:P1082 ?bev\u00f6lkerung;\r\n  wd:Q2833 wdt:P31 ?s\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie hoch ist die Bev\u00f6lkerungszahl von Freiburg?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Freiburg\": \"Q2833\"}, \"beziehungen\": {\"Bev\u00f6lkerung\": \"P1082\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?bev\u00f6lkerung\r\nWHERE {\r\n  ?s wdt:P1082 ?bev\u00f6lkerung;\r\n  wd:Q2833 wdt:P31 ?s\r\n}\r\n```"
    },
    {
        "question": "Wie lautet der Titel des 2020 erschienenen Films mit Carey Mulligan als Hauptdarstellerin?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?movie wdt:P31 wd:Q11424; wdt:P161 wd:Q219655; wdt:P577 ?time; wdt:P1476 ?result FILTER(YEAR(?time) = 2020)}",
        "generated_sparql": "SELECT ?title WHERE {\n  ?film wdt:P11424.\n  ?film wdt:P577 \"2020\".\n  ?film wdt:P161 ?actor.\n  ?actor wdt:P1476 ?title.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie lautet der Titel des 2020 erschienenen Films mit Carey Mulligan als Hauptdarstellerin?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Carey Mulligan\": \"Q219655\", \"Film\": \"Q11424\"}, \"beziehungen\": {\"Hauptdarsteller\": \"P161\", \"Titel\": \"P1476\", \"Erscheinungsjahr\": \"P577\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?title WHERE {\n  ?film wdt:P11424.\n  ?film wdt:P577 \"2020\".\n  ?film wdt:P161 ?actor.\n  ?actor wdt:P1476 ?title.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n}\n```"
    },
    {
        "question": "Was produziert Ray-Ban haupts\u00e4chlich?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q653941 wdt:P1056 ?result}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P1056 wd:Q653941.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Was produziert Ray-Ban haupts\u00e4chlich?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Ray-Ban\": \"Q653941\"}, \"beziehungen\": {\"Hersteller\": \"P1056\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P1056 wd:Q653941.\r\n}\r\n```"
    },
    {
        "question": "Welche Sprache sprach der ber\u00fchmte K\u00f6nig, der auch Aristoteles Sch\u00fcler war?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q868 wdt:P802 ?king. ?king wdt:P97 wd:Q12097; wdt:P1412 ?result}",
        "generated_sparql": "SELECT ?lang\nWHERE {\n  ?person wdt:P802 wd:Q868.\n  ?person wdt:P1412 ?lang.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welche Sprache sprach der ber\u00fchmte K\u00f6nig, der auch Aristoteles Sch\u00fcler war?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Aristoteles\": \"Q868\", \"K\u00f6nig\": \"Q12097\"}, \"beziehungen\": {\"Sch\u00fcler\": \"P802\", \"Muttersprache\": \"P1412\", \"Vater\": \"P97\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?lang\nWHERE {\n  ?person wdt:P802 wd:Q868.\n  ?person wdt:P1412 ?lang.\n}\n```"
    },
    {
        "question": "Welche Sprache wird in Polen gesprochen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q36 wdt:P2936 ?result}",
        "generated_sparql": "SELECT ?lang\r\nWHERE {\r\n  ?lang wdt:P2936 wd:Q36;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welche Sprache wird in Polen gesprochen?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Polen\": \"Q36\"}, \"beziehungen\": {\"offizielle Sprache\": \"P2936\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?lang\r\nWHERE {\r\n  ?lang wdt:P2936 wd:Q36;\r\n}\r\n```"
    },
    {
        "question": "Wie viele verschiedene Sprachen werden in Westeuropa gesprochen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?lan) AS ?result) WHERE {wd:Q27496 wdt:P527/wdt:P2936 ?lan}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?s) AS num_languages\r\nWHERE {\r\n  ?s wdt:P2936 wd:Q27496;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele verschiedene Sprachen werden in Westeuropa gesprochen?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Westeuropa\": \"Q27496\"}, \"beziehungen\": {\"offizielle Sprache\": \"P527\", \"Sprache\": \"P2936\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?s) AS num_languages\r\nWHERE {\r\n  ?s wdt:P2936 wd:Q27496;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nGROUP BY ?s\r\nHAVING num_languages > 1\r\n```"
    },
    {
        "question": "Ist Deutschland gr\u00f6\u00dfer als Polen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q183 p:P2046/psn:P2046/wikibase:quantityAmount ?ag. wd:Q36 p:P2046/psn:P2046/wikibase:quantityAmount ?ap FILTER(?ag > ?ap)}",
        "generated_sparql": "SELECT ?x ?y\r\nWHERE {\r\n  ?x wdt:P2046 ?y;\r\n  ?x wd:Q183;\r\n  ?y wd:Q36;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Ist Deutschland gr\u00f6\u00dfer als Polen?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Deutschland\": \"Q183\", \"Polen\": \"Q36\"}, \"beziehungen\": {\"Fl\u00e4che\": \"P2046\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x ?y\r\nWHERE {\r\n  ?x wdt:P2046 ?y;\r\n  ?x wd:Q183;\r\n  ?y wd:Q36;\r\n}\r\n```"
    },
    {
        "question": "Aus welchen Noten besteht ein C-Dur Akkord?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q55706505 wdt:P527 ?result. ?result wdt:P31 wd:Q263478}",
        "generated_sparql": "SELECT ?note\r\nWHERE {\r\n  ?note wdt:P31 wd:Q263478;\r\n  ?note wdt:P527 wd:Q55706505;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Aus welchen Noten besteht ein C-Dur Akkord?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"C-Dur-Akkord\": \"Q55706505\", \"Note\": \"Q263478\"}, \"beziehungen\": {\"besteht aus\": \"P527\", \"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?note\r\nWHERE {\r\n  ?note wdt:P31 wd:Q263478;\r\n  ?note wdt:P527 wd:Q55706505;\r\n}\r\n```"
    },
    {
        "question": "Wie viele verschiedene Berufe \u00fcben/\u00fcbten die Ehepartner von Gewinnern des Literatur-Nobelpreises aus?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?occ) AS ?result) WHERE {?winner wdt:P166 wd:Q37922; wdt:P26/wdt:P106 ?occ}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?b) AS num_berufe\r\nWHERE {\r\n  ?p166 wdt:P166 ?p26 .\r\n  ?p26 wdt:P106 ?b .\r\n  ?p26 wdt:P31 wd:Q37922 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele verschiedene Berufe \u00fcben/\u00fcbten die Ehepartner von Gewinnern des Literatur-Nobelpreises aus?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Literatur-Nobelpreis\": \"Q37922\"}, \"beziehungen\": {\"Preistr\u00e4ger\": \"P166\", \"Ehepartner\": \"P26\", \"Beruf\": \"P106\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?b) AS num_berufe\r\nWHERE {\r\n  ?p166 wdt:P166 ?p26 .\r\n  ?p26 wdt:P106 ?b .\r\n  ?p26 wdt:P31 wd:Q37922 .\r\n}\r\n```"
    },
    {
        "question": "Wie viele anderen Videospiele wurde im gleichen Jahr wie Dead by Daylight ver\u00f6ffentlicht?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?game) AS ?result) WHERE {?game wdt:P31/wdt:P279* wd:Q7889; wdt:P577 ?gameTime. wd:Q24514682 wdt:P577 ?dbdtime. FILTER((YEAR(?gameTime) = YEAR(?dbdtime)))}",
        "generated_sparql": "SELECT COUNT(*) AS num_games\r\nWHERE {\r\n  ?game wdt:P31 wd:Q24514682 . # Dead by Daylight\r\n  ?game wdt:P279 wd:Q24514682 . # Video game\r\n  ?game wdt:P577 ?date . # Publication date\r\n  FILTER(YEAR(?date) = YEAR(?game))\r\n}\r\nGROUP BY YEAR(?date)\r\nHAVING COUNT(*) > 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele anderen Videospiele wurde im gleichen Jahr wie Dead by Daylight ver\u00f6ffentlicht?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Dead by Daylight\": \"Q24514682\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"Unterklasse von\": \"P279\", \"Ver\u00f6ffentlichungsdatum\": \"P577\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_games\r\nWHERE {\r\n  ?game wdt:P31 wd:Q24514682 . # Dead by Daylight\r\n  ?game wdt:P279 wd:Q24514682 . # Video game\r\n  ?game wdt:P577 ?date . # Publication date\r\n  FILTER(YEAR(?date) = YEAR(?game))\r\n}\r\nGROUP BY YEAR(?date)\r\nHAVING COUNT(*) > 1\r\n```"
    },
    {
        "question": "Welche anderen Zivilisationen existierten zeitgleich zu den Azteken?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31/wdt:P279* wd:Q8432; wdt:P580 ?start; wdt:P582 ?end. wd:Q12542 wdt:P580 ?ast; wdt:P582 ?aet. FILTER(?start < ?aet && ?end > ?ast && ?result != wd:Q12542) }",
        "generated_sparql": "SELECT ?c\r\nWHERE {\r\n  ?c wdt:P31 wd:Q12542 . # Azteken\r\n  ?c wdt:P279 wd:Q12542 . # Teil von Azteken\r\n  ?c wdt:P580 ?t . # Beginn\r\n  ?c wdt:P582 ?t . # Ende\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welche anderen Zivilisationen existierten zeitgleich zu den Azteken?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Azteken\": \"Q12542\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"Teil von\": \"P279\", \"Beginn\": \"P580\", \"Ende\": \"P582\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?c\r\nWHERE {\r\n  ?c wdt:P31 wd:Q12542 . # Azteken\r\n  ?c wdt:P279 wd:Q12542 . # Teil von Azteken\r\n  ?c wdt:P580 ?t . # Beginn\r\n  ?c wdt:P582 ?t . # Ende\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nORDER BY ?c\r\n```"
    },
    {
        "question": "Welche Marke benutzt Vaseline?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P1056 wd:Q457239; wdt:P31/wdt:P279 wd:Q431289}",
        "generated_sparql": "SELECT ?Marke\r\nWHERE {\r\n  ?Marke wdt:P1056 wd:Q457239 .\r\n  ?Marke wdt:P279 wd:Q431289 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welche Marke benutzt Vaseline?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Vaseline\": \"Q457239\", \"Unilever\": \"Q431289\"}, \"beziehungen\": {\"Marke\": \"P1056\", \"Hersteller\": \"P279\", \"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?Marke\r\nWHERE {\r\n  ?Marke wdt:P1056 wd:Q457239 .\r\n  ?Marke wdt:P279 wd:Q431289 .\r\n}\r\n```"
    },
    {
        "question": "Wie viele andere Musikfilme kamen im gleichen Jahr wie Grease heraus?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?result) AS ?resultCnt) WHERE {?result wdt:P31/wdt:P279* wd:Q11424; wdt:P136 wd:Q842256; wdt:P577 ?date. wd:Q267721 wdt:P577 ?dateG FILTER((YEAR(?date)=YEAR(?dateG)) && (?result != wd:Q267721))}",
        "generated_sparql": "",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele andere Musikfilme kamen im gleichen Jahr wie Grease heraus?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Grease\": \"Q267721\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"Unterklasse von\": \"P279\", \"Gattung\": \"P136\", \"Musikfilm\": \"Q842256\", \"Ver\u00f6ffentlichungsdatum\": \"P577\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS count\r\nFROM wikidata:Q842256\r\nWHERE wikidata:P577 = '1968-06-20'\r\nAND wikidata:P577 <> '1968-06-20'\r\n```"
    },
    {
        "question": "Welcher Erfinder von The QA wirkte auch bei selbigem als Schauspieler mit?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q19798744 wdt:P170 ?result; wdt:P161 ?result}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P170 wd:Q19798744 .\r\n  ?x wdt:P161 wd:Q19798744 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welcher Erfinder von The QA wirkte auch bei selbigem als Schauspieler mit?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"The QA\": \"Q19798744\"}, \"beziehungen\": {\"Erfinder\": \"P170\", \"Schauspieler\": \"P161\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P170 wd:Q19798744 .\r\n  ?x wdt:P161 wd:Q19798744 .\r\n}\r\n```"
    },
    {
        "question": "Auf welchen Alben kam Atif Aslam vor?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q482994; wdt:P175 wd:Q755830}",
        "generated_sparql": "SELECT ?Album\r\nWHERE {\r\n  ?Album wdt:P175 ?Person;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Auf welchen Alben kam Atif Aslam vor?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Atif Aslam\": \"Q482994\", \"Album\": \"Q755830\"}, \"beziehungen\": {\"auf\": \"P31\", \"vorkommt auf\": \"P175\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?Album\r\nWHERE {\r\n  ?Album wdt:P175 ?Person;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nORDER BY ?Album\r\nLIMIT 1;\r\n```"
    },
    {
        "question": "Was war Ada Lovelaces Adelstitel?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q7259 wdt:P97 ?result}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P97 wd:Q7259.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Was war Ada Lovelaces Adelstitel?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Ada Lovelace\": \"Q7259\"}, \"beziehungen\": {\"Adelstitel\": \"P97\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P97 wd:Q7259.\r\n}\r\n```"
    },
    {
        "question": "Wovon war Janus der Gott?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q167685 wdt:P2925 ?result}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P2925 wd:Q167685.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wovon war Janus der Gott?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Janus\": \"Q167685\"}, \"beziehungen\": {\"Gott von\": \"P2925\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P2925 wd:Q167685.\r\n}\r\n```"
    },
    {
        "question": "Welcher Hobbit war ein Feind Frodos?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q177329 wdt:P7047 ?result. ?result wdt:P31 wd:Q74359}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P31 wd:Q74359;\r\n  ?x wdt:P7047 wd:Q177329;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welcher Hobbit war ein Feind Frodos?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Frodos\": \"Q177329\", \"Hobbit\": \"Q74359\"}, \"beziehungen\": {\"Feind\": \"P7047\", \"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P31 wd:Q74359;\r\n  ?x wdt:P7047 wd:Q177329;\r\n}\r\n```"
    },
    {
        "question": "Welches war das letzte Gem\u00e4lde, das Van Gogh gemalt hat?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q3305213; wdt:P170 wd:Q5582; wdt:P571 ?date} ORDER BY DESC(?date) LIMIT 1",
        "generated_sparql": "SELECT ?gem\u00e4lde\nWHERE {\n  ?gem\u00e4lde wdt:P31 wd:Q3305213.\n  ?gem\u00e4lde wdt:P170 wd:Q5582.\n  ?gem\u00e4lde wdt:P571 ?end.\n  FILTER(?end = \"Q5582\")\n}\nORDER BY ?gem\u00e4lde DESC\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welches war das letzte Gem\u00e4lde, das Van Gogh gemalt hat?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Vincent van Gogh\": \"Q5582\", \"Gem\u00e4lde\": \"Q3305213\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"K\u00fcnstler\": \"P170\", \"Ende\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?gem\u00e4lde\nWHERE {\n  ?gem\u00e4lde wdt:P31 wd:Q3305213.\n  ?gem\u00e4lde wdt:P170 wd:Q5582.\n  ?gem\u00e4lde wdt:P571 ?end.\n  FILTER(?end = \"Q5582\")\n}\nORDER BY ?gem\u00e4lde DESC\nLIMIT 1\n```"
    },
    {
        "question": "Wie lautete das Hauptthema des Deep Purple Lied \"Smoke on the water\"? ",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q636399 wdt:P921 ?result}",
        "generated_sparql": "SELECT ?x WHERE {\n  ?x wdt:P921 wd:Q636399.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie lautete das Hauptthema des Deep Purple Lied \"Smoke on the water\"? ' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Smoke on the Water\": \"Q636399\"}, \"beziehungen\": {\"Hauptthema\": \"P921\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?x WHERE {\n  ?x wdt:P921 wd:Q636399.\n}\n```"
    },
    {
        "question": "Wann gab es die ersten Pottwale?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q81214 wdt:P580 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?date wdt:P580 wd:Q81214 .\r\n}\r\nORDER BY ?date\r\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wann gab es die ersten Pottwale?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Pottwal\": \"Q81214\"}, \"beziehungen\": {\"erstes Auftreten\": \"P580\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?date wdt:P580 wd:Q81214 .\r\n}\r\nORDER BY ?date\r\nLIMIT 1\r\n```"
    },
    {
        "question": "In welchem Jahr fiel die Berliner Mauer?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q5086 wdt:P576 ?time BIND(YEAR(?time) AS ?result)}",
        "generated_sparql": "SELECT ?year\r\nWHERE {\r\n  ?year wdt:P576 wd:Q5086.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In welchem Jahr fiel die Berliner Mauer?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Berliner Mauer\": \"Q5086\"}, \"beziehungen\": {\"Aufl\u00f6sungszeitpunkt\": \"P576\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?year\r\nWHERE {\r\n  ?year wdt:P576 wd:Q5086.\r\n}\r\n```"
    },
    {
        "question": "In welchem Jahr wurde Riverdale zum ersten Mal ausgestrahlt?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q23001951 wdt:P580 ?time. BIND(YEAR(?time) AS ?result)}",
        "generated_sparql": "SELECT ?year\r\nWHERE {\r\n  ?s wdt:P580 ?o .\r\n  ?s wdt:P31 wd:Q23001951 .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In welchem Jahr wurde Riverdale zum ersten Mal ausgestrahlt?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Riverdale\": \"Q23001951\"}, \"beziehungen\": {\"erstausgestrahlt\": \"P580\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?year\r\nWHERE {\r\n  ?s wdt:P580 ?o .\r\n  ?s wdt:P31 wd:Q23001951 .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  ?o wikibase:label ?year\r\n}\r\n```"
    },
    {
        "question": "Wann starb Allen Ginsberg?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q6711 wdt:P570 ?result}",
        "generated_sparql": "SELECT ?s\r\nWHERE {\r\n  ?s wdt:P570 wd:Q6711.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wann starb Allen Ginsberg?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Allen Ginsberg\": \"Q6711\"}, \"beziehungen\": {\"Tod\": \"P570\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s\r\nWHERE {\r\n  ?s wdt:P570 wd:Q6711.\r\n}\r\n```"
    },
    {
        "question": "Wann starb Ella Fitzgerald?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1768 wdt:P570 ?result}",
        "generated_sparql": "SELECT ?s\r\nWHERE {\r\n  ?s wdt:P570 wd:Q1768\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wann starb Ella Fitzgerald?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Ella Fitzgerald\": \"Q1768\"}, \"beziehungen\": {\"Tod\": \"P570\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s\r\nWHERE {\r\n  ?s wdt:P570 wd:Q1768\r\n}\r\n```"
    },
    {
        "question": "Wann begann der erste Mensch das Bouldern?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q852989 wdt:P571 ?result}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P571 ?y.\r\n  ?y wdt:P31 wd:Q852989.\r\n}\r\nORDER BY ?y\r\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wann begann der erste Mensch das Bouldern?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Bouldern\": \"Q852989\"}, \"beziehungen\": {\"Gr\u00fcndungsdatum\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P571 ?y.\r\n  ?y wdt:P31 wd:Q852989.\r\n}\r\nORDER BY ?y\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Wann wurde Pakistan unabh\u00e4ngig?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q843 wdt:P571 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?country wdt:P571 ?date\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wann wurde Pakistan unabh\u00e4ngig?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Pakistan\": \"Q843\"}, \"beziehungen\": {\"Gr\u00fcndungsdatum\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?country wdt:P571 ?date\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(str(?country) = \"Q843\")\r\n}\r\n```"
    },
    {
        "question": "Wann starb Rumi?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q43347 wdt:P570 ?result}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P570 wd:Q43347 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wann starb Rumi?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Rumi\": \"Q43347\"}, \"beziehungen\": {\"Tod\": \"P570\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P570 wd:Q43347 .\r\n}\r\n```"
    },
    {
        "question": "Wann starb der Bruder des Autoren von Slaughterhouse Five?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q265954 wdt:P50/wdt:P3373 ?bro. ?bro wdt:P21 wd:Q6581097; wdt:P570 ?result}",
        "generated_sparql": "SELECT ?brother\r\nWHERE {\r\n  ?author wdt:P50 wd:Q265954 . # Autor\r\n  ?author wdt:P50 wd:Q6581097 . # Bruder\r\n  ?author wdt:P21 wd:Q6581097 . # Geschlecht\r\n  ?author wdt:P570 wd:Q6581097 . # Tod\r\n  ?title wdt:P3373 wd:Q265954 . # Titel\r\n  ?title wdt:P3373 wd:Q6581097 . # Slaughterhouse Five\r\n  ?brother wdt:P50 ?author . # Bruder\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wann starb der Bruder des Autoren von Slaughterhouse Five?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Kurt Vonnegut\": \"Q265954\", \"Slaughterhouse Five\": \"\", \"m\u00e4nnlich\": \"Q6581097\"}, \"beziehungen\": {\"Bruder\": \"P50\", \"Geschlecht\": \"P21\", \"Tod\": \"P570\", \"Autor\": \"P50\", \"Titel\": \"P3373\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?brother\r\nWHERE {\r\n  ?author wdt:P50 wd:Q265954 . # Autor\r\n  ?author wdt:P50 wd:Q6581097 . # Bruder\r\n  ?author wdt:P21 wd:Q6581097 . # Geschlecht\r\n  ?author wdt:P570 wd:Q6581097 . # Tod\r\n  ?title wdt:P3373 wd:Q265954 . # Titel\r\n  ?title wdt:P3373 wd:Q6581097 . # Slaughterhouse Five\r\n  ?brother wdt:P50 ?author . # Bruder\r\n}\r\n```"
    },
    {
        "question": "Wann ist der Sch\u00f6pfer von Saturday Night Live geboren?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q13979 wdt:P170/wdt:P569 ?result}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P170 wd:Q13979 ; # Sch\u00f6pfer von Saturday Night Live\r\n  ?x wdt:P569 ?birthdate ; # Geburtsdatum\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wann ist der Sch\u00f6pfer von Saturday Night Live geboren?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Saturday Night Live\": \"Q13979\"}, \"beziehungen\": {\"Sch\u00f6pfer\": \"P170\", \"Geburtsdatum\": \"P569\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P170 wd:Q13979 ; # Sch\u00f6pfer von Saturday Night Live\r\n  ?x wdt:P569 ?birthdate ; # Geburtsdatum\r\n}\r\n```"
    },
    {
        "question": "Wer war Teilnehmer des Hambacher Fest?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q551416 wdt:P710 ?result}",
        "generated_sparql": "SELECT ?s WHERE {\r\n  ?s wdt:P710 wd:Q551416 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer war Teilnehmer des Hambacher Fest?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Hambacher Fest\": \"Q551416\"}, \"beziehungen\": {\"Teilnehmer\": \"P710\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s WHERE {\r\n  ?s wdt:P710 wd:Q551416 .\r\n}\r\n```"
    },
    {
        "question": "Wann erschien The QA zum ersten Mal?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q19798744 wdt:P580 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?qa wdt:P580 ?date\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wann erschien The QA zum ersten Mal?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"The QA\": \"Q19798744\"}, \"beziehungen\": {\"Erscheinungsdatum\": \"P580\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?qa wdt:P580 ?date\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n}\r\n```"
    },
    {
        "question": "Wie viele Opfer sind Resultat des Nordirlandkonflikts?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q815436 wdt:P1120 ?result}",
        "generated_sparql": "SELECT COUNT(*) AS Opferzahl\r\nWHERE {\r\n  ?s wdt:P1120 ?o. \r\n  ?s wdt:P31 wd:Q815436. \r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele Opfer sind Resultat des Nordirlandkonflikts?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Nordirlandkonflikt\": \"Q815436\"}, \"beziehungen\": {\"Anzahl der Todesopfer\": \"P1120\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS Opferzahl\r\nWHERE {\r\n  ?s wdt:P1120 ?o. \r\n  ?s wdt:P31 wd:Q815436. \r\n}\r\n```"
    },
    {
        "question": "Wann wurde die Weimarer Republik ausgerufen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q41304 wdt:P571 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?date wdt:P571 wd:Q41304.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wann wurde die Weimarer Republik ausgerufen?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Weimarer Republik\": \"Q41304\"}, \"beziehungen\": {\"Gr\u00fcndungsdatum\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?date wdt:P571 wd:Q41304.\r\n}\r\n```"
    },
    {
        "question": "Wann endete der zweite Weltkrieg offiziell?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q362 wdt:P582 ?result}",
        "generated_sparql": "SELECT ?zweiterWeltkrieg\r\nWHERE {\r\n  ?zweiterWeltkrieg wdt:P362. # Zweiter Weltkrieg\r\n  ?zweiterWeltkrieg wdt:P582 ?enddatum. # Ende\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wann endete der zweite Weltkrieg offiziell?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"zweiter Weltkrieg\": \"Q362\"}, \"beziehungen\": {\"Ende\": \"P582\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?zweiterWeltkrieg\r\nWHERE {\r\n  ?zweiterWeltkrieg wdt:P362. # Zweiter Weltkrieg\r\n  ?zweiterWeltkrieg wdt:P582 ?enddatum. # Ende\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nORDER BY ?enddatum\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Wann war die erste Ironman Weltmeisterschaft?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q1420480 wdt:P571 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?event wdt:P571 ?date\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wann war die erste Ironman Weltmeisterschaft?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Ironman Weltmeisterschaft\": \"Q1420480\"}, \"beziehungen\": {\"erstes Auftreten\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?event wdt:P571 ?date\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n}\r\nORDER BY ?date\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Wann wurde das Magazin gegr\u00fcndet, in dem Hunter x Hunter ver\u00f6ffentlich wurde?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q696071 wdt:P1433 ?mag. ?mag wdt:P31/wdt:P279* wd:Q41298; wdt:P571 ?result}",
        "generated_sparql": "SELECT ?magazin ?gr\u00fcndungsdatum\r\nWHERE {\r\n  ?magazin wdt:P31 wd:Q41298.\r\n  ?magazin wdt:P1433 wd:Q696071.\r\n  ?magazin wdt:P279 wd:Q696071.\r\n  ?magazin wdt:P571 ?gr\u00fcndungsdatum.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wann wurde das Magazin gegr\u00fcndet, in dem Hunter x Hunter ver\u00f6ffentlich wurde?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Hunter x Hunter\": \"Q696071\", \"Magazin\": \"Q41298\"}, \"beziehungen\": {\"ver\u00f6ffentlicht in\": \"P1433\", \"Instanz von\": \"P31\", \"Unterklasse von\": \"P279\", \"Gr\u00fcndungsdatum\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?magazin ?gr\u00fcndungsdatum\r\nWHERE {\r\n  ?magazin wdt:P31 wd:Q41298.\r\n  ?magazin wdt:P1433 wd:Q696071.\r\n  ?magazin wdt:P279 wd:Q696071.\r\n  ?magazin wdt:P571 ?gr\u00fcndungsdatum.\r\n}\r\n```"
    },
    {
        "question": "Wann erschien der Film Red Notice?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q58815001 wdt:P577 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?film wdt:P577 ?date\r\n  wd:Q58815001 ?film\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wann erschien der Film Red Notice?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Red Notice\": \"Q58815001\"}, \"beziehungen\": {\"Erscheinungsdatum\": \"P577\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?film wdt:P577 ?date\r\n  wd:Q58815001 ?film\r\n}\r\n```"
    },
    {
        "question": "Wann wurde der K\u00f6lner Dom erbaut?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q4176 wdt:P571 ?result}",
        "generated_sparql": "SELECT ?baujahr\r\nWHERE {\r\n  ?entit\u00e4t wdt:P571 ?baujahr .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wann wurde der K\u00f6lner Dom erbaut?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"K\u00f6lner Dom\": \"Q4176\"}, \"beziehungen\": {\"Baujahr\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?baujahr\r\nWHERE {\r\n  ?entit\u00e4t wdt:P571 ?baujahr .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(CONTAINS(?entit\u00e4t, \"Q4176\") && CONTAINS(?baujahr, \"K\u00f6lner Dom\"))\r\n}\r\n```"
    },
    {
        "question": "Was kann man gegen Gicht machen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q133087 wdt:P2176 ?result}",
        "generated_sparql": "SELECT ?Therapeutikum\r\nWHERE {\r\n  ?Gicht wdt:P2176 ?Therapeutikum\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Was kann man gegen Gicht machen?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Gicht\": \"Q133087\"}, \"beziehungen\": {\"Therapeutikum\": \"P2176\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?Therapeutikum\r\nWHERE {\r\n  ?Gicht wdt:P2176 ?Therapeutikum\r\n}\r\n```"
    },
    {
        "question": "Wann wurde HIV zum ersten Mal erkannt?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q15787 wdt:P575 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?date wdt:P575 wd:Q15787.\r\n}\r\nORDER BY ?date\r\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wann wurde HIV zum ersten Mal erkannt?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"HIV\": \"Q15787\"}, \"beziehungen\": {\"erstes Auftreten\": \"P575\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?date wdt:P575 wd:Q15787.\r\n}\r\nORDER BY ?date\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Wann wurde der erste Artikel \u00fcber die Liquid State Machine ver\u00f6ffentlicht?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{?art wdt:P31/wdt:P279* wd:Q191067; wdt:P921 wd:Q6557482; wdt:P577 ?result} ORDER BY ASC(?result) LIMIT 1",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?article wdt:P31 wd:Q191067;\r\n  ?article wdt:P279 wd:Q6557482;\r\n  ?article wdt:P577 ?date;\r\n  ?article wdt:P921 wd:Q191067;\r\n}\r\nORDER BY ?date\r\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wann wurde der erste Artikel \u00fcber die Liquid State Machine ver\u00f6ffentlicht?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Liquid State Machine\": \"Q191067\", \"Artikel\": \"Q6557482\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"Thema\": \"P279\", \"Ver\u00f6ffentlichungsdatum\": \"P577\", \"Unterthema\": \"P921\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?article wdt:P31 wd:Q191067;\r\n  ?article wdt:P279 wd:Q6557482;\r\n  ?article wdt:P577 ?date;\r\n  ?article wdt:P921 wd:Q191067;\r\n}\r\nORDER BY ?date\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Wann wurde Marlene Dietrich geboren?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q4612 wdt:P569 ?result}",
        "generated_sparql": "SELECT ?birthdate\r\nWHERE {\r\n  ?person wdt:P569 ?birthdate\r\n  wd:Q4612 ?person\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wann wurde Marlene Dietrich geboren?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Marlene Dietrich\": \"Q4612\"}, \"beziehungen\": {\"Geburtsdatum\": \"P569\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?birthdate\r\nWHERE {\r\n  ?person wdt:P569 ?birthdate\r\n  wd:Q4612 ?person\r\n}\r\n```"
    },
    {
        "question": "Wann wurde Penicillin entdeckt?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q12190 wdt:P575 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?penicillin wdt:P575 ?date\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wann wurde Penicillin entdeckt?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Penicillin\": \"Q12190\"}, \"beziehungen\": {\"Entdeckungsdatum\": \"P575\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?penicillin wdt:P575 ?date\r\n}\r\n```"
    },
    {
        "question": "Wann wurde Rumi geboren?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q43347 wdt:P569 ?result}",
        "generated_sparql": "SELECT ?birthDate\r\nWHERE {\r\n  ?person wdt:P569 ?birthDate\r\n  wd:Q43347 ?person\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wann wurde Rumi geboren?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Rumi\": \"Q43347\"}, \"beziehungen\": {\"Geburtsdatum\": \"P569\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?birthDate\r\nWHERE {\r\n  ?person wdt:P569 ?birthDate\r\n  wd:Q43347 ?person\r\n}\r\n```"
    },
    {
        "question": "Wann begann die Romantik?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q37068 wdt:P580 ?result}",
        "generated_sparql": "SELECT ?beginn\r\nWHERE {\r\n  ?entit\u00e4t wd:P580 ?beginn;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wann begann die Romantik?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Romantik\": \"Q37068\"}, \"beziehungen\": {\"Beginn\": \"P580\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?beginn\r\nWHERE {\r\n  ?entit\u00e4t wd:P580 ?beginn;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nORDER BY ?beginn\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Wann wurde Echo Musikpreis abgeschafft?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q703237 wdt:P576 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?entit\u00e4t wd:P576 ?date\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wann wurde Echo Musikpreis abgeschafft?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Echo Musikpreis\": \"Q703237\"}, \"beziehungen\": {\"Aufl\u00f6sungsdatum\": \"P576\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?entit\u00e4t wd:P576 ?date\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n  FILTER(CONTAINS(?entit\u00e4t, \"Echo Musikpreis\"))\r\n}\r\n```"
    },
    {
        "question": "Wann erschien das erste Album der Band Typhoon?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{?alb wdt:P31 wd:Q482994; wdt:P175 wd:Q7861093; wdt:P577 ?result} ORDER BY ASC(?result) LIMIT 1",
        "generated_sparql": "SELECT ?album\r\nWHERE {\r\n  ?album wdt:P31 wd:Q482994. # Instanz von Album\r\n  ?album wdt:P175 wd:Q7861093. # K\u00fcnstler Typhoon\r\n  ?album wdt:P577 ?date. # Ver\u00f6ffentlichungsdatum\r\n  FILTER(?date = \"1995-01-01\".) # Filter f\u00fcr das erste Album\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wann erschien das erste Album der Band Typhoon?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Typhoon\": \"Q7861093\", \"Album\": \"Q482994\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"K\u00fcnstler\": \"P175\", \"Ver\u00f6ffentlichungsdatum\": \"P577\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?album\r\nWHERE {\r\n  ?album wdt:P31 wd:Q482994. # Instanz von Album\r\n  ?album wdt:P175 wd:Q7861093. # K\u00fcnstler Typhoon\r\n  ?album wdt:P577 ?date. # Ver\u00f6ffentlichungsdatum\r\n  FILTER(?date = \"1995-01-01\".) # Filter f\u00fcr das erste Album\r\n}\r\n```"
    },
    {
        "question": "Wann wurde der Hamburger Flughafen eingeweiht?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q27706 wdt:P571 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?airport wdt:P571 ?date\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wann wurde der Hamburger Flughafen eingeweiht?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Hamburger Flughafen\": \"Q27706\"}, \"beziehungen\": {\"Er\u00f6ffnungsdatum\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?airport wdt:P571 ?date\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nORDER BY ?date\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Wann wurde die Hamburger S-Bahn offiziell er\u00f6ffnet?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q693956 wdt:P1619 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?date wdt:P1619 wd:Q693956.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wann wurde die Hamburger S-Bahn offiziell er\u00f6ffnet?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Hamburger S-Bahn\": \"Q693956\"}, \"beziehungen\": {\"er\u00f6ffnet\": \"P1619\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?date wdt:P1619 wd:Q693956.\r\n}\r\n```"
    },
    {
        "question": "Wann wurde der Hamburger Jazzclub Birdland gegr\u00fcndet? ",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q800176 wdt:P571 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?date wdt:P571 wd:Q800176.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wann wurde der Hamburger Jazzclub Birdland gegr\u00fcndet? ' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Birdland\": \"Q800176\"}, \"beziehungen\": {\"Gr\u00fcndungsdatum\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?date wdt:P571 wd:Q800176.\r\n}\r\n```"
    },
    {
        "question": "Wann wurde das Gedicht Howl geschrieben?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q1545259 wdt:P571 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?book wdt:P577 wd:Q1545259.\r\n  ?book wdt:P577 ?date.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wann wurde das Gedicht Howl geschrieben?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Howl\": \"Q1545259\"}, \"beziehungen\": {\"Ver\u00f6ffentlichung\": \"P577\", \"Entstehung\": \"P577\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?book wdt:P577 wd:Q1545259.\r\n  ?book wdt:P577 ?date.\r\n}\r\n```"
    },
    {
        "question": "Wann wurde die Universit\u00e4t Cambridge gegr\u00fcndet?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q35794 wdt:P571 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?university wdt:P571 ?date\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wann wurde die Universit\u00e4t Cambridge gegr\u00fcndet?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Universit\u00e4t Cambridge\": \"Q35794\"}, \"beziehungen\": {\"Gr\u00fcndungsdatum\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?university wdt:P571 ?date\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nORDER BY ?date\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Wann wurde die Universit\u00e4t Hamburg gegr\u00fcndet?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q156725 wdt:P571 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?universit\u00e4t wdt:P571 ?date .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"de\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wann wurde die Universit\u00e4t Hamburg gegr\u00fcndet?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Universit\u00e4t Hamburg\": \"Q156725\"}, \"beziehungen\": {\"Gr\u00fcndungsdatum\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?universit\u00e4t wdt:P571 ?date .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"de\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nORDER BY ?date\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Wann wurde die University of Saskatchewan gegr\u00fcndet?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q1514848 wdt:P571 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?university wdt:P571 ?date\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wann wurde die University of Saskatchewan gegr\u00fcndet?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"University of Saskatchewan\": \"Q1514848\"}, \"beziehungen\": {\"Gr\u00fcndungsdatum\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?university wdt:P571 ?date\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nORDER BY ?date\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Wann wurde Vatikan Stadt geschaffen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q237 wdt:P571 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?city wdt:P571 ?date\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wann wurde Vatikan Stadt geschaffen?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Vatikan Stadt\": \"Q237\"}, \"beziehungen\": {\"Gr\u00fcndungsdatum\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?city wdt:P571 ?date\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nORDER BY ?date\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Wann wurde die United Fruit Company gegr\u00fcndet?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q1771942 wdt:P571 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?company wdt:P571 ?date\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wann wurde die United Fruit Company gegr\u00fcndet?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"United Fruit Company\": \"Q1771942\"}, \"beziehungen\": {\"Gr\u00fcndungsdatum\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?company wdt:P571 ?date\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nORDER BY ?date\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Wo starb Trotzki?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q33391 wdt:P20 ?result}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P20 wd:Q33391.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wo starb Trotzki?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Trotzki\": \"Q33391\"}, \"beziehungen\": {\"Sterbeort\": \"P20\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P20 wd:Q33391.\r\n}\r\n```"
    },
    {
        "question": "Wo spielen sowohl Der Ruf der Wildnis als auch Wolfsblut, die ber\u00fchmtesten Werke von Jack London?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q476871 wdt:P840 ?result. wd:Q152267 wdt:P840 ?result}",
        "generated_sparql": "",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wo spielen sowohl Der Ruf der Wildnis als auch Wolfsblut, die ber\u00fchmtesten Werke von Jack London?' from the knowledge graph Wikidata with the following context: 'None'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?w1 ?w2\r\nWHERE {\r\n  ?w1 wdt:P31 wd:Q1242. \r\n  ?w1 wdt:P31 wd:Q1242. \r\n  ?w1 wdt:P31 wd:Q1242. \r\n  ?w1 wdt:P31 wd:Q1242. \r\n  ?w1 wdt:P31 wd:Q1242. \r\n  ?w1 wdt:P31 wd:Q1242. \r\n  ?w1 wdt:P31 wd:Q1242. \r\n  ?w1 wdt:P31 wd:Q1242. \r\n  ?w1 wdt:P31 wd:Q1242. \r\n  ?w1 wdt:P31 wd:Q1242. \r\n  ?w1 wdt:P31 wd:Q1242. \r\n  ?w1 wdt:P31 wd:Q1242. \r\n  ?w1 wdt:P31 wd:Q1242. \r\n  ?w1 wdt:P31 wd:Q1242. \r\n  ?w1 wdt:P31 wd:Q1242. \r\n  ?w1 wdt:P31 wd:Q1242. \r\n  ?w1 wdt:P31 wd:Q1242. \r\n  ?w1 wdt:P31 wd:Q1242. \r\n  ?w1 wdt:P31 wd:Q1242. \r\n  ?w1 wdt:P31 wd:Q1242. \r\n  ?w1 wdt:P31 wd:Q1242. \r\n  ?w1 wdt:P31 wd:Q1242. \r\n  ?w1 wdt:P31 wd:Q1242. \r\n  ?w1 wdt:P31"
    },
    {
        "question": "Wo fand das Hambach Festival statt?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q551416 wdt:P276 ?result}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P276 wd:Q551416.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wo fand das Hambach Festival statt?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Hambach Festival\": \"Q551416\"}, \"beziehungen\": {\"Ort\": \"P276\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P276 wd:Q551416.\r\n}\r\n```"
    },
    {
        "question": "Wie lautet der Schauplatz Herr der Ringe Romane?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q15228 wdt:P840 ?result}",
        "generated_sparql": "SELECT ?s WHERE {\r\n  ?s wdt:P840 wd:Q15228;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie lautet der Schauplatz Herr der Ringe Romane?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Herr der Ringe\": \"Q15228\"}, \"beziehungen\": {\"Schauplatz\": \"P840\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s WHERE {\r\n  ?s wdt:P840 wd:Q15228;\r\n}\r\n```"
    },
    {
        "question": "Woher stammt der Nutri-Score?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q46577569 wdt:P495 ?result}",
        "generated_sparql": "SELECT ?label\r\nWHERE {\r\n  ?nutriScore wdt:P495 ?herkunft;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Woher stammt der Nutri-Score?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Nutri-Score\": \"Q46577569\"}, \"beziehungen\": {\"Herkunft\": \"P495\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?label\r\nWHERE {\r\n  ?nutriScore wdt:P495 ?herkunft;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\n```"
    },
    {
        "question": "Existieren mindestens zwei Gewinnerinnen des Oscars f\u00fcr die beste Hauptdarstellerin, welche am gleichen Institut unterrichtet wurden?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK{?act wdt:P166 wd:Q103618; wdt:P69 ?result. ?act2 wdt:P166 wd:Q103618; wdt:P69 ?result FILTER(?act != ?act2)}",
        "generated_sparql": "SELECT COUNT(DISTINCT ?winner) AS num_winners\r\nWHERE {\r\n  ?winner wdt:P166 ?movie. wdt:P69 ?institut. \r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Existieren mindestens zwei Gewinnerinnen des Oscars f\u00fcr die beste Hauptdarstellerin, welche am gleichen Institut unterrichtet wurden?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Oscar f\u00fcr die beste Hauptdarstellerin\": \"Q103618\"}, \"beziehungen\": {\"Gewinner\": \"P166\", \"unterrichtet\": \"P69\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(DISTINCT ?winner) AS num_winners\r\nWHERE {\r\n  ?winner wdt:P166 ?movie. wdt:P69 ?institut. \r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(CONTAINS(?institut, \"Oscar f\u00fcr die beste Hauptdarstellerin\") && CONTAINS(?institut, \"Q103618\"))\r\n  GROUP BY ?winner\r\n  HAVING COUNT(*) >= 2\r\n}\r\n```"
    },
    {
        "question": "Wo wurde der K-Pop Star Lisa Manoban geboren?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q26707663 wdt:P19 ?result}",
        "generated_sparql": "SELECT ?birthplace\r\nWHERE {\r\n  ?person wdt:P19 ?birthplace;\r\n  wd:Q26707663 ?person\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wo wurde der K-Pop Star Lisa Manoban geboren?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Lisa Manoban\": \"Q26707663\"}, \"beziehungen\": {\"Geburtsort\": \"P19\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?birthplace\r\nWHERE {\r\n  ?person wdt:P19 ?birthplace;\r\n  wd:Q26707663 ?person\r\n}\r\n```"
    },
    {
        "question": "Welcher Punkt ist der h\u00f6chste Punkt Norwegens?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q20 wdt:P610 ?result}",
        "generated_sparql": "SELECT ?punkte ?punkteLabel\r\nWHERE {\r\n  ?punkte wdt:P610 wd:Q20;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welcher Punkt ist der h\u00f6chste Punkt Norwegens?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Norwegen\": \"Q20\"}, \"beziehungen\": {\"h\u00f6chster Punkt\": \"P610\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?punkte ?punkteLabel\r\nWHERE {\r\n  ?punkte wdt:P610 wd:Q20;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nORDER BY ?punkte DESC\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Wo hat sich die psychodelische Band \"Khruangbin\" gegr\u00fcndet?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q54555985 wdt:P740 ?result}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P740 ?y\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wo hat sich die psychodelische Band \"Khruangbin\" gegr\u00fcndet?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Khruangbin\": \"Q54555985\"}, \"beziehungen\": {\"Gr\u00fcndungsort\": \"P740\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P740 ?y\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n  FILTER(CONTAINS(?x, \"Khruangbin\") && CONTAINS(?y, \"founded\"))\r\n}\r\n```"
    },
    {
        "question": "Wo wurde C\u00e4sar ermordet?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1048 wdt:P20 ?result}",
        "generated_sparql": "SELECT ?C\u00e4sar\r\nWHERE {\r\n  ?C\u00e4sar wdt:P20 ?Ort.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wo wurde C\u00e4sar ermordet?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"C\u00e4sar\": \"Q1048\"}, \"beziehungen\": {\"Ort des Todes\": \"P20\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?C\u00e4sar\r\nWHERE {\r\n  ?C\u00e4sar wdt:P20 ?Ort.\r\n}\r\n```"
    },
    {
        "question": "Wo wurde Goethes unverheiratete Partnerin geboren?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q5879 wdt:P451/wdt:P19 ?result}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P451 wd:Q5879 .\r\n  ?x wdt:P19 ?birthplace .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wo wurde Goethes unverheiratete Partnerin geboren?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Goethe\": \"Q5879\"}, \"beziehungen\": {\"unverheirateter Partner\": \"P451\", \"Geburtsort\": \"P19\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P451 wd:Q5879 .\r\n  ?x wdt:P19 ?birthplace .\r\n}\r\n```"
    },
    {
        "question": "Wo wurde die Roland Corporation gegr\u00fcndet?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q848490 wdt:P740 ?result}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P740 ?y\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wo wurde die Roland Corporation gegr\u00fcndet?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Roland Corporation\": \"Q848490\"}, \"beziehungen\": {\"Gr\u00fcndungsort\": \"P740\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P740 ?y\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n  FILTER(CONTAINS(?x, \"Roland Corporation\"))\r\n}\r\nORDER BY ?x\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Wo wurde der Autor von \"Der F\u00e4nger im Roggen\" geboren?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q183883 wdt:P50/wdt:P19 ?result}",
        "generated_sparql": "SELECT ?author\r\nWHERE {\r\n  ?book wdt:P50 wd:Q183883;\r\n  ?book wdt:P19 ?birthplace;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wo wurde der Autor von \"Der F\u00e4nger im Roggen\" geboren?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Der F\u00e4nger im Roggen\": \"Q183883\"}, \"beziehungen\": {\"Autor\": \"P50\", \"Geburtsort\": \"P19\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?author\r\nWHERE {\r\n  ?book wdt:P50 wd:Q183883;\r\n  ?book wdt:P19 ?birthplace;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  ?author wdt:P50 ?book;\r\n}\r\nORDER BY ?author\r\n```"
    },
    {
        "question": "Wer schrieb das Erlangen Programm?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P800 wd:Q315296}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P800 wd:Q315296.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer schrieb das Erlangen Programm?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Erlangen\": \"Q315296\"}, \"beziehungen\": {\"Entwickler\": \"P800\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P800 wd:Q315296.\r\n}\r\n```"
    },
    {
        "question": "Welche Darsteller aus Free Guy spielte auch in Deadpool mit?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q38685497 wdt:P161 ?result. wd:Q19347291 wdt:P161 ?result}",
        "generated_sparql": "SELECT ?Darsteller\r\nWHERE {\r\n  ?Darsteller wdt:P161 wd:Q38685497;\r\n  ?Darsteller wdt:P161 wd:Q19347291;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welche Darsteller aus Free Guy spielte auch in Deadpool mit?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Free Guy\": \"Q38685497\", \"Deadpool\": \"Q19347291\"}, \"beziehungen\": {\"Darsteller\": \"P161\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?Darsteller\r\nWHERE {\r\n  ?Darsteller wdt:P161 wd:Q38685497;\r\n  ?Darsteller wdt:P161 wd:Q19347291;\r\n}\r\n```"
    },
    {
        "question": "Welche amerikanische Pr\u00e4sident folgte den Fu\u00dfstapfen seines Vaters und wurde auch Pr\u00e4sident?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P39 wd:Q11696; wdt:P22/wdt:P39 wd:Q11696}",
        "generated_sparql": "SELECT ?p\r\nWHERE {\r\n  ?p wdt:P39 wd:Q11696.\r\n  ?p wdt:P22 wd:Q11696.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welche amerikanische Pr\u00e4sident folgte den Fu\u00dfstapfen seines Vaters und wurde auch Pr\u00e4sident?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Pr\u00e4sident\": \"Q11696\"}, \"beziehungen\": {\"Pr\u00e4sident\": \"P39\", \"Vater\": \"P22\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?p\r\nWHERE {\r\n  ?p wdt:P39 wd:Q11696.\r\n  ?p wdt:P22 wd:Q11696.\r\n}\r\n```"
    },
    {
        "question": "Welches Tier lebt wahrscheinlich l\u00e4nger, der Panda oder der Koala?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {BIND(IF(EXISTS{wd:Q33602 wdt:P4214 ?lp. wd:Q36101 wdt:P4214 ?lk FILTER(?lp > ?lk)},wd:Q33602,wd:Q36101)AS ?result)}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P4214 ?y.\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welches Tier lebt wahrscheinlich l\u00e4nger, der Panda oder der Koala?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Panda\": \"Q33602\", \"Koala\": \"Q36101\"}, \"beziehungen\": {\"durchschnittliche Lebenserwartung\": \"P4214\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P4214 ?y.\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n  ?x wikibase:label ?label;\r\n  FILTER(?label LIKE '%Panda%')\r\n  FILTER(?label LIKE '%Koala%')\r\n}\r\nORDER BY ?y DESC\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Welche Inselgruppe hat mehr Inseln, die Galapagosinseln oder die Hawaii-Inseln?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {{SELECT (COUNT (DISTINCT ?isl) AS ?gn) WHERE{wd:Q38095 wdt:P527+ ?isl. ?isl wdt:P31/wdt:P279* wd:Q23442}}{SELECT (COUNT (DISTINCT ?isl) AS ?hn) WHERE{wd:Q192626 wdt:P527+ ?isl. ?isl wdt:P31/wdt:P279* wd:Q23442}} BIND(IF(?hn > ?gn, wd:Q192626, wd:Q38095) AS ?result)}",
        "generated_sparql": "SELECT ?group\r\nWHERE {\r\n  ?group wdt:P527 ?island1. ;\r\n  ?group wdt:P527 ?island2. ;\r\n  ?island1 wdt:P31 wd:Q38095. ;\r\n  ?island2 wdt:P31 wd:Q192626. ;\r\n  ?group wdt:P279 ?island1. ;\r\n  ?group wdt:P279 ?island2. ;\r\n  ?island1 wdt:P279 ?island2. ;\r\n  ?island2 wdt:P279 ?island1. ;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welche Inselgruppe hat mehr Inseln, die Galapagosinseln oder die Hawaii-Inseln?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Galapagosinseln\": \"Q38095\", \"Hawaii-Inseln\": \"Q192626\"}, \"beziehungen\": {\"Teil von\": \"P527\", \"Instanz von\": \"P31\", \"Unterklasse von\": \"P279\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?group\r\nWHERE {\r\n  ?group wdt:P527 ?island1. ;\r\n  ?group wdt:P527 ?island2. ;\r\n  ?island1 wdt:P31 wd:Q38095. ;\r\n  ?island2 wdt:P31 wd:Q192626. ;\r\n  ?group wdt:P279 ?island1. ;\r\n  ?group wdt:P279 ?island2. ;\r\n  ?island1 wdt:P279 ?island2. ;\r\n  ?island2 wdt:P279 ?island1. ;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nORDER BY COUNT(*) DESC\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Yoko Ono war Teil welcher Kunstbewegung?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q117012 wdt:P135 ?result. ?result wdt:P31 wd:Q968159 }",
        "generated_sparql": "SELECT ?kunstbewegung\r\nWHERE {\r\n  ?kunstbewegung wdt:P135 wd:Q968159 .\r\n  ?kunstbewegung wdt:P31 wd:Q117012 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Yoko Ono war Teil welcher Kunstbewegung?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Yoko Ono\": \"Q117012\", \"Fluxus\": \"Q968159\"}, \"beziehungen\": {\"Kunstbewegung\": \"P135\", \"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?kunstbewegung\r\nWHERE {\r\n  ?kunstbewegung wdt:P135 wd:Q968159 .\r\n  ?kunstbewegung wdt:P31 wd:Q117012 .\r\n}\r\n```"
    },
    {
        "question": "Welche Band wurde fr\u00fcher gegr\u00fcndet, Queen oder Pink Floyd?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q15862 wdt:P571 ?q. wd:Q2306 wdt:P571 ?p. BIND(IF((?q < ?p), wd:Q15862, wd:Q2306 ) AS ?result)}",
        "generated_sparql": "SELECT ?band\r\nWHERE {\r\n  ?band wdt:P571 ?gr\u00fcndungsdatum;\r\n  ?band wdt:P31 wd:Q15862;\r\n  ?band wdt:P31 wd:Q2306;\r\n}\r\nORDER BY ?gr\u00fcndungsdatum",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welche Band wurde fr\u00fcher gegr\u00fcndet, Queen oder Pink Floyd?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Queen\": \"Q15862\", \"Pink Floyd\": \"Q2306\"}, \"beziehungen\": {\"Gr\u00fcndungsdatum\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?band\r\nWHERE {\r\n  ?band wdt:P571 ?gr\u00fcndungsdatum;\r\n  ?band wdt:P31 wd:Q15862;\r\n  ?band wdt:P31 wd:Q2306;\r\n}\r\nORDER BY ?gr\u00fcndungsdatum\r\n```"
    },
    {
        "question": "Wodurch starb Kobe Bryant?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q25369 wdt:P509 ?result}",
        "generated_sparql": "SELECT ?Todesursache\r\nWHERE {\r\n  ?Person wdt:P509 ?Todesursache .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wodurch starb Kobe Bryant?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Kobe Bryant\": \"Q25369\"}, \"beziehungen\": {\"Todesursache\": \"P509\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?Todesursache\r\nWHERE {\r\n  ?Person wdt:P509 ?Todesursache .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"de\". }\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"fr\". }\r\n}\r\nORDER BY ?Todesursache\r\n```"
    },
    {
        "question": "Was sind die Gegenteile von Null?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q204 wdt:P461 ?result}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P461 wd:Q204.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Was sind die Gegenteile von Null?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Null\": \"Q204\"}, \"beziehungen\": {\"Gegenteil\": \"P461\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P461 wd:Q204.\r\n}\r\n```"
    },
    {
        "question": "Welche Firmen wurden von der Person gegr\u00fcndet, die die Leitung von Tesla hat?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q478214 wdt:P169 ?found. ?result wdt:P112 ?found; wdt:P31/wdt:P279* wd:Q4830453}",
        "generated_sparql": "SELECT ?f\r\nWHERE {\r\n  ?f wdt:P279 wd:P31. # Firma\r\n  ?f wdt:P112 ?p. # Gr\u00fcnder\r\n  ?p wdt:P169 ?c. # Leiter\r\n  ?c wdt:P4830453. # Elon Musk\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welche Firmen wurden von der Person gegr\u00fcndet, die die Leitung von Tesla hat?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Tesla\": \"Q4830453\"}, \"beziehungen\": {\"Gr\u00fcnder\": \"P112\", \"Leiter\": \"P169\", \"Unternehmen\": \"P279\", \"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?f\r\nWHERE {\r\n  ?f wdt:P279 wd:P31. # Firma\r\n  ?f wdt:P112 ?p. # Gr\u00fcnder\r\n  ?p wdt:P169 ?c. # Leiter\r\n  ?c wdt:P4830453. # Elon Musk\r\n}\r\n```"
    },
    {
        "question": "Hat Deutschland seit 2010 ein Bev\u00f6lkerungszuwachs von mindestens 1 %?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q183 p:P1082 ?ps10, ?psNew. ?ps10 pq:P585 ?t10; ps:P1082 ?p10. ?psNew pq:P585 ?tNew; ps:P1082 ?pNew BIND(((?pNew - ?p10) / ?p10) AS ?diff) FILTER((YEAR(?t10) = 2010) && NOT EXISTS{wd:Q183 p:P1082/pq:P585 ?tt FILTER(?tt > ?tNew)} && ?diff >= 0.01)}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P1082 ?y.\r\n  ?x wdt:P585 \"2010\".\r\n  ?y >= 1.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Hat Deutschland seit 2010 ein Bev\u00f6lkerungszuwachs von mindestens 1 %?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Deutschland\": \"Q183\"}, \"beziehungen\": {\"Bev\u00f6lkerung\": \"P1082\", \"Jahr\": \"P585\", \"Bev\u00f6lkerungszuwachs\": \"P1082\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P1082 ?y.\r\n  ?x wdt:P585 \"2010\".\r\n  ?y >= 1.\r\n}\r\n```"
    },
    {
        "question": "Welches Flugger\u00e4t hat Howard Hughes gebaut?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT ?result WHERE {?result wdt:P31/wdt:P279* wd:Q11436; wdt:P178 wd:Q189081}",
        "generated_sparql": "SELECT ?Flugzeug\r\nWHERE {\r\n  ?Flugzeug wdt:P31 wd:Q11436. # Howard Hughes\r\n  ?Flugzeug wdt:P178 ?Entwickler. # Entwickler\r\n  ?Entwickler wdt:P279 ?Flugzeug. # Unterklasse von\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welches Flugger\u00e4t hat Howard Hughes gebaut?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Flugger\u00e4t\": \"\", \"Howard Hughes\": \"Q11436\"}, \"beziehungen\": {\"Entwickler\": \"P178\", \"Instanz von\": \"P31\", \"Unterklasse von\": \"P279\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?Flugzeug\r\nWHERE {\r\n  ?Flugzeug wdt:P31 wd:Q11436. # Howard Hughes\r\n  ?Flugzeug wdt:P178 ?Entwickler. # Entwickler\r\n  ?Entwickler wdt:P279 ?Flugzeug. # Unterklasse von\r\n}\r\n```"
    },
    {
        "question": "Welches Land hat mehr offizielle Sprachen: S\u00fcdafrika oder \u00c4thopien?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {{SELECT (COUNT (DISTINCT ?lanS) AS ?lanSCount) WHERE {wd:Q258 wdt:P37 ?lanS}} {SELECT (COUNT (DISTINCT ?lanE) AS ?lanECount) WHERE {wd:Q115 wdt:P37 ?lanE}} BIND(IF(?lanSCount > ?lanECount, wd:Q258, wd:Q115) AS ?result)}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P37 wd:Q258;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welches Land hat mehr offizielle Sprachen: S\u00fcdafrika oder \u00c4thopien?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"S\u00fcdafrika\": \"Q258\", \"\u00c4thiopien\": \"Q115\"}, \"beziehungen\": {\"offizielle Sprache\": \"P37\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P37 wd:Q258;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nORDER BY wikibase:label DESC\r\nLIMIT 1;\r\n```"
    },
    {
        "question": "Ist Kehlgesang eine Tradition?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q1067089 wdt:P31/wdt:P279* wd:Q82821}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P31 wd:Q82821;\r\n  ?x wdt:P279 wd:Q1067089;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Ist Kehlgesang eine Tradition?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Kehlgesang\": \"Q1067089\", \"Tradition\": \"Q82821\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"Unterklasse von\": \"P279\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P31 wd:Q82821;\r\n  ?x wdt:P279 wd:Q1067089;\r\n}\r\n```"
    },
    {
        "question": "Welche Krankheit f\u00fchrte zum Tod von Mark Twain?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q7245 wdt:P509 ?result. ?result wdt:P279* wd:Q12136}",
        "generated_sparql": "SELECT ?t.label WHERE {\n  ?t wdt:P509 wd:Q7245.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welche Krankheit f\u00fchrte zum Tod von Mark Twain?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Mark Twain\": \"Q7245\", \"Angina pectoris\": \"Q12136\"}, \"beziehungen\": {\"Todesursache\": \"P509\", \"Unterklasse von\": \"P279\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?t.label WHERE {\n  ?t wdt:P509 wd:Q7245.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n}\n```"
    },
    {
        "question": "Welche Krankheiten k\u00f6nnen durch Rauchen verursacht werden?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q662860 wdt:P1542 ?result. ?result wdt:P279* wd:Q12136}",
        "generated_sparql": "SELECT ?Krankheit\r\nWHERE {\r\n  ?Rauchen wdt:P1542 ?Krankheit;\r\n  ?Krankheit wdt:P279 \"Krankheit\".\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welche Krankheiten k\u00f6nnen durch Rauchen verursacht werden?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Rauchen\": \"Q662860\", \"Krankheit\": \"Q12136\"}, \"beziehungen\": {\"Ursache\": \"P1542\", \"Unterklasse\": \"P279\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?Krankheit\r\nWHERE {\r\n  ?Rauchen wdt:P1542 ?Krankheit;\r\n  ?Krankheit wdt:P279 \"Krankheit\".\r\n}\r\n```"
    },
    {
        "question": "Welches Genre, zu dem Cage the Elephant geh\u00f6rt, hat die wenigsten englischen Buchstaben?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q68061 wdt:P136 ?result. ?result rdfs:label ?label FILTER(langMatches(lang(?label),\"en\"))} ORDER BY ASC(strlen(?label)) LIMIT 1",
        "generated_sparql": "SELECT ?genre\r\nWHERE {\r\n  ?artist wdt:P136 wd:Q68061.\r\n  ?genre wdt:P136 ?artist.\r\n  ?genre wdt:P31 wd:Q1842837.\r\n  ?genre wdt:P360 ?lang.\r\n  ?lang wdt:P31 wd:Q1878000.\r\n  ?lang wdt:P361 \"english\".\r\n  FILTER(LENGTH(?genre) < LENGTH(REPLACE(?genre, ' ', '')))\r\n}\r\nORDER BY LENGTH(?genre) ASC\r\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welches Genre, zu dem Cage the Elephant geh\u00f6rt, hat die wenigsten englischen Buchstaben?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Cage the Elephant\": \"Q68061\"}, \"beziehungen\": {\"Gattung\": \"P136\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?genre\r\nWHERE {\r\n  ?artist wdt:P136 wd:Q68061.\r\n  ?genre wdt:P136 ?artist.\r\n  ?genre wdt:P31 wd:Q1842837.\r\n  ?genre wdt:P360 ?lang.\r\n  ?lang wdt:P31 wd:Q1878000.\r\n  ?lang wdt:P361 \"english\".\r\n  FILTER(LENGTH(?genre) < LENGTH(REPLACE(?genre, ' ', '')))\r\n}\r\nORDER BY LENGTH(?genre) ASC\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Was ben\u00f6tigt weniger Platz, 1 kg Blei oder 1 kg Eisen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q708 wdt:P2054 ?dl. wd:Q677 wdt:P2054 ?di. BIND(IF(?dl >= ?di, wd:Q708, wd:Q677) AS ?result)}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P2054 wd:Q708 ; # Dichte von Blei\r\n  ?x wdt:P2054 wd:Q677 ; # Dichte von Eisen\r\n}\r\nORDER BY ?x\r\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Was ben\u00f6tigt weniger Platz, 1 kg Blei oder 1 kg Eisen?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Blei\": \"Q708\", \"Eisen\": \"Q677\"}, \"beziehungen\": {\"Dichte\": \"P2054\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P2054 wd:Q708 ; # Dichte von Blei\r\n  ?x wdt:P2054 wd:Q677 ; # Dichte von Eisen\r\n}\r\nORDER BY ?x\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Welches K\u00f6nigreich war der Vorg\u00e4nger des K\u00f6nigreichs Thonburi?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1115291 wdt:P1365 ?result. ?result wdt:P122/wdt:P279* wd:Q7269}",
        "generated_sparql": "SELECT ?v1 ?v2\r\nWHERE {\r\n  ?v1 wdt:P1365 ?v2 .\r\n  ?v1 wdt:P279 ?v2 .\r\n  ?v1 wdt:P122 ?v2 .\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welches K\u00f6nigreich war der Vorg\u00e4nger des K\u00f6nigreichs Thonburi?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"K\u00f6nigreich Thonburi\": \"Q1115291\", \"Ayutthaya\": \"Q7269\"}, \"beziehungen\": {\"Vorg\u00e4nger\": \"P1365\", \"Teil von\": \"P279\", \"Hauptstadt\": \"P122\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?v1 ?v2\r\nWHERE {\r\n  ?v1 wdt:P1365 ?v2 .\r\n  ?v1 wdt:P279 ?v2 .\r\n  ?v1 wdt:P122 ?v2 .\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n}\r\nORDER BY ?v1 DESC\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Wie viele Berge liegen in Deutschland?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?m) AS ?result) WHERE {?m wdt:P31 wd:Q8502; wdt:P17 wd:Q183}",
        "generated_sparql": "SELECT COUNT(*) AS num_mountains\nWHERE {\n  ?mountain wdt:P31 wd:Q8502.\n  ?mountain wdt:P17 wd:Q183.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele Berge liegen in Deutschland?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Berg\": \"Q8502\", \"Deutschland\": \"Q183\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"Ort\": \"P17\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) AS num_mountains\nWHERE {\n  ?mountain wdt:P31 wd:Q8502.\n  ?mountain wdt:P17 wd:Q183.\n}\n```"
    },
    {
        "question": "Welchen Kunstbewegungen ist Les Demoiselles d\u2019Avignon zugeh\u00f6rig?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q910199 wdt:P135 ?result}",
        "generated_sparql": "SELECT ?kunstbewegung\r\nWHERE {\r\n  ?kunstbewegung wdt:P135 wd:Q910199.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welchen Kunstbewegungen ist Les Demoiselles d\u2019Avignon zugeh\u00f6rig?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Les Demoiselles d\u2019Avignon\": \"Q910199\"}, \"beziehungen\": {\"Kunstbewegung\": \"P135\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?kunstbewegung\r\nWHERE {\r\n  ?kunstbewegung wdt:P135 wd:Q910199.\r\n}\r\n```"
    },
    {
        "question": "Welche Filme geh\u00f6ren zur Cornetto-Trilogie?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q169604 wdt:P527 ?result}",
        "generated_sparql": "SELECT ?film\r\nWHERE {\r\n  ?film wdt:P527 wd:Q169604.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welche Filme geh\u00f6ren zur Cornetto-Trilogie?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Cornetto-Trilogie\": \"Q169604\"}, \"beziehungen\": {\"Teil von\": \"P527\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?film\r\nWHERE {\r\n  ?film wdt:P527 wd:Q169604.\r\n}\r\n```"
    },
    {
        "question": "W\u00e4hrend welches Ereignisses wurde der Four Policemen Rat vorgeschlagen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q2945433 wdt:P607 ?result.}",
        "generated_sparql": "SELECT ?event\r\nWHERE {\r\n  ?event wdt:P607 ?four_policemen_rat .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'W\u00e4hrend welches Ereignisses wurde der Four Policemen Rat vorgeschlagen?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Four Policemen Rat\": \"Q2945433\"}, \"beziehungen\": {\"vorgeschlagen w\u00e4hrend\": \"P607\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?event\r\nWHERE {\r\n  ?event wdt:P607 ?four_policemen_rat .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nORDER BY ?event\r\n```"
    },
    {
        "question": "Welche NBA Teams gewannen die meisten Saisons?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {{SELECT DISTINCT (COUNT(DISTINCT ?season) AS ?max) WHERE {?season wdt:P31 wd:Q27020041; wdt:P3450 wd:Q155223; wdt:P1346 ?result. ?result wdt:P31 wd:Q13393265} GROUP BY ?result ORDER BY DESC (?max) LIMIT 1} ?season wdt:P31 wd:Q27020041; wdt:P3450 wd:Q155223; wdt:P1346 ?result. ?result wdt:P31 wd:Q13393265.} GROUP BY ?result HAVING ((COUNT(DISTINCT ?season)) = MAX(?max))",
        "generated_sparql": "SELECT DISTINCT ?NBA\r\nWHERE {\r\n  ?NBA wdt:P31 wd:Q13393265. # NBA\r\n  ?NBA wdt:P3450 ?Saison. # NBA Team\r\n  ?Saison wdt:P1346 ?Meister. # NBA Championship\r\n  ?Meister wdt:P31 wd:Q155223. # NBA Championship\r\n}\r\nORDER BY COUNT(*) DESC\r\nLIMIT 10",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welche NBA Teams gewannen die meisten Saisons?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"NBA\": \"Q13393265\", \"Saison\": \"Q27020041\", \"Meister\": \"Q155223\"}, \"beziehungen\": {\"Gewinner\": \"P1346\", \"Instanz von\": \"P31\", \"Teilnehmer\": \"P3450\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT DISTINCT ?NBA\r\nWHERE {\r\n  ?NBA wdt:P31 wd:Q13393265. # NBA\r\n  ?NBA wdt:P3450 ?Saison. # NBA Team\r\n  ?Saison wdt:P1346 ?Meister. # NBA Championship\r\n  ?Meister wdt:P31 wd:Q155223. # NBA Championship\r\n}\r\nORDER BY COUNT(*) DESC\r\nLIMIT 10\r\n```"
    },
    {
        "question": "Welcher der Drachen in Game of Thrones starb?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31/wdt:P279* wd:Q30170627; wdt:P1441 wd:Q23572 FILTER(EXISTS{?result wdt:P20 _:ex})}",
        "generated_sparql": "SELECT ?Drache\r\nWHERE {\r\n  ?Drache wdt:P31 wd:Q23572. # Instanz von\r\n  ?Drache wdt:P279 wd:Q30170627. # Unterklasse von\r\n  ?Drache wdt:P20 ?Tod. # sterben\r\n  ?Tod wdt:P1441 ?Art. # Art\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welcher der Drachen in Game of Thrones starb?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Drachen\": \"Q30170627\", \"tot\": \"Q23572\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"Unterklasse von\": \"P279\", \"sterben\": \"P20\", \"Art\": \"P1441\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?Drache\r\nWHERE {\r\n  ?Drache wdt:P31 wd:Q23572. # Instanz von\r\n  ?Drache wdt:P279 wd:Q30170627. # Unterklasse von\r\n  ?Drache wdt:P20 ?Tod. # sterben\r\n  ?Tod wdt:P1441 ?Art. # Art\r\n}\r\n```"
    },
    {
        "question": "In welchen anderen Filmen vom selben Regisseur wie Der Rausch spielte Mads Mikkelsen ebenfalls mit?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q69303989 wdt:P57 ?dir. ?result wdt:P31 wd:Q11424; wdt:P57 ?dir; wdt:P161 wd:Q294647 FILTER(?result != wd:Q69303989)}",
        "generated_sparql": "SELECT ?film\r\nWHERE {\r\n  ?film wdt:P31 wd:Q69303989 . # Der Rausch ist ein Film\r\n  ?film wdt:P161 ?actor . # Der Rausch hat einen Darsteller\r\n  ?actor wdt:P57 ?regisseur . # Der Darsteller ist Regisseur\r\n  ?regisseur wdt:P31 wd:Q11424 . # Mads Mikkelsen ist Regisseur\r\n  ?film wdt:P31 ?other_film . # Der Rausch ist ein Film\r\n  ?other_film wdt:P161 ?other_actor . # Der andere Film hat einen Darsteller\r\n  ?other_actor wdt:P57 ?other_regisseur . # Der Darsteller ist Regisseur\r\n  ?other_regisseur wdt:P31 wd:Q11424 . # Mads Mikkelsen ist Regisseur\r\n}\r\nORDER BY ?film",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In welchen anderen Filmen vom selben Regisseur wie Der Rausch spielte Mads Mikkelsen ebenfalls mit?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Der Rausch\": \"Q69303989\", \"Mads Mikkelsen\": \"Q11424\"}, \"beziehungen\": {\"Regisseur\": \"P57\", \"Darsteller\": \"P161\", \"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?film\r\nWHERE {\r\n  ?film wdt:P31 wd:Q69303989 . # Der Rausch ist ein Film\r\n  ?film wdt:P161 ?actor . # Der Rausch hat einen Darsteller\r\n  ?actor wdt:P57 ?regisseur . # Der Darsteller ist Regisseur\r\n  ?regisseur wdt:P31 wd:Q11424 . # Mads Mikkelsen ist Regisseur\r\n  ?film wdt:P31 ?other_film . # Der Rausch ist ein Film\r\n  ?other_film wdt:P161 ?other_actor . # Der andere Film hat einen Darsteller\r\n  ?other_actor wdt:P57 ?other_regisseur . # Der Darsteller ist Regisseur\r\n  ?other_regisseur wdt:P31 wd:Q11424 . # Mads Mikkelsen ist Regisseur\r\n}\r\nORDER BY ?film\r\n```"
    },
    {
        "question": "Welche \u00e4gyptische Pyramide ist am h\u00f6chsten?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?pyr WHERE {?pyr wdt:P31/wdt:P279* wd:Q12516; p:P2048/psn:P2048/wikibase:quantityAmount ?h; wdt:P17 wd:Q79 } ORDER BY DESC(?h) LIMIT 1",
        "generated_sparql": "SELECT ?pyramide\r\nWHERE {\r\n  ?pyramide wdt:P31 wd:Q12516. # \u00c4gyptische Pyramide\r\n  ?pyramide wdt:P2048 ?highest. # h\u00f6chste Pyramide\r\n  ?highest wdt:P17 ?country. # \u00c4gypten\r\n  FILTER(?country = \"Q79\"). # \u00c4gypten\r\n}\r\nORDER BY ?highest DESC\r\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welche \u00e4gyptische Pyramide ist am h\u00f6chsten?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"\u00c4gypten\": \"Q79\", \"Pyramide\": \"Q12516\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"h\u00f6chste\": \"P2048\", \"L\u00e4ndercode\": \"P17\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?pyramide\r\nWHERE {\r\n  ?pyramide wdt:P31 wd:Q12516. # \u00c4gyptische Pyramide\r\n  ?pyramide wdt:P2048 ?highest. # h\u00f6chste Pyramide\r\n  ?highest wdt:P17 ?country. # \u00c4gypten\r\n  FILTER(?country = \"Q79\"). # \u00c4gypten\r\n}\r\nORDER BY ?highest DESC\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Was ist die offizielle Sprache in Taipeh?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1867 wdt:P37 ?result}",
        "generated_sparql": "SELECT ?lang\r\nWHERE {\r\n  ?city wdt:P37 wd:Q1867 ; # Taipeh\r\n  ?city wdt:P37 ?lang ; # offizielle Sprache\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Was ist die offizielle Sprache in Taipeh?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Taipeh\": \"Q1867\"}, \"beziehungen\": {\"offizielle Sprache\": \"P37\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?lang\r\nWHERE {\r\n  ?city wdt:P37 wd:Q1867 ; # Taipeh\r\n  ?city wdt:P37 ?lang ; # offizielle Sprache\r\n}\r\n```"
    },
    {
        "question": "Welche Sendungen liefen zum ersten Mal im gleichen Jahre als Saturday Night Live startete?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q13979 wdt:P580 ?snl. ?result wdt:P31 wd:Q5398426; wdt:P580 ?start. FILTER(YEAR(?snl) = YEAR(?start) && ?result != wd:Q13979)}",
        "generated_sparql": "SELECT DISTINCT ?s\r\nWHERE {\r\n  ?s wdt:P31 wd:Q5398426.\r\n  ?s wdt:P580 wd:Q13979.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welche Sendungen liefen zum ersten Mal im gleichen Jahre als Saturday Night Live startete?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Saturday Night Live\": \"Q13979\", \"Fernsehsendung\": \"Q5398426\"}, \"beziehungen\": {\"erstausgestrahlt\": \"P580\", \"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT DISTINCT ?s\r\nWHERE {\r\n  ?s wdt:P31 wd:Q5398426.\r\n  ?s wdt:P580 wd:Q13979.\r\n}\r\n```"
    },
    {
        "question": "Welche Lieder beinhaltete das Album Fijaci\u00f3n oral vol. 1?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P361 wd:Q828282; wdt:P31 ?o FILTER(?o IN (wd:Q105543609, wd:Q134556))}",
        "generated_sparql": "SELECT ?s\r\nWHERE {\r\n  ?s wdt:P31 wd:Q828282;\r\n  ?s wdt:P361 ?o;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"de\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welche Lieder beinhaltete das Album Fijaci\u00f3n oral vol. 1?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Fijaci\u00f3n oral vol. 1\": \"Q828282\"}, \"beziehungen\": {\"enth\u00e4lt\": \"P361\", \"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s\r\nWHERE {\r\n  ?s wdt:P31 wd:Q828282;\r\n  ?s wdt:P361 ?o;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"de\". }\r\n}\r\nORDER BY ?s\r\n```"
    },
    {
        "question": "Welche Kunstbewegung begann zuerst, Impressionismus oder Expressionismus?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q40415 wdt:P571 ?imp. wd:Q80113 wdt:P580 ?exp. BIND(IF(?imp < ?exp, wd:Q40415, wd:Q80113) AS ?result)}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P571 wd:Q40415 .\r\n  ?x wdt:P580 wd:Q80113 .\r\n}\r\nORDER BY ?x\r\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welche Kunstbewegung begann zuerst, Impressionismus oder Expressionismus?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Impressionismus\": \"Q40415\", \"Expressionismus\": \"Q80113\"}, \"beziehungen\": {\"Beginn\": \"P571\", \"Gr\u00fcndung\": \"P580\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P571 wd:Q40415 .\r\n  ?x wdt:P580 wd:Q80113 .\r\n}\r\nORDER BY ?x\r\nLIMIT 1\r\n```"
    },
    {
        "question": "In welchem US-Staat lebt Batman?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q2695156 wdt:P551/wdt:P131 ?result. ?result wdt:P31 wd:Q35657}",
        "generated_sparql": "SELECT ?state WHERE {\n  ?person wdt:P31 wd:Q2695156.\n  ?person wdt:P551 ?state.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In welchem US-Staat lebt Batman?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Batman\": \"Q2695156\", \"Vereinigte Staaten\": \"Q35657\"}, \"beziehungen\": {\"lebt in\": \"P551\", \"Instanz von\": \"P31\", \"Teil von\": \"P131\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?state WHERE {\n  ?person wdt:P31 wd:Q2695156.\n  ?person wdt:P551 ?state.\n}\n```"
    },
    {
        "question": "Welcher Schwertk\u00e4mpfer aus Der Herr der Ringe war mit einer Halbelbin verheiratet und geh\u00f6rte zu den Waldl\u00e4ufern?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P106 wd:Q11397897; wdt:P26/wdt:P31 wd:Q2035494; wdt:P172 wd:Q2292830}",
        "generated_sparql": "SELECT ?s WHERE {\r\n  ?s wdt:P106 wd:Q2292830 .\r\n  ?s wdt:P26 wd:Q2035494 .\r\n  ?s wdt:P31 wd:Q11397897 .\r\n  ?s wdt:P172 wd:Q2292830 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welcher Schwertk\u00e4mpfer aus Der Herr der Ringe war mit einer Halbelbin verheiratet und geh\u00f6rte zu den Waldl\u00e4ufern?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Der Herr der Ringe\": \"Q11397897\", \"Halbelbin\": \"Q2035494\", \"Waldl\u00e4ufer\": \"Q2292830\"}, \"beziehungen\": {\"Schwertk\u00e4mpfer\": \"P106\", \"Ehepartner\": \"P26\", \"Instanz von\": \"P31\", \"aus\": \"P172\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s WHERE {\r\n  ?s wdt:P106 wd:Q2292830 .\r\n  ?s wdt:P26 wd:Q2035494 .\r\n  ?s wdt:P31 wd:Q11397897 .\r\n  ?s wdt:P172 wd:Q2292830 .\r\n}\r\n```"
    },
    {
        "question": "Welche Mannschaften standen 2020 im Finale der UEFA Champions League?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q46569648 wdt:P1923 ?result}",
        "generated_sparql": "SELECT DISTINCT ?team\r\nWHERE {\r\n  ?team wdt:P1923 wd:Q46569648.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welche Mannschaften standen 2020 im Finale der UEFA Champions League?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"UEFA Champions League 2020\": \"Q46569648\"}, \"beziehungen\": {\"Finalist\": \"P1923\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT DISTINCT ?team\r\nWHERE {\r\n  ?team wdt:P1923 wd:Q46569648.\r\n}\r\n```"
    },
    {
        "question": "Welche Universit\u00e4ten haben mehr als 200000 Studierende?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q3918; wdt:P2196 ?stu. FILTER(?stu > xsd:integer(\"200000\"))}",
        "generated_sparql": "SELECT DISTINCT ?Universit\u00e4t\r\nWHERE {\r\n  ?Universit\u00e4t wdt:P31 wd:Q3918;\r\n  ?Universit\u00e4t wdt:P2196 ?Studierende;\r\n  FILTER(?Studierende > 200000)\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welche Universit\u00e4ten haben mehr als 200000 Studierende?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Universit\u00e4t\": \"Q3918\"}, \"beziehungen\": {\"Anzahl der Studierenden\": \"P2196\", \"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT DISTINCT ?Universit\u00e4t\r\nWHERE {\r\n  ?Universit\u00e4t wdt:P31 wd:Q3918;\r\n  ?Universit\u00e4t wdt:P2196 ?Studierende;\r\n  FILTER(?Studierende > 200000)\r\n}\r\n```"
    },
    {
        "question": "Welche Universit\u00e4t wurde fr\u00fcher gegr\u00fcndet, die Oxford Universit\u00e4t oder Cambridge Universit\u00e4t?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q34433 wdt:P571 ?inco. wd:Q35794 wdt:P571 ?incc BIND(IF((?inco < ?incc), wd:Q34433, wd:Q35794) AS ?result)}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P571 ?y\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welche Universit\u00e4t wurde fr\u00fcher gegr\u00fcndet, die Oxford Universit\u00e4t oder Cambridge Universit\u00e4t?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Oxford Universit\u00e4t\": \"Q34433\", \"Cambridge Universit\u00e4t\": \"Q35794\"}, \"beziehungen\": {\"Gr\u00fcndungsdatum\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P571 ?y\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n  FILTER(CONTAINS(?x, \"Oxford\") || CONTAINS(?x, \"Cambridge\"))\r\n}\r\nORDER BY ?x\r\n```"
    },
    {
        "question": "Wer entwickelte WordNet?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q533822 wdt:P178 ?result}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P178 wd:Q533822.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer entwickelte WordNet?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"WordNet\": \"Q533822\"}, \"beziehungen\": {\"Entwickler\": \"P178\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P178 wd:Q533822.\r\n}\r\n```"
    },
    {
        "question": "Wer sind die Hauptdarstellerinnen in Portr\u00e4t einer jungen Frau in Flammen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q63246568 wdt:P161 ?result. ?result wdt:P21 wd:Q6581072}",
        "generated_sparql": "SELECT ?s WHERE {\r\n  ?s wdt:P161 wd:Q63246568;\r\n  ?s wdt:P21 wd:Q6581072;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer sind die Hauptdarstellerinnen in Portr\u00e4t einer jungen Frau in Flammen?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Portr\u00e4t einer jungen Frau in Flammen\": \"Q63246568\", \"weiblich\": \"Q6581072\"}, \"beziehungen\": {\"Hauptdarsteller\": \"P161\", \"Geschlecht\": \"P21\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s WHERE {\r\n  ?s wdt:P161 wd:Q63246568;\r\n  ?s wdt:P21 wd:Q6581072;\r\n}\r\n```"
    },
    {
        "question": "Spielten Michael Jordan und Kobe Bryant f\u00fcr das selbe Team?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q25369 wdt:P54 ?team. wd:Q41421 wdt:P54 ?team.}",
        "generated_sparql": "SELECT ?x ?y WHERE {\n  ?x wdt:P54 wd:Q25369.\n  ?x wdt:P54 wd:Q41421.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Spielten Michael Jordan und Kobe Bryant f\u00fcr das selbe Team?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Michael Jordan\": \"Q25369\", \"Kobe Bryant\": \"Q41421\"}, \"beziehungen\": {\"Team\": \"P54\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?x ?y WHERE {\n  ?x wdt:P54 wd:Q25369.\n  ?x wdt:P54 wd:Q41421.\n}\n```"
    },
    {
        "question": "Wer erfand die Turingmaschine?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q163310 wdt:P61 ?result}",
        "generated_sparql": "SELECT ?subject\r\nWHERE {\r\n  ?subject wdt:P61 wd:Q163310.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer erfand die Turingmaschine?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Turingmaschine\": \"Q163310\"}, \"beziehungen\": {\"erfand\": \"P61\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?subject\r\nWHERE {\r\n  ?subject wdt:P61 wd:Q163310.\r\n}\r\n```"
    },
    {
        "question": "Wann wurde das Hambacher Schlo\u00df erbaut?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q523286 wdt:P571 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?date wdt:P571 wd:Q523286.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wann wurde das Hambacher Schlo\u00df erbaut?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Hambacher Schlo\u00df\": \"Q523286\"}, \"beziehungen\": {\"Gr\u00fcndungsdatum\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?date wdt:P571 wd:Q523286.\r\n}\r\n```"
    },
    {
        "question": "Wer starb am Nordpol?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q5; wdt:P20 wd:Q934}",
        "generated_sparql": "SELECT ?m.label\r\nWHERE {\r\n  ?m wdt:P31 wd:Q5;\r\n  ?m wdt:P20 wd:Q934;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer starb am Nordpol?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Mensch\": \"Q5\", \"Nordpol\": \"Q934\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"Sterbeort\": \"P20\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?m.label\r\nWHERE {\r\n  ?m wdt:P31 wd:Q5;\r\n  ?m wdt:P20 wd:Q934;\r\n}\r\n```"
    },
    {
        "question": "Wer f\u00fchrte Regie bei Anne with an E?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q28091065 wdt:P57 ?result.}",
        "generated_sparql": "SELECT ?regisseur\r\nWHERE {\r\n  ?regisseur wdt:P57 wd:Q28091065.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer f\u00fchrte Regie bei Anne with an E?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Anne with an E\": \"Q28091065\"}, \"beziehungen\": {\"Regisseur\": \"P57\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?regisseur\r\nWHERE {\r\n  ?regisseur wdt:P57 wd:Q28091065.\r\n}\r\n```"
    },
    {
        "question": "Wer schrieb \"Prototypical Networks for Few-shot Learning\"?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {{wd:Q44649835 wdt:P50 ?result.} UNION {wd:Q44649835 wdt:P2093 ?result}}",
        "generated_sparql": "SELECT ?author\r\nWHERE {\r\n  ?paper wdt:P50 wd:Q44649835 .\r\n  ?paper wdt:P2093 ?author .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer schrieb \"Prototypical Networks for Few-shot Learning\"?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Prototypical Networks for Few-shot Learning\": \"Q44649835\"}, \"beziehungen\": {\"Autor\": \"P50\", \"zugeschrieben\": \"P2093\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?author\r\nWHERE {\r\n  ?paper wdt:P50 wd:Q44649835 .\r\n  ?paper wdt:P2093 ?author .\r\n}\r\n```"
    },
    {
        "question": "Wer gr\u00fcndete Der Blaue Reiter?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q117035 wdt:P112 ?result}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P112 ?y.\r\n  ?y wdt:P31 wd:Q117035.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer gr\u00fcndete Der Blaue Reiter?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Der Blaue Reiter\": \"Q117035\"}, \"beziehungen\": {\"Gr\u00fcnder\": \"P112\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P112 ?y.\r\n  ?y wdt:P31 wd:Q117035.\r\n}\r\n```"
    },
    {
        "question": "Wer hat die K\u00fcnstlerkolonie Worpswede gegr\u00fcndet? ",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q479361 wdt:P112 ?result}",
        "generated_sparql": "SELECT ?begr\u00fcnder\r\nWHERE {\r\n  ?begr\u00fcnder wdt:P112 wd:Q479361 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer hat die K\u00fcnstlerkolonie Worpswede gegr\u00fcndet? ' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"K\u00fcnstlerkolonie Worpswede\": \"Q479361\"}, \"beziehungen\": {\"Begr\u00fcnder\": \"P112\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?begr\u00fcnder\r\nWHERE {\r\n  ?begr\u00fcnder wdt:P112 wd:Q479361 .\r\n}\r\n```"
    },
    {
        "question": "Wer ist der Autor von \"Die Ladenh\u00fcterin\"?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q27863945 wdt:P50 ?result}",
        "generated_sparql": "SELECT ?author\r\nWHERE {\r\n  ?book wdt:P50 ?author;\r\n  wd:Q27863945 wdt:P31 ?book;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer ist der Autor von \"Die Ladenh\u00fcterin\"?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Die Ladenh\u00fcterin\": \"Q27863945\"}, \"beziehungen\": {\"Autor\": \"P50\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?author\r\nWHERE {\r\n  ?book wdt:P50 ?author;\r\n  wd:Q27863945 wdt:P31 ?book;\r\n}\r\n```"
    },
    {
        "question": "Welcher Fu\u00dfballspieler schoss die meisten Tore in seiner Karriere?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P106 wd:Q937857; wdt:P6509 ?goals} ORDER BY DESC(?goals) LIMIT 1",
        "generated_sparql": "SELECT ?footballer\r\nWHERE {\r\n  ?footballer wdt:P106 wd:Q937857 ; # Footballer\r\n  ?footballer wdt:P6509 ?tore ; # Number of goals\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  GROUP BY ?footballer\r\n  ORDER BY ?tore DESC\r\n  LIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welcher Fu\u00dfballspieler schoss die meisten Tore in seiner Karriere?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Fu\u00dfballspieler\": \"Q937857\"}, \"beziehungen\": {\"Position\": \"P106\", \"Anzahl der Tore\": \"P6509\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?footballer\r\nWHERE {\r\n  ?footballer wdt:P106 wd:Q937857 ; # Footballer\r\n  ?footballer wdt:P6509 ?tore ; # Number of goals\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  GROUP BY ?footballer\r\n  ORDER BY ?tore DESC\r\n  LIMIT 1\r\n}\r\n```"
    },
    {
        "question": "Wer ist der Sch\u00f6pfer der TV Show Die Dinos?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1211977 wdt:P170 ?result}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P170 wd:Q1211977.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer ist der Sch\u00f6pfer der TV Show Die Dinos?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Die Dinos\": \"Q1211977\"}, \"beziehungen\": {\"Sch\u00f6pfer\": \"P170\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P170 wd:Q1211977.\r\n}\r\n```"
    },
    {
        "question": "Wer ist die aktuelle Pr\u00e4sidentin des Deutschen Bundestags?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q154797 wdt:P488 ?result}",
        "generated_sparql": "SELECT ?s WHERE {\n  ?s wdt:P488 wd:Q154797.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer ist die aktuelle Pr\u00e4sidentin des Deutschen Bundestags?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Deutscher Bundestag\": \"Q154797\"}, \"beziehungen\": {\"Pr\u00e4sident\": \"P488\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?s WHERE {\n  ?s wdt:P488 wd:Q154797.\n}\n```"
    },
    {
        "question": "Wer ist die reichste Entrepreneurin/der reichste Entrepreneur?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P2218 ?net; wdt:P106 wd:Q131524} ORDER BY DESC(?net) LIMIT 1",
        "generated_sparql": "SELECT ?person\r\nWHERE {\r\n  ?person wdt:P2218 ?nettoverm\u00f6gen;\r\n  ?person wdt:P106 ?beruf;\r\n  ?person wdt:P31 wd:Q131524;\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\";\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer ist die reichste Entrepreneurin/der reichste Entrepreneur?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {}, \"beziehungen\": {\"Nettoverm\u00f6gen\": \"P2218\", \"Beruf\": \"P106\", \"Entrepreneur\": \"Q131524\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?person\r\nWHERE {\r\n  ?person wdt:P2218 ?nettoverm\u00f6gen;\r\n  ?person wdt:P106 ?beruf;\r\n  ?person wdt:P31 wd:Q131524;\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\";\r\n  }\r\n}\r\nORDER BY ?nettoverm\u00f6gen DESC\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Wer ist die \u00e4lteste Person, welche in der Netflix Serie \"Queer Eye\" mitspielt?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q48817408 wdt:P161 ?result. ?result wdt:P569 ?time} ORDER BY ASC(?time) LIMIT 1",
        "generated_sparql": "SELECT ?person\r\nWHERE {\r\n  ?person wdt:P161 wd:Q48817408 . # Darsteller\r\n  ?person wdt:P569 ?birthdate . # Geburtsdatum\r\n  ?birthdate wdt:P569-max ?age . # Geburtsdatum mit maximaler Altersangabe\r\n  ?person wdt:P569 ?age . # Person mit maximaler Altersangabe\r\n}\r\nORDER BY ?age DESC\r\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer ist die \u00e4lteste Person, welche in der Netflix Serie \"Queer Eye\" mitspielt?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Queer Eye\": \"Q48817408\"}, \"beziehungen\": {\"Darsteller\": \"P161\", \"Geburtsdatum\": \"P569\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?person\r\nWHERE {\r\n  ?person wdt:P161 wd:Q48817408 . # Darsteller\r\n  ?person wdt:P569 ?birthdate . # Geburtsdatum\r\n  ?birthdate wdt:P569-max ?age . # Geburtsdatum mit maximaler Altersangabe\r\n  ?person wdt:P569 ?age . # Person mit maximaler Altersangabe\r\n}\r\nORDER BY ?age DESC\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Wer ist der Herausgeber von Smite?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q2357719 wdt:P123 ?result}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P123 wd:Q2357719.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer ist der Herausgeber von Smite?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Smite\": \"Q2357719\"}, \"beziehungen\": {\"Herausgeber\": \"P123\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P123 wd:Q2357719.\r\n}\r\n```"
    },
    {
        "question": "Wer schrieb das Erlangen Programm?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P800 wd:Q315296}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P800 wd:Q315296.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer schrieb das Erlangen Programm?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Erlangen\": \"Q315296\"}, \"beziehungen\": {\"Entwickler\": \"P800\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P800 wd:Q315296.\r\n}\r\n```"
    },
    {
        "question": "In welchem Land liegt der Nanga Parbat?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE { wd:Q130736 wdt:P17 ?result. }",
        "generated_sparql": "SELECT ?land\r\nWHERE {\r\n  ?entit\u00e4t wdt:P17 ?land .\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In welchem Land liegt der Nanga Parbat?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Nanga Parbat\": \"Q130736\"}, \"beziehungen\": {\"liegt in\": \"P17\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?land\r\nWHERE {\r\n  ?entit\u00e4t wdt:P17 ?land .\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n}\r\nWHERE {\r\n  ?entit\u00e4t wdt:P17 ?land .\r\n  FILTER(CONTAINS(?land, \"Nanga Parbat\"))\r\n}\r\n```"
    },
    {
        "question": "Wer produzierte Star Wars: Episode VI - Die R\u00fcckkehr der Jedi-Ritter?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q181803 wdt:P162 ?result}",
        "generated_sparql": "SELECT ?produzent\r\nWHERE {\r\n  ?produzent wdt:P162 wd:Q181803.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer produzierte Star Wars: Episode VI - Die R\u00fcckkehr der Jedi-Ritter?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Star Wars: Episode VI - Die R\u00fcckkehr der Jedi-Ritter\": \"Q181803\"}, \"beziehungen\": {\"Produzent\": \"P162\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?produzent\r\nWHERE {\r\n  ?produzent wdt:P162 wd:Q181803.\r\n}\r\n```"
    },
    {
        "question": "Wer spielte in mehr Filmen mit, Daniel Day Lewis oder Paul Dano?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {{SELECT (COUNT (DISTINCT ?film) AS ?ddl) WHERE {?film wdt:P161 wd:Q166389; wdt:P31 wd:Q11424}} {SELECT (COUNT (DISTINCT ?film) AS ?pd) WHERE {?film wdt:P161 wd:Q343616; wdt:P31 wd:Q11424}} BIND(IF((?ddl > ?pd), wd:Q166389, wd:Q343616) AS ?result)}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P161 wd:Q166389 .\r\n  ?x wdt:P161 wd:Q343616 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer spielte in mehr Filmen mit, Daniel Day Lewis oder Paul Dano?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Daniel Day Lewis\": \"Q166389\", \"Paul Dano\": \"Q343616\"}, \"beziehungen\": {\"Darsteller\": \"P161\", \"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P161 wd:Q166389 .\r\n  ?x wdt:P161 wd:Q343616 .\r\n}\r\n```"
    },
    {
        "question": "F\u00fcr welchen Literaturpreis war Simone de Beauvoir nominiert?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q7197 wdt:P1411 ?result. ?result wdt:P31 wd:Q378427}",
        "generated_sparql": "SELECT ?p1411 ?p31\r\nWHERE {\r\n  ?s dbp:P31 wd:Q378427.\r\n  ?s dbp:P1411 ?p1411.\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'F\u00fcr welchen Literaturpreis war Simone de Beauvoir nominiert?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Simone de Beauvoir\": \"Q7197\", \"Literaturpreis\": \"Q378427\"}, \"beziehungen\": {\"Nominiert f\u00fcr\": \"P1411\", \"Instanz von\": \"P31\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?p1411 ?p31\r\nWHERE {\r\n  ?s dbp:P31 wd:Q378427.\r\n  ?s dbp:P1411 ?p1411.\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nORDER BY ?p1411\r\n```"
    },
    {
        "question": "Wie lautet die Webseite von NPRs \"Tiny Desk Concerts\"?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q30588383 wdt:P856 ?result}",
        "generated_sparql": "SELECT ?webseite\r\nWHERE {\r\n  ?webseite wdt:P856 wd:Q30588383.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie lautet die Webseite von NPRs \"Tiny Desk Concerts\"?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Tiny Desk Concerts\": \"Q30588383\"}, \"beziehungen\": {\"offizielle Webseite\": \"P856\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?webseite\r\nWHERE {\r\n  ?webseite wdt:P856 wd:Q30588383.\r\n}\r\n```"
    },
    {
        "question": "Wer war der Sch\u00f6pfer von Boo-Boo-Bear?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q2394280 wdt:P170 ?result}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P170 wd:Q2394280.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer war der Sch\u00f6pfer von Boo-Boo-Bear?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Boo-Boo-Bear\": \"Q2394280\"}, \"beziehungen\": {\"Sch\u00f6pfer\": \"P170\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P170 wd:Q2394280.\r\n}\r\n```"
    },
    {
        "question": "Wer war der Sch\u00f6pfer von Unbreakable Kimmy Schmidt?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q16889037 wdt:P170 ?result}",
        "generated_sparql": "SELECT ?creator\r\nWHERE {\r\n  ?creator wdt:P170 wd:Q16889037.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer war der Sch\u00f6pfer von Unbreakable Kimmy Schmidt?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Unbreakable Kimmy Schmidt\": \"Q16889037\"}, \"beziehungen\": {\"Sch\u00f6pfer\": \"P170\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?creator\r\nWHERE {\r\n  ?creator wdt:P170 wd:Q16889037.\r\n}\r\n```"
    },
    {
        "question": "Wer war der Regisseur von Llamas with Hats?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q55621114 wdt:P57 ?result}",
        "generated_sparql": "SELECT ?regisseur\r\nWHERE {\r\n  ?regisseur wdt:P57 wd:Q55621114.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer war der Regisseur von Llamas with Hats?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Llamas with Hats\": \"Q55621114\"}, \"beziehungen\": {\"Regisseur\": \"P57\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?regisseur\r\nWHERE {\r\n  ?regisseur wdt:P57 wd:Q55621114.\r\n}\r\n```"
    },
    {
        "question": "Wer hat die Roland Corporation gegr\u00fcndet?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q848490 wdt:P112 ?result}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P112 ?y\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer hat die Roland Corporation gegr\u00fcndet?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Roland Corporation\": \"Q848490\"}, \"beziehungen\": {\"Gr\u00fcnder\": \"P112\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P112 ?y\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(CONTAINS(?y, \"Roland Corporation\"))\r\n}\r\n```"
    },
    {
        "question": "Wer war der urspr\u00fcngliche Schauspieler, der Pinhead spielte?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q2518973 wdt:P175 ?result}",
        "generated_sparql": "SELECT ?actor\r\nWHERE {\r\n  ?actor wdt:P175 wd:Q2518973.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer war der urspr\u00fcngliche Schauspieler, der Pinhead spielte?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Pinhead\": \"Q2518973\"}, \"beziehungen\": {\"Darsteller\": \"P175\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?actor\r\nWHERE {\r\n  ?actor wdt:P175 wd:Q2518973.\r\n}\r\n```"
    },
    {
        "question": "Wer waren die Eltern von Sokrates?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {{wd:Q913 wdt:P25 ?result} UNION {wd:Q913 wdt:P22 ?result}}",
        "generated_sparql": "SELECT ?parent\r\nWHERE {\r\n  ?parent wdt:P22 wd:Q913;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer waren die Eltern von Sokrates?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Sokrates\": \"Q913\"}, \"beziehungen\": {\"Vater\": \"P22\", \"Mutter\": \"P25\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?parent\r\nWHERE {\r\n  ?parent wdt:P22 wd:Q913;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\n```"
    },
    {
        "question": "Wer schrieb Anne auf Green Gables?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q565911 wdt:P50 ?result}",
        "generated_sparql": "SELECT ?author\r\nWHERE {\r\n  ?author wdt:P50 ?book. \r\n  ?book wdt:P31 wd:Q565911. \r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer schrieb Anne auf Green Gables?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Anne auf Green Gables\": \"Q565911\"}, \"beziehungen\": {\"Autor\": \"P50\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?author\r\nWHERE {\r\n  ?author wdt:P50 ?book. \r\n  ?book wdt:P31 wd:Q565911. \r\n}\r\n```"
    },
    {
        "question": "Wer schrieb das Gedicht Howl?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1545259 wdt:P50 ?result}",
        "generated_sparql": "SELECT ?author\r\nWHERE {\r\n  ?author wdt:P50 ?howl.\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer schrieb das Gedicht Howl?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Howl\": \"Q1545259\"}, \"beziehungen\": {\"Autor\": \"P50\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?author\r\nWHERE {\r\n  ?author wdt:P50 ?howl.\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nORDER BY ?howl\r\n```"
    },
    {
        "question": "Wer ist der Autor von The Hellbound Heart?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q3521239 wdt:P50 ?result}",
        "generated_sparql": "SELECT ?author\r\nWHERE {\r\n  ?book wdt:P50 ?author;\r\n  wd:Q3521239 wdt:P31 ?book\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer ist der Autor von The Hellbound Heart?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"The Hellbound Heart\": \"Q3521239\"}, \"beziehungen\": {\"Autor\": \"P50\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?author\r\nWHERE {\r\n  ?book wdt:P50 ?author;\r\n  wd:Q3521239 wdt:P31 ?book\r\n}\r\n```"
    },
    {
        "question": "Wen hat Clara Westhoff geheiratet?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q462333 wdt:P26 ?result}",
        "generated_sparql": "SELECT ?person\r\nWHERE {\r\n  ?person wdt:P26 wd:Q462333.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wen hat Clara Westhoff geheiratet?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Clara Westhoff\": \"Q462333\"}, \"beziehungen\": {\"geheiratet\": \"P26\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?person\r\nWHERE {\r\n  ?person wdt:P26 wd:Q462333.\r\n}\r\n```"
    },
    {
        "question": "Was ist das \u00e4lteste Film-Festival?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q220505; wdt:P571 ?inc FILTER(isLiteral(?inc))} ORDER BY ASC(?inc) LIMIT 1",
        "generated_sparql": "SELECT ?festival\r\nWHERE {\r\n  ?festival wdt:P31 wd:Q220505;\r\n  ?festival wdt:P571 ?date;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Was ist das \u00e4lteste Film-Festival?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Film-Festival\": \"Q220505\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"Gr\u00fcndungsdatum\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?festival\r\nWHERE {\r\n  ?festival wdt:P31 wd:Q220505;\r\n  ?festival wdt:P571 ?date;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(CONTAINS(?date, \"1900-00-00\"))\r\n}\r\nORDER BY ?date\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Wann wurde Athen gegr\u00fcndet?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1524 wdt:P571 ?result}",
        "generated_sparql": "SELECT ?date\r\nWHERE {\r\n  ?entity wdt:P571 ?date\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wann wurde Athen gegr\u00fcndet?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Athen\": \"Q1524\"}, \"beziehungen\": {\"Gr\u00fcndungsdatum\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?date\r\nWHERE {\r\n  ?entity wdt:P571 ?date\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(CONTAINS(?entity, \"Q1524\"))\r\n}\r\n```"
    },
    {
        "question": "Welcher Fluss ist l\u00e4nger, die Seine oder die Elbe?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1471 wdt:P2043 ?ls. wd:Q1644 wdt:P2043 ?le. BIND(IF((?ls > ?le), wd:Q1471, wd:Q1644) AS ?result)}",
        "generated_sparql": "SELECT ?fluss\r\nWHERE {\r\n  ?fluss wdt:P2043 wd:Q1471;\r\n  ?fluss wdt:P2043 wd:Q1644;\r\n}\r\nORDER BY (?fluss wdt:P2043) DESC\r\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welcher Fluss ist l\u00e4nger, die Seine oder die Elbe?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Seine\": \"Q1471\", \"Elbe\": \"Q1644\"}, \"beziehungen\": {\"L\u00e4nge\": \"P2043\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?fluss\r\nWHERE {\r\n  ?fluss wdt:P2043 wd:Q1471;\r\n  ?fluss wdt:P2043 wd:Q1644;\r\n}\r\nORDER BY (?fluss wdt:P2043) DESC\r\nLIMIT 1;\r\n```"
    },
    {
        "question": "Welches Spiel wurde fr\u00fcher entwickelt, Super Mario Bros oder Pac-Man?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q11168 wdt:P577 ?cm. wd:Q173626 wdt:P577 ?cp. BIND(IF((?cm < ?cp), wd:Q11168, wd:Q173626) AS ?result)}",
        "generated_sparql": "SELECT ?game\r\nWHERE {\r\n  ?game wdt:P577 wd:Q11168. # Super Mario Bros\r\n  ?game wdt:P577 wd:Q173626. # Pac-Man\r\n}\r\nORDER BY ?game",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welches Spiel wurde fr\u00fcher entwickelt, Super Mario Bros oder Pac-Man?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Super Mario Bros\": \"Q11168\", \"Pac-Man\": \"Q173626\"}, \"beziehungen\": {\"Ver\u00f6ffentlichung\": \"P577\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?game\r\nWHERE {\r\n  ?game wdt:P577 wd:Q11168. # Super Mario Bros\r\n  ?game wdt:P577 wd:Q173626. # Pac-Man\r\n}\r\nORDER BY ?game\r\n```"
    },
    {
        "question": "Wer ist das j\u00fcngste Mitglied von G-IDLE?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P463 wd:Q51885404; wdt:P569 ?date} ORDER BY DESC(?date) LIMIT 1",
        "generated_sparql": "SELECT ?person\r\nWHERE {\r\n  ?person wdt:P463 wd:Q51885404 .\r\n  OPTIONAL { ?person wdt:P569 ?birthdate . }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer ist das j\u00fcngste Mitglied von G-IDLE?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"G-IDLE\": \"Q51885404\"}, \"beziehungen\": {\"Mitglied von\": \"P463\", \"Geburtsdatum\": \"P569\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?person\r\nWHERE {\r\n  ?person wdt:P463 wd:Q51885404 .\r\n  OPTIONAL { ?person wdt:P569 ?birthdate . }\r\n  FILTER(CONTAINS(?birthdate, \"1999-01-01\"))\r\n}\r\nORDER BY ?birthdate\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Wer ist \u00e4lter, Lionel Messi oder Christiano Ronaldo?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q615 wdt:P569 ?number. wd:Q11571 wdt:P569 ?number2. BIND(IF(?number < ?number2, wd:Q615, wd:Q11571) AS ?result)}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P569 ?birthdate;\r\n  ?x wdt:P31 wd:Q615;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer ist \u00e4lter, Lionel Messi oder Christiano Ronaldo?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Lionel Messi\": \"Q615\", \"Cristiano Ronaldo\": \"Q11571\"}, \"beziehungen\": {\"Geburtsdatum\": \"P569\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P569 ?birthdate;\r\n  ?x wdt:P31 wd:Q615;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nORDER BY ?birthdate DESC\r\nLIMIT 1;\r\n```"
    },
    {
        "question": "Wurde die Universit\u00e4t Heidelberg oder die Universit\u00e4t Hamburg fr\u00fcher gegr\u00fcndet?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q151510 wdt:P571 ?number. wd:Q156725 wdt:P571 ?number2. BIND(IF(?number < ?number2, wd:Q151510, wd:Q156725) AS ?result)}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P571 ?y\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wurde die Universit\u00e4t Heidelberg oder die Universit\u00e4t Hamburg fr\u00fcher gegr\u00fcndet?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Universit\u00e4t Heidelberg\": \"Q151510\", \"Universit\u00e4t Hamburg\": \"Q156725\"}, \"beziehungen\": {\"Gr\u00fcndungsdatum\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P571 ?y\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n  FILTER(CONTAINS(?x, \"Universit\u00e4t Heidelberg\") || CONTAINS(?x, \"Universit\u00e4t Hamburg\"))\r\n}\r\nORDER BY ?x\r\n```"
    },
    {
        "question": "Welcher Wald ist gr\u00f6\u00dfer, der Amazonas-Regenwald oder das Kongobecken?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q177567 wdt:P2046 ?aa. wd:Q932289 wdt:P2046 ?ac. BIND(IF((?aa > ?ac), wd:Q177567, wd:Q932289) AS ?result)}",
        "generated_sparql": "SELECT ?Wald\r\nWHERE {\r\n  ?Wald wdt:P2046 ?Fl\u00e4che;\r\n  ?Wald wd:P31 ?Entit\u00e4t;\r\n  ?Entit\u00e4t wd:P31 ?Kategorie;\r\n  ?Kategorie wd:P31 wd:Q177567. # Amazonas-Regenwald\r\n  ?Kategorie wd:P31 wd:Q932289. # Kongobecken\r\n}\r\nORDER BY ?Fl\u00e4che DESC\r\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welcher Wald ist gr\u00f6\u00dfer, der Amazonas-Regenwald oder das Kongobecken?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Amazonas-Regenwald\": \"Q177567\", \"Kongobecken\": \"Q932289\"}, \"beziehungen\": {\"Fl\u00e4che\": \"P2046\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?Wald\r\nWHERE {\r\n  ?Wald wdt:P2046 ?Fl\u00e4che;\r\n  ?Wald wd:P31 ?Entit\u00e4t;\r\n  ?Entit\u00e4t wd:P31 ?Kategorie;\r\n  ?Kategorie wd:P31 wd:Q177567. # Amazonas-Regenwald\r\n  ?Kategorie wd:P31 wd:Q932289. # Kongobecken\r\n}\r\nORDER BY ?Fl\u00e4che DESC\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Hat Samsung Electronics oder Apple mehr Mitarbeiter?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q20718 wdt:P1128 ?se. wd:Q312 wdt:P1128 ?ae. BIND(IF((?se > ?ae), wd:Q20718, wd:Q312) AS ?result)}",
        "generated_sparql": "SELECT COUNT(*) AS samsung_count, COUNT(*) AS apple_count\r\nWHERE {\r\n  ?s wdt:P1128 ?o. \r\n  ?s wd:Q20718. \r\n  ?o wd:Q312. \r\n}\r\nGROUP BY ?s\r\nHAVING COUNT(*) > 0",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Hat Samsung Electronics oder Apple mehr Mitarbeiter?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Samsung Electronics\": \"Q20718\", \"Apple\": \"Q312\"}, \"beziehungen\": {\"Anzahl der Mitarbeiter\": \"P1128\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS samsung_count, COUNT(*) AS apple_count\r\nWHERE {\r\n  ?s wdt:P1128 ?o. \r\n  ?s wd:Q20718. \r\n  ?o wd:Q312. \r\n}\r\nGROUP BY ?s\r\nHAVING COUNT(*) > 0\r\n```"
    },
    {
        "question": "Welches Unternehmen wurde sp\u00e4ter gegr\u00fcndet, Samsung oder Sony?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q20716 wdt:P571 ?sa. wd:Q41187 wdt:P571 ?so. BIND(IF((?sa > ?so), wd:Q20716, wd:Q41187) AS ?result)}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P571 ?y\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welches Unternehmen wurde sp\u00e4ter gegr\u00fcndet, Samsung oder Sony?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Samsung\": \"Q20716\", \"Sony\": \"Q41187\"}, \"beziehungen\": {\"Gr\u00fcndungsdatum\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P571 ?y\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n  FILTER(CONTAINS(?x, \"Samsung\") || CONTAINS(?x, \"Sony\"))\r\n}\r\nORDER BY ?x\r\n```"
    },
    {
        "question": "Wer ist gr\u00f6\u00dfer, Lionel Messi oder Christiano Ronaldo?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q615 wdt:P2048 ?number. wd:Q11571 wdt:P2048 ?number2. BIND(IF(?number > ?number2, wd:Q615, wd:Q11571) AS ?result)}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P2048 wd:Q615;\r\n  ?x wdt:P2048 wd:Q11571;\r\n}\r\nORDER BY ?x DESC\r\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer ist gr\u00f6\u00dfer, Lionel Messi oder Christiano Ronaldo?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Lionel Messi\": \"Q615\", \"Cristiano Ronaldo\": \"Q11571\"}, \"beziehungen\": {\"K\u00f6rpergr\u00f6\u00dfe\": \"P2048\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P2048 wd:Q615;\r\n  ?x wdt:P2048 wd:Q11571;\r\n}\r\nORDER BY ?x DESC\r\nLIMIT 1;\r\n```"
    },
    {
        "question": "Wer hat mehr NBA Auszeichnungen, Michael Jordan oder Kobe Bean Bryant?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {{SELECT (COUNT (DISTINCT ?number) AS ?mj) WHERE {wd:Q41421 p:P166/ps:P166 ?number.}} {SELECT (COUNT (DISTINCT ?number2) AS ?kb) WHERE {wd:Q25369 p:P166/ps:P166 ?number2.}}  BIND(IF(?mj > ?kb, wd:Q41421, wd:Q25369) AS ?result)}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P166 wd:Q41421;\r\n  ?x wdt:P166 wd:Q25369;\r\n}\r\nORDER BY wdt:P166 DESC\r\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer hat mehr NBA Auszeichnungen, Michael Jordan oder Kobe Bean Bryant?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Michael Jordan\": \"Q41421\", \"Kobe Bean Bryant\": \"Q25369\"}, \"beziehungen\": {\"Auszeichnungen\": \"P166\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P166 wd:Q41421;\r\n  ?x wdt:P166 wd:Q25369;\r\n}\r\nORDER BY wdt:P166 DESC\r\nLIMIT 1;\r\n```"
    },
    {
        "question": "Hat Michael Jordan jemals mehr gewogen als Kobe Bean Bryant?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "ASK {wd:Q41421 p:P2067/psn:P2067/wikibase:quantityAmount ?mj. wd:Q25369 p:P2067/psn:P2067/wikibase:quantityAmount ?kb. BIND(IF(?mj > ?kb, wd:Q41421, wd:Q25369) AS ?result)}",
        "generated_sparql": "SELECT ?x ?y ?z WHERE {\n  ?x wdt:P2067 ?y.\n  ?x wdt:P2067 ?z.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Hat Michael Jordan jemals mehr gewogen als Kobe Bean Bryant?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Michael Jordan\": \"Q41421\", \"Kobe Bean Bryant\": \"Q25369\"}, \"beziehungen\": {\"Punkte\": \"P2067\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?x ?y ?z WHERE {\n  ?x wdt:P2067 ?y.\n  ?x wdt:P2067 ?z.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  WHERE {\n    ?x wikibase:label ?l.\n    ?y wikibase:label ?l2.\n    ?z wikibase:label ?l3.\n    FILTER(CONTAINS(?l, \"Michael Jordan\") && CONTAINS(?l2, \"Kobe Bean Bryant\") && ?l3 < ?l2)\n  }\n}\n```"
    },
    {
        "question": "Wer ist \u00e4lter, Sebastian Vettel oder Lewis Hamilton?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q42311 wdt:P569 ?bv. wd:Q9673 wdt:P569 ?bh. BIND(IF(?bv < ?bh, wd:Q42311, wd:Q9673) AS ?result)}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P569 ?birthdate;\r\n  ?birthdate < \"1987-03-28\" .\r\n  ?x wdt:P569 ?birthdate;\r\n  ?birthdate < \"1988-01-22\" .\r\n}\r\nORDER BY ?birthdate DESC\r\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer ist \u00e4lter, Sebastian Vettel oder Lewis Hamilton?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Sebastian Vettel\": \"Q42311\", \"Lewis Hamilton\": \"Q9673\"}, \"beziehungen\": {\"Geburtsdatum\": \"P569\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P569 ?birthdate;\r\n  ?birthdate < \"1987-03-28\" .\r\n  ?x wdt:P569 ?birthdate;\r\n  ?birthdate < \"1988-01-22\" .\r\n}\r\nORDER BY ?birthdate DESC\r\nLIMIT 1;\r\n```"
    },
    {
        "question": "Welche Stadt hat mehr Einwohner, Kopenhagen oder Amsterdam?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1748 wdt:P1082 ?popc. wd:Q727 wdt:P1082 ?popa. BIND(IF((?popc > ?popa), wd:Q1748, wd:Q727) AS ?result)}",
        "generated_sparql": "SELECT ?city\r\nWHERE {\r\n  ?city wdt:P1082 ?population\r\n  FILTER(CONTAINS(?city, \"Kopenhagen\") || CONTAINS(?city, \"Amsterdam\"))\r\n}\r\nORDER BY ?population DESC\r\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welche Stadt hat mehr Einwohner, Kopenhagen oder Amsterdam?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Kopenhagen\": \"Q1748\", \"Amsterdam\": \"Q727\"}, \"beziehungen\": {\"Einwohnerzahl\": \"P1082\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?city\r\nWHERE {\r\n  ?city wdt:P1082 ?population\r\n  FILTER(CONTAINS(?city, \"Kopenhagen\") || CONTAINS(?city, \"Amsterdam\"))\r\n}\r\nORDER BY ?population DESC\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Wie viele Dinge sind Teil vom \"One Piece\" Franchise?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?part) AS ?result) WHERE {wd:Q673 wdt:P527 ?part}",
        "generated_sparql": "SELECT COUNT(*) AS count\r\nWHERE {\r\n  ?s wdt:P527 wd:Q673 .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele Dinge sind Teil vom \"One Piece\" Franchise?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"One Piece\": \"Q673\"}, \"beziehungen\": {\"Teil von\": \"P527\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS count\r\nWHERE {\r\n  ?s wdt:P527 wd:Q673 .\r\n}\r\n```"
    },
    {
        "question": "Wie viele fiktive weibliche Schwertk\u00e4mpfer gibt es?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?sf) AS ?result) WHERE {?sf wdt:P31/wdt:P279* wd:Q95074; wdt:P106 wd:Q11397897; wdt:P21 wd:Q6581072}",
        "generated_sparql": "SELECT COUNT(*) AS count\r\nWHERE {\r\n  ?f Figur.P31 ?s. \r\n  ?f Figur.P279 ?s. \r\n  ?f Figur.P106 ?s. \r\n  ?f Figur.P21 ?s. \r\n  ?s ?p ?o. \r\n  FILTER(?p = P11397897 && ?o = Q6581072)\r\n}\r\nGROUP BY ?f\r\nHAVING COUNT(*) > 0",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele fiktive weibliche Schwertk\u00e4mpfer gibt es?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Figur\": \"Q95074\", \"Schwertk\u00e4mpfer\": \"Q11397897\", \"weiblich\": \"Q6581072\"}, \"beziehungen\": {\"Instanz von\": \"P31\", \"Unterklasse von\": \"P279\", \"Beruf\": \"P106\", \"Geschlecht\": \"P21\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS count\r\nWHERE {\r\n  ?f Figur.P31 ?s. \r\n  ?f Figur.P279 ?s. \r\n  ?f Figur.P106 ?s. \r\n  ?f Figur.P21 ?s. \r\n  ?s ?p ?o. \r\n  FILTER(?p = P11397897 && ?o = Q6581072)\r\n}\r\nGROUP BY ?f\r\nHAVING COUNT(*) > 0\r\n```"
    },
    {
        "question": "Welche Firma w\u00fcrde fr\u00fcher gegr\u00fcndet, Black Diamond Equipment oder La Sportiva?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q2905359 wdt:P571 ?incbd. wd:Q3821214 wdt:P571 ?incls. BIND(IF((?incbd < ?incls), wd:Q2905359, wd:Q3821214) AS ?result)}",
        "generated_sparql": "SELECT ?firma\r\nWHERE {\r\n  ?firma wdt:P571 ?gr\u00fcndungsdatum;\r\n  wdt:P571 ?gr\u00fcndungsdatum. \r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welche Firma w\u00fcrde fr\u00fcher gegr\u00fcndet, Black Diamond Equipment oder La Sportiva?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Black Diamond Equipment\": \"Q2905359\", \"La Sportiva\": \"Q3821214\"}, \"beziehungen\": {\"Gr\u00fcndungsdatum\": \"P571\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?firma\r\nWHERE {\r\n  ?firma wdt:P571 ?gr\u00fcndungsdatum;\r\n  wdt:P571 ?gr\u00fcndungsdatum. \r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n}\r\nORDER BY ?gr\u00fcndungsdatum\r\n```"
    },
    {
        "question": "Welche W\u00fcste ist gr\u00f6\u00dfer, die Sahara oder die Arabische W\u00fcste?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q6583 wdt:P2046 ?as. wd:Q208299 wdt:P2046 ?aa. BIND(IF((?as > ?aa), wd:Q6583, wd:Q208299) AS ?result)}",
        "generated_sparql": "SELECT ?w1 ?w2 ?fl\u00e4che1 ?fl\u00e4che2\nWHERE {\n  ?w1 wd:P31 wd:Q6583.\n  ?w2 wd:P31 wd:Q208299.\n  ?w1 wd:P2046 ?fl\u00e4che1.\n  ?w2 wd:P2046 ?fl\u00e4che2.\n  FILTER(?fl\u00e4che1 > ?fl\u00e4che2)\n}\nORDER BY ?fl\u00e4che1 DESC\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Welche W\u00fcste ist gr\u00f6\u00dfer, die Sahara oder die Arabische W\u00fcste?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Sahara\": \"Q6583\", \"Arabische W\u00fcste\": \"Q208299\"}, \"beziehungen\": {\"Fl\u00e4che\": \"P2046\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?w1 ?w2 ?fl\u00e4che1 ?fl\u00e4che2\nWHERE {\n  ?w1 wd:P31 wd:Q6583.\n  ?w2 wd:P31 wd:Q208299.\n  ?w1 wd:P2046 ?fl\u00e4che1.\n  ?w2 wd:P2046 ?fl\u00e4che2.\n  FILTER(?fl\u00e4che1 > ?fl\u00e4che2)\n}\nORDER BY ?fl\u00e4che1 DESC\nLIMIT 1\n```"
    },
    {
        "question": "Wer lebt l\u00e4nger, Sirius Black oder Bellatrix Lestrange?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q713701 wdt:P570 ?ds. wd:Q1057918 wdt:P570 ?db. BIND(IF((?ds > ?db), wd:Q713701, wd:Q1057918) AS ?result)}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P570 ?y\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer lebt l\u00e4nger, Sirius Black oder Bellatrix Lestrange?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Sirius Black\": \"Q713701\", \"Bellatrix Lestrange\": \"Q1057918\"}, \"beziehungen\": {\"Sterbedatum\": \"P570\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P570 ?y\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }\r\n  FILTER(CONTAINS(?x, \"Sirius Black\") || CONTAINS(?x, \"Bellatrix Lestrange\"))\r\n}\r\nORDER BY ?y DESC\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Wie gro\u00df ist die Gesamtfl\u00e4che der Gro\u00dfen Seen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q7347 wdt:P2046 ?result}",
        "generated_sparql": "SELECT (SUM(?x) as Gesamtfl\u00e4che)\r\nWHERE {\r\n  ?x wdt:P2046 wd:Q7347;\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie gro\u00df ist die Gesamtfl\u00e4che der Gro\u00dfen Seen?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Gro\u00dfe Seen\": \"Q7347\"}, \"beziehungen\": {\"Gesamtfl\u00e4che\": \"P2046\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT (SUM(?x) as Gesamtfl\u00e4che)\r\nWHERE {\r\n  ?x wdt:P2046 wd:Q7347;\r\n}\r\n```"
    },
    {
        "question": "Wie lautet der japanische Name des Komponisten der japanischen Nationalhymne?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q17 wdt:P85/wdt:P86/wdt:P1559 ?result}",
        "generated_sparql": "SELECT ?japanischerName WHERE {\n  ?japanischerName wdt:P1559 wd:Q17.\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie lautet der japanische Name des Komponisten der japanischen Nationalhymne?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Japan\": \"Q17\"}, \"beziehungen\": {\"Komponist\": \"P85\", \"Texter\": \"P86\", \"japanischer Name\": \"P1559\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT ?japanischerName WHERE {\n  ?japanischerName wdt:P1559 wd:Q17.\n}\n```"
    },
    {
        "question": "Wer ist der Gr\u00fcnder der Hauptstadt von Vietnam?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q881 wdt:P36/wdt:P112 ?result}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P36 wd:Q881 ; # Hauptstadt von Vietnam\r\n  ?x wdt:P112 ?y ; # Gr\u00fcnder\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer ist der Gr\u00fcnder der Hauptstadt von Vietnam?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Vietnam\": \"Q881\"}, \"beziehungen\": {\"Hauptstadt\": \"P36\", \"Gr\u00fcnder\": \"P112\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P36 wd:Q881 ; # Hauptstadt von Vietnam\r\n  ?x wdt:P112 ?y ; # Gr\u00fcnder\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nORDER BY ?x\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Wer ist die Leiterin des Betreibers von Neumayer III?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q7933 wdt:P137/wdt:P1037 ?result}",
        "generated_sparql": "SELECT ?leiter\r\nWHERE {\r\n  ?betriebendeOrganisation wdt:P137 ?leiter;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer ist die Leiterin des Betreibers von Neumayer III?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Neumayer III\": \"Q7933\"}, \"beziehungen\": {\"Betreibende Organisation\": \"P137\", \"Leiter\": \"P1037\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?leiter\r\nWHERE {\r\n  ?betriebendeOrganisation wdt:P137 ?leiter;\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nORDER BY ?leiter\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Wie hoch ist der Berg auf dem G\u00fcnther Messner starb?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q195351 wdt:P20/wdt:P2044 ?result}",
        "generated_sparql": "SELECT ?Berg\r\nWHERE {\r\n  ?Berg wdt:P2044 ?H\u00f6he;\r\n  wd:Q195351 wdt:P20 ?Berg;\r\n}\r\nORDER BY ?H\u00f6he DESC\r\nLIMIT 1",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie hoch ist der Berg auf dem G\u00fcnther Messner starb?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"G\u00fcnther Messner\": \"Q195351\"}, \"beziehungen\": {\"Sterbeort\": \"P20\", \"H\u00f6he\": \"P2044\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?Berg\r\nWHERE {\r\n  ?Berg wdt:P2044 ?H\u00f6he;\r\n  wd:Q195351 wdt:P20 ?Berg;\r\n}\r\nORDER BY ?H\u00f6he DESC\r\nLIMIT 1\r\n```"
    },
    {
        "question": "Wie lautet der Twittername von Running Wild?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q163173 wdt:P740 ?result}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P740 wd:Q163173.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie lautet der Twittername von Running Wild?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Running Wild\": \"Q163173\"}, \"beziehungen\": {\"Twitter-Benutzername\": \"P740\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P740 wd:Q163173.\r\n}\r\n```"
    },
    {
        "question": "Wie oft hat die italienische Fu\u00dfball Nationalmannschaft die Weltmeisterschaft gewonnen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?win) AS ?result) WHERE {wd:Q676899 wdt:P2522 ?win. ?win wdt:P3450 wd:Q19317}",
        "generated_sparql": "SELECT COUNT(*) AS gewonnen_weltmeisterschaften\nWHERE {\n  ?s wdt:P3450 wd:Q19317.\n  ?s wdt:P2522 wd:Q676899.\n}\nGROUP BY ?s",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie oft hat die italienische Fu\u00dfball Nationalmannschaft die Weltmeisterschaft gewonnen?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Italienische Fu\u00dfball-Nationalmannschaft\": \"Q676899\", \"FIFA-Weltmeisterschaft\": \"Q19317\"}, \"beziehungen\": {\"Gewinner\": \"P2522\", \"Wettbewerb\": \"P3450\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT COUNT(*) AS gewonnen_weltmeisterschaften\nWHERE {\n  ?s wdt:P3450 wd:Q19317.\n  ?s wdt:P2522 wd:Q676899.\n}\nGROUP BY ?s\n```"
    },
    {
        "question": "Wie viel Fl\u00e4che hat die Hauptstadt von Spitzbergen?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q25231 wdt:P36/wdt:P2046 ?result}",
        "generated_sparql": "SELECT (SELECT COUNT(*) FROM wikidata:Entity WHERE wikidata:P36 = wikidata:Q25231) AS Fl\u00e4che\nWHERE {\n  wikidata:Entity wd:id ?id .\n  wikidata:P36 wd:id ?city .\n  wikidata:P2046 wd:id ?area .\n  FILTER(CONTAINS(str(?city), 'Spitzbergen'))\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viel Fl\u00e4che hat die Hauptstadt von Spitzbergen?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Spitzbergen\": \"Q25231\"}, \"beziehungen\": {\"Hauptstadt\": \"P36\", \"Fl\u00e4che\": \"P2046\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\nSELECT (SELECT COUNT(*) FROM wikidata:Entity WHERE wikidata:P36 = wikidata:Q25231) AS Fl\u00e4che\nWHERE {\n  wikidata:Entity wd:id ?id .\n  wikidata:P36 wd:id ?city .\n  wikidata:P2046 wd:id ?area .\n  FILTER(CONTAINS(str(?city), 'Spitzbergen'))\n}\n```"
    },
    {
        "question": "Wie viel Prozent von Andorra sind mit Wasser bedeckt?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q228 wdt:P2927 ?result}",
        "generated_sparql": "SELECT (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM wikibase:item WHERE wikibase:itemLabel = 'Andorra')\r\nWHERE {\r\n  wikibase:item wikibase:label 'Andorra'.\r\n  wikibase:item wikibase:hasProperty wikibase:P2927 ?waterPercentage.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viel Prozent von Andorra sind mit Wasser bedeckt?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Andorra\": \"Q228\"}, \"beziehungen\": {\"Prozentsatz der Wasseroberfl\u00e4che\": \"P2927\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM wikibase:item WHERE wikibase:itemLabel = 'Andorra')\r\nWHERE {\r\n  wikibase:item wikibase:label 'Andorra'.\r\n  wikibase:item wikibase:hasProperty wikibase:P2927 ?waterPercentage.\r\n}\r\n```"
    },
    {
        "question": "Wie viele L\u00e4nder liegen am Bodensee?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?country) AS ?result) WHERE {wd:Q4127 wdt:P17 ?country. ?country wdt:P30 wd:Q46}",
        "generated_sparql": "SELECT COUNT(*) AS num_countries\r\nWHERE {\r\n  ?country wdt:P17 wd:Q4127 .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"de\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wie viele L\u00e4nder liegen am Bodensee?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Bodensee\": \"Q4127\", \"Deutschland\": \"Q183\"}, \"beziehungen\": {\"liegt in\": \"P17\", \"Teil von\": \"P30\", \"Europa\": \"Q46\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_countries\r\nWHERE {\r\n  ?country wdt:P17 wd:Q4127 .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"de\". }\r\n}\r\nGROUP BY ?country\r\nHAVING COUNT(*) > 0\r\n```"
    },
    {
        "question": "Mit wie vielen Personen war Richard Burton verheiratet?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT (COUNT (DISTINCT ?sp) AS ?result) WHERE {wd:Q151973 wdt:P26 ?sp.}",
        "generated_sparql": "SELECT COUNT(*) AS num_marriages\r\nWHERE {\r\n  ?person wdt:P26 ?partner .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Mit wie vielen Personen war Richard Burton verheiratet?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Richard Burton\": \"Q151973\"}, \"beziehungen\": {\"Ehepartner\": \"P26\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT COUNT(*) AS num_marriages\r\nWHERE {\r\n  ?person wdt:P26 ?partner .\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(CONTAINS(?person, \"Richard Burton\") && CONTAINS(?partner, \"Richard Burton\"))\r\n}\r\n```"
    },
    {
        "question": "An welchen Koordinaten wurde der Sender Teutoburger Wald errichtet?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1717891 wdt:P625 ?result.}",
        "generated_sparql": "SELECT ?sender ?senderLabel ?coordinates ?coordinatesLabel\r\nWHERE {\r\n  ?sender wdt:P31 wd:Q1717891. # Teutoburger Wald\r\n  ?sender wdt:P625 ?coordinates. # Koordinaten\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'An welchen Koordinaten wurde der Sender Teutoburger Wald errichtet?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Teutoburger Wald\": \"Q1717891\"}, \"beziehungen\": {\"Koordinaten\": \"P625\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?sender ?senderLabel ?coordinates ?coordinatesLabel\r\nWHERE {\r\n  ?sender wdt:P31 wd:Q1717891. # Teutoburger Wald\r\n  ?sender wdt:P625 ?coordinates. # Koordinaten\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n}\r\nORDER BY ?senderLabel\r\n```"
    },
    {
        "question": "Wo wurde der Dichter Alexander Pope begraben?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {?poet wdt:P735 wd:Q923; wdt:P734 wd:Q15840785; wdt:P106 wd:Q49757; wdt:P119 ?result}",
        "generated_sparql": "SELECT ?Dichter ?Todesdatum ?Todesort ?Beruf ?Begr\u00e4bnisort\r\nWHERE {\r\n  ?Dichter wd:P106 wd:Q923 .\r\n  ?Dichter wd:P735 ?Todesdatum .\r\n  ?Dichter wd:P734 ?Todesort .\r\n  ?Dichter wd:P119 ?Begr\u00e4bnisort .\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wo wurde der Dichter Alexander Pope begraben?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Alexander Pope\": \"Q923\", \"Dichter\": \"Q49757\", \"Twickenham\": \"Q15840785\"}, \"beziehungen\": {\"Todesdatum\": \"P735\", \"Todesort\": \"P734\", \"Beruf\": \"P106\", \"Begr\u00e4bnisort\": \"P119\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?Dichter ?Todesdatum ?Todesort ?Beruf ?Begr\u00e4bnisort\r\nWHERE {\r\n  ?Dichter wd:P106 wd:Q923 .\r\n  ?Dichter wd:P735 ?Todesdatum .\r\n  ?Dichter wd:P734 ?Todesort .\r\n  ?Dichter wd:P119 ?Begr\u00e4bnisort .\r\n}\r\n```"
    },
    {
        "question": "In welchem Land liegt die Kandahar Abfahrt?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q327818 wdt:P17 ?result}",
        "generated_sparql": "SELECT ?country\r\nWHERE {\r\n  ?country wdt:P17 wd:Q327818.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'In welchem Land liegt die Kandahar Abfahrt?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Kandahar Abfahrt\": \"Q327818\"}, \"beziehungen\": {\"liegt in\": \"P17\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?country\r\nWHERE {\r\n  ?country wdt:P17 wd:Q327818.\r\n}\r\n```"
    },
    {
        "question": "Wer gr\u00fcndete das Architekturb\u00fcro, welches die Elbphilharmonie plante?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q673223 wdt:P84/wdt:P112 ?result}",
        "generated_sparql": "SELECT ?architekturb\u00fcro\r\nWHERE {\r\n  ?architekturb\u00fcro wdt:P84 wd:Q673223.\r\n  ?architekturb\u00fcro wdt:P112 ?gr\u00fcnder.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Wer gr\u00fcndete das Architekturb\u00fcro, welches die Elbphilharmonie plante?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Elbphilharmonie\": \"Q673223\"}, \"beziehungen\": {\"Architekturb\u00fcro\": \"P84\", \"Gr\u00fcnder\": \"P112\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?architekturb\u00fcro\r\nWHERE {\r\n  ?architekturb\u00fcro wdt:P84 wd:Q673223.\r\n  ?architekturb\u00fcro wdt:P112 ?gr\u00fcnder.\r\n}\r\n```"
    },
    {
        "question": "Woher stammen die Gr\u00fcnder der Band Metallica?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q15920 wdt:P112/wdt:P19/wdt:P17 ?result}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P112 ?y. # Gr\u00fcnder\r\n  ?y wdt:P159 ?z. # Sitz\r\n  ?z wdt:P17 ?w. # Herstellungsort\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Woher stammen die Gr\u00fcnder der Band Metallica?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Metallica\": \"Q15920\"}, \"beziehungen\": {\"Gr\u00fcnder\": \"P112\", \"Sitz\": \"P159\", \"Herstellungsort\": \"P17\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P112 ?y. # Gr\u00fcnder\r\n  ?y wdt:P159 ?z. # Sitz\r\n  ?z wdt:P17 ?w. # Herstellungsort\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\r\n  FILTER(CONTAINS(?x, \"Metallica\") && CONTAINS(?y, \"San Francisco\") && CONTAINS(?w, \"California\")).\r\n}\r\nORDER BY ?x\r\n```"
    },
    {
        "question": "Woher stammt die Apfelsorte Granny Smith?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q506040 wdt:P495 ?result}",
        "generated_sparql": "SELECT ?s\r\nWHERE {\r\n  ?s wdt:P495 wd:Q506040.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Woher stammt die Apfelsorte Granny Smith?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Granny Smith\": \"Q506040\"}, \"beziehungen\": {\"Herkunft\": \"P495\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?s\r\nWHERE {\r\n  ?s wdt:P495 wd:Q506040.\r\n}\r\n```"
    },
    {
        "question": "Woraus besteht der Fudschijama?",
        "knowledge_graph": "Wikidata",
        "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q39231 wdt:P186 ?result}",
        "generated_sparql": "SELECT ?x\r\nWHERE {\r\n  ?x wdt:P186 wd:Q39231.\r\n}",
        "full_generated_text": "[INST] Write a SparQL query that answers this request: 'Woraus besteht der Fudschijama?' from the knowledge graph Wikidata with the following context: '{\"entit\u00e4ten\": {\"Fudschijama\": \"Q39231\"}, \"beziehungen\": {\"besteht aus\": \"P186\"}}'. Output only the SPARQL query, enclosed in ```sparql ... ```. [/INST] ```sparql\r\nSELECT ?x\r\nWHERE {\r\n  ?x wdt:P186 wd:Q39231.\r\n}\r\n```"
    }
]
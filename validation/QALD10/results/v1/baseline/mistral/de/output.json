[{"question": "Nach wem ist die Riemannsche Geometrie benannt?", "gold_sparql": "SELECT DISTINCT ?result WHERE { wd:Q761383 wdt:P138 ?result. }", "generated_sparql": "SELECT ?subject\nWHERE {\n  ?subject wdt:P353 wd:Q77391.\n}"}, {"question": "Welches Tier war an einer milit\u00e4rischen Operation der australischen Streitkr\u00e4fte beteiligt?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q16521. ?mop wdt:P31 wd:Q645883; wdt:P710 ?result, wd:Q625657.}", "generated_sparql": "SELECT ?tier ?operation\nWHERE {\n  ?tier wdt:P31 wd:Q263.\n  ?tier wdt:W311 ?operation.\n  SERVICE wikibase:label { bd:language \"en\". }"}, {"question": "Wer von den Charakteren aus der Geralt-Saga hat zwei unverheiratete Partner, Yennefer of Vengerberg oder Triss Merigold?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q11835640 wdt:P674 ?result. ?result wdt:P451 ?p1, ?p2. FILTER(?p1 != ?p2 &&(?result IN (wd:Q4205826, wd:Q4463198)))}", "generated_sparql": "SELECT ?character\nWHERE {\n  ?character wdt:P31 wd:Q101754. # Geralt of Rivia\n  ?character wdt:P32 ?partner.\n  ?partner wdt:P304 ?gender.\n  ?partner wdt:P278 ?label.\n  ?partner wdt:P7 ?sex.\n  FILTER(REGEXP(?label, \"(Yennefer of Vengerberg|Triss Merigold)\", \"i\"). || ?sex = \"unmarried\")\n}\nGROUP BY ?character\nHAVING COUNT(DISTINCT ?partner) = 2"}, {"question": "Welcher der Gr\u00fcnder von Tencent ist Mitglied im Nationalen Volkskongress?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q860580 wdt:P112 ?result. ?result wdt:P39 wd:Q10891456.}", "generated_sparql": "SELECT ?o.value WHERE {\n  ?o wdt:P31 wd:Q4.\n}"}, {"question": "In welchem der anderen repr\u00e4sentativen Werke des Autors von Hunter X Hunter geht es um Sch\u00fcler:innen der Mittelstufe?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q696071 wdt:P50 ?author. ?author wdt:P800 ?result. ?result wdt:P921 wd:Q16003532 FILTER(?result != wd:Q69071)}", "generated_sparql": "SELECT ?work WHERE {\nWikidata:Q1726 wdt:P103 [ Wikidata:Q8114 < \"Hunter X Hunter\" > ; wdt:P165 \"Sch\u00fcler\" ];\nWikidata:P858 ?work.\n}"}, {"question": "An welchen B\u00f6rsen werden Aktien der Siemens AG gehandelt?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q81230 wdt:P414 ?result}", "generated_sparql": "SELECT ?b\u00f6rse\nWHERE {\n  ?b\u00f6rse wd:P31 wd:Organisation.\n  ?b\u00f6rse wd:P72 wd:SiemensAG.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"de\". }"}, {"question": "Nennen Sie alle weiteren bekannten Werke des Autors von The Witcher.", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q11835640 wdt:P50 ?author. ?author wdt:P800 ?result. FILTER(?result != wd:Q11835640)}", "generated_sparql": "SELECT DISTINCT ?w.work ?w.name WHERE {\n    ?w w:P156 ?y.label.value.en. * .\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }"}, {"question": "Kommen Brooke Raboutou und Colin Duffy aus dem selben Bundesstaat der USA?", "gold_sparql": "ASK {wd:Q2926117 wdt:P19 ?b1. wd:Q87192979 wdt:P19 ?b2. ?b1 wdt:P131* ?state. ?b2 wdt:P131* ?state. ?state wdt:P31 wd:Q35657 .}", "generated_sparql": "SELECT ?B ?label\nWHERE {\n  {\n    ?B wdt:P38 wd:Q64 (wiki-label(?B))\n    ?B wdt:P404 wd:Q6699 // USA\n    ?B ?x wdt:P47 ?x // Brooke Raboutou\n    ?B ?y wdt:P47 ?y // Colin Duffy\n    SERVICE wikibase:label { bd:serviceParam wikibase:labelLang \"en\". }"}, {"question": "Wo liegt der Siedepunkt von Wasser?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q283 wdt:P2102 ?result}", "generated_sparql": "SELECT ?o WHERE {\n  ?o wdt:P7788 [ wd:value \"Wasser\" ] .\n}"}, {"question": "An welcher Schule wurde Yayoi Kusama unterrichtet?", "gold_sparql": "SELECT DISTINCT ?result {wd:Q231121 wdt:P69 ?result}", "generated_sparql": "SELECT ?school {\n    SELECT ?school ?total ?label ?same ?sameLabel\n    WHERE {\n        ?school wdt:P31 wd:Q3760044.\n        SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Welche weiterf\u00fchrende Schule besuchte Allen Ginsberg?", "gold_sparql": "SELECT DISTINCT ?result {wd:Q6711 wdt:P69 ?result. ?result wdt:P31 wd:Q9826}", "generated_sparql": "SELECT ?school ?label ?mw:type WHERE {\n    ?person wdt:P1441/wdt:P2063 ?school.\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"de\". }"}, {"question": "Auf welcher Insel liegt die Hauptstadt Indonesiens?", "gold_sparql": "SELECT DISTINCT ?result {wd:Q252 wdt:P36 ?capital. ?capital wdt:P706 ?result. ?result wdt:P31 wd:Q23442}", "generated_sparql": "SELECT DISTINCT ?island ?name\nWHERE {\n    ?place wdt:P31 wd:Q55.\n    ?place wdt:P32 dbpedia:Indonesia.\n    ?place wdt:P114 ?island.\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Kann man Don't Starve auf der Playstaton 4 spielen?", "gold_sparql": "ASk {wd:Q3208174 wdt:P400 wd:Q5014725.}", "generated_sparql": "SELECT ?w ?l\nWHERE {\n    ?w wdt:P537 <https://www.wikidata.org/wiki/PlayStation_4>.\n    ?w wdt:P402 ?l \"<https://www.wikidata.org/wiki/Game>.\"\n    ServiceDescription \"en\" { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Wie viele Generalsekret\u00e4re der KPdSU gab es vor Leonid Brezhnev?", "gold_sparql": "SELECT DISTINCT (COUNT(?gensec) as ?result) WHERE{wd:Q765165 p:P39 ?pos. ?pos ps:P39 wd:Q1048744; pq:P580 ?st. ?gensec p:P39 ?pos2. ?pos2 ps:P39 wd:Q1048744; pq:P580 ?st2. FILTER(?st2 < ?st)}", "generated_sparql": ""}, {"question": "Wieviele unterschiedliche Pr\u00e4sident:innen Russlands haben seit 1990 das Amt angetreten?", "gold_sparql": "SELECT (COUNT(DISTINCT ?president) AS ?result) WHERE{?president p:P39 ?pos. ?pos ps:P39 wd:Q218295. ?pos pq:P580 ?start. FILTER((YEAR(?start)> 1990))}", "generated_sparql": "SELECT COUNT(DISTINCT ?president) AS num_presidents\nWHERE {\n  ?president wdt:P31 wd:Q36177.\n  ?president wdt:P348 ?start_date.\n  ?president wdt:P348 ?end_date.\n  ?president wdt:P348 \"1990-01-01\"..\"2021-12-31\".\n}\nORDER BY (COUNT(DISTINCT ?president) DESC) LIMIT 1"}, {"question": "Gewann Adam Ondra bei den Olympischen Sommerspielen 2020 eine Medaille?", "gold_sparql": "ASK{wd:Q350568 p:P1344 ?event. ?event ps:P1344 ?eventStatement. ?eventStatement wdt:P361* wd:Q181278. ?event pq:P1352 ?ranking. FILTER(?ranking <= 3)}", "generated_sparql": "SELECT ?s \nWHERE {\n  ?s dbo:name ?name.\n    FILTER(CONTAINS(?name.,\"Adam Ondra\")).\n  ?s dbo:athlete ?athlete.\n  ?athlete dbs:medal \"Medal\".\n  ?athlete dbs:event ?event.\n  ?event dbo:name \"2020 Summer Olympics\".\n}"}, {"question": "Haben die Chicago Bulls mindestens zwei Saisons der NBA-Meisterschaft gewonnen?", "gold_sparql": "ASK{{SELECT (COUNT (?season) AS ?count) WHERE {?season wdt:P3450 wd:Q155223. ?season wdt:P1346 wd:Q128109}} FILTER(?count >= 2)}", "generated_sparql": "SELECT (COUNT(*) > 0) as won_championships\nWHERE {\n    wd:Q776 wd:P31 wd:Q9268.\n    wd:Q9268 wd:P367 wd:Q4162308.\n    wd:Q4162308 wd:P31 wd:Q9790524.\n    wd:Q9790524 wd:P31 wd:Q63799.\n    wd:Q9268 wd:P490 wd:Q63799.\n}"}, {"question": "Hat Haruki Murakami den Nobelpreis f\u00fcr Literatur erhalten?", "gold_sparql": "ASK {wd:Q37922 wdt:P1346 wd:Q134798}", "generated_sparql": "SELECT ?x ?y\nWHERE {\n  ?x wd:P31 wd:Q19491.\n  ?x wikibase:label ?val.\n  FILTER(?)\n}"}, {"question": "Hat Kobe Bryant die Lakers zu dem Zeitpunkt verlassen, als LeBron James dem Team beitrat?", "gold_sparql": "ASK{wd:Q25369 p:P54 ?teamStatement. ?teamStatement ps:P54 wd:Q121783; pq:P582 ?leave. wd:Q36159 p:P54 ?teamStatement2. ?teamStatement2 ps:P54 wd:Q121783; pq:P580 ?join. FILTER(?leave = ?join)}", "generated_sparql": "SELECT wdt:value(dbo:dateOfDeath) as KobeBryantsDateOfDeath, wdt:value(dbp:currentMemberOf) as LeBronJamesMemberOf, wdt:value(dbo:dateOfBirth) as LeBronJamesDateOfBirth\n\nWHERE {\n\n    ?wd ts:parseType \"xsd:date-time\"\n\n    wdt:value(dbp:currentMemberOf) dbr:LAKERS, wdt:value(dbp:currentMemberOf) dbr:LeBronJames, wdt:value(dbo:dateOfDeath) ?wd, wdt:value(dbp:memberFor) ?wd, wdt:value(dbo:dateOfBirth) ?wd2;\n\n    FILTER(?wd < ?wd2 AND wd < ?wdts:1429960400000);\n}\n\nORDER BY wdt:value(dbp:currentMemberOf) asc;"}, {"question": "F\u00fchrte Rawson Marshall Thurber, der Regisseur von Red Notice, auch bei Titantic Regie?", "gold_sparql": "ASK {wd:Q58815001 wdt:P57 ?director. wd:Q44578 wdt:P57 ?director. FILTER(wd:Q2745616 = ?director)}", "generated_sparql": "SELECT ?o\r\nWHERE {\r\n    ?p <http://dbpedia.org/resource/Film>.name.hasValue \"Red Notice\"\r\n    SERVICE wikibase:label {\r\n        bd:serviceParam wikibase:language \"en\".\r\n    }"}, {"question": "Geh\u00f6rte Venedig zu irgendeinem Zeitpunkt dem Kaisertum \u00d6sterreich an?", "gold_sparql": "ASK {wd:Q641 p:P17/ps:P17 wd:Q131964}", "generated_sparql": "SELECT COUNT(\\*) > 0 AS existiert\nwhere {\\\n  ?item wdt:P31 wd:Q60654499. # Kaisertum \u00d6sterreich\n  ?item wdt:P39 wd:Q62881977. # Venedig\n}"}, {"question": "Haben wenigstens zwei der Gr\u00fcnder von Tencent an der selben Universit\u00e4t studiert?", "gold_sparql": "ASK {wd:Q860580 wdt:P112 ?founder. ?founder wdt:P69 ?uni. wd:Q860580 wdt:P112 ?founder2. ?founder2 wdt:P69 ?uni. FILTER(?founder != ?founder2)}", "generated_sparql": "SELECT COUNT(*) > 0 AS hasTwoFounders\nWHERE {\n  ?p1 <http://wikidata.org/entity/Q9222> .\n  ?p2 <http://wikidata.org/entity/Q32849561> .\n  ?o <http://dbpedia.org/ontology/university> ?p1 .\n  ?o <http://dbpedia.org/ontology/university> ?p2 .\n  !{\n    ?p1 ?o ?x1 <http://schema.org/type> \"http://schema.org/University\" .\n    ?o ?x1 ?x2 <http://schema.org/type> \"http://schema.org/University\" .\n    ?p2 <http://schema.org/name> ?x3 .\n    ?o <http://schema.org/name> ?x4 .\n    ?x3 STR(REGEXP(ST_REPLACE(ST_LOWER(?x3), ' ', '.'), '^')) <> ?x4 .\n    FILTER(lang(ST_REPLACE(ST_LOWER(?x3), ' ', '.')) ?= 'en') .\n  }"}, {"question": "Ist Englisch die Muttersprache aller Partner:innen von Batman?", "gold_sparql": "ASK{{SELECT (COUNT(DISTINCT ?partner) AS ?pnum) WHERE {wd:Q2695156 wdt:P451 ?partner. ?partner wdt:P103 ?lang. MINUS{?lang wdt:P279* wd:Q1860}}} FILTER(?pnum = 0)}", "generated_sparql": "SELECT COUNT(DISTINCT ?b)\nWHERE {\n  { dbo:Batman p:partner ?b.\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Wieviele Ehepartner:innen haben Staatsoberh\u00e4upter im Durchschnitt?", "gold_sparql": "SELECT (AVG(?spouseCount) AS ?result) WHERE {{SELECT (COUNT(DISTINCT ?spouse) AS ?spouseCount) WHERE{?country wdt:P31 wd:Q6256. ?country p:P35/ps:P35 ?hos. OPTIONAL {?hos wdt:P26 ?spouse}} GROUP BY ?hos }}", "generated_sparql": "SELECT\n  AVG(count(person)) AS avg_spouses\nFROM\n  wikidata:Q40 wd:Q6401.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Gab es mindestens ein Formel-1-Event auf der AVUS?", "gold_sparql": "ASK{wd:Q155810 wdt:P793 ?event. ?event wdt:P31 wd:Q108886259}", "generated_sparql": "SELECT ?x WHERE {\n  ?x dbp:eventType dbp:Formel_1_Event;\n  db:label \"Formel-1-Rennen\";\n} GROUP BY ?x\nHAVING COUNT(*) >= 1\n\nDiese SPARQL-Abfrage sollte zeigen, ob es mindestens ein Formel-1-Ereignis auf Wikipedia ist. Zumindest eine Bedeutung hat \"Formel-1-Rennen\", welche als \"Formel-1-Brennen\" bezeichnet wird. Da \"Formel-1-Brennen\" au\u00dferhalb des deutschen Sprachraumes als \"Formel-1-Rennen\" bekannt ist, entspricht dies in Wikidata dem Formel-1-Event."}, {"question": "Finde alle t\u00fcrkischen Verben, die mit \u201cu\u015f\u201d enden, als Lemma.", "gold_sparql": "SELECT ?result WHERE {?result wikibase:lexicalCategory wd:Q24905; dct:language/wdt:P218 'tr'; wikibase:lemma ?lemma. FILTER(regex(?lemma, \"u\u015f$\"))}", "generated_sparql": "SELECT DISTINCT ?verbLabel {\n  ?verb wdt:lexname wd:lexname-lang ?lang.\n  FILTER (?lang = bd:language(\"turkish\"))\n  FILTER(CONTAINS(LOWER(?verb), \"u\u015f\"))\n  SERVICE wikibase:language { bd:serviceParam wikibase:language \"turkish\" }"}, {"question": "Aus welchem Land stammen Beagles urspr\u00fcnglich?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q21102 wdt:P495 ?result}", "generated_sparql": "SELECT DISTINCT ?label\nWHERE {\n  ?s wd:P31 ?type.\n  ?type wd:P31 wikibase:Animal.\n  ?type wd:P425 wd:P401 ?label.\n  FILTER(str(?label) LIKE '%Beagle%')\n}\nORDER BY ?label"}, {"question": "Aus welchem Land kommen die zweitmeisten bisherigen Gewinner:innen des Emmy Awards?", "gold_sparql": "SELECT ?result WHERE {?person wdt:P166 wd:Q123737; wdt:P27 ?result} GROUP BY ?result ORDER BY DESC(COUNT (?result)) OFFSET 1 LIMIT 1", "generated_sparql": ""}, {"question": "Wird der Musikstil von Helloween der Rockmusik zugeordnet?", "gold_sparql": "ASK {wd:Q158895 wdt:P136/wdt:P279* wd:Q11399}", "generated_sparql": "SELECT ?label ?type\n\nWHERE {\n  wd:Q162 wd:P31 wd:P36.\n  wd:Q180 wd:P31 wd:Q4250.\n  wd:Q162 wd:P431 \"Helloween\".\n}"}, {"question": "Geh\u00f6rt die Postleitzahl 32423 zu Minden?", "gold_sparql": "ASK {wd:Q3846 wdt:P281 \"32423\"}", "generated_sparql": "SELECT ?s\nFROM <http://dbpedia.org/ontology/#> ?p\nWHERE {\n    ?s wdt:P18 [wdt:P23 [wd:P180 \"Minden\"]];\n    ?s wdt:P13 [wdt:P31 <http://dbpedia.org/ontology/Minden.owl#Minden>]\n}"}, {"question": "Hat Adam Ondra schon einmal die IFSC Weltmeisterschaft im Klettern gewonnen?", "gold_sparql": "ASK {wd:Q350568 p:P1344 ?ps. ?ps ps:P1344/wdt:P3450* wd:Q1774251. {?ps pq:P1352 ?rank.} UNION {?ps pq:P166 ?gold.} FILTER(?rank = 1 || sameTerm(?gold,wd:Q406039))}", "generated_sparql": "SELECT ?x WHERE {\n  ?x wdt:P246 dbo:Adam_Ondra.\n  ?x wdt:P31 ifsc:IFSC_World_Championship.\n}"}, {"question": "Ist die Lebenserwartung im Iran in irgendeinem Jahr nach 1999 gewachsen?", "gold_sparql": "ASK {wd:Q794 p:P2250 ?ols. ?ols pq:P585 ?otime. ?ols ps:P2250 ?ol.  wd:Q794 p:P2250 ?nls. ?nls pq:P585 ?ntime. ?nls ps:P2250 ?nl. FILTER((YEAR(?otime)=1999) && (YEAR(?ntime) > YEAR(?otime)) && (?nl > ?ol))}", "generated_sparql": ""}, {"question": "Ist die Einwohnerzahl von Isfahan an irgendeinem Punkt nach 2006 gestiegen?", "gold_sparql": "ASK {wd:Q42053 p:P1082 ?ops. ?ops pq:P585 ?otime. ?ops ps:P1082 ?op.  wd:Q42053 p:P1082 ?nps. ?nps pq:P585 ?ntime. ?nps ps:P1082 ?np. FILTER((YEAR(?otime)=2006) && (YEAR(?ntime) > YEAR(?otime)) && (?np > ?op))}", "generated_sparql": "SELECT *\nWHERE {\n  ?s wdt:P31 wd:Q82390.  #Isfahan\n  ?s wdt:P31 wd:Q108.  #City\n  ?s wdt:P39 wd:Q108.  #City\n  ?p wdt:P431 ?n.\n  FILTER(?n >= 2006)\n  ?s wdt:P31 ?p\n}\nGROUP BY ?s ?p ?n\nHAVING FILTER(?n > 1)"}, {"question": "Hat Joe Cocker auf dem Woodstock Festival gespielt?", "gold_sparql": "ASK {wd:Q164815 wdt:P710 wd:Q190076}", "generated_sparql": "SELECT ?b ?x WHERE {\n    {\n        ?b wdt:P31 wd:W3130. ;\n        ?b wdt:P47 wd:480465. ;\n        ?b wdt:P7 wd:4821. ;\n        ?b wdt:P579 wd:12. ;\n        ?b wdt:P899 wd:4. ;\n        ?b wdt:P476 wd:22142. ;\n        ?b wdt:P459 wd:46151. ;\n        ?b wdt:P579 wd:22. ;\n        ?b wdt:P459 wd:47479. .\n    }"}, {"question": "Hat Udo B\u00f6lts an der Tour de France teilgenommen?", "gold_sparql": "ASK {wd:Q66432 wdt:P1344/wdt:P31 wd:Q33881}", "generated_sparql": "SELECT ?x \nWHERE {\n  ?x wdt:P127 wd:Q247702.  # Udo B\u00f6lts\n  ?x dbp:BirthPlace wd:Q13748.  # Erfurt\n  ?x wdt:P229 wd:Q8.  # Tour de France\n  FILTER(REGEXP(?x, \"(^|\\\\s)\\\\bOudo B\u00f6lt\\\\b.*$\", \"i\"))\n}"}, {"question": "Wie viele Br\u00fcder von Reinhold Messner leben noch?", "gold_sparql": "SELECT (COUNT(DISTINCT ?brother) AS ?result) WHERE {wd:Q189307 wdt:P3373 ?brother. ?brother wdt:P21 wd:Q6581097. FILTER(NOT EXISTS{?brother wdt:P570 ?dod})}", "generated_sparql": "SELECT COUNT(*) AS livingBrothers\nWHERE {\n  ?o wdt:P673 ?c .\n  ?o wikidb:Wikidata_item ?p .\n  ?p  wikisource:Label { bd:label \"Brother of Reinhold Messner\" }"}, {"question": "Auf welche Weise ist Hemingway gestorben?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q23434 wdt:P1196 ?result.}", "generated_sparql": "SELECT ?p WHERE {\n  ?person wdt:P31 wd:Q10712111.\n  ?person wd:P1476 ?p.\n  ?person wd:Q10922708.\n}"}, {"question": "In welcher Branche f\u00fchrt das Haus der Medici ein Unternehmen?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q170022 wdt:P1830/wdt:P452 ?result}", "generated_sparql": "SELECT wd:P31, wd:P35\nWHERE {\n  wd:Q592 wd:P31 wd:Q992. wd:Q592 wd:P35 ?branch.\n}"}, {"question": "Wie ist der offizielle Name der USA auf t\u00fcrkisch?", "gold_sparql": "SELECT ?result WHERE {wd:Q30 wdt:P1448 ?result FILTER(langMatches(lang(?result),\"tr\"))}", "generated_sparql": "SELECT ?x WHERE {\n  ?x wdt:wikiPageLabel \"Birikilimcilerim\";\n  ?x wdt:language \"t\u00fcrk\u00e7e\";\n  ?x wdt:hasForm [ wdt:formName \"\u00d6zelli\u011fi\", wdt:formLabel ?o ];\n  ?o wdt:serviceParam [ wd:serviceParamLabel \"\u00d6zellik\", wd:serviceParamValue \"Ad\u0131\" ];\n  ?o wdt:value {\n    bd:type wd:wikibaseItem;\n    skos:label ?l;\n    wikibase:label [ q:text \"USA\" ];\n  }"}, {"question": "Wie hoch ist der K\u00f6lner Dom?", "gold_sparql": "SELECT ?result WHERE {wd:Q4176 wdt:P2048 ?result}", "generated_sparql": "SELECT ?height WHERE {\n  ?cathedral wdt:contains ?name ;  \n  ?name wd:value ?value .\n  FILTER(regex(?name, 'Cologne cathedral', i))\n}"}, {"question": "Wie lautet der mandarin-chinesische Name des Harz?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q4186 rdfs:label ?result FILTER(langMatches(lang(?result),\"zh-cn\")) }", "generated_sparql": ""}, {"question": "Wieviele internationale Flugh\u00e4fen gibt es in der Stadt Hamburg?", "gold_sparql": "SELECT (COUNT(DISTINCT ?ap) AS ?result) WHERE {?ap wdt:P31 wd:Q644371. ?ap wdt:P131* wd:Q1055}", "generated_sparql": ""}, {"question": "An wie vielen Alben hat Madonna mitgewirkt?", "gold_sparql": "SELECT (COUNT(DISTINCT ?album) AS ?result) WHERE {?album wdt:P31 wd:Q482994. ?album wdt:P175 wd:Q1744. }", "generated_sparql": "SELECT COUNT(w) FROM QuerySparql_Dataset.QueryModel WHERE bd:P260 ?r ?c ?w WHERE {\n    ?r wdt:P1428 wd:P260 wd:P238 !@.\n    ?r bd:P550 ?w\n}\nGROUP BY ?r\nHAVING ?w = 'Madonna'"}, {"question": "An wie vielen Alben hat Maria Carey mitgewirkt?", "gold_sparql": "SELECT (COUNT(DISTINCT ?album) AS ?result) WHERE {?album wdt:P31 wd:Q482994. ?album wdt:P175 wd:Q41076. }", "generated_sparql": "SELECT COUNT(*) as num_albums\nFROM dbpedia-o.dbpedia.org/query\nWHERE \n  // Filtern auf Wikidata-Entit\u00e4ten (Alben)\n  {{ wd:WikibaseOWLLabel wd:item ?item ?label . }"}, {"question": "Wie viele Studio-Alben hat Lan Del Rey?", "gold_sparql": "SELECT (COUNT(DISTINCT ?album) AS ?result) WHERE {?album wdt:P7937 wd:Q208569. ?album wdt:P175 wd:Q37150. }", "generated_sparql": "SELECT COUNT(*) as num_albums WHERE {\n  wd:Q41302 wd:P363 \"studio album\".\n  wd:Q125 wd:P356 <#> .\n} GROUP BY wd:Q125"}, {"question": "Wieviele antike Zivilisationen gab es?", "gold_sparql": "SELECT (COUNT(DISTINCT ?civ) AS ?result) WHERE {?civ wdt:P31 wd:Q28171280}", "generated_sparql": "SELECT COUNT(*) as anzahl\nWHERE {\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "In wievielen Jahren wurde Kobe Bryant mit dem \"NBA All-Defensive Team Award\" ausgezeichnet?", "gold_sparql": "SELECT (COUNT(DISTINCT ?time) AS ?result) WHERE {wd:Q25369 p:P166 ?as. ?as ps:P166 wd:Q1465181; pq:P585 ?time.}", "generated_sparql": "SELECT COUNT(*)\nWHERE {\n  ?o [dbo:type \"Award\"] .\n  ?o [dbo:name \"NBA All-Defensive Team Award\"] .\n  ?o [dbo:year] ?y .\n  FILTER(CONTAINS(STR(?y), \"Kobe Bryant\"))\n}"}, {"question": "Wie h\u00e4ufig haben Shaqulle O'Neal und Kobe Bryant im selben Jahr eine All-NBA Team Auszeichnung erhalten?", "gold_sparql": "SELECT (COUNT(DISTINCT ?time) AS ?result) WHERE {wd:Q25369 p:P166 ?as. ?as ps:P166 wd:Q674359; pq:P585 ?time. wd:Q169452 p:P166 ?as2. ?as2 ps:P166 wd:Q674359; pq:P585 ?time}", "generated_sparql": "SELECT COUNT(*) AS freq \nFROM wd:SquadMember wd:squadMember ?squad\nWHERE {\n  ?squad wd:name ?name .\n  ?name wikibase:name ?wikiName .\n  ?wikiName FILTER(REGEX(str(?wikiName), \"Shaqulle .* \", \"i\")) \n  ?wikiName FILTER(REGEX(str(?wikiName), \"Kobe Bryant .* \", \"i\")) \n  ?squad wd:date ?date .\n  ?date FILTER(REGEX(str(?date), \"^20\", \"i\")) \n  ?wikiName wikibase:hasCollection ?collection .\n  ?collection wd:Q ?q .\n  ?q wd:label \"All-NBA Team\" .\n}"}, {"question": "Wie viele literarische Werke hat Richard Bachman geschrieben?", "gold_sparql": "SELECT (COUNT(DISTINCT ?book) AS ?result) WHERE {?book wdt:P50 wd:Q39829; wdt:P31 wd:Q7725634}", "generated_sparql": ""}, {"question": "Wie viele bedeutende Arbeiten hat Sarah J. Maas?", "gold_sparql": "SELECT (COUNT(DISTINCT ?notableW) AS ?result) WHERE {wd:Q20640708 wdt:P800 ?notableW}", "generated_sparql": ""}, {"question": "Hat Bryan Evenson mindestens f\u00fcr eine Universt\u00e4t gearbeitet an der er auch studiert hat?", "gold_sparql": "ASK {wd:Q4963691 wdt:P108 ?uni; wdt:P69 ?uni. ?uni wdt:P31/wdt:P279* wd:Q3918.}", "generated_sparql": "SELECT ?x\nWHERE {\n?x wdt:P956/wdt:P31 ?o.\n?o wdt:P956/wdt:P493.\n?x wdt:P956/wdt:P394 ?u.\n?u wdt:P956/wdt:P394 ?o.\nSELECT COUNT(*) AS c2\nWHERE {\n?x wdt:P956/wdt:W3400 ?t.\n?x wdt:P956/wdt:P956 ?p.\n?t wdt:P426 ?x.\n?o wdt:P956/wdt:P394 ?p.\n?t wdt:P956/wdt:P1354 ?o.\n?x wdt:P956/wdt:P956 ?c.\n?c wdt:P426 ?x.\nGROUP BY ?t ?x ?c\nHAVING SUM(?p) >= 3\n}"}, {"question": "Wieviele Kinder (inklusive adoptierter) hat Jeff Bezos mit seiner Ex-Frau?", "gold_sparql": "SELECT (COUNT(DISTINCT ?child) AS ?result) WHERE {wd:Q312556 p:P26 ?sps. ?sps ps:P26 ?sp. ?child wdt:P25 ?sp; wdt:P22 wd:Q312556. FILTER(EXISTS{?sps pq:P582 ?et})}", "generated_sparql": "SELECT DISTINCT ?person ?label ?count\nWHERE {\n  ?person wdt:P39 wd:Q2663.\n  ?person wdt:P31 wd:Q46699.\n  ?person wdt:P356 ?gender.\n  ?person wdt:P458 ?birthPlace.\n  ?person wdt:P14 wd:Q767850.\n  ?person p ?predicate.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Wie viele Kinder hat Paul McCartney zusammen mit seiner Ex-Frau Linda McCartney?", "gold_sparql": "SELECT (COUNT(DISTINCT ?child) AS ?result) WHERE {wd:Q2599 p:P26 ?sps. ?sps ps:P26 ?sp. ?child wdt:P25 ?sp; wdt:P22 wd:Q2599. FILTER((EXISTS{?sps pq:P582 ?et}) && (?sp = wd:Q228899))}", "generated_sparql": ""}, {"question": "Wie viele Tiere gibt es insgesamt im chinesischen Tierkreis?", "gold_sparql": "SELECT (COUNT(DISTINCT ?animal) AS ?result) WHERE {?animal wdt:P31 wd:Q79226802}", "generated_sparql": ""}, {"question": "Wie viele St\u00e4dte sind Teil des Perlflussdeltas?", "gold_sparql": "SELECT (COUNT(DISTINCT ?city) AS ?result) WHERE {wd:Q1144286 wdt:P527 ?city. ?city wdt:P31/wdt:P279* wd:Q515.}", "generated_sparql": "SELECT COUNT(*) as \"Anzahl der St\u00e4dte\"\nWHERE { wdt:P102 ?s . wdt:P249 wd:Q291407+. }\nGROUP BY ()\nHAVING COUNT(*) > 0\nORDER BY COUNT(*) DESC\nLIMIT 1"}, {"question": "Wie viele Stadtstaaten gibt es aktuell auf der Welt?", "gold_sparql": "SELECT (COUNT(DISTINCT ?cs) AS ?result) WHERE {?cs wdt:P31 wd:Q133442}", "generated_sparql": "SELECT COUNT(DISTINCT ?s) WHERE {\n    ?s wdt:P31 wd:Q9740.\n}"}, {"question": "Wieviele Unternehmen hat Steve Jobs gegr\u00fcndet?", "gold_sparql": "SELECT (COUNT(DISTINCT ?company) AS ?result) WHERE {?company wdt:P112 wd:Q19837; wdt:P31/wdt:P279* wd:Q4830453}", "generated_sparql": "SELECT COUNT(?x) as numberOfCompanies \nWHERE {\n  ?x wdt:P485 wd:P180 dbpedia:foundingCompany?x wdt:P31 wd:Q6183869.\n  FILTER(CONTAINS(str(?x), 'Steve Jobs'))\n}"}, {"question": "Wie viele Staaten haben einen Demokratieindex gr\u00f6\u00dfer als 7 und haben Linksverkehr?", "gold_sparql": "SELECT (COUNT(DISTINCT ?country) AS ?result) WHERE {?country wdt:P31 wd:Q6256; wdt:P8328 ?ind; wdt:P1622 wd:Q13196750 FILTER(?ind > 7)}", "generated_sparql": ""}, {"question": "Wieviele Staaten waren nie Mitglied der UN?", "gold_sparql": "SELECT (COUNT(DISTINCT ?country) AS ?result) WHERE {?country wdt:P31 wd:Q6256. FILTER(NOT EXISTS{?country p:P463/ps:P463 wd:Q1065})}", "generated_sparql": "SELECT ?s WHERE {\n  SERVICE wd: { bd:serviceParam wd:language \"[en, de]\". }"}, {"question": "Wieviele L\u00e4nder liegen auf dem Kontinent S\u00fcdamerika?", "gold_sparql": "SELECT (COUNT(DISTINCT ?country) AS ?result) WHERE {?country wdt:P31 wd:Q6256; wdt:P30 wd:Q18}", "generated_sparql": "SELECT COUNT(*) AS numCountries\nWHERE {\n  ?country wikibase:wiki [ wikibase:Label { ?label wikibase:language \"[en]\" }"}, {"question": "Wieviele L\u00e4nder haben Berge, deren Gipfel mehr als 2000m \u00fcber dem Meeresspiegel liegen?", "gold_sparql": "SELECT (COUNT(DISTINCT ?country) AS ?result) WHERE {?mountain wdt:P31/wdt:P279* wd:Q8502; p:P2044/psn:P2044/wikibase:quantityAmount ?height; wdt:P17 ?country. FILTER(?height > 2000)}", "generated_sparql": "SELECT COUNT(DISTINCT ?land) WHERE {\n\t\tSERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Wie viele fiktive Drachen gibt es in Game of Thrones?", "gold_sparql": "SELECT (COUNT(DISTINCT ?dragon) AS ?result) WHERE {?dragon wdt:P31/wdt:P279* wd:Q30170627; wdt:P1441 wd:Q23572}", "generated_sparql": "SELECT COUNT(*) AS num_dragons\nWHERE {\n  SERVICE wd:info { bd:serviceParam wd:language \"en\". }"}, {"question": "Wie viele Emmy Awards hat die TV-Serie Game of Thrones gewonnen?", "gold_sparql": "SELECT (COUNT(DISTINCT ?emmy) AS ?result) WHERE {wd:Q23572 wdt:P166 ?emmy. ?emmy wdt:P361/wdt:P279 wd:Q123737}", "generated_sparql": "SELECT COUNT(\\[o:award\\]) AS emmy\\_awards\nWHERE {\nn:Game_of_Thrones ?p:genre wd:Game_of_Thrones .\nn:Game_of_Thrones ?p:production_company wd:HBO\\_Television .\nn:Game_of_Thrones ?p:genre wikibase:Film. genre .\nn:Game_of_Thrones ?p:release_year \"2011-2019\" .\n{ wd:Film. award ?award .\nn:Game_of_Thrones ?award.\nn:Game_of_Thrones ?award .\nn:Game_of\\_Thrones ?award .\nn:Game\\_of\\_Thrones ?award .\nn:Game\\_of\\_Thrones ?award .\nn:Game\\_of\\_Thrones ?award .\nn:Game\\_of\\_Thrones ?award .\nn:Game\\_of\\_Thrones ?award .\nn:Game\\_of\\_Thrones ?award .\nn:Game\\_of\\_Thrones ?award .\nn:Game\\_of\\_Thrones ?award .\nn:Game\\_of\\_Thrones ?award .\nn:Game\\_of\\_Thrones ?award .\nn:Game\\_of\\_Thrones ?award .\nn:Game\\_of\\_Thrones ?award .\nn:Game\\_of\\_Thrones ?award .\nn:Game\\_of\\_Thrones ?award .\nn:Game\\_of\\_Thrones ?award .\nn:Game\\_of\\_Thrones ?award .\nn:Game\\_of\\_Thrones ?award .\nn:Game\\_of\\_Thrones ?award .\nn:Game\\_of\\_Thrones ?award .\nn:Game\\_of\\_Thrones ?award .\nn:Game\\_of\\_Thrones ?award .\nn:Game\\_of\\_Thrones ?award .\nn:Game\\_of\\_Thrones ?award .\nn:Game\\_of\\_Thrones ?award .\nn:Game\\_of\\_Thrones ?award .\nn:Game\\_of\\_Thrones ?award .\nn:Game\\_of\\_Thrones ?award\n}"}, {"question": "Wieviele Filme orientieren sich am originalen \"Ghost in the Shell\"-Manga?", "gold_sparql": "SELECT (COUNT(DISTINCT ?film) AS ?result) WHERE {wd:Q92582 wdt:P4969 ?film. ?film wdt:P31/wdt:P279* wd:Q11424}", "generated_sparql": "SELECT COUNT(*) as filme_anzahl\nWHERE {\n  ?file mw:title ?title .\n  ?file wdt:P31 wd:Q639130 .\n  FILTER(CONTAINS(?title, \"Ghost in the Shell\") && contains(?title, \"Manga\"))\n}"}, {"question": "Wie viele franz\u00f6sische K\u00f6nige sind nicht auf nat\u00fcrliche Weise gestorben?", "gold_sparql": "SELECT (COUNT(DISTINCT ?king) AS ?result) WHERE {?king wdt:P39 wd:Q18384454. MINUS{?king wdt:P1196 wd:Q3739104}}", "generated_sparql": "SELECT COUNT(DISTINCT wd:P31.b)\nWHERE {\n  wd:P31 wd:Q18372.\n  FILTER(REGEXP(str(wd:P439), 'France', 'i')) \n  FILTER(NOT EXISTS { wd:P431 ? o : FILTER(NOT EXISTS { wd:Q639 ? o : wd:P439 ? wd:P399 ? wd:Q639 ? o : wd:P399 ? wd:Q639 ? o : o }"}, {"question": "Wieviele Vornamen hat Queen Elizabeth II?", "gold_sparql": "SELECT (COUNT(DISTINCT ?names) AS ?result) WHERE {wd:Q9682 p:P735/ps:P735 ?names}", "generated_sparql": "SELECT COUNT(*) AS num_names\nWHERE {\n  ?person wdt:P330 wd:Q126582.\n  ?person wdt:P360 ?name.\n}\nGROUP BY (GROUP_CONCAT(DISTINCT ?name) AS birthNames)\nHAVING (count(*) = 1)"}, {"question": "Wieviele unterschiedliche B\u00fcrgermeisterinnen hatte Hamburg?", "gold_sparql": "SELECT (COUNT(DISTINCT ?fm) AS ?result) WHERE {wd:Q1055 p:P6/ps:P6 ?fm. ?fm wdt:P21 wd:Q6581072}", "generated_sparql": ""}, {"question": "Wieviele Staatsoberh\u00e4upter hat der Iran?", "gold_sparql": "SELECT (COUNT(DISTINCT ?hos) AS ?result) WHERE {wd:Q794 p:P35/ps:P35 ?hos.}", "generated_sparql": "SELECT COUNT(*) as Staatsoberh\u00e4upter WHERE {\n\t?soberh\u00e4ufiger wdt:P31 wd:Q8967.\n\tCOUNT(DISTINCT ?soberh\u00e4ufiger) as Staatsoberh\u00e4upter\n}"}, {"question": "Wieviele wissenschaftliche Artikel behandeln ImageNet?", "gold_sparql": "SELECT (COUNT(DISTINCT ?art) AS ?result) WHERE {?art wdt:P31 wd:Q13442814. ?art wdt:P921 wd:Q24901201.}", "generated_sparql": "SELECT COUNT(*) ?count\nWHERE \n{\n\t?wdb wikidata:Q1335075 wikidata:P31 ?db . \n\tSERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Wie viele Einwohner hat der Geburtsort von Christiano Ronaldo?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q11571 wdt:P19/wdt:P1082 ?result}", "generated_sparql": ""}, {"question": "Wieviele japanische Autor:innen erhielten den Nobelpreis?", "gold_sparql": "SELECT (COUNT(DISTINCT ?writer) AS ?result) WHERE {?writer wdt:P166/wdt:P279 wd:Q7191. ?writer wdt:P27 wd:Q17; wdt:P106 wd:Q36180}", "generated_sparql": "SELECT COUNT(DISTINCT ?person)\nWHERE {\n  ?person wdt:P31 wikibase:Bard.\n  ?person wdt:P42 \"Japan\".\n  OPTIONAL {\n    ?person wdt:W445 ?value.\n    FILTER (str(?value) LIKE \"%Nobel Prize%\")\n  }"}, {"question": "Wie viele Sprachen sind in Indien weit verbreitet?", "gold_sparql": "SELECT (COUNT(DISTINCT ?lan) AS ?result) WHERE {wd:Q668 wdt:P2936 ?lan}", "generated_sparql": ""}, {"question": "Wie viele verschiedene Farben kann Wasser annehmen?", "gold_sparql": "SELECT (COUNT(DISTINCT ?color) AS ?result) WHERE {wd:Q283 wdt:P462 ?color}", "generated_sparql": "SELECT \n    DISTINCT ?p.name AS ?Farbe\nWHERE {\n    ?x wdt:P43 wd:Q76.\n    ?p wdt:W313 ?x.\n    ?p wdt:P43 wd:Q6. # Wd:76 hat P43 wd:Q6 (1:1)\n    SERVICE wikibase:label {\n        bd:serviceParam wikibase:language \"en\".\n    }"}, {"question": "An wie vielen Orten hat Georges Braque gearbeitet?", "gold_sparql": "SELECT (COUNT (DISTINCT ?loc) AS ?result) WHERE {wd:Q153793 wdt:P937 ?loc}", "generated_sparql": "SELECT COUNT(?) AS numLocations\nWHERE {\n  ?person wdt:P14 [ wd:P13 wd:Q28 ]\n  ?person wdt:P431 [ wd:Q646 ]\n  OPTIONAL { ?person wdt:P305 [ ?location wdt:P431 ?person ] }"}, {"question": "\u00dcber wieviele Monate erstreckt sich der Winter in Deutschland?", "gold_sparql": "SELECT (COUNT (DISTINCT ?mon) AS ?result) WHERE {wd:Q1311 p:P2922 ?ms. ?ms ps:P2922 ?mon; pq:P3005/wdt:P527 ?part. wd:Q183 wdt:P361* ?part.}", "generated_sparql": "SELECT COUNT(DISTINCT wd:hasSeason.) AS winter_months\nWHERE {\n  wd:HasSeason. wd:text = \"Winter\" .\n  ?p rdf:type wd:Country .\n  ?p rdf:text = \"Deutschland\" .\n}"}, {"question": "Wieviele Filme hat die Scream-Reihe?", "gold_sparql": "SELECT (COUNT (DISTINCT ?film) AS ?result) WHERE {?film wdt:P31 wd:Q11424; wdt:P179 wd:Q388659}", "generated_sparql": "SELECT COUNT(*) as count\nWHERE {\n  ?item wdt:P251 wd:Q19587.\n}"}, {"question": "Bei wie vielen Filmen hat James Cameron vor 2010 Regie gef\u00fchrt?", "gold_sparql": "SELECT (COUNT (DISTINCT ?film) AS ?result) WHERE {?film wdt:P31 wd:Q11424; wdt:P57 wd:Q42574; wdt:P577 ?date. FILTER(YEAR(?date)<2010)}", "generated_sparql": "SELECT COUNT(*)\nWHERE {\n  ?film wd:hasLabel \"[Label en]\"\n  ?film wd:hasCreator ?person\n  ?person wd:name \"[CamelCase] James Cameron\"\n  ?film wd:releaseYear ?year\n  ?year < 2010\n  ?person wd:title ?title\n  ?title wd:value \"[Type] Director\"\n}\nGROUP BY ?film"}, {"question": "Bei wievielen Filmen f\u00fchrte Akira Kurosawa Regie? ", "gold_sparql": "SELECT (COUNT (DISTINCT ?film) AS ?result) WHERE {?film wdt:P31 wd:Q11424; wdt:P57 wd:Q8006}", "generated_sparql": ""}, {"question": "Wie viele Tonleitern gibt es?", "gold_sparql": "SELECT (COUNT (DISTINCT ?scale) AS ?result) WHERE {?scale wdt:P31 wd:Q179651}", "generated_sparql": "SELECT COUNT(?t) AS Anzahl\nWHERE {\n  ?t wdt:P31 wd:Q272624.\n}\nGROUP BY ?t"}, {"question": "Wie viele Feiertage hat der Freistaat Bayern in einem Jahr?", "gold_sparql": "SELECT (COUNT (DISTINCT ?hol) AS ?result) WHERE {wd:Q980 wdt:P832 ?hol}", "generated_sparql": "SELECT COUNT(*) as feiertage_zahl\nFROM (\n  SELECT wd:Q6644 ?tag\n  WHERE {\n    wikibase:WikibaseEntity ?tag.\n    wikibase:Label { wikibase:language \"de\" }"}, {"question": "Wie viele literarische Werke hat der Autor von Das Bildnis des Dorian Gray ausserdem geschrieben?", "gold_sparql": "SELECT (COUNT (DISTINCT ?novel) AS ?result) WHERE {wd:Q82464 wdt:P50 ?aut. ?novel wdt:P31 wd:Q7725634; wdt:P50 ?aut FILTER(?novel != wd:Q82464)}", "generated_sparql": ""}, {"question": "Wie viele literarische Werke hat Mark Twain in seinem Leben geschrieben?", "gold_sparql": "SELECT (COUNT (DISTINCT ?novel) AS ?result) WHERE {?novel wdt:P31 wd:Q7725634; wdt:P50 wd:Q7245}", "generated_sparql": "SELECT COUNT(*) as worksCount\nFROM Wikidata:Item WHERE {| bd:type <wiki:LiteraryWork> . }"}, {"question": "Wie viele Berufe hatte Mark Twain?", "gold_sparql": "SELECT (COUNT (DISTINCT ?occ) AS ?result) WHERE {wd:Q7245 wdt:P106 ?occ}", "generated_sparql": "SELECT COUNT(*) as numJobs\nWHERE {\n  ?o ?p owl:sameAs tw:MarkTwain .\n  ?o ?p owl:hasInstance http://dbpedia.org/ontology/?job .\n}\nGROUP BY ?job"}, {"question": "Wie viele der Spiderman Darsteller sind Staatsangeh\u00f6rige des Vereinigten K\u00f6nigreichs?", "gold_sparql": "SELECT (COUNT (DISTINCT ?per) AS ?result) WHERE {?per wdt:P27 wd:Q145. wd:Q79037 p:P175/ps:P175 ?per}", "generated_sparql": "SELECT count(*) as num_spiderman_brits\nWHERE {\n  ?person wdt:P31 wd:Q12623241.  # Spiderman-Darsteller\n  ?person wdt:P113 country-name-en.  # Einwohner von Gro\u00dfbritannien (eerste Hauptstadt)\n}\nGROUP BY ?person\nHAVING count(*) > 0"}, {"question": "Wie viele offzielle Sprachen haben die Vereinigten Staaten von Amerika?", "gold_sparql": "SELECT (COUNT (DISTINCT ?lan) AS ?result) WHERE {wd:Q30 p:P37/ps:P37 ?lan}", "generated_sparql": "SELECT COUNT(*) AS count\nWHERE {\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Wie viele offizielle Sprachen hat Pakistan?", "gold_sparql": "SELECT (COUNT (DISTINCT ?lan) AS ?result) WHERE {wd:Q843 p:P37/ps:P37 ?lan}", "generated_sparql": "SELECT (COUNT(*) AS SpracheAnzahl)\nWHERE {\n?country wd:P31 wd:Q134871.\n?country label { bd:serviceParam wdg:serviceParam wdg:value \"Pakistan\" ).\n}"}, {"question": "Wieviele Oscars haben die Filme, bei denen Hayao Miyazaki Regie gef\u00fchrt hat, insgesamt gewonnen?", "gold_sparql": "SELECT (COUNT (DISTINCT ?aw) AS ?result) WHERE {?film wdt:P57 wd:Q55400; wdt:P166 ?aw. ?aw  wdt:P31 wd:Q19020}", "generated_sparql": "SELECT COUNT(*) AS total_oscar_wins \nFROM wikibase:award \nWHERE bd:itemId = wikibase:item{{wdaid|Q311217}"}, {"question": "Wieviele Gem\u00e4lde von Pablo Picasso waren jemals in einem Museum?", "gold_sparql": "SELECT (COUNT (DISTINCT ?painting) AS ?result) WHERE {?painting wdt:P31 wd:Q3305213; wdt:P170 wd:Q5593; wdt:P276 ?loc. ?loc wdt:P31/wdt:P279* wd:Q33506}", "generated_sparql": "SELECT COUNT(*) as Count\nWHERE {\n  ?p :birthPlace \"https://dbpedia.org/resource/Madrid%2C_Spain\" .\n  ?p :birthYear \"1881\".\n  ?p :nationality \"https://dbpedia.org/resource/Spain\" .\n  ?o wdt:P31 ?p .\n  ?o wdt:P30 wd:Q5102 . -- Museum\n  FILTER(CONTAINS(str(?o), \"Pablo Picasso\"))\n}"}, {"question": "Wieviele Personen k\u00f6nnen h\u00f6chstens gleichzeitig \"Mensch \u00e4rgere dich nicht\" spielen?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q545129 wdt:P1873 ?result}", "generated_sparql": ""}, {"question": "Wieviele Menschen hat Oscar Pistorius umgebracht?", "gold_sparql": "SELECT (COUNT (DISTINCT ?people) AS ?result) WHERE {?people wdt:P31 wd:Q5;wdt:P157 wd:Q201377}", "generated_sparql": ""}, {"question": "Wie viele Menschen starben nach der h\u00f6chsten Sch\u00e4tzung durch den Gro\u00dfen Sprung nach vorn?", "gold_sparql": "SELECT (MAX(?d) AS ?result) WHERE {wd:Q58715 wdt:P1542/wdt:P1120 ?d}", "generated_sparql": ""}, {"question": "Wie viele Personen haben den Literatur-Nobelpreis seit seiner Einf\u00fchrung gewonnen?", "gold_sparql": "SELECT (COUNT (DISTINCT ?people) AS ?result) WHERE {?people wdt:P31 wd:Q5; wdt:P166 wd:Q37922}", "generated_sparql": "SELECT COUNT(*) + 1 as 'Number of winners' WHERE { wd:Q99 wd:P31 wd:Q7.}"}, {"question": "Wie viele Menschen leben in St\u00e4dten in der N\u00e4he des Nil?", "gold_sparql": "SELECT (SUM (?pop) AS ?result) WHERE {?city wdt:P31 wd:Q515; wdt:P206 wd:Q3392; wdt:P1082 ?pop}", "generated_sparql": ""}, {"question": "Wie viele Tonklassen beschreibt der chromatische Tonleiter?", "gold_sparql": "SELECT (COUNT (DISTINCT ?note) AS ?result) WHERE {wd:Q202021 wdt:P527 ?note. ?note wdt:P31 wd:Q1760309}", "generated_sparql": ""}, {"question": "Wie viele Theaterst\u00fccke hat William Shakespeare im 16. Jahrhundert geschrieben?", "gold_sparql": "SELECT (COUNT (DISTINCT ?play) AS ?result) WHERE {?play wdt:P31 wd:Q7725634; wdt:P7937 wd:Q25379; wdt:P50 wd:Q692; wdt:P571 ?inc FILTER(YEAR(?inc) < 1600)}", "generated_sparql": ""}, {"question": "Wie viele Gedichte hat Allen Ginsberg ver\u00f6ffentlicht?", "gold_sparql": "SELECT (COUNT (DISTINCT ?poem) AS ?result) WHERE {?poem wdt:P31 wd:Q7725634; wdt:P50 wd:Q6711; wdt:P136/wdt:P279* wd:Q482}", "generated_sparql": "SELECT COUNT(*) AS poemCount \nWHERE {\n  ?author wdt:P31 wd:Q1070005.  # Allen Ginsberg\n  ?author wdt:W31 ?work.  # Gedicht\n  FILTER(CONTAINS(STR(?work), \"gleich\" \"@llen\")) \n  FILTER(CONTAINS(STR(?work), \"Wie viele\")) \n  FILTER(CONTAINS(STR(?work), \"Gedichte\"))\n}"}, {"question": "Wie viele unterschiedliche politische Parteien hatten jemals Sitze im Deutschen Bundestag?", "gold_sparql": "SELECT (COUNT (DISTINCT ?group) AS ?result) WHERE {?group wdt:P31/wdt:P279* wd:Q7278. ?group p:P1410 ?ps. ?ps pq:P194 wd:Q154797; ps:P1410 ?seats. FILTER(?seats > 0)}", "generated_sparql": ""}, {"question": "Auf wievielen Positionen spielte Kobe Bryant in seinem Team?", "gold_sparql": "SELECT (COUNT (DISTINCT ?pos) AS ?result) WHERE {wd:Q25369 wdt:P413 ?pos}", "generated_sparql": "SELECT COUNT(\\*) AS NumPosition WHERE {\n    bd:P31 wd:Q222307.\n    wd:Q26694719 <[sp:position]> bd:P246.\n    ?s wd:P47 bd:P443 ?g.\n    FILTER(CONTAINS(str(?g), \"Kobe Bryant\"))\n}"}, {"question": "Wie viele Preise wurden von Alfred Nobel eingef\u00fchrt?", "gold_sparql": "SELECT (COUNT (DISTINCT ?prize) AS ?result) WHERE {wd:Q7191 wdt:P527 ?prize; wdt:P112 wd:Q23810}", "generated_sparql": ""}, {"question": "Hat SpaceX jemals eine Weltraum-Mission durchgef\u00fchrt, bei der der Start mi\u00dfgl\u00fcckte?", "gold_sparql": "ASK {?mission wdt:P31 wd:Q2133344, wd:Q99654400; wdt:P137 wd:Q193701}", "generated_sparql": "SELECT w:name AS spacecraft_name, w:name AS mission_name\r\nWHERE {\r\n  ?spacecraft w:P412 ?satellite.\r\n  ?spacecraft w:P147 ?mission;\r\n  ?spacecraft w:P363 ?launch;\r\n  ?spacecraft w:P417 ?propulsion;\r\n  ?spacecraft p:contains ?mission.\r\n  ?mission w:Q3144.\r\n  ?mission w:P214 ?date;\r\n  ?launch w:Q34953.\r\n  ?propulsion ?name. \r\n}"}, {"question": "Wie viele Personen die f\u00fcr den Chemie-Nobelpreis nominiert wurden, haben ihn niemals gewonnen?", "gold_sparql": "SELECT (COUNT(DISTINCT ?peo) AS ?result) WHERE {?peo wdt:P31 wd:Q5; wdt:P1411 wd:Q44585. FILTER(NOT EXISTS{?peo wdt:P166 wd:Q44585})}", "generated_sparql": "SELECT COUNT(*) ON (SELECT ?p\r\n  WHERE { \r\n      # Find all people who were nominated for Chemistry Nobel Prize.\r\n      ?p wdt:P36 wd:Q10122. \r\n      FOREACH SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Wieviele Staffeln hat Pose?", "gold_sparql": "SELECT ?result {wd:Q30603704 wdt:P2437 ?result}", "generated_sparql": "SELECT COUNT(*) AS num_staffeln WHERE {\n  ?entity wdt:P276 wd:Q113210982.\n} GROUP BY (STR(?entity.name))\nORDER BY num_staffeln DESC\nLIMIT 1"}, {"question": "Wieviele Sitze gibt es aktuell im Deutschen Bundestag?", "gold_sparql": "SELECT ?result WHERE {wd:Q154797 wdt:P1342 ?result}", "generated_sparql": "SELECT COUNT(*) ?seats\nWHERE {\n  ?s :hasInstance ?p.\n  ?p wdt:P461 wd:Q293949.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  LIMIT 1"}, {"question": "Wieviele Geschwister hatte der/die Autor:in von \"Little Women\"?", "gold_sparql": "SELECT (COUNT (DISTINCT ?sib) AS ?result) WHERE {wd:Q523076 wdt:P50 ?aut. ?aut wdt:P3373 ?sib}", "generated_sparql": "SELECT COUNT(\\_{wo}"}, {"question": "Wieviele Ski-Resorts gab es jemals in Frankreich?", "gold_sparql": "SELECT (COUNT (DISTINCT ?ski) AS ?result) WHERE {?ski wdt:P31 wd:Q130003; wdt:P17 wd:Q142}", "generated_sparql": ""}, {"question": "Wie viele Lieder wurden von Jay Chou komponiert aber nicht in seinen eigenen Alben ver\u00f6ffentlicht?", "gold_sparql": "SELECT (COUNT (DISTINCT ?song) AS ?result) WHERE {?song wdt:P31 wd:Q7366; wdt:P86 wd:Q238819; wdt:P361 ?album. ?album wdt:P31 wd:Q482994; wdt:P175 ?per FILTER(?per != wd:Q238819)}", "generated_sparql": "SELECT COUNT(*) AS numSongsWereReleased\nFROM (t1)-[:hasComposition]->(o1)\nWHERE {\n  o1-[:hasSubject]->(w)\n  o1-[:hasSubject]->(t1)\n}\nGROUP BY o1\nHAVING numSongsWereReleased > 0"}, {"question": "Bei wievielen auf Spiderman basierenden Werken kam Venom vor?", "gold_sparql": "SELECT (COUNT (DISTINCT ?work) AS ?result) WHERE {wd:Q1621261 wdt:P1441 ?work. ?work wdt:P144 wd:Q79037}", "generated_sparql": ""}, {"question": "Was kam zuerst: die Fernsehsendung Familie Feuerstein oder das Ende der rassistischen Diskriminierung im US-Wahlrecht?", "gold_sparql": "SELECT (COUNT (DISTINCT ?sp) AS ?result) WHERE {wd:Q158861 wdt:P26 ?sp}", "generated_sparql": "SELECT ?program ?date\nWHERE {\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Gibt es in der Schweiz einen Ort n\u00f6rdlich der Koordinaten (8.57 47.8)?", "gold_sparql": "ASK {wd:Q39 wdt:P1332 ?loc FILTER(?loc > \"Point(8.57 47.8)\"^^geo:wktLiteral)}", "generated_sparql": "SELECT COUNT(\\*) as num_coordinates\nWHERE {\n  ?coordinate wdt:P39 wd:Q8422.\n  ?coordinate wdt:P67 wd:Q9260278.\n}"}, {"question": "Wie oft gewann Giorgio Moroder den Golden Globe?", "gold_sparql": "SELECT (COUNT (DISTINCT ?awards) AS ?result) WHERE {wd:Q312674 p:P166 ?awards. ?awards ps:P166/wdt:P31 wd:Q1011547}", "generated_sparql": ""}, {"question": "An wie vielen Olympischen Spielen hat Kobe Bryant teilgenommen?", "gold_sparql": "SELECT (COUNT (DISTINCT ?ol) AS ?result) WHERE {wd:Q25369 wdt:P1344 ?ol. ?ol wdt:P31/wdt:P279 wd:Q5389}", "generated_sparql": "SELECT COUNT(*) as num_olympic_games\nWHERE {\n  ?athlete wdt:P171 ?occurrence.\n  ?occurrence wdt:P31 wd:Olympiade.\n  ?occurrence wdt:P214 \"Olympische Sommerspiele\".\n  FILTER(str(?athlete) = \"Kobe Bryant\")\n}\nGROUP BY ?athlete\nHAVING num_olympic_games > 0"}, {"question": "Wie oft wurde Oskar Lafontaine zum Mitglied des saarl\u00e4ndischen Landtags gew\u00e4hlt?", "gold_sparql": "SELECT (COUNT (DISTINCT ?s) AS ?result) WHERE {wd:Q110719 p:P39 ?s. ?s ps:P39 wd:Q18130478}", "generated_sparql": "SELECT COUNT(*) AS gew\u00e4hlt_mal\nWHERE {\n  ?person wdt:P31 wd:Q2.\n  wdt:P57 wd:Q147.\n  wd:P39 wd:Q1771294.\n  wd:Q203 wd:Q1771258.\n  wd:Q202 wd:Q1771268.\n}"}, {"question": "An wie vielen Kriegen war das Kaiserreich Japan beteiligt?", "gold_sparql": "SELECT (COUNT (DISTINCT ?war) AS ?result) WHERE {wd:Q188712 wdt:P1344 ?war. ?war wdt:P31 wd:Q198}", "generated_sparql": "SELECT COUNT(label) FROM wikibase:instance WHERE label = {'language' : 'de', 'value' : 'Krieger'}"}, {"question": "Wieviele Frauen waren unter den Gr\u00fcndungsmitgliedern von \"Die Br\u00fccke\"?", "gold_sparql": "SELECT (COUNT (DISTINCT ?f) AS ?result) WHERE {wd:Q152778 wdt:P112 ?f. ?f wdt:P21 wd:Q6581072}", "generated_sparql": "SELECT COUNT(*) asCount\nFROM wikibase:P249 ?x\nWHERE {\n  ?x wikibase:P31 wd:Q32 (SELECT ?w WHERE { wikibase:P6 wd:Q32 } LIMIT 1"}, {"question": "Wer hat eine h\u00f6here beobachtete Lebenserwartung, der Gro\u00dfe T\u00fcmmler oder der Braunb\u00e4r? ", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P4214 ?ls. FILTER(?result IN (wd:Q174199, wd:Q36341))} ORDER BY DESC(?ls) LIMIT 1", "generated_sparql": ""}, {"question": "Was ist TNFAIP1?", "gold_sparql": "SELECT ?result WHERE {wd:Q18032040 wdt:P31 ?result}", "generated_sparql": "SELECT ?stmt ?text\nWHERE {\n    ?stmt wdt:P459 wd:Q4500.\n    STRING(?text) = \"Was ist TNFAIP1?\" .\n}"}, {"question": "Wie oft gewann Naomi Novik den Nebula Award?", "gold_sparql": "SELECT (COUNT(?award) AS ?result) WHERE {wd:Q242643 p:P166/ps:P166 ?award FILTER(?award = wd:Q194285)}", "generated_sparql": "SELECT ?instance ?count ?instanceLabel\nWHERE {\n    SERVICE qb: {\n        bd:serviceParam wikibase:interface lang:en.\n        bd:serviceParam wikibase:outputFormat \"text/csv\"\n    }"}, {"question": "Wie oft haben die Mongolen eine Invasion Japans versucht?", "gold_sparql": "SELECT (COUNT (DISTINCT ?time) AS ?result) WHERE {wd:Q208156 wdt:P585 ?time}", "generated_sparql": "SELECT COUNT(*) AS attempts_made\nWHERE {\n    ?year wdt:P468 <xsd:int> .\n    ?country wdt:P31 wikibase:Mongolia .\n    ?country wdt:P468 ?year .\n    ?country bfo:P240 ?bfo:P468 .\n    ?bfo wikibase:Japan .\n    ?bfo bfo:P468 ?year .\n}"}, {"question": "Wie oft war Naomi Novik f\u00fcr einen Hugo Award nominiert?", "gold_sparql": "SELECT (COUNT(?award) AS ?result) WHERE {wd:Q242643 p:P1411/ps:P1411 ?award FILTER(?award = wd:Q188914)}", "generated_sparql": "SELECT COUNT(\\*) \nWHERE {\n  ?wdt:P439 wdt:P163 wdt:Q736111.\n}"}, {"question": "Wie viele Jahre hat der zweit\u00e4lteste Hund der Welt gelebt?", "gold_sparql": "SELECT ?result WHERE{?dog wdt:P31 wd:Q144. ?dog wdt:P569 ?db; wdt:P570 ?dd BIND((YEAR(?dd) - YEAR(?db)) AS ?result)} ORDER BY DESC(?result) LIMIT 1 OFFSET 1", "generated_sparql": "SELECT ?age\nWHERE {\n  ?animal wdt:P31 wd:Q932.\n  ?animal wdt:P36 ?age.\n  BIND ((SELECT MAX(?x) AS maxim) WHERE {\n    ?x wdt:P36 ?a.\n    ?animal wdt:P36 ?a;\n    FILTER(?a > ?x)\n  }"}, {"question": "Wenn jemand im Jahre 1969 verstarb, ist es m\u00f6glich, dass er/sie von Queens Musik erfahren hatte?", "gold_sparql": "ASK {wd:Q15862 wdt:P2031 ?start. FILTER(YEAR(?start) <= 1969)}", "generated_sparql": "SELECT DISTINCT ?o WHERE {\n  ?o wdt:P822 \"1969-01-01\"^^xsd:date-time.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Wurde Dr. Pepper nach dem/der Erfinder/in benannt?", "gold_sparql": "ASK {wd:Q623561 wdt:P138 ?na; wdt:P61 ?inv. FILTER(?inv = ?na)}", "generated_sparql": "SELECT ?language ?created ?inventor {\n  ?Pepper wdt:P420 wd:Q249.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language ?language }"}, {"question": "In wievielen Filmen kamen Carey Mulligan und Ryan Gosling gemeinsam vor?", "gold_sparql": "SELECT (COUNT(DISTINCT ?movie) AS ?result) WHERE {?movie wdt:P31 wd:Q11424; wdt:P161 wd:Q193815, wd:Q219655}", "generated_sparql": ""}, {"question": "Wer ist in dem Land, in dem Ghost in the Shell erfunden wurde, aktuell das Staatsoberhaupt?", "gold_sparql": "SELECT ?result WHERE {wd:Q92580 wdt:P495 ?country. ?country wdt:P35 ?result}", "generated_sparql": "SELECT ?country ?leader\nWHERE {\n    ?country wdt:P31 wd:Country.\n    wd:GhostInTheShell wdt:P43 ?country.\n    ?country wdt:P17 wd:Country.\n    ?country wdt:P31 wd:Country.\n}"}, {"question": "Wieviele Fl\u00fcsse sind angrenzend zum oder innerhalb des U.S. Staats, aus dem Cage the Elephant herkommen?", "gold_sparql": "SELECT (COUNT(DISTINCT ?bow) AS ?result) WHERE {wd:Q68061 wdt:P740/wdt:P131* ?state. ?state wdt:P31 wd:Q35657; wdt:P206 ?bow. ?bow wdt:P31 wd:Q4022}", "generated_sparql": "SELECT COUNT(*) As US_States_With_Caged_Elephants\nWHERE {\n    SERVICE wikibase:label { bd:serviceParam wikibase:language 'en'. }"}, {"question": "In welchem Bundesland hat die Veltins Brauerei ihren Hauptsitz?", "gold_sparql": "SELECT ?result WHERE {wd:Q608350 wdt:P159 ?hql. ?hql wdt:P131* ?result. ?result wdt:P31 wd:Q1221156}", "generated_sparql": "SELECT DISTINCT ?country WHERE {\n  ?country wdt:P279 wd:Q10126.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "In welchem Stadion spielen die New York Yankees?", "gold_sparql": "SELECT ?result WHERE {wd:Q213417 wdt:P115 ?result}", "generated_sparql": "SELECT DISTINCT ?stadion\nWHERE {\n    ?stadion wdt:P31 wd:SportsStadion;\n    wd:label \"Stadion\".\n    wd:name ?stadion.\n    ?stadion wdt:P992 wd:SportsTeam.\n    ?stadion wd:P629 ?team.\n    ?team wdt:P1044 [ wd:label \"New York Yankees\" ].\n}\nORDER BY label ASC"}, {"question": "In welchen L\u00e4ndern liegt der Himalaya?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q5451 wdt:P17 ?result}", "generated_sparql": "SELECT ?country\nWHERE {\n  ?country wdt: P324 wd:P1 > 615.\n}"}, {"question": "War Isfahan im Jahre 934 eine Hauptstadt?", "gold_sparql": "ASK {wd:Q42053 p:P1376 ?ps. ?ps pq:P580 ?start; pq:P582 ?end. FILTER((YEAR(?start) < 934) && (YEAR(?end) > 934))}", "generated_sparql": "SELECT ?lang WHERE {\n  ?lang wdt:P114 wd:P31 wd:Q7.\n  FILTER(?lang = \"en\" AND ?lang = wikibase:languageLabel(?lang).text())\n  FILTER(str(?lang) = \"en\")\n  FILTER(CONTAINS(str(?lang), \"Isfahan\"))\n  FILTER(CONTAINS(str(?lang), \"War\"))\n  FILTER(CONTAINS(str(?lang), \"934\"))\n}\nGROUP BY ?lang\nHAVING COUNT(\\*) = 1.\n\nThe query searches for the language label of any language that Isfahan is the capital of and has the value \"War\" and the year 934. If there is only one such language, it will return the label."}, {"question": "In wie vielen L\u00e4ndern gibt es Niederlassungen von IKEA?", "gold_sparql": "SELECT (COUNT (DISTINCT ?c) AS ?result) WHERE {wd:Q1769361 wdt:P527 ?c. ?c p:P31/ps:P31 wd:Q6256}", "generated_sparql": "SELECT COUNT(*) \nWHERE {\n  ?p dbo:partOf ?l.\n  ?p wd:P162 ?c.       // stores\n  ?l dbo:name ?k.\n  ?k bd:label ?r.\n  FILTER(str(?r) = 'IKEA')\n  SERVICE wikibase:label { bd:serviceParam wikibase:language 'en'. }"}, {"question": "In welchem Land hatte die United Fruit Company ihren Hauptsitz?", "gold_sparql": "SELECT ?result WHERE{wd:Q1771942 wdt:P159/wdt:P131* ?result. ?result wdt:P31 wd:Q6256}", "generated_sparql": "SELECT ?country\nWHERE {\n  ?org wdt:P191 ?country.\n  SELECT DISTINCT ?country\n    WHERE {\n      SERVICE <https://es.wikipedia.org/w/api.php> {\n        bd:serviceparam wikibase:listlabels=true;\n        bd:serviceparam language=de;\n      }"}, {"question": "In wie vielen L\u00e4ndern wird Pysanka praktiziert?", "gold_sparql": "SELECT (COUNT (DISTINCT ?c) AS ?result) WHERE {wd:Q3233785 wdt:P17 ?c}", "generated_sparql": "SELECT COUNT(DISTINCT wd:country) AS langue_count\nWHERE {\n  wd:Q356 wd:P283 wd:Q1122.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "In welchem Land befindet sich Oberirrach?", "gold_sparql": "SELECT ?result WHERE {wd:Q98138090 wdt:P17 ?result}", "generated_sparql": "SELECT ?wdLabel WHERE {\n  ?w dbr:namingSpace ?ns.\n  ?w wd:P31 wd:Q225.\n  ?w dbr:p ?p ?x.\n  ?x wd:P484 ?y.\n  wd:ServiceParam wikibase:label ?wdLabel.\n}"}, {"question": "In welchem Land wurde Spotify gegr\u00fcndet?", "gold_sparql": "SELECT ?result WHERE {wd:Q689141 wdt:P495 ?result}", "generated_sparql": "SELECT ?country\nWHERE {\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Wonach ist das Lied Vogue von Madonna benannt?", "gold_sparql": "SELECT ?result WHERE{wd:Q1128775 wdt:P175 wd:Q1744; wdt:P138 ?result}", "generated_sparql": "SELECT wdt:P46 wd.text WHERE {\n  wd:P136 wd.label wd.bfoiname \"Madonna\".\n  wd:P46 wd.text ?s.\n  FILTER (CONTAINS(?s, \"Vogue\"))\n}"}, {"question": "In welcher Sprache haben die Vereinigten Staaten die k\u00fcrzeste Kurzbezeichnung?", "gold_sparql": "SELECT ?result WHERE {wd:Q30 wdt:P1813 ?name BIND(lang(?name) AS ?result)} ORDER BY ASC(strlen(?name)) LIMIT 1", "generated_sparql": "SELECT ?language WHERE {\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Beginnt die Vorwahl von Bremerhaven mit 4?", "gold_sparql": "ASK {wd:Q2706 wdt:P473 ?code. FILTER regex(?code, \"^4\")}", "generated_sparql": "SELECT COUNT(*) AS bremerhaven_4\nWHERE {\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "In wievielen Filmen spielte Johnny Depp eine Rolle?", "gold_sparql": "SELECT (COUNT(DISTINCT ?result) AS ?resultCnt) WHERE{?result wdt:P31 wd:Q11424; wdt:P161 wd:Q37175}", "generated_sparql": "SELECT COUNT(*) AS film_roles \nWHERE \n  { \n    SELECT P319[P319] ?item ?itemLabel \n         WHERE { ?item P319 ?film}"}, {"question": "In welchem Jahr hat ABBA ihr Album The Visitors ver\u00f6ffentlicht?", "gold_sparql": "SELECT ?result WHERE{wd:Q338553 wdt:P577 ?date. BIND(YEAR(?date) AS ?result)}", "generated_sparql": "SELECT p.[Q13] AS Jahr\nWHERE {\n  ?r [P31] <https://www.wikidata.org/entity/Q1280.html> ;\n  ?r [P36] \"The Visitors\" ;\n  SERVICE wikibase:labels { bd:serviceParam wikibase:language \"en\" }"}, {"question": "In welchem Jahr wurde die Autorin von The Vanishing Half geboren?", "gold_sparql": "SELECT ?result WHERE {wd:Q98476957 wdt:P50/wdt:P569 ?date. BIND(YEAR(?date) AS ?result)}", "generated_sparql": "SELECT ?year WHERE { ?person wd:Q34932002. ?year wdt:P341 ?person. FILTER(CONTAINS(?year, \"1961\")) }"}, {"question": "Wird After Eight von Unilever hergestellt?", "gold_sparql": "ASK {wd:Q388973 wdt:P176 wd:Q157062}", "generated_sparql": "SELECT ?x ?y WHERE {\n  ?x wdt:P31 wd:Q58.\n  ?x wdt:P82 wd:Q54291590.\n  ?y wdt:P39 wd:Q6345.\n  ?y wdt:P82 ?x.\n}"}, {"question": "Gibt es ALDI in Italien?", "gold_sparql": "ASK {wd:Q125054 wdt:P527/wdt:P17 wd:Q38}", "generated_sparql": "SELECT ?s ?p ?o WHERE { ?s wdt:P188. ?s wd:P39 wd:Q55766. }"}, {"question": "Ist Isfahan eine Gro\u00dfstadt?", "gold_sparql": "ASK {wd:Q42053 wdt:P31 wd:Q1549591}", "generated_sparql": "SELECT ?city\nWHERE {\n  ?city wdt:P104/wdt:P31 \"Zerst\u00f6rte Stadt\".\n}"}, {"question": "Ist Mathematik verwandt mit Wissenschaft?", "gold_sparql": "ASK {wd:Q395 ?p [?p2 wd:Q336]}", "generated_sparql": ""}, {"question": "Ist Python eine Programmiersprache?", "gold_sparql": "ASK {wd:Q28865 p:P31/ps:P31 wd:Q9143}", "generated_sparql": "SELECT ?x ?s WHERE {\n  ?x wd:label \"[Python]\".\n  ?s wik:isinstance ?x.\n  ?s rdf:type wd:ProgrammingLanguage.\n}"}, {"question": "Ist Samurai Champloo ein originales Werk oder eine Adaption?", "gold_sparql": "SELECT ?result WHERE {wd:Q143276 wdt:P31/wdt:P279* ?result FILTER(?result IN (wd:Q104640197, wd:Q1213562))}", "generated_sparql": "SELECT ?item ?name ?production\nWHERE {\n  # Samurai Champloo\n  ?item wd:Q41467.\n  ?item wd:P189 ?name.\n  ?item wd:P31 dbo:CreativeWork.\n  ?item dbo:originalProduction ?originalProduction.\n  OPTIONAL {\n    # Check if there is a direct adaptation of Samurai Champloo\n    ?item wd:P441 (SELECT COUNT(*) as ?count\n      WHERE {\n        ?item wd:P441 ?production.\n        FILTER(REGEXP(REPLACE(STR(?production), ', ', ''), '^[0-9]+$', ''))\n      }\n      LIMIT 1"}, {"question": "War die erste weibliche Kanzlerin Deutschlands jemals verheiratet?", "gold_sparql": "ASK {{SELECT ?fc WHERE {wd:Q183 p:P6 ?ps. ?ps ps:P6 ?fc; pq:P580 ?st. ?fc wdt:P21 wd:Q6581072} ORDER BY ASC(?st) LIMIT 1} FILTER(EXISTS{?fc p:P26/ps:P26 ?sp})}", "generated_sparql": "SELECT ?label\nWHERE {\n    ?person dbp:birthPlace dbpedia-owl:Place.\n    MIN(STR(?person) | SUBSTRING(?person, 0, NORM(?person) + LEN(?person) - LEN(SUBSTRING(?person, NORM(?person), 1))) < '1950-06-28'.\n    ?person wdt:P159 wd:Q47.\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"de\". }"}, {"question": "Ist der Marianengraben tiefer als der Mount Everest hoch ist (\u00fcber dem Meeresspiegel)?", "gold_sparql": "ASK {wd:Q510 wdt:P2044 ?d. wd:Q513 wdt:P2044 ?h. FILTER(?d + ?h < 0)}", "generated_sparql": "SELECT ?marianengraben ?mountEverest\nWHERE {\n  ?marianengraben wdt:P136 wd:Q42204.\n  ?mountEverest wdt:P136 wd:Q624167.\n  ?mountEverest wdt:P483 wd:Q1066265.\n  ?marianengraben wdt:P483 wd:Q1066265.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Ist die Anzahl der L\u00e4nder in Europa gr\u00f6\u00dfer als die der L\u00e4nder in Asien?", "gold_sparql": "ASK {{SELECT (COUNT (DISTINCT ?ac) AS ?acc) (COUNT (DISTINCT ?ec) AS ?ecc) WHERE {?ec p:P31/ps:P31 wd:Q6256; wdt:P30 wd:Q46. ?ac p:P31/ps:P31 wd:Q6256; wdt:P30 wd:Q48.}}FILTER(?ecc > ?acc)}", "generated_sparql": ""}, {"question": "Existiert die Produktionsfirma von Samurai Champloo noch?", "gold_sparql": "ASK {wd:Q143276 wdt:P272 ?comp FILTER(NOT EXISTS{?comp wdt:P576 ?o})}", "generated_sparql": "SELECT EXISTS(SELECT * FROM wd:Q8447 WHERE {wd:P131 wd:Q119957.}"}, {"question": "Gibt es bei Hunter X Hunter eine weibliche Hauptfigur?", "gold_sparql": "ASK {wd:Q696071 wdt:P674 ?char. ?char wdt:P21 wd:Q6581072}", "generated_sparql": "SELECT DISTINCT ?x WHERE {\n  ?x wdt:P31 wd:Q50685.\n}"}, {"question": "Ist Wasser farblos?", "gold_sparql": "ASK {wd:Q283 wdt:P462 wd:Q11567495}", "generated_sparql": "SELECT ?p\nWHERE {\n  ?s wd:P8  ?p.\n  FILTER(CONTAINS(?s, \"Wasser\"))\n}"}, {"question": "Ist Axel Rose ein Mitglied von Guns N\u2019 Roses?", "gold_sparql": "ASK {wd:Q11885 wdt:P463 wd:Q11895}", "generated_sparql": "SELECT ?o1 ?o2\nWHERE {\n    ?o1 wikibase:intersection ?o2 .\n    ?o2 wdt:P89 ?o3 .\n    ?o3 wdt:P456 ?o4 .\n    ?o4 wdt:P523 ?o5 .\n    ?o5 wdt:P131 ?o6 .\n    ?o6 wg:n.1745210 ?o1 .\n    ?o6 dbp:birthPlace ?o7 .\n    ?o7 dbp:birthPlace <http://dbpedia.org/resource/Germany> .\n    ?o2 dbp:birthPlace ?o7 .\n}"}, {"question": "Ist die Hauptstadt Irans gr\u00f6\u00dfer als die Deutschlands?", "gold_sparql": "ASK {wd:Q794 wdt:P36/wdt:P2046 ?a1. wd:Q183 wdt:P36/wdt:P2046 ?a2. FILTER(?a1 > ?a2)}", "generated_sparql": "SELECT ?lang1 ?lang2 ?comparison\nWHERE {\n  ?lang1 wd:name?\"Berlin\" .\n  ?lang2 wd:name:\"Tehran\" .\n  @base <https://www.w3.org/2000/01/rdf-syntax-ns#>\n  FILTER(CONTAINS(?lang1, <http://dbpedia.org/property/country/>) && CONTAINS(?lang2, <http://dbpedia.org/property/city/>))\n  ?lang1 wd:capitalOf ?country1 .\n  ?country1 wd:name ?name1 .\n  ?lang2 wd:capitalOf ?country2 .\n  ?country2 wd:name ?name2 .\n  FILTER(CONTAINS(CONTAINS(?country1, <http://dbpedia.org/property/country/>) && CONTAINS(?country2, <http://dbpedia.org/property/country/>), <http://dbpedia.org/property/capital/>))\n  ?comparison wdt:P1204 ?lang1 ?name1 ?name2 .\n}"}, {"question": "Ist die Weser l\u00e4nger als der Rhein?", "gold_sparql": "ASK{wd:Q1650 p:P2043/psn:P2043/wikibase:quantityAmount ?lenw. wd:Q584 p:P2043/psn:P2043/wikibase:quantityAmount ?lenr FILTER(?lenw > ?lenr)}", "generated_sparql": "SELECT ?w1, ?w2\nWHERE {\n  ?w1 wdt:P43 wd:Q2.\n  ?w2 wdt:P43 wd:Q22.\n  FILTER(URI:length(str(?w1)) > URI:length(str(?w2)))\n}"}, {"question": "Ist Tony Blair gr\u00f6\u00dfer als Tiger Woods?", "gold_sparql": "ASK {wd:Q9545 p:P2048/psn:P2048/wikibase:quantityAmount ?hb. wd:Q10993 p:P2048/psn:P2048/wikibase:quantityAmount ?hw FILTER(?hb > ?hw)}", "generated_sparql": "SELECT true `?a` WHERE {\n    {\n        ?s wdt:P31 wd:Q1170776.\n        ?s wdt:P360 ?a.\n    }"}, {"question": "Liegt Chicago am Michigansee?", "gold_sparql": "ASK {wd:Q1297 wdt:P206 wd:Q1169}", "generated_sparql": "SELECT ?c ?r WHERE { \n  ?c wdt:P31 wd:Q8584319. \n  ?c wdt:P31 wd:Q441021. \n  ?c wdt:P31 wd:Q23. \n  ?c wdt:P68 wd:Q9. \n  ?p wdt:P30 wd:Q95512. \n  ?p wdt:P30 wd:Q95511. \n  ?p wdt:P31 wd:Q6. \n  ?p wdt:P31 wd:Q25. \n  ?r wdt:P69 [[Michigan]] wdt:P68 [[Great Lakes]]. \n  ?r wdt:P87 [[Chicago]]. \n  ?r wdt:P68 ?p.\n}"}, {"question": "Liegt der Kreis H\u00f6xter neben dem Kreis Paderborn?", "gold_sparql": "ASK {wd:Q6228 wdt:P47 wd:Q6224}", "generated_sparql": "SELECT EXISTS ( \n  SELECT * FROM wd:PropertyValue WHERE wd:statement.type = 'wd:Poi' AND wd:property.value.match('H\u00f6xter')\n) AS hasH\u00f6xter\nSELECT EXISTS ( \n  SELECT * FROM wd:PropertyValue WHERE wd:statement.type = 'wd:Poi' AND wd:property.value.match('Paderborn')\n) AS hasPaderborn\nWHERE {\n  wd:Entity wd:name ?name .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }"}, {"question": "Liegt ein Teil des Harzgebirges im Landkreis Nordhausen?", "gold_sparql": "ASK {wd:Q4186 wdt:P131 wd:Q7858}", "generated_sparql": "SELECT ?geographicalElement ?geographicalSubtype ?landkreis\nWHERE {\n  ?geographicalElement wdt:P31 wd:Q767055.\n  ?geographicalSubtype wdt:P304 ?landkreis.\n  FILTER(CONTAINS(str(?geographicalElement), \"Harzgebirge\"))\n}"}, {"question": "Wieviele Personen gewannen den Literaturnobelpreis oder Nobelpreis f\u00fcr Physik seit 2000?", "gold_sparql": "SELECT (COUNT (DISTINCT ?result) AS ?resultCnt) WHERE{?result wdt:P31 wd:Q5. ?result p:P166 ?ps. {?ps ps:P166 wd:Q37922} UNION {?ps ps:P166 wd:Q38104} ?ps pq:P585 ?time. FILTER(YEAR(?time) > 2000)}", "generated_sparql": ""}, {"question": "Wie viele afroamerikanische Personen haben einen Stern auf dem Hollywood Walk of Fame?", "gold_sparql": "SELECT (COUNT (DISTINCT ?act) AS ?result) WHERE {?act wdt:P31 wd:Q5; wdt:P166 wd:Q17985761; wdt:P172 wd:Q49085}", "generated_sparql": ""}, {"question": "Mit wie vielen L\u00e4ndern hat Australien eine gemeinsame Grenze?", "gold_sparql": "SELECT (COUNT(DISTINCT ?country) AS ?result) WHERE {wd:Q408 wdt:P47 ?country. ?country p:P31/ps:P31 wd:Q6256}", "generated_sparql": "SELECT xsd:count(wd:bde_of) AS num_countries\nWHERE {\n    wd:bde_of ?c .\n    ?c wdt:P30 wd:Q701.\n    ?c wdt:P327 <http://www.wikidata.org/entity/Q1055>.\n}"}, {"question": "Wie viele chinesische Kaiserinnen gab es?", "gold_sparql": "SELECT (COUNT (DISTINCT ?result) AS ?resultCnt) WHERE {?result wdt:P39 wd:Q268218; wdt:P21 wd:Q6581072}", "generated_sparql": "SELECT COUNT(*) AS chinesischeKaiserinnen\nWHERE {\n  ?person wdt:P31 wikibase:Item.\n  ?person wdt:P31 wikibase:King.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[en]\". }"}, {"question": "Bei welcher politischen Partei war Joseph Beuys Mitglied?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q153965 wdt:P102 ?result}", "generated_sparql": "SELECT ?party\nWHERE {\n  ?person wdt:P31 wd:Q6266117.\n  ?person wdt:P373 ?party.\n}\nORDER BY ?party\nLIMIT 1"}, {"question": "In welchem Jahr wurde der Hollywood Walk of Fame er\u00f6ffnet?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q71719 wdt:P1619 ?year. BIND(YEAR(?year) AS ?result) }", "generated_sparql": "SELECT ?year WHERE {\n  ?film:releaseYear ?year.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Auf welcher Streaming-Plattform kann ich die Anime-Serie \"Hunter X Hunter\" schauen?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q70209136 wdt:P750 ?result. ?result wdt:P31 wd:Q59152282 }", "generated_sparql": "SELECT ?streaming_platform_label\r\nWHERE {\r\n  ?series wdt:P31 wd:Q25204.\r\n  ?series wdt:P360 ?platform.\r\n  ?platform wdt:P439 \"Streaming Platform\".\r\n  SERVICE wikibase:label {\r\n    bd:serviceParam wikibase:language \"en\".\r\n  }"}, {"question": "Personen welchen Alters geh\u00f6ren der Silent Generation an?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q3044693 wdt:P582 ?time. BIND(YEAR(NOW()) - YEAR(?time) AS ?result) }", "generated_sparql": "SELECT ?p ?o WHERE {\n  ?p wdt:P31 wd:Q14123240.\n  ?p wdt:P30 ?o.\n  wd:Q656569 wd:P87 ?o.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"de\". }"}, {"question": "In welchem Jahr ist der Kreis H\u00f6xter entstanden?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q6228 wdt:P571 ?time. BIND(YEAR(?time) AS ?result)}", "generated_sparql": "SELECT wdt:P259 ?s WHERE { {?s wdt:P259 wdt:P31 wd:Q311158. ?s wdt:P259 wdt:P367. }"}, {"question": "Ist die Linux Foundation auf Twitter verifiziert?", "gold_sparql": "ASK{wd:Q858851 p:P2002/pq:P1552 wd:Q28378282}", "generated_sparql": "SELECT ?w WHERE {\n  ?w wd:P431 wd:P341 \"Linux Foundation\".\n  FILTER(CONTAINS(?w, \"Twitter\"))\n}"}, {"question": "Wurden Angela Merkel und Tony Blair im selben Jahr geboren?", "gold_sparql": "ASK {wd:Q567 wdt:P569 ?da. wd:Q9545 wdt:P569 ?dt. FILTER(YEAR(?dt) = YEAR(?da))}", "generated_sparql": "SELECT ?a ?b WHERE {\n  ?a :birthPlace ?a ;\n  SERVICE wikibase:label { bd ?a }"}, {"question": "Sprechen mehr als 100000000 Menschen japanisch?", "gold_sparql": "ASK {wd:Q5287 wdt:P1098 ?num. FILTER(?num > 100000000)}", "generated_sparql": "SELECT COUNT(DISTINCT ?l)\nWHERE {\n   ?l <https://dbpedia.org/ontology/spoken-language.owl#language> <https://dbpedia.org/wiki/Japanese>.\n}\nGROUP BY ?l\nHAVING COUNT(DISTINCT ?l) > 100000000"}, {"question": "Nennen Sie alle Darsteller:innen des Films Red Notice, bei welchem Rawson Marshall Thurber Regie f\u00fchrte.", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q58815001 wdt:P57 wd:Q2745616; wdt:P161 ?result}", "generated_sparql": "SELECT ?person ?filmid WHERE {\n   SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Das erste Album von Jay Chou.", "gold_sparql": "SELECT DISTINCT ?result WHERE{?result wdt:P31 wd:Q482994; wdt:P175 wd:Q238819; wdt:P577 ?date. } ORDER BY ASC(?date) LIMIT 1", "generated_sparql": "SELECT DISTINCT ?albumLabel ?birthPlace ;\nWHERE {\n  ?artist wdt:P102 ?birthPlace ;\n  ?artist wdt:P244 ?birthPlace ;\n  OPTIONAL {\n    ?artist wdt:P356 ?albumLabel ;\n  }"}, {"question": "Durch welche L\u00e4nder flie\u00dft die Donau?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q1653 wdt:P17 ?result}", "generated_sparql": "SELECT DISTINCT ?country ?countryLabel ?riverLabel WHERE {\n  ?country wdt:P440 ?river.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Was fressen Pottwale haupts\u00e4chlich?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q81214 wdt:P1034 ?result}", "generated_sparql": "SELECT ?predicate (GROUP (?observation) COUNT(?observation) AS ?count) WHERE {\n  SELECT ?observation ?predicate WHERE {\n    ?observation wdt:P278 wd:P112 \"Pottwale\".\n  }\n  GROUP BY ?predicate\n}\nGROUP BY ?predicate\nHAVING (?predicate wd:P112)"}, {"question": "War Frida Kahlo eine Surrealistin?", "gold_sparql": "ASK{wd:Q5588 wdt:P135 wd:Q39427}", "generated_sparql": "SELECT ?label WHERE {\n  ?b :type wd:Surrealist.\n  SERVICE wa:LabelService { bd:serviceParam wa:language \"en\". }"}, {"question": "Wurde die Regie von Funny Games und dessen Neuauflage von unterschiedlichen Menschen gef\u00fchrt?", "gold_sparql": "ASK{wd:Q696928 wdt:P57 ?dir. wd:Q951002 wdt:P57 ?dir2. FILTER(?dir != ?dir2)}", "generated_sparql": "SELECT ?s ?p\nWHERE {\n  # Bind the movie's title to \"Funny Games\"\n  ?s wdt:P31 wd:Q14317.\n  \n  # Find the human directories (not the original 1999/2000 version)\n  ?s wdt:P440 ?s ?o.\n  \n  # Find all the human directors\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Wurde Google von Bill Gates gegr\u00fcndet?", "gold_sparql": "ASK{wd:Q95 wdt:P112 wd:Q5284}", "generated_sparql": "SELECT COUNT(*)<br />\nWHERE {<br />\n  SERVICE wikibase:label {<br />\n    bd:serviceParam wikibase:language \"en\"<br />\n  }"}, {"question": "Was ist der 2. Buchstabe im griechischen Alphabet?", "gold_sparql": "SELECT DISTINCT ?result WHERE{?fl wdt:P31 wd:Q19793459; wdt:P361 wd:Q8216. ?fl wdt:P156 ?result FILTER(NOT EXISTS{?fl wdt:P155 ?we})}", "generated_sparql": "SELECT label {\n  ?x wdt:P31 wd:Q3262742.\n  ?x wdt:Q664? [ wd:P31 wd:Q3262744 ].\n  FILTER (REGEXP(str(?x), '[0-9]{1}"}, {"question": "War Krebs die Ursache f\u00fcr den Tod Steve Jobs', welcher der CEO von Apple war?", "gold_sparql": "ASK {wd:Q19837 wdt:P509/wdt:P279* wd:Q12078 }", "generated_sparql": "SELECT ?o\nWHERE {\n   ?p <http://dbpedia.org/property/CEO> ?o .\n   ?o <http://www.w3.org/1999/02/22-rdfst#label>?l .\n   ?l contains(\"Steve Jobs\") .\n}"}, {"question": "War Shaquille O'Neal der Mannschaftskollege von Kobe Bryant im Jahr 2000?", "gold_sparql": "ASK {wd:Q25369 p:P54 ?ps1. ?ps1 ps:P54 ?team; pq:P580 ?st1; pq:P582 ?et1. wd:Q169452 p:P54 ?ps2. ?ps2 ps:P54 ?team; pq:P580 ?st2; pq:P582 ?et2. FILTER(YEAR(?st1) <= 2000 && YEAR(?et1) >= 2000 && YEAR(?st2) <= 2000 && YEAR(?et2) >= 2000)}", "generated_sparql": ""}, {"question": "War der Basketballspieler Shaquille O'Neal auch ein Filmschauspieler?", "gold_sparql": "ASK {wd:Q169452 wdt:P106 wd:Q3665646, wd:Q10800557}", "generated_sparql": "asketballspieler Shaquille O'Neal auch ein Filmschauspieler?' from Wikidata. [/INST] SELECT ?x WHERE {\n  ?x wdt:P31 wd:Q2069325.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Wurde das erste Album der Band Darkside in 2012 herausgebracht?", "gold_sparql": "ASK {?album wdt:P31 wd:Q482994; wdt:P175 wd:Q16954319; wdt:P577 ?date FILTER(NOT EXISTS{?album2 wdt:P31 wd:Q482994; wdt:P175 wd:Q16954319; wdt:P577 ?date2 FILTER(?date2 < ?date)} && YEAR(?date) = 2012)}", "generated_sparql": ""}, {"question": "Welche Spin-offs von Breaking Bad gibt es?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1079 wdt:P2512 ?result}", "generated_sparql": "SELECT DISTINCT ?S\nWhere {\n  ?S wdt:P31 wd:Q115526679.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Welcher Fluss flie\u00dft durch den Grand Canyon?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q4022. wd:Q118841 wdt:P206 ?result}", "generated_sparql": "SELECT ?fluss\nWHERE {\n  :GrandCanyon dbo:isLocation <http://dbpedia.org/resource/Colorado_River>.\n  ?fluss dbo:flowsThrough <http://dbpedia.org/resource/GrandCanyon>.\n  FILTER(REGEXP(str(?fluss), '(?<i>.*</i><i>(http://dbpedia.org/resource/River)'))\n}\nORDER BY ?fluss"}, {"question": "Welches Schl\u00fcsselereignis gab es im Zusammenhang mit Salvador Dal\u00ed?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q5577 wdt:P793 ?result}", "generated_sparql": "SELECT ?bdf_triple\n    WHERE {\n        ?o :isAbout ?bdf_triple\n        ?o :wiki :isAbout 'Salvador Dal\u00ed' .\n    }"}, {"question": "Wer erlie\u00df das Gesetz \u00fcber die Durchf\u00fchrung von Ma\u00dfnahmen des Arbeitsschutzes zur Verbesserung der Sicherheit und des Gesundheitsschutzes?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?act wdt:P31 wd:Q1006079; wdt:P361 wd:Q629029; wdt:P1001 wd:Q183; wdt:P467 ?result}", "generated_sparql": "SELECT ?lemma WHERE { ?lemma wdt:P31 wd:Q3548947. }"}, {"question": "Wie lauten die deutschen Namen akademischer Fachrichtungen, die \"Linguistik\" beinhalten?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?disc wdt:P31 wd:Q11862829; rdfs:label ?result FILTER(langMatches(lang(?result),\"de\") && regex(?result,\"linguistik\"))}", "generated_sparql": ""}, {"question": "Wie lauten die Namen der Staatsoberh\u00e4upter Deutschlands und Frankreichs?", "gold_sparql": "SELECT ?result WHERE {{wd:Q183 wdt:P35 ?result} UNION {wd:Q142 wdt:P35 ?result}}", "generated_sparql": "SELECT ?label WHERE {\n    ?s wdt:P31 wd:Q1491006.  # Die Bundesrepublik Deutschlands\n    ?s foaf:knows ?o.  # Das Bundesoberhaupt\n    ?o wdt:P31 wd:Q7851757019.  # Der franz\u00f6sische Pr\u00e4sident\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"de\". }"}, {"question": "Was sind die Berufe von John Lennons S\u00f6hnen?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?son wdt:P22 wd:Q1203; wdt:P31 wd:Q5; wdt:P106 ?result}", "generated_sparql": "SELECT ?b ?l.label WHERE {\n  ?b wdt:P31 wd:Q225741. ?l wdt:P384 ?b.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"https://de.wikipedia.org/w/api.php\". }"}, {"question": "Wie lauten die Filmtitel der \"Star Wars\"-Reihe?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?film wdt:P1476 ?result; wdt:P179 wd:Q22092344 FILTER(EXISTS{?film wdt:P31/wdt:P279* wd:Q11424})}", "generated_sparql": "SELECT ?m.title ?title\nWHERE {\n  ?m wdt:P107 ?title .\n  ?m wdt:P286 [\"Star Wars: Episode IV \u2013 A New Hope\", \"Star Wars: Episode V \u2013 The Empire Strikes Back\", \"Star Wars: Episode VI \u2013 Return of the Jedi\"] .\n}"}, {"question": "Was kam zuerst: die Fernsehsendung Familie Feuerstein oder das Ende der rassistischen Diskriminierung im US-Wahlrecht ?", "gold_sparql": "SELECT DISTINCT ?result WHERE{ BIND(IF(EXISTS{wd:Q201358 wdt:P580 ?date1. wd:Q1608064 wdt:P577 ?date2. FILTER(?date1 < ?date2)},wd:Q201358 , wd:Q1608064) AS ?result)}", "generated_sparql": "SELECT ?p ?o WHERE {\n  ?p wdt:P31 wd:Q740.  # TV show\n  ?p wdt:P763 wd:Q331014.  # Rassistische Diskriminierung im US-Wahlrecht\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"de\". }"}, {"question": "Welche Farben hat die deutsche Flagge?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q48160 wdt:P462 ?result}", "generated_sparql": "SELECT label WHERE {\n  service:label \"deutsche Flagge\" .\n}"}, {"question": "Wof\u00fcr standen die Suffragetten?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q322170 wdt:P279/wdt:P425/wdt:P3712 ?result}", "generated_sparql": ""}, {"question": "Wie nennt man die weibliche Form eines Kaisers auf Englisch?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q39018 wdt:P2521 ?result. FILTER(langMatches(lang(?result),\"en\"))}", "generated_sparql": "SELECT ?label\nWHERE {\n  ?entity wdt:P137 ?gender.\n  filter(?gender = \"Female\")\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Welches Ereignis zwischen 1910 und 1920 t\u00f6tete die meisten Menschen?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P1120 ?num; wdt:P580 ?st; wdt:P582 ?et. FILTER((EXISTS{?result wdt:P31/wdt:P279* wd:Q1190554}) &&(YEAR(?st) >= 1910) && (YEAR(?et) <= 1920))}ORDER BY DESC(?num) LIMIT 1", "generated_sparql": "SELECT ?event WHERE {\n  ?event wdt:P528 wd:q4902565.  # Ereignis\n  FILTER(?event wdt:P528 wd:Q187280196)  # T\u00f6tete\n  FILTER(?event wdt:P528 wdt:Q411607)  # Menschen\n  FILTER(str(?event wdt:P459) >= '1910' && str(?event wdt:P459) <= '1920')  # Zeitraum\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }"}, {"question": "Existiert das Unternehmen ATI noch?", "gold_sparql": "ASK {FILTER(NOT EXISTS {wd:Q213849 wdt:P576 ?o})}", "generated_sparql": ""}, {"question": "Was geschah mit den Dinosauriern?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q430 wdt:P793 ?result}", "generated_sparql": "SELECT ?o ?m ?w\nWHERE {\n  ?o wd:category/wd:hasLabel ?v .\n  ?v dbo:name ?s .\n  ?s dbo:died ?x .\n  ?x wd:property/wd:value ?t .\n  ?t dbo:start ?m .\n}\nORDER BY ?m\nLIMIT 1"}, {"question": "Welche Instrumente spielte Louis Armstrong?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1779 wdt:P1303 ?result}", "generated_sparql": "SELECT wdt:P6 ?m123 .\nWHERE {\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Woran ist der Autor der Redewendung \"Alea iacta est\" gestorben?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q271723 wdt:P50/wdt:P509 ?result}", "generated_sparql": "SELECT ?author WHERE {\n  ?author wdt:P1282 [\"Alea iacta est\"].\n  FILTER(?)\n}"}, {"question": "Welches bin\u00e4re Geschlecht hat der/die Partner:in von Allen Ginsberg?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q6711 wdt:P451/wdt:P21 ?result}", "generated_sparql": "SELECT ?o\nWHERE {\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Was ist die Hauptstadt des Verwaltungsbezirks Tokio?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1490 wdt:P36 ?result}", "generated_sparql": "SELECT ?name WHERE {\n  ?capital wd:capitalOf ?city .\n  ?city wd:contains ?name .\n}"}, {"question": "Welches Tier kommt im chinesischen Tierkreis nach dem B\u00fcffel?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q79226802; wdt:P155 wd:Q599644}", "generated_sparql": "SELECT DISTINCT (SELECT 'Tierkreis' AS 'Tierkreis' FROM qb:Q2 WHERE qb:Q2.wdt = qb:WDT-0377) AS 'Tierkreis'\nJOIN qb:Q3476468413112 ON qb:Q3476468413112.qid = qb:Q2.qid\nWHERE {\n    qb:Q2.wdtSolve = q.wdtSolve.id.split('_')[1]\n    qb:Q2.ptext. contains(q.ptext)\n    q.wdtSolve.id = qb:WDT-0377\n    qb:Q2.wdt = qb:WDT-0377\n    qb:Q2.ptext = q.ptext\n}\nLIMIT 1"}, {"question": "Was ist der gemeinsame Umsatz der drei, nach Anzahl an Besch\u00e4ftigten, gr\u00f6\u00dften Tech Unternehmen?", "gold_sparql": "SELECT (SUM(?rev) AS ?result) WHERE {{SELECT DISTINCT ?company WHERE {?company wdt:P361 wd:Q30748112. ?company wdt:P1128 ?num} ORDER BY DESC(?num) LIMIT 3} ?company p:P2139 ?ps. ?ps ps:P2139 ?rev; pq:P585 ?time. FILTER(NOT EXISTS{?company p:P2139/pq:P585 ?time2 FILTER(?time2 > ?time)})}", "generated_sparql": ""}, {"question": "Wie lauten die Koordinaten von Shenzhen?", "gold_sparql": "SELECT  DISTINCT ?result WHERE {wd:Q15174 wdt:P625 ?result}", "generated_sparql": "SELECT ?c.value WHERE {\n  wd:Q132119 wdt:P8 ?c.\n  wd:Q724 ?c.\n}\nORDER BY (CRM_SPARQL(CONCAT(?, ' geht in ', ?c.value))) DESC\nLIMIT 1"}, {"question": "Was ist das Erlangen Programm?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q315296 wdt:P31 ?result}", "generated_sparql": "SELECT \\_Label <http://dbpedia.org/ontology/datatype/text>\nWhere {\n  ?o <http://dbpedia.org/type/entity/programme> ?g.\n  SERVICE wikibase:query {\n    bd:serviceParam wikibase:label '\\_Label'.\n  }"}, {"question": "Produzierte die Roland Corporation Synthesizers?", "gold_sparql": "ASK {?result wdt:P31 wd:Q163829; wdt:P176 wd:Q848490}", "generated_sparql": "SELECT ?item WHERE {\n    ?item wdt:P31 wd:Q760489.  # Roland Corporation\n    ?item wdt:P380 wd:Q76421.  # Sound synthesizer\n}"}, {"question": "Wie viele Personen besch\u00e4ftigt der Hafen von Rotterdam?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1027807 wdt:P1128 ?result}", "generated_sparql": "SELECT COUNT(*) AS people\nWHERE {\n  ?o <http://dbpedia.org/ontology/person/BirthPlace> ?b.\n  ?b <http://dbpedia.org/property/city> \"<https://de.wikipedia.org/wiki/Rotterdam>\".\n  ?o <http://dbpedia.org/ontology/person/BirthPlace> ?a.\n  SERVICE wikibase:label { bd:serviceParam <http://dbpedia.org/property/label/value> ?a }"}, {"question": "Was ist das Hauptthema des Manga \"your lie in april\": Sch\u00fcler von Grundschule, Realschule oder Gymnasium?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q11419997 wdt:P921 ?result. FILTER(?result IN (wd:Q16003605, wd:Q16003532, wd:Q15360275))}", "generated_sparql": "SELECT DISTINCT wdt:label?w WHERE {\n  w:Q12 <wdt:P31> ?w .\n  <wdp:P287> ?w .\n  ?w wdp:P306 <wdp:P412>.\n  FILTER(CONTAINS(wdp:P287, \"Manga: Sch\u00fcler von Grundschule, Realschule oder Gymnasium\") && CONTAINS(wdp:P412, \"your lie in april\"))\n}"}, {"question": "Was ist die Muttersprache der Autorin Chimamanda Ngozi Adichie?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q230141 wdt:P103 ?result}", "generated_sparql": "SELECT ?birthName ?motherTongue\nWHERE {\n  ?author wdt:P31 wd:Q1000.\n  ?birthName wdt:P36 ?motherTongue .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Wer war der Partner von Allen Ginsberg?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q6711 wdt:P451 ?result}", "generated_sparql": "SELECT ?partner\nWHERE {\n  ?individual wdt:P88 wd:Q96068.\n  ?individual wdt:P90 ?partner.\n}"}, {"question": "Wie hei\u00dft das zweite Spiel von Piranha Bytes?", "gold_sparql": "SELECT DISTINCT ?result WHERE{?result wdt:P178 wd:Q677273; wdt:P577 ?date} ORDER BY ASC(?date) OFFSET 1 LIMIT 1", "generated_sparql": "SELECT ?itemLabel ?languageLabel ?itemDescription WHERE {\n  ?item wdt:P31 wikibase:Q17279083.\n  OPTIONAL { ?item wdt:P398 ?itemData; scriptLang ?lang }"}, {"question": "Wie lautet die Fernsehsendung mit Rowan Atkinson, welche 4 Staffeln hatte und im Jahre 1983 startete?", "gold_sparql": "SELECT DISTINCT ?result WHERE{?result wdt:P31 wd:Q5398426; wdt:P161 wd:Q23760; wdt:P2437 ?season; wdt:P580 ?time FILTER((YEAR(?time) = 1983) && (?season = 4))}", "generated_sparql": "SELECT DISTINCT ?programme\nWHERE {\n  SERVICE wikibase:label {lang:de}"}, {"question": "Wie lautet der englische Spitzname von Ella Fitzgerald?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1768 wdt:P1449 ?result. FILTER(langMatches(lang(?result),\"en\"))}", "generated_sparql": "SELECT ?label WHERE { ?o ?p ?x . BIND (IF( Lang(?x) \"en\", ?x, \"\")) AS ?lang . FILTER(LANG(?label) = ?lang) . SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }"}, {"question": "Welche Berufe hat Kazuo Ishiguros Tochter?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q272855 wdt:P40 ?d. ?d wdt:P21 wd:Q6581072; wdt:P106 ?result}", "generated_sparql": "SELECT ?b.label WHERE {\n  ?o <b:V317 wd:Q20248783.\n  ?o <b:P114 ?b.?x.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Welche Berufe hatte Nat King Cole?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q137042 wdt:P106 ?result}", "generated_sparql": "SELECT ?b WHERE { ?s wdt:P31 ?b .\nWikidata:Freebase/m/034k6a666a63100001006d5 (Nat King Cole). }"}, {"question": "Was ist die offizielle Landessprache in Iran?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q794 wdt:P37 ?result}", "generated_sparql": "SELECT DISTINCT ?lang\nWHERE {\n   ?language wdt:hasName ?s .\n   SERVICE wikibase:label { bd:serviceParam wikibase:language \"de\". }"}, {"question": "Wie hoch ist die Bev\u00f6lkerungszahl von Freiburg?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q2833 wdt:P1082 ?result}", "generated_sparql": ""}, {"question": "Wie lautet der Titel des 2020 erschienenen Films mit Carey Mulligan als Hauptdarstellerin?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?movie wdt:P31 wd:Q11424; wdt:P161 wd:Q219655; wdt:P577 ?time; wdt:P1476 ?result FILTER(YEAR(?time) = 2020)}", "generated_sparql": "SELECT ?title\r\nWHERE {\r\n  ?film wd:P31 wd:Q776635.\r\n  ?film wd:P42 wd:Q3530936.\r\n  ?film wd:P36 ?title .\r\n  FILTER (REGEXP(?title, '[1-20]20'))\r\n}\r\nLIMIT 1"}, {"question": "Was produziert Ray-Ban haupts\u00e4chlich?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q653941 wdt:P1056 ?result}", "generated_sparql": "SELECT ?label\nWHERE {\n  ?item wdt:P31 wd:Q14026480.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"de\". }"}, {"question": "Welche Sprache sprach der ber\u00fchmte K\u00f6nig, der auch Aristoteles Sch\u00fcler war?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q868 wdt:P802 ?king. ?king wdt:P97 wd:Q12097; wdt:P1412 ?result}", "generated_sparql": "SELECT `wdt:Label` WHERE {\n    `wdt:Label` ?x EN.\n    wdt:language ?x wd:WikibaseLanguageLabel .\n    ?x wd:hasSibling [ wdt:Language ?s ] .\n    (SELECT wd:Label WHERE { wd:item [ wd:hasSibling ?s ] } LIMIT 1 OFFSET 2"}, {"question": "Welche Sprache wird in Polen gesprochen?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q36 wdt:P2936 ?result}", "generated_sparql": "SELECT label WHERE {\n  ?s wdt:P131 wd:Q6056387.\n}"}, {"question": "Wie viele verschiedene Sprachen werden in Westeuropa gesprochen?", "gold_sparql": "SELECT (COUNT (DISTINCT ?lan) AS ?result) WHERE {wd:Q27496 wdt:P527/wdt:P2936 ?lan}", "generated_sparql": "SELECT COUNT(DISTINCT ?language) AS num_languages\nWHERE {\n  ?language wd:label \"Westeuropa\" @base \"http://dbpedia.org/ontology/\".\n}\nGROUP BY ?language;"}, {"question": "Ist Deutschland gr\u00f6\u00dfer als Polen?", "gold_sparql": "ASK {wd:Q183 p:P2046/psn:P2046/wikibase:quantityAmount ?ag. wd:Q36 p:P2046/psn:P2046/wikibase:quantityAmount ?ap FILTER(?ag > ?ap)}", "generated_sparql": "SELECT (COUNT(*) > 37274) AS isGreaterThanPoland\nWHERE\n{\n wd:Q16 wd:P31 wd:Q931.\n  wd:P31 wd:Q66296.\n  wd:P31 wd:Q104786.\n  wd:P31 wd:Q103757.\n  wd:P31 wd:Q93105.\n  wd:P31 wd:Q16.\n  wd:P2 wd:Q664766.\n  wd:P31 wd:Q4.\n  wd:P31 wd:Q13.\n  wd:P400 wd:Q102388.\n  wd:P400 wd:Q105689.\n  wd:P400 wd:Q92859.\n  wd:P400 wd:Q1068249.\n  wd:P31 wd:Q13.\n  wd:P2 wd:Q114428.\n  wd:P400 wd:Q93097.\n  wd:P400 wd:Q1018419.\n}"}, {"question": "Aus welchen Noten besteht ein C-Dur Akkord?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q55706505 wdt:P527 ?result. ?result wdt:P31 wd:Q263478}", "generated_sparql": "SELECT ?x ?b WHERE {\n  ?x wdt:P31 wd:Q1 (SELECT ?o WHERE { SELECT ?o WHERE { wd:Q1 ?x ?o }"}, {"question": "Wie viele verschiedene Berufe \u00fcben/\u00fcbten die Ehepartner von Gewinnern des Literatur-Nobelpreises aus?", "gold_sparql": "SELECT (COUNT (DISTINCT ?occ) AS ?result) WHERE {?winner wdt:P166 wd:Q37922; wdt:P26/wdt:P106 ?occ}", "generated_sparql": "SELECT COUNT(DISTINCT wd:P1) AS num_careers\nFROM <http://dbpedia.org/ontology/>\nWHERE {\n    wd:Q Wikidata:Q \"Literatur-Nobelpreis\";\n    wd:P1 ?pred.\n    ?pred <http://purl.org/coco/0579/> \"Ehepartner\";\n    ?pred FOAF:name ?partner.\n    ?partner <http://dbpedia.org/ontology/>.\n    ?partner wd:P3 ?career.\n    ?career <http://purl.org/coco/0579/> \"Beruf\";\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\"; }"}, {"question": "Wie viele anderen Videospiele wurde im gleichen Jahr wie Dead by Daylight ver\u00f6ffentlicht?", "gold_sparql": "SELECT (COUNT (DISTINCT ?game) AS ?result) WHERE {?game wdt:P31/wdt:P279* wd:Q7889; wdt:P577 ?gameTime. wd:Q24514682 wdt:P577 ?dbdtime. FILTER((YEAR(?gameTime) = YEAR(?dbdtime)))}", "generated_sparql": "SELECT COUNT(*) AS released_in_same_year WHERE {\n  ?game wdt:P31 wd:Q797207.\n  ?release_date <- \"2013-06-06\".\n  ?game_release_date <- ?release_date.\n  ?game wdt:P31 wd:Q6588.\n  ?release_date = \"2013-06-06\".\n} GROUP BY wd:Q797207"}, {"question": "Welche anderen Zivilisationen existierten zeitgleich zu den Azteken?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31/wdt:P279* wd:Q8432; wdt:P580 ?start; wdt:P582 ?end. wd:Q12542 wdt:P580 ?ast; wdt:P582 ?aet. FILTER(?start < ?aet && ?end > ?ast && ?result != wd:Q12542) }", "generated_sparql": "SELECT ?zivilisation WHERE {\n  ?zivilisation wdt:P31 wd:Q18921. # Civilization\n  ?zivilisation wdt:P39 wd:Q90097. # Ancient civilization\n  FILTER(CONTAINS(str(?zivilisation), \"Azteken\") && !CONTAINS(str(wd:Q18921), \"Azteks\"))\n} GROUP BY ?zivilisation HAVING COUNT(*) = 1\n```\nSie bezieht sich auf die Faktentypen `P31` (eine Instanz von `wd:Q18921` ist eine Civilisation) und `P39` (ein Beispiel von `wd:Q90097` ist eine Antike Zivilisation), sowie auf die Filterfunktion `CONTAINS` (sie beinhaltet den Text \"Azteken\") und `NOT CONTAINS` (sie beinhaltet den Text \"Azteks\") f\u00fcr die Entfernung dieses Namens. Dadurch werden alle Zivilisationen ausgew\u00e4hlt, die zeitgleich zu den Azteken existierten."}, {"question": "Welche Marke benutzt Vaseline?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P1056 wd:Q457239; wdt:P31/wdt:P279 wd:Q431289}", "generated_sparql": "SELECT DISTINCT ?brand WHERE {\n  ?brand wdt:P19 a wd:Q1231.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Wie viele andere Musikfilme kamen im gleichen Jahr wie Grease heraus?", "gold_sparql": "SELECT (COUNT (DISTINCT ?result) AS ?resultCnt) WHERE {?result wdt:P31/wdt:P279* wd:Q11424; wdt:P136 wd:Q842256; wdt:P577 ?date. wd:Q267721 wdt:P577 ?dateG FILTER((YEAR(?date)=YEAR(?dateG)) && (?result != wd:Q267721))}", "generated_sparql": ""}, {"question": "Welcher Erfinder von The QA wirkte auch bei selbigem als Schauspieler mit?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q19798744 wdt:P170 ?result; wdt:P161 ?result}", "generated_sparql": "SELECT * \nFROM wikibase: LabeledInterfaceLink WHERE { wikibase:label wd:Q14702689 [en] \"The QA\" }"}, {"question": "Auf welchen Alben kam Atif Aslam vor?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q482994; wdt:P175 wd:Q755830}", "generated_sparql": "SELECT DISTINCT ?album WHERE {\n  ?album wdt:P344 ?b.\n  SERVICE wikibase:label WHERE {\n    ?b wdt:P31 wik:Q910.\n  }"}, {"question": "Was war Ada Lovelaces Adelstitel?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q7259 wdt:P97 ?result}", "generated_sparql": "SELECT ?s ?p ?o WHERE {\n  ?s ?p ?o ;\n  SERVICE wikibase:label {bd:serviceParam wikibase:language \"en\"}"}, {"question": "Wovon war Janus der Gott?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q167685 wdt:P2925 ?result}", "generated_sparql": "SELECT ?label\nWHERE {\n  ?author wdt:P48 [ wdt:P133 ?gardener ] .\n  ?gardener wdt:P157/wdt:P132 ?goddess .\n  ?goddess wdt:P31 wd:Q24504224 .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Welcher Hobbit war ein Feind Frodos?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q177329 wdt:P7047 ?result. ?result wdt:P31 wd:Q74359}", "generated_sparql": "SELECT wd:label ?hobbit\nWHERE {\n  {\n    SELECT wd:label\n    WHERE {\n      wd:P489 [wd:value \"Frodos\"].\n      wd:P1979 ?hobbit.\n    }"}, {"question": "Welches war das letzte Gem\u00e4lde, das Van Gogh gemalt hat?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q3305213; wdt:P170 wd:Q5582; wdt:P571 ?date} ORDER BY DESC(?date) LIMIT 1", "generated_sparql": "SELECT ?s WHERE { ?a wikibase:artist ?s . ?s wikibase:category wd:Category/Gem\u00e4lde . ?s wikibase:category wd:Category/Paint . ?s wikibase:date ?s ?s ?s ?s ?s ?s ?s ?s ?s ?s ?s ?s ?s ?s ?s ?s ?s ?s ?s ?s ?s ?s ?s ?s ?s ?s ?s ?s ?s ?s } ORDER BY ?s DESC LIMIT 1"}, {"question": "Wie lautete das Hauptthema des Deep Purple Lied \"Smoke on the water\"? ", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q636399 wdt:P921 ?result}", "generated_sparql": ""}, {"question": "Wann gab es die ersten Pottwale?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q81214 wdt:P580 ?result}", "generated_sparql": "SELECT ?itemLabel \nWHERE {\n\t?item wdt:P31 wd:Q2256.\n\tSERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "In welchem Jahr fiel die Berliner Mauer?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q5086 wdt:P576 ?time BIND(YEAR(?time) AS ?result)}", "generated_sparql": "SELECT \\_b.value WHERE {\n  \\_b:wikiDataItem wikidata\\_item\\_id:Q105558565.\n  \\_b:dataValue \\_b:value.\n}"}, {"question": "In welchem Jahr wurde Riverdale zum ersten Mal ausgestrahlt?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q23001951 wdt:P580 ?time. BIND(YEAR(?time) AS ?result)}", "generated_sparql": "SELECT ?year WHERE { \n    ?s wdt:P31 wd:Q176158.  # Riverdale\n    ?s wdt:P432 ?year.  # release year\n} ORDER BY ?year ASC LIMIT 1"}, {"question": "Wann starb Allen Ginsberg?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q6711 wdt:P570 ?result}", "generated_sparql": "SELECT ?o ?gw ?cw ?cLabel\nWHERE {\n  bd:serviceParam wikibase:language \"en\".\n  bd:serviceParam dbpedia:namespace \"http://dbpedia.org/ontology/\".\n  SELECT DISTINCT bd:serviceParam ?o ?gw ?cw ?cLabel\n  WHERE {\n    ?gw wikibase:wiki ?w.\n    wikibase:label wikibase:serviceParam ?cw.\n    wikibase:label ?cLabel.\n    ?o ?gw wikibase:interlink bd:serviceParam ?w.\n    ?o wikibase:label bd:serviceParam ?cLabel.\n    OPTIONAL { ?o == wd:Allen_Ginsberg }"}, {"question": "Wann starb Ella Fitzgerald?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1768 wdt:P570 ?result}", "generated_sparql": "SELECT ?label ?birthPlace WHERE {\n  ?person wdt:P159 wd:Q14432108.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Wann begann der erste Mensch das Bouldern?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q852989 wdt:P571 ?result}", "generated_sparql": "SELECT ?startDate\nWHERE {\n  # Look up the property \"bouldern:begins\" in Wikidata using SPARQL\n  ?person wdt:P36 wd:Q3121.\n  ?person wdt:PnQ ?startDate wdt:P36.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }"}, {"question": "Wann wurde Pakistan unabh\u00e4ngig?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q843 wdt:P571 ?result}", "generated_sparql": "SELECT ?x ?xLabel WHERE {\n  ?x wd:P31 wd:Q938.\n  ?x wikibase:P420 ?date.\n  FILTER(CONTAINS(str(?date), '14-Aug-1947'))\n  SERVICE wikibase:label ?xLabel { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Wann starb Rumi?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q43347 wdt:P570 ?result}", "generated_sparql": "SELECT wdt:label\nWHERE {\n    ?page wd:type wdt:Q1067881897. ;\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Wann starb der Bruder des Autoren von Slaughterhouse Five?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q265954 wdt:P50/wdt:P3373 ?bro. ?bro wdt:P21 wd:Q6581097; wdt:P570 ?result}", "generated_sparql": "SELECT ?date WHERE {\n  wd:P2342 ?author.\n  wd:P2342 ?book.\n  wd:P369 ?book ?date\n  FILTER(REGEXP(?book, 'Slaughterhouse\\sFive\\s'))\n}"}, {"question": "Wann ist der Sch\u00f6pfer von Saturday Night Live geboren?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q13979 wdt:P170/wdt:P569 ?result}", "generated_sparql": "SELECT ?creator WHERE { ?creator wdt:P119 wd:Q2324044. }"}, {"question": "Wer war Teilnehmer des Hambacher Fest?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q551416 wdt:P710 ?result}", "generated_sparql": "SELECT?s.?, wdt:PS54.?wd WHERE {\n    ?s wdt:PS54 wd:Q17364062.\n}"}, {"question": "Wann erschien The QA zum ersten Mal?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q19798744 wdt:P580 ?result}", "generated_sparql": "SELECT ?qap_id ?qap_statement ?qap_label WHERE {\n  ?qap_id wd:Q3265018.\n  wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Wie viele Opfer sind Resultat des Nordirlandkonflikts?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q815436 wdt:P1120 ?result}", "generated_sparql": "SELECT COUNT(*) ?count WHERE {\n  ?item wdt:P131 wd:Q44149.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Wann wurde die Weimarer Republik ausgerufen?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q41304 wdt:P571 ?result}", "generated_sparql": "SELECT ?date WHERE {\n  @prefix dbo: <https://dbpedia.org/ontology/>\n  ?a dbo:type dbo:WeimarerRepublik.\n  ?a dbo:announced ?date\n}"}, {"question": "Wann endete der zweite Weltkrieg offiziell?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q362 wdt:P582 ?result}", "generated_sparql": "SELECT DATE_FORMAT(bd:startOfEvent, '%Y-%m-%d') AS end_date\nFROM <https://dbpedia.org/property/dbo:endOfEvent>\nWHERE {\n  ?event bd:isInstance [rdf:type wdt:Period] &&\n             bd:name ?name &&\n             bd:startOfEvent ?startOfEvent.\n  {\n    SELECT DATE_FORMAT(wdt:inInterval(?, 'P' || COALESCE(LEN(str(wdt:beforeInstant([wdt:inInterval(?, 'P' || COALESCE(LEN(str(wdt:beforeInstant([wdt:inInterval(@graph a, wdt:inInterval(?, 'P' || COALESCE(LEN(str(wdt:beforeInstant(@graph a, wdt:inInterval({ wdt:inInterval(?, 'P' || COALESCE(LEN(str(wdt:beforeInstant[@graph a, wdt:inPeriod(wdt:endOfEvent, wdt:inInterval(?item, 'P' || COALESCE(LEN(str(wdt:endOfEvent), 1))))))))))))))))))))))))))))))) \n    WHERE\n      {\n        SELECT DATE_FORMAT(wdt:endOfEvent, '%Y-%m-%d') \n        FROM <https://dbpedia.org/property/dbo:endOfEvent>\n        WHERE {\n          ?event bd:instance ?graph\n          FILTER(CONTAINS(dbo:name(?event), 'world war II'))\n        }\n        ORDER BY DATE_FORMAT(wdt:endOfEvent, '%Y-%m-%d').\n      }\n  LIMIT 1"}, {"question": "Wann war die erste Ironman Weltmeisterschaft?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q1420480 wdt:P571 ?result}", "generated_sparql": ""}, {"question": "Wann wurde das Magazin gegr\u00fcndet, in dem Hunter x Hunter ver\u00f6ffentlich wurde?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q696071 wdt:P1433 ?mag. ?mag wdt:P31/wdt:P279* wd:Q41298; wdt:P571 ?result}", "generated_sparql": ""}, {"question": "Wann erschien der Film Red Notice?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q58815001 wdt:P577 ?result}", "generated_sparql": "SELECT DISTINCT ?date ?title WHERE {\n  ?film dbo:releaseDate ?date ;\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"de\". }"}, {"question": "Wann wurde der K\u00f6lner Dom erbaut?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q4176 wdt:P571 ?result}", "generated_sparql": "SELECT ?year \nWHERE {\n  wd:Q777 ?title ?lang1.\n  ?title wdt:P31 wd:Q633.\n  ?title wdt:P340 ?year.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[en,de]\". }"}, {"question": "Was kann man gegen Gicht machen?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q133087 wdt:P2176 ?result}", "generated_sparql": "SELECT ?predicate ?value\nWHERE {\n  ?s wdt:P295 ?predicate .\n  ?s wdt:WikibaseLabel { bd:serviceParam wikibase:language \"de\". }"}, {"question": "Wann wurde HIV zum ersten Mal erkannt?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q15787 wdt:P575 ?result}", "generated_sparql": "SELECT rdf:label WHERE {\n  wd:Q3 wikibase:label \"HIV\" ;\n  wikibase:property rdf:type wikibase:Moniker ;\n  wikibase:property wikibase:language \"en\" ;\n  wikibase:property wikibase:value \"Human Immunodeficiency Virus\" .\n}"}, {"question": "Wann wurde der erste Artikel \u00fcber die Liquid State Machine ver\u00f6ffentlicht?", "gold_sparql": "SELECT DISTINCT ?result WHERE{?art wdt:P31/wdt:P279* wd:Q191067; wdt:P921 wd:Q6557482; wdt:P577 ?result} ORDER BY ASC(?result) LIMIT 1", "generated_sparql": ""}, {"question": "Wann wurde Marlene Dietrich geboren?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q4612 wdt:P569 ?result}", "generated_sparql": "SELECT ?birthDate WHERE {\n   ?person wdt:P31 wd:Q12760.\n   ?person wdt:P493 ?birthDate.\n   SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n   VALUES (?person wikibase:label)"}, {"question": "Wann wurde Penicillin entdeckt?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q12190 wdt:P575 ?result}", "generated_sparql": "SELECT ?year \nWHERE { \n  ?compound wd:P490 wd:Q1271.  # Penicillin\n  wd:P306 ?year.  # Discovery year\n  wd:Q715 ?type.  # Bacterium or yeast\n  FILTER (CONTAINS(?type, \"Bacterium\") && ?type = \"Streptomyces\")\n}"}, {"question": "Wann wurde Rumi geboren?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q43347 wdt:P569 ?result}", "generated_sparql": "SELECT ?birth_date\nWHERE {\n  ?person wdt:P31 wikibase:Q579697.       #Rumi\n  ?person wdt:P479 wd:Q2008.         #geboren op het datum van\n  ?birth_date ?person wdt:P490 ?date.      #Wikibase:geboortedatum\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"de\". }"}, {"question": "Wann begann die Romantik?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q37068 wdt:P580 ?result}", "generated_sparql": "SELECT ?startDate\nWHERE {\n    ?startDate wd:P31 wd:Q2229.\n    SERVICE wikibase: label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Wann wurde Echo Musikpreis abgeschafft?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q703237 wdt:P576 ?result}", "generated_sparql": "SELECT ?property ?values ?label WHERE {\n  # Query using the Wikidata DBPedia service endpoint\n  SERVICE dbo:dbpedia-service { bd:serviceParam dbpedia:namespace \"http://dbpedia.org/ontology/\" }"}, {"question": "Wann erschien das erste Album der Band Typhoon?", "gold_sparql": "SELECT DISTINCT ?result WHERE{?alb wdt:P31 wd:Q482994; wdt:P175 wd:Q7861093; wdt:P577 ?result} ORDER BY ASC(?result) LIMIT 1", "generated_sparql": "SELECT DATE( ?x1.date ) WHERE {\n  ?x1 wdt:P102 ?date.\n  ?x1 dbo:firstMemberOf wd:Q38209.\n}"}, {"question": "Wann wurde der Hamburger Flughafen eingeweiht?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q27706 wdt:P571 ?result}", "generated_sparql": "SELECT ?date \nWHERE { \n  wd:Q144 wd:P499 \"<http://dbpedia.org/resource/Hamburg_Airport>\". \n  ?date wd:P566 \"<http://dbpedia.org/resource/Hamburg_Airport>\".\n}"}, {"question": "Wann wurde die Hamburger S-Bahn offiziell er\u00f6ffnet?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q693956 wdt:P1619 ?result}", "generated_sparql": "SELECT ?date ?description\nWHERE {\n  ?project wdt:P31 wd:Q7229369.\n  ?project wdt:P369 ?date ?description\n}"}, {"question": "Wann wurde der Hamburger Jazzclub Birdland gegr\u00fcndet? ", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q800176 wdt:P571 ?result}", "generated_sparql": "SELECT ?date\nWHERE {\n  ?artist wdt:P39 wd:WikibaseItem.\n  ?artist dbp:name ?name.\n  FILTER(str(?name) LIKE '%Hamburger Jazzclub Birdland%').\n  ?artist dbo:birthPlace ?place.\n  FILTER(str(?place) LIKE '%Hamburg%').\n  ?date wdt:P49 ?birthdate.\n  FILTER(str(?birthdate) LIKE '19%').\n}"}, {"question": "Wann wurde das Gedicht Howl geschrieben?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q1545259 wdt:P571 ?result}", "generated_sparql": "SELECT ?date\nWHERE {\n  ?item wikibase:item ?itemLabel.\n  ?item dbo:workOfLiterature ?work.\n  ?work dbp:poem ?poem.\n  ?poem dbp:writtenBy ?author.\n  ?author dbo:birthPlace <http://dbpedia.org/ontology/Place/London>.\n  ?author dbo:birthPlace ?birthPlace.\n  filter(str(?birthPlace) = 'London')\n  SERVICE wikibase:label { bd:serviceParam wikibase:language 'en'. }"}, {"question": "Wann wurde die Universit\u00e4t Cambridge gegr\u00fcndet?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q35794 wdt:P571 ?result}", "generated_sparql": "SELECT DESCRIPTION{?x wdt:P31 wd:Q541037}"}, {"question": "Wann wurde die Universit\u00e4t Hamburg gegr\u00fcndet?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q156725 wdt:P571 ?result}", "generated_sparql": ""}, {"question": "Wann wurde die University of Saskatchewan gegr\u00fcndet?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q1514848 wdt:P571 ?result}", "generated_sparql": "SELECT ?date\nWHERE {\n   ?University wdt:P7 <http://www.wikidata.org/wiki/University_of_Saskatchewan> .\n   {\n      BIND (('1897-09-01' AS ?date).format('yyyy-MM-dd') AS ?date)\n   }"}, {"question": "Wann wurde Vatikan Stadt geschaffen?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q237 wdt:P571 ?result}", "generated_sparql": "SELECT ?s ?p ?l \nWHERE {\n  ?s wdt:P31 wd:Q14753.\n  ?s ?p ?l\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[en]\" }"}, {"question": "Wann wurde die United Fruit Company gegr\u00fcndet?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q1771942 wdt:P571 ?result}", "generated_sparql": ""}, {"question": "Wo starb Trotzki?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q33391 wdt:P20 ?result}", "generated_sparql": "SELECT * WHERE { ?x wdt:P1285 [ wdt:P31 wd:Q44. }"}, {"question": "Wo spielen sowohl Der Ruf der Wildnis als auch Wolfsblut, die ber\u00fchmtesten Werke von Jack London?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q476871 wdt:P840 ?result. wd:Q152267 wdt:P840 ?result}", "generated_sparql": "SELECT wd:title ?title \nWHERE {\n  wd:P49 wd:Q317585.    # Der Ruf der Wildnis\n  wd:P49 wd:Q11494.    # Wolfsblut\n  wd:P31 wd:Q329.       # Werk\n  wd:P149 wd:Q648751525. # London\n  wd:P290 wd:Q648751529.   # Famous\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Wo fand das Hambach Festival statt?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q551416 wdt:P276 ?result}", "generated_sparql": "SELECT DISTINCT ?city\nWHERE {\n  ?place wdt:P31 wdt:P170.\n  ?Place dbo:placeLabel ?placeLabel.\n  FILTER(?placeLabel LIKE '%Hambach Festival%')\n  UNION {\n    <http://dbpedia.org/ontology/database/QueryServiceIQ.sparql> ?query_result {\"question\":\"Wo fand das Hambach Festival statt?\"}"}, {"question": "Wie lautet der Schauplatz Herr der Ringe Romane?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q15228 wdt:P840 ?result}", "generated_sparql": "SELECT ?label WHERE {\n  ?s <dbo:published> \"1891\".\n  ?s dbp:hasLabel ?label.\n}\nGROUP BY ?label\nHAVING COUNT(*) = 1"}, {"question": "Woher stammt der Nutri-Score?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q46577569 wdt:P495 ?result}", "generated_sparql": "SELECT ?wdt:WikibaseLabel\nWHERE {\n  ?p wdt:P1_1 wdt:wds/?wdt:P643.\n  SERVICE wikibase:label { bd:serviceParam wdt:label { bd:language \"en\". }"}, {"question": "Existieren mindestens zwei Gewinnerinnen des Oscars f\u00fcr die beste Hauptdarstellerin, welche am gleichen Institut unterrichtet wurden?", "gold_sparql": "ASK{?act wdt:P166 wd:Q103618; wdt:P69 ?result. ?act2 wdt:P166 wd:Q103618; wdt:P69 ?result FILTER(?act != ?act2)}", "generated_sparql": "SELECT * WHERE {\n    ?s wdt:P31 wd:Q8.\n    ?s wdt:P39 wd:Q192.\n    ?s wdt:P385 ?p.\n    ?p wdt:P170 ?o.\n    ?o wdt:P714 ?b.\n    FILTER(CONTAINS(?b, 'Oscar f\u00fcr die beste Hauptdarstellerin mit mehr als eine Nominierung'))\n    ?s wdt:P540 ?q.\n    ?q wdt:P31 wd:Q288693.\n} GROUP BY ?s, ?q Having COUNT(?) >= 2\n```\n\nThe query starts by selecting all instances of individuals that are actresses (wdt:P39) and female actors (wdt:P385) under the genre or category of movies (wdt:P31). It then filters for any individual who won an Oscar for best actress with more than one nomination (CONTAINS(?b, 'Oscar f\u00fcr die beste Hauptdarstellerin mit mehr als eine Nominierung')). It then selects the related person that teaches them (wdt:P540) and checks if they are a school or university. Finally, it groups the results by performer and the institution they teach at and returns a true value if at least two individuals have the same institution."}, {"question": "Wo wurde der K-Pop Star Lisa Manoban geboren?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q26707663 wdt:P19 ?result}", "generated_sparql": "SELECT ?person ?birthPlace\nWHERE {\n  ?person wdt:P2340 wd:Q18436061.      # K-Pop Star Lisa Manoban\n  ?person wdt:P429 wd:Q17539793.      # Born in\n  ?person wdt:P147 ?birthPlace.      # Place of birth\n}\nORDER BY ?birthPlace\nLIMIT 1"}, {"question": "Welcher Punkt ist der h\u00f6chste Punkt Norwegens?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q20 wdt:P610 ?result}", "generated_sparql": "SELECT MAX(wd:Punkt) AS highest_punkte \nWHERE {\n    wd:Punkt wg:Punkt <https://de.wikipedia.org/wiki/Punkte#Wikidata/> .\n    FILTER(lang(wd:Punkt) = 'de').\n}\nGROUP BY wd:Punkt"}, {"question": "Wo hat sich die psychodelische Band \"Khruangbin\" gegr\u00fcndet?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q54555985 wdt:P740 ?result}", "generated_sparql": "SELECT ?place WHERE {\n    wd:Q31 wd:P31 wd:Q1875043. # Khruangbin\n    ?place wd:P49 ?band. # Place where band is from\n    wd:P49 wd:Q97801143. # Band\n}"}, {"question": "Wo wurde C\u00e4sar ermordet?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1048 wdt:P20 ?result}", "generated_sparql": "SELECT wd:label[lang=\"en\"] AS location\nWHERE {\n  wd:label[lang=\"de\"] ?subject.\n  SERVICE wikibase:label {bdf:serviceParam wikibase:language \"en\".}"}, {"question": "Wo wurde Goethes unverheiratete Partnerin geboren?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q5879 wdt:P451/wdt:P19 ?result}", "generated_sparql": "SELECT ?individual ?birthplace ?birthdate WHERE {\n   ?individual wdt:P991 ?partner.\n   ?partner wdt:P31 wd:Q26229.\n   ?individual wdt:P31 wd:Q528.\n   ?individual wdt:P492 ?birthplace.\n   ?individual wdt:P522 ?birthdate\n} GROUP BY ?individual, ?birthplace, ?birthdate\nHAVING {?individual wdt:P103 ?partner}\nORDER BY ?birthplace, ?birthdate DESC\nLIMIT 1"}, {"question": "Wo wurde die Roland Corporation gegr\u00fcndet?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q848490 wdt:P740 ?result}", "generated_sparql": "SELECT ?company WHERE {\n  ?company wdt:P249 wd:Q1234999. # Roland Corporation\n  ?company wdt:P31 wd:Q96155. # Corporation\n  ?company wdt:P428 wd:Q213231. # Founded\n}"}, {"question": "Wo wurde der Autor von \"Der F\u00e4nger im Roggen\" geboren?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q183883 wdt:P50/wdt:P19 ?result}", "generated_sparql": "SELECT ?author WHERE {\n  wd:Q54719 wd:P31 wikibase:label.value{bd:language=\"de\"}"}, {"question": "Wer schrieb das Erlangen Programm?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P800 wd:Q315296}", "generated_sparql": "SELECT ?writer WHERE {\n  ?page wdt:P31 wd:Q470729.\n  ?page wdt:P426 ?writer.\n} LIMIT 1"}, {"question": "Welche Darsteller aus Free Guy spielte auch in Deadpool mit?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q38685497 wdt:P161 ?result. wd:Q19347291 wdt:P161 ?result}", "generated_sparql": "SELECT DISTINCT ?a ?aLabel\nWHERE {\n  # List all actors who played in Free Guy\n  ?a wdt:P31 wd:Q14446.\n  \n  # List all actors who played in Deadpool\n  ?a wdt:P31 wd:Q60832.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Welche amerikanische Pr\u00e4sident folgte den Fu\u00dfstapfen seines Vaters und wurde auch Pr\u00e4sident?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P39 wd:Q11696; wdt:P22/wdt:P39 wd:Q11696}", "generated_sparql": "SELECT ?president WHERE {\n    ?president wdt:P3 [wdt:P2 ?parent].\n    ?parent wdt:P3 ?president.\n    SERVICE wikibase:label { bd:language \"en\". }"}, {"question": "Welches Tier lebt wahrscheinlich l\u00e4nger, der Panda oder der Koala?", "gold_sparql": "SELECT DISTINCT ?result WHERE {BIND(IF(EXISTS{wd:Q33602 wdt:P4214 ?lp. wd:Q36101 wdt:P4214 ?lk FILTER(?lp > ?lk)},wd:Q33602,wd:Q36101)AS ?result)}", "generated_sparql": "SELECT ?a ?b ?c WHERE { ?a wdt:Panda. ?b wdt:Koala. ?a wdt:Panda ?c wdt:Koala. SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Welche Inselgruppe hat mehr Inseln, die Galapagosinseln oder die Hawaii-Inseln?", "gold_sparql": "SELECT DISTINCT ?result WHERE {{SELECT (COUNT (DISTINCT ?isl) AS ?gn) WHERE{wd:Q38095 wdt:P527+ ?isl. ?isl wdt:P31/wdt:P279* wd:Q23442}}{SELECT (COUNT (DISTINCT ?isl) AS ?hn) WHERE{wd:Q192626 wdt:P527+ ?isl. ?isl wdt:P31/wdt:P279* wd:Q23442}} BIND(IF(?hn > ?gn, wd:Q192626, wd:Q38095) AS ?result)}", "generated_sparql": ""}, {"question": "Yoko Ono war Teil welcher Kunstbewegung?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q117012 wdt:P135 ?result. ?result wdt:P31 wd:Q968159 }", "generated_sparql": "SELECT ?artist wdt:P139 ?artistLabel\nWHERE {\n  wd:Q48 ?artist wdt:P139 ?group.\n  ?group wdt:P31 wdt:52.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Welche Band wurde fr\u00fcher gegr\u00fcndet, Queen oder Pink Floyd?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q15862 wdt:P571 ?q. wd:Q2306 wdt:P571 ?p. BIND(IF((?q < ?p), wd:Q15862, wd:Q2306 ) AS ?result)}", "generated_sparql": "SELECT ?band\nWHERE {\n  ?band wd:P31 wd:Q2742.\n  SERVICE wikibase:label {\n    bd:serviceParam wikibase:language \"en\".\n  }"}, {"question": "Wodurch starb Kobe Bryant?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q25369 wdt:P509 ?result}", "generated_sparql": "SELECT ?cause WHERE {\n  ?athlete wdt:P11 [wd:value \"Kobe Bryant\"] .\n  ?athlete wdt:P247 [wd:value \"death\"] .\n  ?athlete wdt:P18 [wd:value \"cause\"] .\n  ?cause wdt:P31 [wd:value \"event\"] .\n  ?cause wdt:P42 [wd:value \"Kobe Bryant\"] .\n}"}, {"question": "Was sind die Gegenteile von Null?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q204 wdt:P461 ?result}", "generated_sparql": "SELECT ?label WHERE { ?x wd:P8 \"Null\". ?x wikibase:label ?label}"}, {"question": "Welche Firmen wurden von der Person gegr\u00fcndet, die die Leitung von Tesla hat?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q478214 wdt:P169 ?found. ?result wdt:P112 ?found; wdt:P31/wdt:P279* wd:Q4830453}", "generated_sparql": "SELECT label WHERE { wdt:P133 wd:Q27100. }"}, {"question": "Hat Deutschland seit 2010 ein Bev\u00f6lkerungszuwachs von mindestens 1 %?", "gold_sparql": "ASK {wd:Q183 p:P1082 ?ps10, ?psNew. ?ps10 pq:P585 ?t10; ps:P1082 ?p10. ?psNew pq:P585 ?tNew; ps:P1082 ?pNew BIND(((?pNew - ?p10) / ?p10) AS ?diff) FILTER((YEAR(?t10) = 2010) && NOT EXISTS{wd:Q183 p:P1082/pq:P585 ?tt FILTER(?tt > ?tNew)} && ?diff >= 0.01)}", "generated_sparql": "SELECT COUNT(DISTINCT wd:label) as Belege\nWHERE {\n bd:type wd:Q3435860.\n bd:start wd:Q1849898.\n bd:startLabel wd:Q8919574.\n bd:end wd:Q1849892.\n bd:endLabel wd:Q7966903.\n bd:p2049 wd:Q16105068.\n bd:change wd:Q6432858.\n bd:percentage100 wd:Q1072830.\n FILTER(bd:percentage100 >= 100)\n}\nORDER BY Belege DESC\nLIMIT 1"}, {"question": "Welches Flugger\u00e4t hat Howard Hughes gebaut?", "gold_sparql": "SELECT ?result WHERE {?result wdt:P31/wdt:P279* wd:Q11436; wdt:P178 wd:Q189081}", "generated_sparql": "SELECT ?itemLabel\nWHERE {\n  ?item wdt:P467 wd:Q938. # Howard Hughes\n  !?item wdt:P466 wd:Q221380. # Flugzeug\n      FILTER (REGEXP(str(?itemLabel), 'Howard\\\\.\\\\s+Hughes.*'))\n}\nORDER BY wd:P467 asc, rand()"}, {"question": "Welches Land hat mehr offizielle Sprachen: S\u00fcdafrika oder \u00c4thopien?", "gold_sparql": "SELECT DISTINCT ?result WHERE {{SELECT (COUNT (DISTINCT ?lanS) AS ?lanSCount) WHERE {wd:Q258 wdt:P37 ?lanS}} {SELECT (COUNT (DISTINCT ?lanE) AS ?lanECount) WHERE {wd:Q115 wdt:P37 ?lanE}} BIND(IF(?lanSCount > ?lanECount, wd:Q258, wd:Q115) AS ?result)}", "generated_sparql": "SELECT wd:title, COUNT(*) AS languages\nWHERE {\n  wd:country wd:name ?c.\n  wd:country dbo:hasLanguage ?l.\n  ?c wd:P31 wd:Q9035.\n  ?l wd:P31 wd:Q614.\n  OPTIONAL {\n    ?l wd:P530 ?s.\n    ?s wd:P31 wd:Q170809.\n    ?s wd:P39 ?a.\n    ?a ?l ?c.\n  }"}, {"question": "Ist Kehlgesang eine Tradition?", "gold_sparql": "ASK {wd:Q1067089 wdt:P31/wdt:P279* wd:Q82821}", "generated_sparql": "SELECT ?s ?p ?x WHERE {\n  ?s ?p wdt:P31 wd:Q1555005.\n  OPTIONAL {\n    ?s ?p wdt:P31 wd:Q1044285.\n  }"}, {"question": "Welche Krankheit f\u00fchrte zum Tod von Mark Twain?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q7245 wdt:P509 ?result. ?result wdt:P279* wd:Q12136}", "generated_sparql": "SELECT ?disease\nWHERE {\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Welche Krankheiten k\u00f6nnen durch Rauchen verursacht werden?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q662860 wdt:P1542 ?result. ?result wdt:P279* wd:Q12136}", "generated_sparql": "SELECT \\*\\*\nWHERE {\n  ?c wd:P43 ?d .\n  ?d wd:Q1271366.\n}"}, {"question": "Welches Genre, zu dem Cage the Elephant geh\u00f6rt, hat die wenigsten englischen Buchstaben?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q68061 wdt:P136 ?result. ?result rdfs:label ?label FILTER(langMatches(lang(?label),\"en\"))} ORDER BY ASC(strlen(?label)) LIMIT 1", "generated_sparql": "SELECT genres.genre.label {\n  SERVICE wikibase:label {\n    BASE <https://www.wikidata.org/beta/>\n  }"}, {"question": "Was ben\u00f6tigt weniger Platz, 1 kg Blei oder 1 kg Eisen?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q708 wdt:P2054 ?dl. wd:Q677 wdt:P2054 ?di. BIND(IF(?dl >= ?di, wd:Q708, wd:Q677) AS ?result)}", "generated_sparql": "SELECT ?v1 ?comparedTo ?lang ?value1 ?value2\nWHERE {\n    ?v1 wdt:P2796 [qb:value ?value1] ;\n    qbd:comparison/qb:equalTo/qbd:quantity ?comparedTo ;\n    qbd:quantity ?lang <http://dbpedia.org/property/qb/label/de>\n    ?comparedTo wdt:P2796 [qb:value ?value2] ;\n    ?v1 wdt:P2799 [qb:value ?value1] ;\n    qbd:quantity ?comparedTo [qb:value ?value2] ;\n    ?comparedTo qbd:quantity\n    ?comparedTo wdt:P4744.\n}"}, {"question": "Welches K\u00f6nigreich war der Vorg\u00e4nger des K\u00f6nigreichs Thonburi?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1115291 wdt:P1365 ?result. ?result wdt:P122/wdt:P279* wd:Q7269}", "generated_sparql": "SELECT ?kingdom\nWHERE {\n    ?kingdom wdt:P31 wd:Kingdom.\n    ?kingdom wdt:P664 rdfs:nothing.\n    ?kingdom wdt:P79 <https://dbpedia.org/resource/Thonburi>.\n    OPTIONAL {\n        ?kingdom wdt:P39 wd:Country.\n    }"}, {"question": "Wie viele Berge liegen in Deutschland?", "gold_sparql": "SELECT (COUNT (DISTINCT ?m) AS ?result) WHERE {?m wdt:P31 wd:Q8502; wdt:P17 wd:Q183}", "generated_sparql": "SELECT COUNT(*) as number_of_mountains_in_germany\nWHERE { service:dbpedia-owl:country ?c .\n        service:dbpedia-owl:name ?name .\n        ?name = \"Germany\" .\n        wd:Q624812 ?mountain .\n        wikibase:Label ?mountainLabel .\n        wikibase:language ?mountainLanguage .\n        SERVICE wikibase:label { bd:serviceParam wikibase:language \"de\". }"}, {"question": "Welchen Kunstbewegungen ist Les Demoiselles d\u2019Avignon zugeh\u00f6rig?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q910199 wdt:P135 ?result}", "generated_sparql": "SELECT ?label WHERE { ?owl:type wd:ArtWork. ?lesDemoisellesdAvignon wd:hasMovement ?movement. SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Welche Filme geh\u00f6ren zur Cornetto-Trilogie?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q169604 wdt:P527 ?result}", "generated_sparql": "SELECT ?film WHERE { ?wddb:P31 wd:Q1887715. ?wdc:D7 ?film. } GROUP BY ?film\n\nFilter:\n\nSELECT ?film WHERE { ?wddb:P31 wd:Q1887715. ?wdc:D7 ?film. } GROUP BY ?film\n\nResult:\n\n{\n\"Brief Inspiriert\": {\n\"@id\": \"http://dbpedia.org/resource/Brief_Inspired\",\n\"@type\": \"http://dbpedia.org/ontology/Database/Film\"\n},\n\"Todays Most Wanted\": {\n\"@id\": \"http://dbpedia.org/resource/Today%27s_Most_Wanted\",\n\"@type\": \"http://dbpedia.org/ontology/Database/Film\"\n},\n\"Die Entdeckte Welt\": {\n\"@id\": \"http://dbpedia.org/resource/Die_Entdeckte_Welt\",\n\"@type\": \"http://dbpedia.org/ontology/Database/Film\"\n}\n}"}, {"question": "W\u00e4hrend welches Ereignisses wurde der Four Policemen Rat vorgeschlagen?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q2945433 wdt:P607 ?result.}", "generated_sparql": "SELECT ?event\nWHERE {\n    ?event dbo:started ?startTime .\n    dbo:FourPolicemen dbo:conceived ?startTime;\n    ?event wdt:P45 wd:Q596.\n}\n\nORDER BY startTime"}, {"question": "Welche NBA Teams gewannen die meisten Saisons?", "gold_sparql": "SELECT DISTINCT ?result WHERE {{SELECT DISTINCT (COUNT(DISTINCT ?season) AS ?max) WHERE {?season wdt:P31 wd:Q27020041; wdt:P3450 wd:Q155223; wdt:P1346 ?result. ?result wdt:P31 wd:Q13393265} GROUP BY ?result ORDER BY DESC (?max) LIMIT 1} ?season wdt:P31 wd:Q27020041; wdt:P3450 wd:Q155223; wdt:P1346 ?result. ?result wdt:P31 wd:Q13393265.} GROUP BY ?result HAVING ((COUNT(DISTINCT ?season)) = MAX(?max))", "generated_sparql": "SELECT DISTINCT { wd:team.name ? wd:team.name }"}, {"question": "Welcher der Drachen in Game of Thrones starb?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31/wdt:P279* wd:Q30170627; wdt:P1441 wd:Q23572 FILTER(EXISTS{?result wdt:P20 _:ex})}", "generated_sparql": "SELECT DISTINCT wd:Q37_100\nWHERE {\n  wd:Q37_100 wd:Q18 wd:Q39_101.\n  wd:Q39_101 wd:Q40_101 wd:Q42_101/wd:Q66_103.\n}"}, {"question": "In welchen anderen Filmen vom selben Regisseur wie Der Rausch spielte Mads Mikkelsen ebenfalls mit?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q69303989 wdt:P57 ?dir. ?result wdt:P31 wd:Q11424; wdt:P57 ?dir; wdt:P161 wd:Q294647 FILTER(?result != wd:Q69303989)}", "generated_sparql": "SELECT DISTINCT wd:P259 ?s WHERE {\n  ?s wd:P232 \"Der Rausch\".\n  ?s wd:P259 ?actor.\n  ?actor wd:P31 wikibase:Q1531166.\n  ?actor wd:P43 ?mikkelsen.\n}"}, {"question": "Welche \u00e4gyptische Pyramide ist am h\u00f6chsten?", "gold_sparql": "SELECT DISTINCT ?pyr WHERE {?pyr wdt:P31/wdt:P279* wd:Q12516; p:P2048/psn:P2048/wikibase:quantityAmount ?h; wdt:P17 wd:Q79 } ORDER BY DESC(?h) LIMIT 1", "generated_sparql": "SELECT ?o ?oLabel WHERE {\n  ?o wdt:P151 ?x.\n  ?x wdt:P569 ?o.\n  ?o wdt:P112 ?x.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Was ist die offizielle Sprache in Taipeh?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1867 wdt:P37 ?result}", "generated_sparql": "SELECT ?lang\nWHERE {\n  ?s ?p ?o WHERE {\n    ?s wdt:P147 wd:P31 wdt:P11909.\n    FILTER(CONTAINS(str(?o), 'Taipeh'))\n  }"}, {"question": "Welche Sendungen liefen zum ersten Mal im gleichen Jahre als Saturday Night Live startete?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q13979 wdt:P580 ?snl. ?result wdt:P31 wd:Q5398426; wdt:P580 ?start. FILTER(YEAR(?snl) = YEAR(?start) && ?result != wd:Q13979)}", "generated_sparql": ""}, {"question": "Welche Lieder beinhaltete das Album Fijaci\u00f3n oral vol. 1?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P361 wd:Q828282; wdt:P31 ?o FILTER(?o IN (wd:Q105543609, wd:Q134556))}", "generated_sparql": "SELECT DISTINCT ?lied\nWHERE {\n  ?album dbo:name ?albumname;\n  ?album wdt:P31 wd:MusicAlbum;\n  ?lied wdt:P31 ?album;\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\"; }"}, {"question": "Welche Kunstbewegung begann zuerst, Impressionismus oder Expressionismus?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q40415 wdt:P571 ?imp. wd:Q80113 wdt:P580 ?exp. BIND(IF(?imp < ?exp, wd:Q40415, wd:Q80113) AS ?result)}", "generated_sparql": ""}, {"question": "In welchem US-Staat lebt Batman?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q2695156 wdt:P551/wdt:P131 ?result. ?result wdt:P31 wd:Q35657}", "generated_sparql": ""}, {"question": "Welcher Schwertk\u00e4mpfer aus Der Herr der Ringe war mit einer Halbelbin verheiratet und geh\u00f6rte zu den Waldl\u00e4ufern?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P106 wd:Q11397897; wdt:P26/wdt:P31 wd:Q2035494; wdt:P172 wd:Q2292830}", "generated_sparql": ""}, {"question": "Welche Mannschaften standen 2020 im Finale der UEFA Champions League?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q46569648 wdt:P1923 ?result}", "generated_sparql": "SELECT DISTINCT ?team\nWHERE {\n  ?team wdt:P11 dbo:Championship.\n  ?team wdt:P9 dbo:SportsTeam.\n  ?team dbo:name ?teamName.\n  CONTAINS(?teamName, \"2020 UEFA Champions League\").\n}"}, {"question": "Welche Universit\u00e4ten haben mehr als 200000 Studierende?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q3918; wdt:P2196 ?stu. FILTER(?stu > xsd:integer(\"200000\"))}", "generated_sparql": "SELECT DISTINCT ?university\nWHERE {\n  ?university wdt:P148 ?studentCount.\n  FILTER(?studentCount > 200000)\n}\nGROUP BY ?university"}, {"question": "Welche Universit\u00e4t wurde fr\u00fcher gegr\u00fcndet, die Oxford Universit\u00e4t oder Cambridge Universit\u00e4t?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q34433 wdt:P571 ?inco. wd:Q35794 wdt:P571 ?incc BIND(IF((?inco < ?incc), wd:Q34433, wd:Q35794) AS ?result)}", "generated_sparql": "SELECT ?label WHERE {\n  ?o wdt:P31 wd:Q672787. # Universitat\n  ?o wdt:P445 ?date. # Gr\u00fcndungsdatum\n  ?o wdt:P31 wd:Q631501. # Universit\u00e4t Cambridge\n  STRING(?date) = '<2000-01-01>'\n  UNION\n  ?o wdt:P31 wd:Q631501. # Universit\u00e4t Cambridge\n  STRING(?date) >='2000-01-01'\n  ?o wdt:P31 wd:Q672787. # Universitat Oxford\n} ORDER BY COUNT(*) DESC LIMIT 1"}, {"question": "Wer entwickelte WordNet?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q533822 wdt:P178 ?result}", "generated_sparql": "SELECT label WHERE {\n    ?w wdt:P31 wd:WordNet.\n}\nGROUP BY label\nHAVING COUNT(\\*) = 1"}, {"question": "Wer sind die Hauptdarstellerinnen in Portr\u00e4t einer jungen Frau in Flammen?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q63246568 wdt:P161 ?result. ?result wdt:P21 wd:Q6581072}", "generated_sparql": "SELECT DISTINCT ?p.title AS Hauptdarstellerinnen\nWHERE {\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Spielten Michael Jordan und Kobe Bryant f\u00fcr das selbe Team?", "gold_sparql": "ASK {wd:Q25369 wdt:P54 ?team. wd:Q41421 wdt:P54 ?team.}", "generated_sparql": "SELECT ?s\nWHERE {\n  ?x ?dbp:sportsPlayer. ?s ?dbo:birthPlace ?p.\n  ?s ?dbo:birthPlace ?b.\n  ?p ?dbp:sportsTeam ?x.\n  ?b ?dbp:sportsTeam ?y.\n  FILTER(CONTAINS(LOWER(?s), \"Michael Jordan\") && CONTAINS(LOWER(?y), \"Kobe Bryant\"))\n}"}, {"question": "Wer erfand die Turingmaschine?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q163310 wdt:P61 ?result}", "generated_sparql": "SELECT ?inventor\nWHERE\n{\n  ?inventor wdt:P31 wd:Q17343922. -- Turingmaschinenkonstrukteur\n  OPTIONAL {\n    ?inventor wdt:P449 ?date.\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Wann wurde das Hambacher Schlo\u00df erbaut?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q523286 wdt:P571 ?result}", "generated_sparql": "SELECT ?date \nWHERE {\n  bd:HambacherSchlo\u00df bd:type wdt:Building.\n  ?building bd:name bd:HambacherSchlo\u00df.\n  ?building ?date wdt:constructionStarted.\n}"}, {"question": "Wer starb am Nordpol?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q5; wdt:P20 wd:Q934}", "generated_sparql": "SELECT ?s\nWHERE {\n  ?s wdt:P828 ?o .\n  ?o wdt:P104 ?a .\n  ?a wdt:P147 \"North Pole\".\n}"}, {"question": "Wer f\u00fchrte Regie bei Anne with an E?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q28091065 wdt:P57 ?result.}", "generated_sparql": "SELECT ?agent WHERE {?agent wdt:P227 wd:Q65409817. }"}, {"question": "Wer schrieb \"Prototypical Networks for Few-shot Learning\"?", "gold_sparql": "SELECT DISTINCT ?result WHERE {{wd:Q44649835 wdt:P50 ?result.} UNION {wd:Q44649835 wdt:P2093 ?result}}", "generated_sparql": "SELECT ?author\nWHERE {\n    ?article wdt:P31 wd:Q149606. # Wikidata entity identifier for the book (\"Prototypical Networks for Few-shot Learning\")\n    ?author wdt:P431 ?article.\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Wer gr\u00fcndete Der Blaue Reiter?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q117035 wdt:P112 ?result}", "generated_sparql": "SELECT ?individual ?title FROM dbo:Artist WHERE { ?individual bd:Label \"Der Blaue Reiter\". }"}, {"question": "Wer hat die K\u00fcnstlerkolonie Worpswede gegr\u00fcndet? ", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q479361 wdt:P112 ?result}", "generated_sparql": "SELECT DISTINCT ?founder\nWHERE {\n  ?founder wdt:P31 wd:Q13847.  # K\u00fcnstlerkolonie Worpswede\n  wdt:P13 ?wdt8 ?founder.  # gegr\u00fcndet durch\n}"}, {"question": "Wer ist der Autor von \"Die Ladenh\u00fcterin\"?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q27863945 wdt:P50 ?result}", "generated_sparql": "SELECT ?author\nWHERE {\n  ?book dbo:title ?title.\n    SERVICE dbo:dbpediaService {\n      bd:serviceParam wd:language \"de\".\n      bd:serviceParam dbo:format \"text\".\n    }\n\n  VALUES (title -> LCASE(REGEXP_REPLACE(REGEXP_REPLACE(title, '[aei\u00f6AEIO\u00dc]', '')"}, {"question": "Welcher Fu\u00dfballspieler schoss die meisten Tore in seiner Karriere?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P106 wd:Q937857; wdt:P6509 ?goals} ORDER BY DESC(?goals) LIMIT 1", "generated_sparql": "SELECT ?player ?playerLabel WHERE {\n  ?player wdt:P497 wd:Q1728617.  # Fu\u00dfballspieler\n  ?player wdt:P482 ?totalGoals.  # Tore\n  ?player wdt:P454 ?team.  # Verein\n  FILTER(CONTAINS(?playerLabel, \"Fu\u00dfballer\"))  # Fu\u00dfballder\n} GROUP BY ?player ORDER BY ?totalGoals DESC LIMIT 1"}, {"question": "Wer ist der Sch\u00f6pfer der TV Show Die Dinos?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1211977 wdt:P170 ?result}", "generated_sparql": "SELECT ?creator\nWHERE {\n  ?show wd:P1 ?creator.\n  ?show wd:P30 \"Die Dinos\".\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Wer ist die aktuelle Pr\u00e4sidentin des Deutschen Bundestags?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q154797 wdt:P488 ?result}", "generated_sparql": "SELECT `?president` WHERE {\n  `?president wdt:P362 wd:Q11855.\n}"}, {"question": "Wer ist die reichste Entrepreneurin/der reichste Entrepreneur?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P2218 ?net; wdt:P106 wd:Q131524} ORDER BY DESC(?net) LIMIT 1", "generated_sparql": "SELECT label, wd:networth ?networth\nWHERE {\n  ?person wd:occupation :Entrepreneur.\n  ?person wd:birthPlace \"New York\". <!-- replace with the birth place of the person you want to find -->\n  OPTIONAL { ?person wd:networth ?networth }"}, {"question": "Wer ist die \u00e4lteste Person, welche in der Netflix Serie \"Queer Eye\" mitspielt?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q48817408 wdt:P161 ?result. ?result wdt:P569 ?time} ORDER BY ASC(?time) LIMIT 1", "generated_sparql": "SELECT ?person ?age\nWHERE {\n  # Query for all people who appeared in the Netflix series \"Queer Eye\"\n  ?person wdt:P31 wd:Q1204.\n  \n  # Get the current date and time in Unix timestamp format\n  $t := now() as xsd:integer.\n\n  # Calculate the age of the person based on their birth year and the current time\n  OPTIONAL {\n    ?person wdt:P498 ?birthYear.\n    ?person wdt:P522 ?birthMonth.\n    ?person wdt:P521 ?birthDay.\n    ?person wdt:P539 ?birthTime.\n    ?person wdt:P540 ?timeZoneOffset.\n    ?person wdt:P31 wd:Q429823. # Use ID for \"Person\"\n    ?date := YEAR(?birthYear) + \"-\" + MONTH(?birthMonth) + \"-\" + DAY(?birthDay) + \"T\" + ?birthTime + \":\" + ?timeZoneOffset + \"Z\" as xsd:datetime.\n    ?age := DATEDIFF(?t, ?date) as xsd:integer.\n  }"}, {"question": "Wer ist der Herausgeber von Smite?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q2357719 wdt:P123 ?result}", "generated_sparql": "SELECT ?p ?l ?o WHERE {\n  ?x wdt:P14 [ rdf:type rdf:resource.'https://www.w3.org/2000/01/rdf-schema#Editor'] .\n  ?x bd:label ?o .\n  service:info { bd:serviceParam wikibase:label \"Smite\" }"}, {"question": "Wer schrieb das Erlangen Programm?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P800 wd:Q315296}", "generated_sparql": ""}, {"question": "In welchem Land liegt der Nanga Parbat?", "gold_sparql": "SELECT DISTINCT ?result WHERE { wd:Q130736 wdt:P17 ?result. }", "generated_sparql": "SELECT ?location WHERE {\n  ?mountain wdt:P42 wd:Q1931436;\n  wdt:P18 ?location;\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Wer produzierte Star Wars: Episode VI - Die R\u00fcckkehr der Jedi-Ritter?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q181803 wdt:P162 ?result}", "generated_sparql": "SELECT ?actor ?lang WHERE{\r\n  ?actor wd:P31 wd:Q2447414. # Star Wars: \u00c9pisode VI - A New Hope (1977)\r\n  ?actor wd:P46 wd:Q62555590. # George Lucas\r\n  SERVICE wikibase:label { bd:serviceParam wikibase:language ?lang }"}, {"question": "Wer spielte in mehr Filmen mit, Daniel Day Lewis oder Paul Dano?", "gold_sparql": "SELECT DISTINCT ?result WHERE {{SELECT (COUNT (DISTINCT ?film) AS ?ddl) WHERE {?film wdt:P161 wd:Q166389; wdt:P31 wd:Q11424}} {SELECT (COUNT (DISTINCT ?film) AS ?pd) WHERE {?film wdt:P161 wd:Q343616; wdt:P31 wd:Q11424}} BIND(IF((?ddl > ?pd), wd:Q166389, wd:Q343616) AS ?result)}", "generated_sparql": "SELECT ?actor ?actorLabel WHERE {\n  ?actor wdt:P31 wd:Q680807.\n  ?actor wdt:P31 ?type.\n  ?type wdt:P31 wd:Q2.\n  ?type ?typeLabel.\n  OPTIONAL {\n    ?actor wdt:P132 ?otherActor.\n    ?otherActor wdt:P31 wd:Q28176.\n    ?otherActor wdt:P132 wd:Q682078.\n  }"}, {"question": "F\u00fcr welchen Literaturpreis war Simone de Beauvoir nominiert?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q7197 wdt:P1411 ?result. ?result wdt:P31 wd:Q378427}", "generated_sparql": "SELECT ?p ?v WHERE {\n  ?p wdt:Q118.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Wie lautet die Webseite von NPRs \"Tiny Desk Concerts\"?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q30588383 wdt:P856 ?result}", "generated_sparql": "SELECT ?url \nWHERE {\n  ?wikipage wd:P31 wd:Q32356334.  # NPR's Tiny Desk Concerts webpage\n  ?wikipage wd:P131 ?url.  # URL of the webpage\n}"}, {"question": "Wer war der Sch\u00f6pfer von Boo-Boo-Bear?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q2394280 wdt:P170 ?result}", "generated_sparql": "SELECT ?item ?label\n WHERE {\n ?item wdt:P31 wd:Q154316.\n ?item wdt:P180 ?value.\n ?value wdt:WG ?id.\n ?item wdt:P31 wd:Q31543948.\n ?id ?label\n SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Wer war der Sch\u00f6pfer von Unbreakable Kimmy Schmidt?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q16889037 wdt:P170 ?result}", "generated_sparql": "SELECT ?creator\nWHERE {\n  ?show wdt:P31 wd:Q5554666.\n  ?show wdt:P318 wd:Q5130.\n  ?creator wdt:P318 ?show.\n  ?creator wdt:P39 ?person.\n}"}, {"question": "Wer war der Regisseur von Llamas with Hats?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q55621114 wdt:P57 ?result}", "generated_sparql": ""}, {"question": "Wer hat die Roland Corporation gegr\u00fcndet?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q848490 wdt:P112 ?result}", "generated_sparql": "SELECT ?p ?ll ?b\nWHERE {\n    ?p wdt:P4 [ rdf:type wdt:Corporation, wdt:founder ?ll] .\n    ?ll wdt:P4 [ rdf:type wdt:Person, wdt:name ?b]\n}"}, {"question": "Wer war der urspr\u00fcngliche Schauspieler, der Pinhead spielte?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q2518973 wdt:P175 ?result}", "generated_sparql": "SELECT ?actor WHERE {\n  ?actor wdt:P188 ?person.\n  ?person wdt:P104 ?movie.\n  ?movie wdt:P249 \"Pinhead\".\n}"}, {"question": "Wer waren die Eltern von Sokrates?", "gold_sparql": "SELECT DISTINCT ?result WHERE {{wd:Q913 wdt:P25 ?result} UNION {wd:Q913 wdt:P22 ?result}}", "generated_sparql": "SELECT ?p0 ?p1\nWHERE {\n  ?s wdt:P1 ?p0 .\n  ?s wdt:P3 ?p1 .\n  FILTER(str(?p0) LIKE '%Socrates%' AND str(?p1) NOT LIKE '%Socrates%')\n}\nORDER BY ?p0 DESC, ?p1 DESC\nLIMIT 1"}, {"question": "Wer schrieb Anne auf Green Gables?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q565911 wdt:P50 ?result}", "generated_sparql": "SELECT ?author\nWHERE {\n  ?author auth.label ?label.text ;\n           wdt:P31 wd:Q739 ;\n           wdt:P533 wdt:Q1034 ;\n           wdt:P533 <https://en.wikipedia.org/wiki/Green_Gables#Author_and_publishers_1> ;\n           wdt:P737 ?subject ?subject <https://wiki.wikidata.org/entity/Q177582> .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Wer schrieb das Gedicht Howl?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1545259 wdt:P50 ?result}", "generated_sparql": "SELECT ?author.name WHERE {\n  ?author wdt:P31 [ wd:label \"author\" ];\n  ?author wdt:P144 ?poem_title;\n  ?poem_title wdt:P285 wd:Q261384; # \"Howl\"\n}"}, {"question": "Wer ist der Autor von The Hellbound Heart?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q3521239 wdt:P50 ?result}", "generated_sparql": "SELECT ?author ?label\nWHERE {\n  ?book wdt:P31 wd:Q282985.\n  wd:Q282985 bfo:author ?author.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Wen hat Clara Westhoff geheiratet?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q462333 wdt:P26 ?result}", "generated_sparql": "SELECT COUNT(*) ?count\nWHERE {\n  ?person wdt:P139 wd:P139/P247.\n  ?person wdt:P146 ?married.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Was ist das \u00e4lteste Film-Festival?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q220505; wdt:P571 ?inc FILTER(isLiteral(?inc))} ORDER BY ASC(?inc) LIMIT 1", "generated_sparql": "SELECT ?festival ?year\nWHERE {\n  ?festival wdt:P31 wd:Q584669. # Film-Festival\n  ?festival wdt:P370 bd:Q5619524.        # Berlinale\n  VALUES (?year) { SELECT MIN(? festival_year) WHERE { ?festival wdt:P538 ?festival_year}"}, {"question": "Wann wurde Athen gegr\u00fcndet?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1524 wdt:P571 ?result}", "generated_sparql": "SELECT ?year WHERE {\n  ?s wdt:P31 wd:Q6312612.\n  ?s wdt:P457 ?year.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Welcher Fluss ist l\u00e4nger, die Seine oder die Elbe?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1471 wdt:P2043 ?ls. wd:Q1644 wdt:P2043 ?le. BIND(IF((?ls > ?le), wd:Q1471, wd:Q1644) AS ?result)}", "generated_sparql": "SELECT DISTINCT ?r ?l FROM wikidata:Entity WHERE { wikidata:P36 ?r . }"}, {"question": "Welches Spiel wurde fr\u00fcher entwickelt, Super Mario Bros oder Pac-Man?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q11168 wdt:P577 ?cm. wd:Q173626 wdt:P577 ?cp. BIND(IF((?cm < ?cp), wd:Q11168, wd:Q173626) AS ?result)}", "generated_sparql": "SELECT ?game ?title\nWHERE {\n  ?game wd:P31 wd:Q656766.   # Super Mario Bros\n  ?game wd:P31 wd:Q1659545.   # Pac-Man\n  ?title ?language ?value.   # get title of game in english\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Wer ist das j\u00fcngste Mitglied von G-IDLE?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P463 wd:Q51885404; wdt:P569 ?date} ORDER BY DESC(?date) LIMIT 1", "generated_sparql": "SELECT ?member ?age \nWHERE {\n  ?member wdt:P31 wd:Q4074.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"de\". }"}, {"question": "Wer ist \u00e4lter, Lionel Messi oder Christiano Ronaldo?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q615 wdt:P569 ?number. wd:Q11571 wdt:P569 ?number2. BIND(IF(?number < ?number2, wd:Q615, wd:Q11571) AS ?result)}", "generated_sparql": "SELECT ?messiBirthdate, ?ronaldoBirthdate\nFROM <https://www.wikidata.org/query>\nWHERE {\n  ?messiWikidata WD:P11 dbo:BirthPlace \"Argentina\".\n  ?messiWikidata WD:P364 ?messiBirthdate.\n  \n  ?ronaldoWikidata WD:P11 \"Portugal\".\n  ?ronaldoWikidata WD:P364 ?ronaldoBirthdate.\n  \n  ?messiWikidata WD:P31 dbo:Person.\n  ?ronaldoWikidata WD:P31 dbo:Person.\n}\nORDER BY ?messiBirthdate, ?ronaldoBirthdate\nLIMIT 1"}, {"question": "Wurde die Universit\u00e4t Heidelberg oder die Universit\u00e4t Hamburg fr\u00fcher gegr\u00fcndet?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q151510 wdt:P571 ?number. wd:Q156725 wdt:P571 ?number2. BIND(IF(?number < ?number2, wd:Q151510, wd:Q156725) AS ?result)}", "generated_sparql": "SELECT ?x ?r ?y ?p ?o {\n  ?x wdt:P31 wd:Q656966.  # University of Heidelberg\n  ?x wdt:P536 ?p ?y.  # Founding date\n  ?y wdt:P539 ?o.  # Year\n  FILTER(?p = <http://dbpedia.org/ontology/foundingDate> AND ?o = <http://dbpedia.org/ontology/unknown.owl#xsd:gtd>)\n  UNION\n  ?x wdt:P31 wd:Q662259.  # University of Hamburg\n  ?x wdt:P536 ?p ?y.  # Founding date\n  ?y wdt:P539 ?o.  # Year\n  FILTER(?p = <http://dbpedia.org/ontology/foundingDate> AND ?o = <http://dbpedia.org/ontology/unknown.owl#xsd:gtd>)\n}\nGROUP BY ?p ?y\nORDER BY ?y DESC"}, {"question": "Welcher Wald ist gr\u00f6\u00dfer, der Amazonas-Regenwald oder das Kongobecken?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q177567 wdt:P2046 ?aa. wd:Q932289 wdt:P2046 ?ac. BIND(IF((?aa > ?ac), wd:Q177567, wd:Q932289) AS ?result)}", "generated_sparql": "SELECT wd:Q8, wd:P134, MIN(wd:P134) AS min_area\nFROM wikidata:Q8\nWHERE {\n  wd:S31 wd:P279 \"Amazon rainforest\".\n  wd:S31 wd:P279 \"Congo Basin rainforest\".\n}\nGROUP BY wd:Q8, wd:P134\nORDER BY min_area DESC\nLIMIT 2"}, {"question": "Hat Samsung Electronics oder Apple mehr Mitarbeiter?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q20718 wdt:P1128 ?se. wd:Q312 wdt:P1128 ?ae. BIND(IF((?se > ?ae), wd:Q20718, wd:Q312) AS ?result)}", "generated_sparql": "SELECT COUNT(*) as samsung_employees, COUNT(*) as apple_employees\nFROM dbpedia:WikiDataTable\nWHERE {\n  wdt:columnLabel \"label\" value \"Mitarbeiter, Gesamtzahl\", lang \"en\"\n  wdt:columnColumn \"wdt:P190\" ?s\n  UNION\n  wdt:columnLabel \"label\" value \"Mitarbeiter, Gesamtzahl\", lang \"en\"\n  wdt:columnColumn \"wdt:P191\" ?a\n}\nGROUP BY ?s ?a\nHAVING { ?s ?y wdt:P189 wdt:P217. } SERVICE <https://dbpedia.org/service/label/getLabel> { b ?y wikibase:language \"en\" }"}, {"question": "Welches Unternehmen wurde sp\u00e4ter gegr\u00fcndet, Samsung oder Sony?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q20716 wdt:P571 ?sa. wd:Q41187 wdt:P571 ?so. BIND(IF((?sa > ?so), wd:Q20716, wd:Q41187) AS ?result)}", "generated_sparql": "SELECT DISTINCT ?x ?y\nWHERE {\n    ?x wdt:P495 wd:Q15 ?y .\n    ?x wdt:P495 wd:Q1300 ?y .\n}"}, {"question": "Wer ist gr\u00f6\u00dfer, Lionel Messi oder Christiano Ronaldo?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q615 wdt:P2048 ?number. wd:Q11571 wdt:P2048 ?number2. BIND(IF(?number > ?number2, wd:Q615, wd:Q11571) AS ?result)}", "generated_sparql": "SELECT ?player ?age\nWHERE {\n  ?player wd:Q241.\n  ?player ?age wd:P31 ?birthday.\n  ?birthday bd:P31 bd:P848.\n  ?birthday bd:P308 ?height.\n  ?birthday bd:P131 ?weight.\n  ?height bd:P584 \"<200\".\n  ?weight bd:P584 \"<200\".\n  FILTER(?height > ?weight)\n}"}, {"question": "Wer hat mehr NBA Auszeichnungen, Michael Jordan oder Kobe Bean Bryant?", "gold_sparql": "SELECT DISTINCT ?result WHERE {{SELECT (COUNT (DISTINCT ?number) AS ?mj) WHERE {wd:Q41421 p:P166/ps:P166 ?number.}} {SELECT (COUNT (DISTINCT ?number2) AS ?kb) WHERE {wd:Q25369 p:P166/ps:P166 ?number2.}}  BIND(IF(?mj > ?kb, wd:Q41421, wd:Q25369) AS ?result)}", "generated_sparql": "SELECT COUNT(wd:Award) AS jordan_awards, \n       COUNT(wd:Award) AS bryant_awards\nFROM <https://wikidata.org/wiki/Special:Ask>\nWHERE {\n  ?s wd:P31 wd:Q8446746. # NBA player\n  OPTIONAL { ?s wd:Q104. # Michael Jordan\n             wd:P372 ?a.\n             OPTIONAL { ?a wd:Q31 wd:Q1. # NBA award\n                        wd:P623 ?b.\n                        ?b wd:Q623 wd:Q20678961. # NBA MVP\n             }"}, {"question": "Hat Michael Jordan jemals mehr gewogen als Kobe Bean Bryant?", "gold_sparql": "ASK {wd:Q41421 p:P2067/psn:P2067/wikibase:quantityAmount ?mj. wd:Q25369 p:P2067/psn:P2067/wikibase:quantityAmount ?kb. BIND(IF(?mj > ?kb, wd:Q41421, wd:Q25369) AS ?result)}", "generated_sparql": "SELECT ?j ?m ?v \nWHERE {\n  ?j wdt:P31 wd:Q1240058. # Michael Jordan\n  ?j wdt:P360 wd:Q24097146. # weight\n  ?m wdt:P31 wd:Q917862. # Kobe Bean Bryant\n  FILTER (regex(str(?j), '^(\\d+\\.\\d+) kg$') && regex(str(?m), '^(\\d+\\.\\d+) kg$')\n        && str(?j) != str(?m)).\n}"}, {"question": "Wer ist \u00e4lter, Sebastian Vettel oder Lewis Hamilton?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q42311 wdt:P569 ?bv. wd:Q9673 wdt:P569 ?bh. BIND(IF(?bv < ?bh, wd:Q42311, wd:Q9673) AS ?result)}", "generated_sparql": "SELECT ?vettel ?vettelLabel ?hamilton ?hamiltonLabel\nWHERE {\n  ?vettel dbpedia:birthPlace <https://dbpedia.org/resource/Burnsville_Minnesota%2C_Minnesota_United_States> .\n  ?vettel dbpedia:birthYear ?vettelAge .\n  ?hamilton dbpedia:birthPlace <https://dbpedia.org/resource/Kingston_upon_Thames%2C_Surrey_United_Kingdom> .\n  ?hamilton dbpedia:birthYear ?hamiltonAge .\n  FILTER (?vettelAge > ?hamiltonAge)\n  SERVICE wikidata:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Welche Stadt hat mehr Einwohner, Kopenhagen oder Amsterdam?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1748 wdt:P1082 ?popc. wd:Q727 wdt:P1082 ?popa. BIND(IF((?popc > ?popa), wd:Q1748, wd:Q727) AS ?result)}", "generated_sparql": "SELECT DISTINCT ?city\nWHERE {\n  # This query uses the property 'Population' from Wikidata\n  ?city wdt:P31 wb:Capital.      # Copenhagen is capital of Denmark, Amsterdam is capital of Netherlands\n  OPTIONAL { ?city wdt:P31 wd:City. }"}, {"question": "Wie viele Dinge sind Teil vom \"One Piece\" Franchise?", "gold_sparql": "SELECT (COUNT (DISTINCT ?part) AS ?result) WHERE {wd:Q673 wdt:P527 ?part}", "generated_sparql": ""}, {"question": "Wie viele fiktive weibliche Schwertk\u00e4mpfer gibt es?", "gold_sparql": "SELECT (COUNT (DISTINCT ?sf) AS ?result) WHERE {?sf wdt:P31/wdt:P279* wd:Q95074; wdt:P106 wd:Q11397897; wdt:P21 wd:Q6581072}", "generated_sparql": "SELECT COUNT(*) WHERE { wddb:WikidataStatement wd:type wikidata:Q13 }"}, {"question": "Welche Firma w\u00fcrde fr\u00fcher gegr\u00fcndet, Black Diamond Equipment oder La Sportiva?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q2905359 wdt:P571 ?incbd. wd:Q3821214 wdt:P571 ?incls. BIND(IF((?incbd < ?incls), wd:Q2905359, wd:Q3821214) AS ?result)}", "generated_sparql": "SELECT DISTINCT ?firm ?founds_at\nWHERE {\n\t?firm wdt:P31 wd:Q316.\n\t?firm wdt:P302 ?founds_at.\n\tSERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Welche W\u00fcste ist gr\u00f6\u00dfer, die Sahara oder die Arabische W\u00fcste?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q6583 wdt:P2046 ?as. wd:Q208299 wdt:P2046 ?aa. BIND(IF((?as > ?aa), wd:Q6583, wd:Q208299) AS ?result)}", "generated_sparql": "SELECT ?waste\nWHERE {\n  ?waste wdt:P118 wd:Q888567.  # Sahara desert\n  OPTIONAL {\n    ?waste wdt:P118 wd:Q11043.  # Arabian desert\n  }"}, {"question": "Wer lebt l\u00e4nger, Sirius Black oder Bellatrix Lestrange?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q713701 wdt:P570 ?ds. wd:Q1057918 wdt:P570 ?db. BIND(IF((?ds > ?db), wd:Q713701, wd:Q1057918) AS ?result)}", "generated_sparql": "SELECT ?a ?b \nWHERE {\n  ?a wd:name ?c .\n  ?c dbo:birthPlace dbo:London .\n  ?c dbo:deathPlace ex:none .\n}"}, {"question": "Wie gro\u00df ist die Gesamtfl\u00e4che der Gro\u00dfen Seen?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q7347 wdt:P2046 ?result}", "generated_sparql": "SELECT SUM(wd:P122) AS totalArea\nWHERE {\n    wd:Q141 wd:P31 wd:Q1594.\n    wd:Q1594 rdfs:type wd:Q56.\n}"}, {"question": "Wie lautet der japanische Name des Komponisten der japanischen Nationalhymne?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q17 wdt:P85/wdt:P86/wdt:P1559 ?result}", "generated_sparql": "SELECT ?label WHERE { ?label ?biz wdt:P31 bd:Q90672}"}, {"question": "Wer ist der Gr\u00fcnder der Hauptstadt von Vietnam?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q881 wdt:P36/wdt:P112 ?result}", "generated_sparql": "SELECT ?founder WHERE {\n  ?city wdt:P104 wd:Q1368509.\n  ?founder foaf:knows ?city.\n}"}, {"question": "Wer ist die Leiterin des Betreibers von Neumayer III?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q7933 wdt:P137/wdt:P1037 ?result}", "generated_sparql": "SELECT b.agent.label WHERE { b:Project wdt:P31 wd:Q545963. }"}, {"question": "Wie hoch ist der Berg auf dem G\u00fcnther Messner starb?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q195351 wdt:P20/wdt:P2044 ?result}", "generated_sparql": "SELECT MAX(?alt) as ?alt\nFROM Wikidata:Dbo.Berg\nWHERE {\n  ?berg wdt:name ?name ;\n  ?berg wdt:birthPlace ?place ;\n  REGEXP(?place, '/G\u00fcnther Messner/') as _match ;\n  { SELECT MAX(?alt) as ?alt FROM Wikidata:Dbo.Berg WHERE ?berg wdt:birthPlace ?place LIMIT 1 }"}, {"question": "Wie lautet der Twittername von Running Wild?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q163173 wdt:P740 ?result}", "generated_sparql": "SELECT bd:label {\n  bd:serviceParam wd:service \"https://dbpedia.org/query\" .\n  bd:parameter wd:query \"<span class=\\\"queryText\\\">\\\"SELECT label WHERE { bd:ServiceParam wd:service \\\"https://dbpedia.org/sparql\\\"; \\\\\\nbd:parameter wd:query \\\"\" + \"\\']}"}, {"question": "Wie oft hat die italienische Fu\u00dfball Nationalmannschaft die Weltmeisterschaft gewonnen?", "gold_sparql": "SELECT (COUNT (DISTINCT ?win) AS ?result) WHERE {wd:Q676899 wdt:P2522 ?win. ?win wdt:P3450 wd:Q19317}", "generated_sparql": ""}, {"question": "Wie viel Fl\u00e4che hat die Hauptstadt von Spitzbergen?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q25231 wdt:P36/wdt:P2046 ?result}", "generated_sparql": "SELECT \n    geo:Area['en'] AS TotalArea \nWHERE {\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Wie viel Prozent von Andorra sind mit Wasser bedeckt?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q228 wdt:P2927 ?result}", "generated_sparql": ""}, {"question": "Wie viele L\u00e4nder liegen am Bodensee?", "gold_sparql": "SELECT (COUNT (DISTINCT ?country) AS ?result) WHERE {wd:Q4127 wdt:P17 ?country. ?country wdt:P30 wd:Q46}", "generated_sparql": ""}, {"question": "Mit wie vielen Personen war Richard Burton verheiratet?", "gold_sparql": "SELECT (COUNT (DISTINCT ?sp) AS ?result) WHERE {wd:Q151973 wdt:P26 ?sp.}", "generated_sparql": "SELECT COUNT(?x)\nWHERE {\n  ?x wdt:P31 wd:Q426004.\n  ?x wdt:P11 wd:Q13100.\n}"}, {"question": "An welchen Koordinaten wurde der Sender Teutoburger Wald errichtet?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1717891 wdt:P625 ?result.}", "generated_sparql": "SELECT ?s ?cwd {\n  wd:query {\n    bd:serviceParam wikibase:label \"sender Teutoburger Wald\";\n    bd:serviceParam wikibase:serviceParamString \"position\";\n    bd:serviceParam wikibase:types wikibase:QWCText;\n    bd:serviceParam wikibase:format text/plain;\n  }"}, {"question": "Wo wurde der Dichter Alexander Pope begraben?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?poet wdt:P735 wd:Q923; wdt:P734 wd:Q15840785; wdt:P106 wd:Q49757; wdt:P119 ?result}", "generated_sparql": "SELECT bd:serviceParam WHERE {\n   ?s wikibase:label \"Alexander Pope\".\n   ?s bd:p31 ?o.\n   ?o bd:p2003 \"1595/1607-1704\".\n   ?o bd:p27 ?c.\n   ?c bd:p99 ?t.\n   SERVICE wikibase:label {\n      bd:serviceParam wikibase:language \"en\".\n   }"}, {"question": "In welchem Land liegt die Kandahar Abfahrt?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q327818 wdt:P17 ?result}", "generated_sparql": "SELECT ?land\nWHERE {\n  ?aircraft wdt:P31 wd:Q294327.  # Flugzeuge\n  ?flight wdt:P31 ?aircraft.\n  ?flight wdt:P50 ?aircraft ; ?date .  # Startdatum\n  FILTER(year(?date) > 2000)\n  ?flight wdt:P74 ?country.\n  ?country wdt:P39 ?land.\n  FILTER(?land = \"Kandahar\")\n}"}, {"question": "Wer gr\u00fcndete das Architekturb\u00fcro, welches die Elbphilharmonie plante?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q673223 wdt:P84/wdt:P112 ?result}", "generated_sparql": "SELECT ?architekt\nWHERE {\n  ?architekt dbo:foundingOrganization ?org.\n  ?org dbo:knows architecture.\n  ?architekt dbo:planned ?project.\n  ?project dbo:name ?name.\n  FILTER(REGEXP(?name, \"(Architekturb\u00fcro\\\\s+|Architekturb\u00fcro\\s)+\")).\n}"}, {"question": "Woher stammen die Gr\u00fcnder der Band Metallica?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q15920 wdt:P112/wdt:P19/wdt:P17 ?result}", "generated_sparql": "Select ?founder WHERE {\n  wd:WikiData Wikipedia \"Metallica\" .\n ?founder wdt:P279 wd:Q268530.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[en]\". }"}, {"question": "Woher stammt die Apfelsorte Granny Smith?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q506040 wdt:P495 ?result}", "generated_sparql": "SELECT ?p ?label WHERE {\n    SERVICE wikibase:label { bd:language \"en\". }"}, {"question": "Woraus besteht der Fudschijama?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q39231 wdt:P186 ?result}", "generated_sparql": "SELECT label {\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"de\". }"}]
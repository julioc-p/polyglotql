[{"question": "After whom is the Riemannian geometry named?", "gold_sparql": "SELECT DISTINCT ?result WHERE { wd:Q761383 wdt:P138 ?result. }", "generated_sparql": "SELECT ?term ?label WHERE {\n  ?term wdt:P300 [\n    wd:P31 wd:Q9256.  # Riemannian geometry\n  ]\n  .\n}"}, {"question": "Which animal participated in a military operation with the Australian Defence Force?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q16521. ?mop wdt:P31 wd:Q645883; wdt:P710 ?result, wd:Q625657.}", "generated_sparql": "SELECT ?animal WHERE {\n  ?animal wdt:P31 wd:Q15.\n  ?animal wdt:P439 wd:Q12833.\n  ?animal wdt:P31 wd:Q6. # Australian Defence Force\n  ?animal wdt:P110 wd:Q17. # military operation\n}"}, {"question": "among the characters in the witcher, who has two unmarried partners, Yennefer of Vengerberg and Triss Merigold?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q11835640 wdt:P674 ?result. ?result wdt:P451 ?p1, ?p2. FILTER(?p1 != ?p2 &&(?result IN (wd:Q4205826, wd:Q4463198)))}", "generated_sparql": "SELECT DISTINCT ?s \r\nWHERE {\r\n  ?s wdt:P448 \"Yennefer of Vengerberg\".\r\n  ?s wdt:P449 ?o1. \r\n  ?s wd:P31 wd:Q97777.  # The Witcher (Character/Work)\r\n  ?o1 wdt:P31 wd:Q1118181.  # Triss Merigold\r\n  ?s wdt:P126 . # Has two partners\r\n}"}, {"question": "among the founders of tencent company, who has been member of national people\u2019s congress?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q860580 wdt:P112 ?result. ?result wdt:P39 wd:Q10891456.}", "generated_sparql": "SELECT ?f.name WHERE {\n  ?f wdt:P31 wd:Q3425. <!-- tencent company -->\n  OPTIONAL {\n    ?f wdt:P488 wdt:Q407. <!-- member of national people's congress -->\n  }"}, {"question": "among the other representative work of the author of hunter x hunter, which one is talking about middle school student?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q696071 wdt:P50 ?author. ?author wdt:P800 ?result. ?result wdt:P921 wd:Q16003532 FILTER(?result != wd:Q69071)}", "generated_sparql": "SELECT DISTINCT ?w {\n  ?w wdt:P31 wd:Q107211.\n  ?w wdt:P156 ?a.\n  ?a wdt:P82 ?o.\n  ?o wdt:P42 ?v.\n  ?v wdt:P108 ?p1.\n  ?p1 ?p11 wd:Q51608.\n  ?p1 ?p2 wd:Q31.\n  FILTER (CONTAINS(STRING(?w), 'hunter x hunter') && CONTAINS(STRING(?p1), 'middle school student'))\n}"}, {"question": "On which stock exchanges are Siemens AG shares traded?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q81230 wdt:P414 ?result}", "generated_sparql": "SELECT ?exchange\nWHERE {\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Apart from the book series the witcher, name all of the author\u2019s notable work.", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q11835640 wdt:P50 ?author. ?author wdt:P800 ?result. FILTER(?result != wd:Q11835640)}", "generated_sparql": "SELECT DISTINCT ?authorLabel WHERE {\n  ?author wdt:P470 wd:Q9752.\n}"}, {"question": "are brooke raboutou and colin duffy from same state of the usa?", "gold_sparql": "ASK {wd:Q2926117 wdt:P19 ?b1. wd:Q87192979 wdt:P19 ?b2. ?b1 wdt:P131* ?state. ?b2 wdt:P131* ?state. ?state wdt:P31 wd:Q35657 .}", "generated_sparql": "SELECT ?b ?c1 ?d ?c2 ?c3\nWHERE {\n  # get Brook Rabeau's birthplace state\n  ?b wdt:P1349 wd:Q516260.\n  # get Colin Duffy's birthplace state\n  ?d wdt:P1349 wd:Q516120.\n  \n  # check if both have the same birthplace state\n  OPTIONAL {\n    ?b wdt:P241 ?c1 wdt:P7 ?c2 wdt:P241 ?c3 ?c1 = ?c2 AND ?c2 = ?c3.\n  }"}, {"question": "What is the boiling point of water?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q283 wdt:P2102 ?result}", "generated_sparql": "SELECT ?boilingPoint WHERE {\n   wd:Water wd:name \"Water\".\n   wd:hasValue ?boilingPoint.\n}"}, {"question": "At which school was Yayoi Kusama educated at?", "gold_sparql": "SELECT DISTINCT ?result {wd:Q231121 wdt:P69 ?result}", "generated_sparql": "SELECT ?s WHERE {\n    ?s wdt:P108 ?x.\n    ?x wdt:P148 ?o.\n    ?o wdt:P319 ?y.\n    ?y wdt:P106 ?s.\n    FILTER (isomorphic_type(?s, \"University\") && isomorphic_type(?y, \"Student\") && isomorphic_type(?o, \"Institution\"))\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Which High School did Allen Ginsberg attend?", "gold_sparql": "SELECT DISTINCT ?result {wd:Q6711 wdt:P69 ?result. ?result wdt:P31 wd:Q9826}", "generated_sparql": "SELECT ?school\nWHERE {\n  ?person wd:P172 ?school.\n  ?person wd:P31 wd:Q135845.\n}"}, {"question": "On which island is the Indonesian capital located?", "gold_sparql": "SELECT DISTINCT ?result {wd:Q252 wdt:P36 ?capital. ?capital wdt:P706 ?result. ?result wdt:P31 wd:Q23442}", "generated_sparql": "SELECT ?island ?label\nWHERE {\n  ?o wdt:P31 wd:Q900709.\n  ?o wdt:P31 wd:Q72.\n  ?o wdt:P31 wd:Q965073.\n  ?o wdt:P31 wd:Q955840.\n  ?o wdt:P31 wd:Q41.\n  ?o wdt:P31 wd:Q1221226.\n  ?o wdt:P31 wd:Q10683681.\n  ?p wdt:P41 wd:Q1232996.\n  ?p wdt:P43 ?o.\n  FILTER(NOT EXISTS (SELECT 1 WHERE { ?o wdt:P43 ?i }"}, {"question": "can i play don't starve on play station 4?", "gold_sparql": "ASk {wd:Q3208174 wdt:P400 wd:Q5014725.}", "generated_sparql": ""}, {"question": "How many General Secretaries of the CPSU were there before Leonid Brezhnev?", "gold_sparql": "SELECT DISTINCT (COUNT(?gensec) as ?result) WHERE{wd:Q765165 p:P39 ?pos. ?pos ps:P39 wd:Q1048744; pq:P580 ?st. ?gensec p:P39 ?pos2. ?pos2 ps:P39 wd:Q1048744; pq:P580 ?st2. FILTER(?st2 < ?st)}", "generated_sparql": "SELECT COUNT(?s)\nWHERE {\n  ?s wdt:P31 wd:Q91627.\n  ?s wdt:P398 ?g ?x ?y ?z.\n  FILTER(??g <> wd:Q5735)\n  FILTER(??y <> wd:Q217767)\n  FILTER(??z <> wd:Q217767)\n}"}, {"question": "How many different presidents of Russia have there been that took the position after 1990?", "gold_sparql": "SELECT (COUNT(DISTINCT ?president) AS ?result) WHERE{?president p:P39 ?pos. ?pos ps:P39 wd:Q218295. ?pos pq:P580 ?start. FILTER((YEAR(?start)> 1990))}", "generated_sparql": "SELECT COUNT(DISTINCT ?president) AS different_presidents_after_1990\nWHERE {\n  ?president wdt:hasStarted [ wdt:startedIn ?start_year ]\n          wdt:isPresidentOf wd:Russia.\n  FILTER (?start_year > 1990)\n}"}, {"question": "Did adam ondra win a medal in the 2020 summer olympics?", "gold_sparql": "ASK{wd:Q350568 p:P1344 ?event. ?event ps:P1344 ?eventStatement. ?eventStatement wdt:P361* wd:Q181278. ?event pq:P1352 ?ranking. FILTER(?ranking <= 3)}", "generated_sparql": "SELECT ?x ?b \nWHERE {\n  ?x wdt:P361 wd:S661+ \"2020 Summer Olympics\".  # Check if there was a Olympics in 2020\n  BIND (?y = P362+ wd:O17) { ?y ?P371 wd:A. }"}, {"question": "Did the Chicago Bulls win at least two seasons of the NBA championship?", "gold_sparql": "ASK{{SELECT (COUNT (?season) AS ?count) WHERE {?season wdt:P3450 wd:Q155223. ?season wdt:P1346 wd:Q128109}} FILTER(?count >= 2)}", "generated_sparql": "SELECT COUNT(*) as number_of_championships \nWHERE {\n  ?team wdt:P270 wd:Q9185.\n  ?team wdt:P269 ?number_of_championships.\n  FILTER(CONTAINS(str(?number_of_championships), \"2\"))\n}"}, {"question": "Did Haruki Murakami receive the Nobel Prize in Literature?", "gold_sparql": "ASK {wd:Q37922 wdt:P1346 wd:Q134798}", "generated_sparql": "SELECT ?x \nWHERE {\n  ?x wdt:P248.  # P248: a recipient of\n  ?x wdt:P31 wdt:WikibaseAuthor.  # P31: a type of person\n  ?x wdt:P147 wd:Q186022.  # P147: the recipient of\n}"}, {"question": "Did Kobe Bryant leave the Lakers when LeBron James joined that team?", "gold_sparql": "ASK{wd:Q25369 p:P54 ?teamStatement. ?teamStatement ps:P54 wd:Q121783; pq:P582 ?leave. wd:Q36159 p:P54 ?teamStatement2. ?teamStatement2 ps:P54 wd:Q121783; pq:P580 ?join. FILTER(?leave = ?join)}", "generated_sparql": "SELECT ?s ?p ?x ?y ?w \nWHERE {\n  ?s wdt:P15 wd:Q1342199.  # Kobe Bryant\n  ?s wdt:P31 wd:Q25865.  # NBA player\n  ?s wdt:P35 ?x.  # Los Angeles Lakers\n  ?s wdt:P187 ?y.  # LeBron James\n  ?y wdt:P31 wd:Q25865.  # NBA player\n  ?y wdt:P35 ?w.  # Los Angeles Lakers\n  ?x wdt:P875 ?w.\n  FILTER(regex(?s, \"^https:\\/\\/dbpedia.org\\/entity\\/KobeBryant.\", \"i\")) \n  FILTER(regex(?y, \"^https:\\/\\/dbpedia.org\\/entity\\/LeBronJames.\", \"i\"))\n}"}, {"question": "Did Rawson Marshall Thurber, the director of Red Notice also direct Titanic?", "gold_sparql": "ASK {wd:Q58815001 wdt:P57 ?director. wd:Q44578 wdt:P57 ?director. FILTER(wd:Q2745616 = ?director)}", "generated_sparql": "asked for the director of Red Notice and Titanic from Wikidata, here's a possible SPARQL query to answer the question \"Did Rawson Marshall Thurber, the director of Red Notice also direct Titanic?\":\n```scss\nPREFIX dbpedia: <https://dbpedia.org/>\nPREFIX foaf: <http://xmlns.com/foaf#>\nPREFIX wdt: <https:// Wikidata:>\nPREFIX wd: <https://www.w3.org/2000/07/xsd#>\nPREFIX c: <http://schema.org/>\nSELECT ?c.label AS title\nWHERE {\n  ?d wdt:P148 ?b.\n  ?b foaf:name \"Rawson Marshall Thurber\".\n  FILTER(REGEX(?d, \"Red Notice\", \"i\"))\n  ?d wdt:P112 ?c.\n  ?b foaf:name \"Titanic\".\n  FILTER(REGEX(?b, \"directed by\", \"i\"))\n  FILTER(REGEX(?c, \"Titanic\", \"i\"))\n}"}, {"question": "Did Venice at any point belong to the Austrian Empire?", "gold_sparql": "ASK {wd:Q641 p:P17/ps:P17 wd:Q131964}", "generated_sparql": "SELECT ?s ?p ?o ?p ?r ?g WHERE {\n  ?s wdt:P110 wd:Q93. # Austrian Empire\n  ?s wdt:P344 [?o wdt:P163 wd:Q5. # Capital of Austria (Vienna)]. # Vienna\n}"}, {"question": "Were at least two of the founders of tencent educated at the same university?", "gold_sparql": "ASK {wd:Q860580 wdt:P112 ?founder. ?founder wdt:P69 ?uni. wd:Q860580 wdt:P112 ?founder2. ?founder2 wdt:P69 ?uni. FILTER(?founder != ?founder2)}", "generated_sparql": "SELECT COUNT(DISTINCT ?founder) ?numFounders\nWHERE {\n  ?founder wdt:P31 wd:Q6653818.\n  ?founder wdt:P209 ?university.\n  BIND (URI(FIND(?, \"Tencent\") AS ?founder) AS ?founder).\n  BIND (URI(FIND(?, \"University\")) AS ?university).\n  ?startYear ?startYear ?founder ?endYear ?university;\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Do all of batman\u2019s partner speak english as native language?", "gold_sparql": "ASK{{SELECT (COUNT(DISTINCT ?partner) AS ?pnum) WHERE {wd:Q2695156 wdt:P451 ?partner. ?partner wdt:P103 ?lang. MINUS{?lang wdt:P279* wd:Q1860}}} FILTER(?pnum = 0)}", "generated_sparql": "SELECT COUNT(*) as num_who_speak_english\nWHERE {\n  ?partner wdt:P31 wd:Q247.  # Batman\n  ?partner wdt:P279 wd:Q631. # Has a native language\n  ?language wd:Q631.\n  ?partner wdt:P81 ?language.\n}"}, {"question": "How many spouses do head of states have on average?", "gold_sparql": "SELECT (AVG(?spouseCount) AS ?result) WHERE {{SELECT (COUNT(DISTINCT ?spouse) AS ?spouseCount) WHERE{?country wdt:P31 wd:Q6256. ?country p:P35/ps:P35 ?hos. OPTIONAL {?hos wdt:P26 ?spouse}} GROUP BY ?hos }}", "generated_sparql": "SELECT AVG(COUNT(DISTINCT bd:birthPlace)) AS numSpouses\nWHERE {\n  bd:BirthPlace ?birthPlace .\n  ?headOfState wdt:P324 ?birthPlace .\n  FILTER(?birthPlace = bd:BirthPlace)\n}"}, {"question": "Was there at least one Formula 1 event on the AVUS?", "gold_sparql": "ASK{wd:Q155810 wdt:P793 ?event. ?event wdt:P31 wd:Q108886259}", "generated_sparql": "SELECT \\_BOOLEAN(Service.execSparql(\"SELECT (COUNT(s) > 0) AS is_event_present WHERE { SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Find all Turkish verbs ending with \u201cu\u015f\u201d with their lemma.", "gold_sparql": "SELECT ?result WHERE {?result wikibase:lexicalCategory wd:Q24905; dct:language/wdt:P218 'tr'; wikibase:lemma ?lemma. FILTER(regex(?lemma, \"u\u015f$\"))}", "generated_sparql": "SELECT ?verb ?lemma\nWHERE {\n  ?verb wd:lexicalCategory ?cat.\n  FILTER(CONTAINS(str(?cat), 'verb'))\n  FILTER(CONTAINS(str(?verb), 'u\u015f'))\n  SERVICE uri('https://wiktionary.com/rest_v2/wiktionary/en/search')\n    WHERE {\n      bd:serviceParam wikibase:lang 'en'\n      bd:serviceParam wikibase:query 'u\u015f'\n      bd:serviceParam wikibase:limit 100\n      SERVICE_USERPASSWORD(username, password)\n    }"}, {"question": "From which country are the beagles originally from?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q21102 wdt:P495 ?result}", "generated_sparql": "SELECT ?country WHERE {\n  ?beagle wdt:P156 ?country .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "From which country came the 2nd most winners of the Emmy Award ?", "gold_sparql": "SELECT ?result WHERE {?person wdt:P166 wd:Q123737; wdt:P27 ?result} GROUP BY ?result ORDER BY DESC(COUNT (?result)) OFFSET 1 LIMIT 1", "generated_sparql": ""}, {"question": "Does the music style of Helloween belong to rock music?", "gold_sparql": "ASK {wd:Q158895 wdt:P136/wdt:P279* wd:Q11399}", "generated_sparql": "SELECT ?style ?count WHERE {:MusicGroup { name: \"Helloween\" }"}, {"question": "Does the postal code 32423 belong to Minden?", "gold_sparql": "ASK {wd:Q3846 wdt:P281 \"32423\"}", "generated_sparql": "SELECT ?w.label\nWHERE {\n  ?x wdt:P13 ?w. ?wdt:P31 wd:Q1317901.\n  ?wdt:P5 ?x rdf:type xsd:xInteger.\n  FILTER(?wdt:P5 >= 32000 && ?wdt:P5 <= 33000)\n}"}, {"question": "has adam ondra been a winner of IFSC climbing world cup?", "gold_sparql": "ASK {wd:Q350568 p:P1344 ?ps. ?ps ps:P1344/wdt:P3450* wd:Q1774251. {?ps pq:P1352 ?rank.} UNION {?ps pq:P166 ?gold.} FILTER(?rank = 1 || sameTerm(?gold,wd:Q406039))}", "generated_sparql": "SELECT ?b ?p ?v WHERE {\n  ?s:P2990.owl:hasWon : ?b .\n  ?b ?p ?v .\n  FILTER(CONTAINS(LCASE(STR(?p), 'climbing (world cup)'))).\n  ?s:P3062 ?p \"Adam Ondra\" .\n}"}, {"question": "has life expectancy in iran grown in any year after 1999?", "gold_sparql": "ASK {wd:Q794 p:P2250 ?ols. ?ols pq:P585 ?otime. ?ols ps:P2250 ?ol.  wd:Q794 p:P2250 ?nls. ?nls pq:P585 ?ntime. ?nls ps:P2250 ?nl. FILTER((YEAR(?otime)=1999) && (YEAR(?ntime) > YEAR(?otime)) && (?nl > ?ol))}", "generated_sparql": "SELECT COUNT(\\*) as count\nWHERE {\n    ?c dbo:countryName ?l.\n    wd:lifeExpectancy(context: ?c, language: \"en\").\n    ?l < wd:hasLifeExpYear ?y.\n    ?y >= '1999'.\n}"}, {"question": "has population of Isfahan increased at any point after 2006?", "gold_sparql": "ASK {wd:Q42053 p:P1082 ?ops. ?ops pq:P585 ?otime. ?ops ps:P1082 ?op.  wd:Q42053 p:P1082 ?nps. ?nps pq:P585 ?ntime. ?nps ps:P1082 ?np. FILTER((YEAR(?otime)=2006) && (YEAR(?ntime) > YEAR(?otime)) && (?np > ?op))}", "generated_sparql": "SELECT ?x ?value WHERE {\n  ?x wdt:P31 wd:Q171853726.   # Isfahan city\n  ?x wdt:P244 wd:Q11525086.   # Population\n  ?x wdt:P237 ?y.   # Date\n  FILTER(STRTOINT(?y, 'YYYY') >= 2006)\n  ?y < wd:Q391622694.   # 2006-01-01\n}"}, {"question": "Did Joe Cocker play at the Woodstock festival?", "gold_sparql": "ASK {wd:Q164815 wdt:P710 wd:Q190076}", "generated_sparql": "SELECT (?c in (SELECT distinct ?c WHERE { wd:MusicGroup ?c.wikiLabel \"<Joe Cocker>\" }"}, {"question": "Did Udo B\u00f6lts participate in the Tour de France?", "gold_sparql": "ASK {wd:Q66432 wdt:P1344/wdt:P31 wd:Q33881}", "generated_sparql": "SELECT ?x ?p\nWHERE {\n  ?x wdt:P72 rdf:type \"http://dbpedia-owl.org/Object/Athlete\".\n  ?x wdt:P329 ?c.\n  ?c wdt:P31 wd:Q1301909.\n  ?c wdt:P449 \"Tour de France\".\n  BIND (?c as ?participant_team)\n  ServiceDescription @base <https://www.wikidata.org/query> {\n    bd:serviceParam wikibase:label { bd:serviceParamTitle \"Label\", bd:serviceParamType \"text\" }"}, {"question": "How many of Reinhold Messner's brothers still live?", "gold_sparql": "SELECT (COUNT(DISTINCT ?brother) AS ?result) WHERE {wd:Q189307 wdt:P3373 ?brother. ?brother wdt:P21 wd:Q6581097. FILTER(NOT EXISTS{?brother wdt:P570 ?dod})}", "generated_sparql": "SELECT COUNT(DISTINCT ?brother) \nWHERE {\n    :Person/rdfs:type ?person.\n    ?person wdt:P367 wd:Q322.\n    ?person wdt:P9 ?brother.\n    FILTER(CONTAINS(str(?brother), \"Reinhold Messner\"))\n}"}, {"question": "In which manner did Hemingway die?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q23434 wdt:P1196 ?result.}", "generated_sparql": "SELECT ?manner ?label\nWHERE {\n    SELECT DISTINCT ?manner\n    WHERE {\n        ?person wd:P163 ?diedBy ;\n        SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "In which industry does the House of Medici own a business?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q170022 wdt:P1830/wdt:P452 ?result}", "generated_sparql": ""}, {"question": "How do people from Turkey call the official name of the united states of america?", "gold_sparql": "SELECT ?result WHERE {wd:Q30 wdt:P1448 ?result FILTER(langMatches(lang(?result),\"tr\"))}", "generated_sparql": "SELECT wdt:label ?country ?label\nWHERE {\n    ?country rdf:type wdt:Country .\n    ?country owl:sameAs <https://en.wikipedia.org/wiki/Turkey> .\n\n    FILTER (lang(?country) = 'en')\n\n    ?country wdt:capital ?capital .\n\n    ?capital wdt:label ?capital_label .\n\n    FILTER (lang(?capital) = 'en')\n\n    ?capital wdt:name ?country_name.\n\n    ?country_name wdt:label ?country_name_label .\n\n    FILTER (lang(?country_name_label) = 'en')\n\n    ?country_name_label ?country_label\n}"}, {"question": "How high is the Cologne Cathedral ?", "gold_sparql": "SELECT ?result WHERE {wd:Q4176 wdt:P2048 ?result}", "generated_sparql": "SELECT ?height\nWHERE {\n  ?building wdt:P154 [label \"Cologne Cathedral\", bd:contains ?lat ?lon, geos:coordinates ?coords].\n  ?coords foaf:type \"GeoCoordinates\".\n  ?height ?height foaf:type \"Altitude\".\n  FILTER(abs(reg:geocoder(?lat ?lon) - 51.2332) < 1E-6)\n}"}, {"question": "How is the Harz called in Mandarin Chinese?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q4186 rdfs:label ?result FILTER(langMatches(lang(?result),\"zh-cn\")) }", "generated_sparql": "SELECT DISTINCT ?label \nWHERE {\n  ?o wdt:P486 ?v.\n  ?o wd:P469 ?v2.\n  ?v2 bd:type ?type.\n  FILTER(?type = 'mandarin')\n  SERVICE <https://dbpedia.org/service/label.sparql> {\n    ?o wd:P486 ?v1.\n    SERVICE_FUNCTION <http://dbpedia.org/service/info/label.sparql> { ?o ?v1. }"}, {"question": "How many international airports are located within the city of Hamburg ?", "gold_sparql": "SELECT (COUNT(DISTINCT ?ap) AS ?result) WHERE {?ap wdt:P31 wd:Q644371. ?ap wdt:P131* wd:Q1055}", "generated_sparql": "SELECT COUNT(*) AS num_airports\nWHERE {\n  wdt:contains ?a wd:airport.\n  FILTER (regex(?, \"Hamburg\")).\n  wdt:country ?c wdt:country.\n  FILTER (regex(?, \"Germany\")).\n}"}, {"question": "On how many albums does Madonna perform?", "gold_sparql": "SELECT (COUNT(DISTINCT ?album) AS ?result) WHERE {?album wdt:P31 wd:Q482994. ?album wdt:P175 wd:Q1744. }", "generated_sparql": "SELECT COUNT(distinct ?album) as number_of_albums \nWHERE { \n  ?person wdt:P31 wikibase:Q313.  # Madonna\n  ?person wdt:P21 wikibase:Q27.     # Musician\n  ?album wdt:P433 wikibase:Q1774.  # Album\n}"}, {"question": "On how many albums does Mariah Carey perform?", "gold_sparql": "SELECT (COUNT(DISTINCT ?album) AS ?result) WHERE {?album wdt:P31 wd:Q482994. ?album wdt:P175 wd:Q41076. }", "generated_sparql": "SELECT COUNT(?w) WHERE {\n  ?w wd:P366 wd:Q428. ?x wd:P368 ?w.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "How many studio albums has Lana Del Rey have?", "gold_sparql": "SELECT (COUNT(DISTINCT ?album) AS ?result) WHERE {?album wdt:P7937 wd:Q208569. ?album wdt:P175 wd:Q37150. }", "generated_sparql": "SELECT COUNT(*) ?albcount\nWHERE {\n  ?p <http://dbpedia.org/ontology/music/StudioAlbum>.\n  ?p bd:type ?type.\n  ?type bd:type 'Lana Del Rey'.\n}"}, {"question": "How many ancient civilizations are there?", "gold_sparql": "SELECT (COUNT(DISTINCT ?civ) AS ?result) WHERE {?civ wdt:P31 wd:Q28171280}", "generated_sparql": "SELECT DISTINCT COUNT(*) AS numAncientCivilizations\nWHERE {\n  wd:Q143 Wikidata:Q143 ?c wdt:P31 wd:Q1084.\n  wd:Q1084 wdt:P31 ?c.\n  FILTER(REGEXP(str(wd:P659), 'ancient'))\n}"}, {"question": "In how many years did Kobe Bryant receive an NBA All-Defensive Team award?", "gold_sparql": "SELECT (COUNT(DISTINCT ?time) AS ?result) WHERE {wd:Q25369 p:P166 ?as. ?as ps:P166 wd:Q1465181; pq:P585 ?time.}", "generated_sparql": "SELECT COALESCE(COUNT(?year), 0) AS Years\nWHERE {\n  ?a wd:Q622094.\n  ?a wd:P739 ?year.\n  FILTER(str(?year) ~ /kobe bryant/)\n}"}, {"question": "How many All-NBA Team awards have Shaquille O'Neal and Kobe Bryant received in the same year?", "gold_sparql": "SELECT (COUNT(DISTINCT ?time) AS ?result) WHERE {wd:Q25369 p:P166 ?as. ?as ps:P166 wd:Q674359; pq:P585 ?time. wd:Q169452 p:P166 ?as2. ?as2 ps:P166 wd:Q674359; pq:P585 ?time}", "generated_sparql": "SELECT COUNT(*) as num_awards\nWHERE {\n  wd:Q429 wd:P31 \"NBA All-Star Game\".  # Individual with ID wd:Q429 (Shaquille O'Neal)\n  wd:Q25305 wd:P31 \"NBA All-Star Game\".  # Individual with ID wd:Q25305 (Kobe Bryant)\n  wd:Q429 wd:P394 wd:Q25305.  # Year of the award (same year)\n}"}, {"question": "How many literary works did Richard Bachman write?", "gold_sparql": "SELECT (COUNT(DISTINCT ?book) AS ?result) WHERE {?book wdt:P50 wd:Q39829; wdt:P31 wd:Q7725634}", "generated_sparql": ""}, {"question": "How many notable works does Sarah J. Maas have?", "gold_sparql": "SELECT (COUNT(DISTINCT ?notableW) AS ?result) WHERE {wd:Q20640708 wdt:P800 ?notableW}", "generated_sparql": "SELECT COUNT(*) AS num_works\nWHERE {\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Did Bryan Evenson work for at least one university where he was educated at?", "gold_sparql": "ASK {wd:Q4963691 wdt:P108 ?uni; wdt:P69 ?uni. ?uni wdt:P31/wdt:P279* wd:Q3918.}", "generated_sparql": "SELECT ?person ?university ?educated ?work\nWHERE {\n  ?person dbpedia:birthPlace \"Fresno, California\".\n  ?university dbpedia:name \"University of California, Fresno\".\n  FILTER(?university = ?person.educated.university.name && ?university = ?person.educated.university.name && !exists { ?education ?person ?university.dbpedia:knows ?work.dbpedia:knows ?education.dbpedia:type ?person.educated.university.dbpedia:educatedBy ?education }"}, {"question": "How many children (including apopted ones) does Jeff Bezos have with his ex-wife?", "gold_sparql": "SELECT (COUNT(DISTINCT ?child) AS ?result) WHERE {wd:Q312556 p:P26 ?sps. ?sps ps:P26 ?sp. ?child wdt:P25 ?sp; wdt:P22 wd:Q312556. FILTER(EXISTS{?sps pq:P582 ?et})}", "generated_sparql": ""}, {"question": "How many children had Paul McCartney together with his ex-wife Linda McCartney?", "gold_sparql": "SELECT (COUNT(DISTINCT ?child) AS ?result) WHERE {wd:Q2599 p:P26 ?sps. ?sps ps:P26 ?sp. ?child wdt:P25 ?sp; wdt:P22 wd:Q2599. FILTER((EXISTS{?sps pq:P582 ?et}) && (?sp = wd:Q228899))}", "generated_sparql": "SELECT COUNT(*) as num_children\nWHERE {\n    wikibase:item wd:P31 wikibase:Q7348.\n    wikibase:item dbo:spouse dbo:spousePaulMcCartney.\n    wikibase:item wikibase:P395 wd:Q659779.\n    wikibase:item dbo:spouse dbo:spouseLindaMcCartney.\n    wikibase:item dbo:spouse dbo:spousePaulMcCartney.\n    wikibase:item wikibase:P395 wd:Q359727.\n    wikibase:item dbo:spouse dbo:spouseLindaMcCartney.\n    wikibase:item wdt:P395 wd:Q349727.\n    wikibase:item dbo:spouse dbo:spousePaulMcCartney.\n    wikibase:item wd:P395 wd:Q671966.\n    wikibase:item dbo:spouse dbo:spouseLindaMcCartney.\n    wikibase:item dbo:spouse dbo:spousePaulMcCartney.\n    wikibase:item dbo:spouse dbo:spouseLindaMcCartney.\n    wdt:P395 wd:Q1407101.\n}"}, {"question": "How many Chinese zodiac animals are there in total?", "gold_sparql": "SELECT (COUNT(DISTINCT ?animal) AS ?result) WHERE {?animal wdt:P31 wd:Q79226802}", "generated_sparql": "SELECT COUNT(*) AS count\nWHERE {\n  ?s wd:P31 wd:Q206.\n  ?s wd:P439 ?p.\n  FILTER(str(?p) = \"Chinese zodiac animals\")\n}"}, {"question": "How many cities are part of the Pearl River Delta?", "gold_sparql": "SELECT (COUNT(DISTINCT ?city) AS ?result) WHERE {wd:Q1144286 wdt:P527 ?city. ?city wdt:P31/wdt:P279* wd:Q515.}", "generated_sparql": "SELECT COUNT(*) AS count\nWHERE {\n    ?city wdt:P31 wd:Q71.\n    wd:Q71 wdt:P136 wd:Q10875.\n}"}, {"question": "How many city-states are currently in the world?", "gold_sparql": "SELECT (COUNT(DISTINCT ?cs) AS ?result) WHERE {?cs wdt:P31 wd:Q133442}", "generated_sparql": "SELECT COUNT(?s) as num_city_states \nWHERE {\n    ?s wdt:P31 wd:Q2468405.\n    OPTIONAL {\n        ?s wdt:P32 wd:Q19.\n    }"}, {"question": "How many businesses did Steve Jobs found?", "gold_sparql": "SELECT (COUNT(DISTINCT ?company) AS ?result) WHERE {?company wdt:P112 wd:Q19837; wdt:P31/wdt:P279* wd:Q4830453}", "generated_sparql": "SELECT COUNT(*) AS numOfBusinesses\nWHERE {\n  ?o wd:P14 wd:P769 \"Apple Inc.\".\n}"}, {"question": "How many countries have a democracy index higher than 7 and drive on the left side ?", "gold_sparql": "SELECT (COUNT(DISTINCT ?country) AS ?result) WHERE {?country wdt:P31 wd:Q6256; wdt:P8328 ?ind; wdt:P1622 wd:Q13196750 FILTER(?ind > 7)}", "generated_sparql": "SELECT COUNT(*)\nWHERE {\n  ?country wdt:P31 dbo:Country .\n  ?country wdt:P33 dbo:DemocracyIndex ?democracyIndex .\n  FILTER(?democracyIndex > 7) .\n  ?country wdt:P43 dbo:DrivesOnLeftSide ?driverSide .\n  FILTER(?driverSide = 'left')\n}"}, {"question": "How many countries have never been members of the UN?", "gold_sparql": "SELECT (COUNT(DISTINCT ?country) AS ?result) WHERE {?country wdt:P31 wd:Q6256. FILTER(NOT EXISTS{?country p:P463/ps:P463 wd:Q1065})}", "generated_sparql": "SELECT COUNT(DISTINCT ?c) AS num_countries\nWHERE {\n  ?c wdt:P31 wd:Q76593.  # UN member\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "How many countries are on the continent of South America ?", "gold_sparql": "SELECT (COUNT(DISTINCT ?country) AS ?result) WHERE {?country wdt:P31 wd:Q6256; wdt:P30 wd:Q18}", "generated_sparql": "SELECT COUNT(*) ASnumCountries\nWHERE {\n    ?s dbo:isContinent ?c .\n    ?s dbo:continentName ?continent .\n    FILTER ( str(?continent) = \"South America\" )\n    FILTER ( str(?s) = \"country\" )\n        SERVICE wikisparql { bd:serviceParam wikisparql:language \"en\" }"}, {"question": "How many countries have mountains whose peaks are higher than 2000m above sea level?", "gold_sparql": "SELECT (COUNT(DISTINCT ?country) AS ?result) WHERE {?mountain wdt:P31/wdt:P279* wd:Q8502; p:P2044/psn:P2044/wikibase:quantityAmount ?height; wdt:P17 ?country. FILTER(?height > 2000)}", "generated_sparql": "SELECT COUNT(*)\nWHERE {\n  ?c wdt:P103 wdt:Q65186595.\n  ?c wdt:P30 coco:Country.\n  ?c wdt:P248 [ wdt:P31 wdt:Q5. ] :Q65186595.\n  FILTER(?c wdt:Q65186595 > 2000)\n}"}, {"question": "How many fictional dragons are present in Game of Thrones?", "gold_sparql": "SELECT (COUNT(DISTINCT ?dragon) AS ?result) WHERE {?dragon wdt:P31/wdt:P279* wd:Q30170627; wdt:P1441 wd:Q23572}", "generated_sparql": "SELECT count(*) as dragons_count WHERE { ?s wdt:P100 \"Dragon\" }"}, {"question": "how many emmy awards has the tv series game of thrones won?", "gold_sparql": "SELECT (COUNT(DISTINCT ?emmy) AS ?result) WHERE {wd:Q23572 wdt:P166 ?emmy. ?emmy wdt:P361/wdt:P279 wd:Q123737}", "generated_sparql": "SELECT COUNT(*) AS num_emmy_awards\nWHERE {\n    ?show <https://dbpedia.org/ontology/hasWon> <https://dbpedia.org/ontology/award/Emmy_Award> .\n    ?show <http://dbpedia.org/ontology/hasProperty> <https://dbpedia.org/ontology/award/emmy_awards/>\n    SELECT COUNT(*) \n    FROM {\n        <https://dbpedia.org/ontology/award/won_awards> ?show ?award ?count.\n        ?award <https://dbpedia.org/ontology/award/Emmy_Award>\n    }"}, {"question": "How many films are derived from the original Ghost in the Shell Manga?", "gold_sparql": "SELECT (COUNT(DISTINCT ?film) AS ?result) WHERE {wd:Q92582 wdt:P4969 ?film. ?film wdt:P31/wdt:P279* wd:Q11424}", "generated_sparql": "SELECT COUNT(*)\nFROM wikibase:item \nWHERE {\n   services:hasIncludes ?s .\n   ?s wdt:P220 wikibase:item ?manga .\n   ?manga wdt:P160 ?film .\n   SERVICE wikidata:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "How many French kings didn't die of natural causes?", "gold_sparql": "SELECT (COUNT(DISTINCT ?king) AS ?result) WHERE {?king wdt:P39 wd:Q18384454. MINUS{?king wdt:P1196 wd:Q3739104}}", "generated_sparql": "SELECT COUNT(*)\nFROM wd:QueryService\nWHERE {\n  ?king wd:P249 \"Louis XV\".\n  ?king wd:P1013 ?cause.\n  FILTER(regex('Natural', ?cause))\n}"}, {"question": "How many given names has Queen Elizabeth II ?", "gold_sparql": "SELECT (COUNT(DISTINCT ?names) AS ?result) WHERE {wd:Q9682 p:P735/ps:P735 ?names}", "generated_sparql": "SELECT COUNT(*) ?count\nWHERE {\n  ?person wd:Q9401.\n}"}, {"question": "How many different female mayors did Hamburg have?", "gold_sparql": "SELECT (COUNT(DISTINCT ?fm) AS ?result) WHERE {wd:Q1055 p:P6/ps:P6 ?fm. ?fm wdt:P21 wd:Q6581072}", "generated_sparql": "SELECT COUNT(DISTINCT ?x)\nWHERE {\n  ?x wd:P31 wd:Q6 .\n  ?x wd:P39 wd:Q60 .\n  FILTER(str(?x) LIKE '%Female%')\n}"}, {"question": "how many head of the state does iran have?", "gold_sparql": "SELECT (COUNT(DISTINCT ?hos) AS ?result) WHERE {wd:Q794 p:P35/ps:P35 ?hos.}", "generated_sparql": "SELECT COUNT(*) AS headOfStateCount\nWHERE {\n  w:P37 wd:Q31.\n  wd:Q31 wdt:P18 ?country.\n  FILTER(CONTAINS(str(?country), \"Iran\"))\n}"}, {"question": "How many scholary articles have ImageNet as a subject?", "gold_sparql": "SELECT (COUNT(DISTINCT ?art) AS ?result) WHERE {?art wdt:P31 wd:Q13442814. ?art wdt:P921 wd:Q24901201.}", "generated_sparql": ""}, {"question": "How many inhabitants does the birthplace of Cristiano Ronaldo have?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q11571 wdt:P19/wdt:P1082 ?result}", "generated_sparql": ""}, {"question": "How many Japanese writers received the Nobel Prize?", "gold_sparql": "SELECT (COUNT(DISTINCT ?writer) AS ?result) WHERE {?writer wdt:P166/wdt:P279 wd:Q7191. ?writer wdt:P27 wd:Q17; wdt:P106 wd:Q36180}", "generated_sparql": "SELECT COUNT(*) ?count WHERE { ?w:P183 wd:Q745318. }"}, {"question": "How many languages are widely used in India?", "gold_sparql": "SELECT (COUNT(DISTINCT ?lan) AS ?result) WHERE {wd:Q668 wdt:P2936 ?lan}", "generated_sparql": "SELECT COUNT(DISTINCT wd:language) \nWHERE {\n    wd:language wdt:P31 wd:Language.\n    FILTER( lang:en.lower() = str(serviceParam(\"label\")) & lang:hi.lower() = str(serviceParam(\"label\")) & lang:en.lower() != str(serviceParam(\"value\")) & lang:hi.lower() != str(serviceParam(\"value\")) )\n}"}, {"question": "How many different colors can water take?", "gold_sparql": "SELECT (COUNT(DISTINCT ?color) AS ?result) WHERE {wd:Q283 wdt:P462 ?color}", "generated_sparql": "SELECT COUNT(DISTINCT ?o) AS num_colors \nWHERE {\n  ?o wdt:P7 \"Water\". \n  ?o wdt:P97 ?v.\n  ?v wdt:P31 [wdt:P11 ?p] .\n  FILTER(?p = 10000)\n  BIND (values(?v) AS ?v)\n}"}, {"question": "How many locations has Georges Braque worked at (work location)?", "gold_sparql": "SELECT (COUNT (DISTINCT ?loc) AS ?result) WHERE {wd:Q153793 wdt:P937 ?loc}", "generated_sparql": "SELECT COUNT(DISTINCT ?location) AS num_locations\nWHERE {\n    ?person wd:P1688 wd:P31 wd:Q355.\n    ?person wd:P461 ?location.\n}"}, {"question": "How many months does winter consist of in Germany?", "gold_sparql": "SELECT (COUNT (DISTINCT ?mon) AS ?result) WHERE {wd:Q1311 p:P2922 ?ms. ?ms ps:P2922 ?mon; pq:P3005/wdt:P527 ?part. wd:Q183 wdt:P361* ?part.}", "generated_sparql": "ask 'How many months does the winter season last in Germany?', the answer is 6 months. \n\nHere is a SPARQL query that extracts this information from Wikidata:\n```\nSELECT ?months \nWHERE {\n    ?months wdt:P31 wikibase:Climate.\n    ?months wdt:P244 wikibase:6.\n    FILTER(LANG(service:info) = \"en\")\n}"}, {"question": "How many movies does the Scream franchise have?", "gold_sparql": "SELECT (COUNT (DISTINCT ?film) AS ?result) WHERE {?film wdt:P31 wd:Q11424; wdt:P179 wd:Q388659}", "generated_sparql": "SELECT COUNT(*) WHERE {\n\tSERVICE wd: { bd:serviceParam wd:serviceURI \"https://www.wikidata.org/query\"; bd:serviceParam wd:inputFormat \"sparql\"; }"}, {"question": "How many movies has James Cameron directed prior to the year 2010?", "gold_sparql": "SELECT (COUNT (DISTINCT ?film) AS ?result) WHERE {?film wdt:P31 wd:Q11424; wdt:P57 wd:Q42574; wdt:P577 ?date. FILTER(YEAR(?date)<2010)}", "generated_sparql": ""}, {"question": "How many movies were directed by Akira Kurosawa ?", "gold_sparql": "SELECT (COUNT (DISTINCT ?film) AS ?result) WHERE {?film wdt:P31 wd:Q11424; wdt:P57 wd:Q8006}", "generated_sparql": "SELECT COUNT(*) as num_movies\nWHERE {\n    ?m wd:P31 wd:Q490917.  # Movie\n    ?m wd:P34 wd:Q1841090.    # Director \n    ?m wd:P425 wd:Q6156.   # Akira Kurosawa\n}"}, {"question": "How many musical scales are there?", "gold_sparql": "SELECT (COUNT (DISTINCT ?scale) AS ?result) WHERE {?scale wdt:P31 wd:Q179651}", "generated_sparql": ""}, {"question": "How many public holidays does the state Bavaria have in a year?", "gold_sparql": "SELECT (COUNT (DISTINCT ?hol) AS ?result) WHERE {wd:Q980 wdt:P832 ?hol}", "generated_sparql": "SELECT COUNT(*) AS num_holidays WHERE {\n    wd:Property/wd:P30 wd:Q772.    # Bavaria\n    wd:P41 wd:Q2466.      # state\n    wd:P30 wd:Q14316.    # public holidays in Bavaria\n    FILTER(year() - '2022' = wd:P428)    # exclude 2022\n}"}, {"question": "How many literary works besides The Picture of Dorian Gray did its author write?", "gold_sparql": "SELECT (COUNT (DISTINCT ?novel) AS ?result) WHERE {wd:Q82464 wdt:P50 ?aut. ?novel wdt:P31 wd:Q7725634; wdt:P50 ?aut FILTER(?novel != wd:Q82464)}", "generated_sparql": "SELECT COUNT(*) as literary_works\nFROM Wikidata\nWHERE {' Wikidata:Q224663 '.type ? 'Literary work'.}"}, {"question": "How many literary works did Mark Twain write in his lifetime?", "gold_sparql": "SELECT (COUNT (DISTINCT ?novel) AS ?result) WHERE {?novel wdt:P31 wd:Q7725634; wdt:P50 wd:Q7245}", "generated_sparql": ""}, {"question": "How many occupations did Mark Twain have?", "gold_sparql": "SELECT (COUNT (DISTINCT ?occ) AS ?result) WHERE {wd:Q7245 wdt:P106 ?occ}", "generated_sparql": "SELECT count(*) as num_occupations WHERE {\n    ?person wdt:P12 [wd:Q71 ?occu] .\n    SERVICE { bd:serviceParam wikibase:language \"en\". }"}, {"question": "how many of spiderman perfomers are citizens of the united kingdom?", "gold_sparql": "SELECT (COUNT (DISTINCT ?per) AS ?result) WHERE {?per wdt:P27 wd:Q145. wd:Q79037 p:P175/ps:P175 ?per}", "generated_sparql": "SELECT COUNT(*) AS num_performers\nWHERE\n  {\n    ?spiderman wdt:P239 wd:Q2349630.\n    ?spiderman wdt:P480 wd:Q605.\n    FILTER(LANG(?spiderman) = \"en\")\n  }"}, {"question": "how many official languages does the united states of america have?", "gold_sparql": "SELECT (COUNT (DISTINCT ?lan) AS ?result) WHERE {wd:Q30 p:P37/ps:P37 ?lan}", "generated_sparql": "SELECT COUNT(*) as num_languages WHERE {\n  ?s wdt:P1225 wd:Q4309839. # United States of America\n  ?s wdt:P31 wd:Q4256274. # country\n  ?s wdt:P493 wd:Q30030157. # official language\n}"}, {"question": "How many official languages has Pakistan ?", "gold_sparql": "SELECT (COUNT (DISTINCT ?lan) AS ?result) WHERE {wd:Q843 p:P37/ps:P37 ?lan}", "generated_sparql": "SELECT COUNT(*) as lang_count\nWHERE {\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "How many Oscars did all the movies directed by Hayao Miyazaki combined win?", "gold_sparql": "SELECT (COUNT (DISTINCT ?aw) AS ?result) WHERE {?film wdt:P57 wd:Q55400; wdt:P166 ?aw. ?aw  wdt:P31 wd:Q19020}", "generated_sparql": "SELECT COALESCE(SUM(o.prize), 0) AS total_wins\nWHERE {\n  ?m wd:P31 wd:Q184513.   # Miyazaki movie\n  ?m wd:P313 ?p.   # Prize for which the query asks\n  ?p wd:Q186615 ?c.  # Oscars\n  ?c wd:Q6621646.   # The year\n  FOR SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "How many paintings of Pablo Picasso were ever in a museum?", "gold_sparql": "SELECT (COUNT (DISTINCT ?painting) AS ?result) WHERE {?painting wdt:P31 wd:Q3305213; wdt:P170 wd:Q5593; wdt:P276 ?loc. ?loc wdt:P31/wdt:P279* wd:Q33506}", "generated_sparql": "SELECT COUNT(*)\nWHERE {\n  wd:Q4027 wd:P27 ?m.\n  ?m wd:P487 wd:Q28226.\n  ?p wd:Q18828 ?m wd:P487 wd:Q28226.\n  FILTER(STR(wd:lemma(?p)) LIKE 'Pablo%')\n}"}, {"question": "How many people can play \"Mensch \u00e4rgere dich nicht\" at most?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q545129 wdt:P1873 ?result}", "generated_sparql": "SELECT MAX(?x) as maxPlayers WHERE {\n  ?x ?p ?o.\n  ?p wd:P128 ?g.\n  ?g wd:P31 wd:Q2437069.\n  ?g wd:P1538 ?n.\n  ?n wd:Q6111 - ?w.\n  ?w wd:P1538 ?n.\n}"}, {"question": "How many people did Oscar Pistorius kill?", "gold_sparql": "SELECT (COUNT (DISTINCT ?people) AS ?result) WHERE {?people wdt:P31 wd:Q5;wdt:P157 wd:Q201377}", "generated_sparql": ""}, {"question": "How many people died due to the Great Leap Forward according to the highest estimate?", "gold_sparql": "SELECT (MAX(?d) AS ?result) WHERE {wd:Q58715 wdt:P1542/wdt:P1120 ?d}", "generated_sparql": "SELECT MAX(count) AS max_count WHERE {\n  wdt:P190 wd:wikiDataValue ?val.\n  FILTER(CONTAINS(?val, \"great leap forward\")).\n  SERVICE wikibase:label {\n    bd:serviceParam wikibase:language \"en\" .\n  }"}, {"question": "How many people have won the Nobel Prize in Literature since its inception?", "gold_sparql": "SELECT (COUNT (DISTINCT ?people) AS ?result) WHERE {?people wdt:P31 wd:Q5; wdt:P166 wd:Q37922}", "generated_sparql": "SELECT COUNT(*) as count \nWHERE {\n  wd:Q226 wd:P31 wd:Q15 [ wd:P36 wd:Q66993140254204 ] .\n  wd:P36 wd:Q7730272318098543201.\n}"}, {"question": "How many people live in cities in the vicinity of the Nile ?", "gold_sparql": "SELECT (SUM (?pop) AS ?result) WHERE {?city wdt:P31 wd:Q515; wdt:P206 wd:Q3392; wdt:P1082 ?pop}", "generated_sparql": ""}, {"question": "How many pitch classes are part of the chromatic scale?", "gold_sparql": "SELECT (COUNT (DISTINCT ?note) AS ?result) WHERE {wd:Q202021 wdt:P527 ?note. ?note wdt:P31 wd:Q1760309}", "generated_sparql": "SELECT COUNT(*) AS pitch_classes\nWHERE \n{\n  ?pitchClass wdt:P31 wikibase:ChromaticScalePitchClass.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "how many plays has William Shakespeare written in the 16th century.", "gold_sparql": "SELECT (COUNT (DISTINCT ?play) AS ?result) WHERE {?play wdt:P31 wd:Q7725634; wdt:P7937 wd:Q25379; wdt:P50 wd:Q692; wdt:P571 ?inc FILTER(YEAR(?inc) < 1600)}", "generated_sparql": "SELECT COUNT(*) WHERE {\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "How many poems did Allen Ginsberg published?", "gold_sparql": "SELECT (COUNT (DISTINCT ?poem) AS ?result) WHERE {?poem wdt:P31 wd:Q7725634; wdt:P50 wd:Q6711; wdt:P136/wdt:P279* wd:Q482}", "generated_sparql": ""}, {"question": "How many political parties have ever had seats in the German Bundestag ?", "gold_sparql": "SELECT (COUNT (DISTINCT ?group) AS ?result) WHERE {?group wdt:P31/wdt:P279* wd:Q7278. ?group p:P1410 ?ps. ?ps pq:P194 wd:Q154797; ps:P1410 ?seats. FILTER(?seats > 0)}", "generated_sparql": "SELECT DISTINCT ?party\nWHERE {\n  ?party wdt:P42 wd:Q2712726. # political party\n  ?party wdt:P489 wd:Q74519430.    # the German Bundestag\n  ?party wdt:P535 <https://dbpedia.org/ontology/political%20party/has-held-a-parliamentary-seat>.\n}"}, {"question": "How many positions did Kobe Bryant play in his team?", "gold_sparql": "SELECT (COUNT (DISTINCT ?pos) AS ?result) WHERE {wd:Q25369 wdt:P413 ?pos}", "generated_sparql": "SELECT DISTINCT ?position ?count\nWHERE {\n  ?player wdt:P31 wd:Q120303029.    # Kobe Bryant\n  ?player wdt:P314 ?position.          # Played for a team or organization\n  ?position wdt:P496 ?startDate ?endDate . # Position held for a specific time range\n  BIND ( counted(?position) AS ?count )\n}"}, {"question": "How many prizes are there established by Alfred Nobel ?", "gold_sparql": "SELECT (COUNT (DISTINCT ?prize) AS ?result) WHERE {wd:Q7191 wdt:P527 ?prize; wdt:P112 wd:Q23810}", "generated_sparql": "SELECT COUNT(*) as \"number_of_prizes\" WHERE {\n  ?p wd:Prize.\n  ?p wd:establishedBy ?person.\n  ?person dbp:birthPlace ?city.\n  ?city wd:sameAs ?locality.\n  ?locality ?country.\n  FILTER(CONTAINS(str(?country), 'Norwegia'))\n}"}, {"question": "Did SpaceX ever operate a space mission that was a failed launch?", "gold_sparql": "ASK {?mission wdt:P31 wd:Q2133344, wd:Q99654400; wdt:P137 wd:Q193701}", "generated_sparql": "SELECT * WHERE {\n  SERVICE wikibase:label { bd:serviceParam wikibase:language 'en'. }"}, {"question": "How many people nominated for the nobel prize in chemistry didn't ever win it?", "gold_sparql": "SELECT (COUNT(DISTINCT ?peo) AS ?result) WHERE {?peo wdt:P31 wd:Q5; wdt:P1411 wd:Q44585. FILTER(NOT EXISTS{?peo wdt:P166 wd:Q44585})}", "generated_sparql": "SELECT COUNT(DISTINCT ?person) \nWHERE {\n  ?person wdt:P249 wd:Q6325003.\n  OPTIONAL { ?person wdt:P39 wd:Q1. }"}, {"question": "How many seasons does Pose have?", "gold_sparql": "SELECT ?result {wd:Q30603704 wdt:P2437 ?result}", "generated_sparql": "SELECT COUNT(*) as num_seasons\nFROM wikibase:item\nWHERE {\n  wikibase:item { bd:type ?bdt . }"}, {"question": "How many seats are there in the current German Bundestag ?", "gold_sparql": "SELECT ?result WHERE {wd:Q154797 wdt:P1342 ?result}", "generated_sparql": "SELECT COUNT(*) as total_seats\nWHERE {\n    ?parliament wdt:P31 wd:Q104846.\n    ?parliament wdt:P920 ?seat_count.\n}"}, {"question": "How many siblings had the author of \u201cLittle Women\u201d ?", "gold_sparql": "SELECT (COUNT (DISTINCT ?sib) AS ?result) WHERE {wd:Q523076 wdt:P50 ?aut. ?aut wdt:P3373 ?sib}", "generated_sparql": "SELECT COUNT(DISTINCT ?sibling) \nWHERE {\n  ?author <http://dbpedia.org/resource/Louisa_May_Alcott>.\n  ?author <http://xmlns:dbpedia.org/property/birthPlace> ?birthPlace.\n  ?sibling <http://dbpedia.org/resource/Person>.\n  ?sibling <http://dbpedia.org/property/birthPlace> ?birthPlace.\n  ?author <http://dbpedia.org/property/birthPlace> ?birthPlace.\n  FILTER (?author = ?sibling) \n}"}, {"question": "How many ski resorts were there ever in France?", "gold_sparql": "SELECT (COUNT (DISTINCT ?ski) AS ?result) WHERE {?ski wdt:P31 wd:Q130003; wdt:P17 wd:Q142}", "generated_sparql": "SELECT COUNT(*) AS skiResorts\nFROM <https://en.wikipedia.org/w/api.php>\nWHERE {\n  ?p = \"Major ski resort\" &&\n  FILTER(contains(ENCODING(?p, \"UTF-8\"), \"France\"))\n}"}, {"question": "How many songs were composed by Jay Chou but not released in his own albums?", "gold_sparql": "SELECT (COUNT (DISTINCT ?song) AS ?result) WHERE {?song wdt:P31 wd:Q7366; wdt:P86 wd:Q238819; wdt:P361 ?album. ?album wdt:P31 wd:Q482994; wdt:P175 ?per FILTER(?per != wd:Q238819)}", "generated_sparql": "SELECT COUNT(*) AS numSongs\nWHERE {\n  ?s wd:P131 wd:Q16634.\n  ?s wd:P31 wd:Q20652.\n  FILTER(NOT EXISTS { ?s wd:P814 ?c }"}, {"question": "How many works that are based on Spider-Man has Venom been a part of?", "gold_sparql": "SELECT (COUNT (DISTINCT ?work) AS ?result) WHERE {wd:Q1621261 wdt:P1441 ?work. ?work wdt:P144 wd:Q79037}", "generated_sparql": "SELECT COUNT(*) as num\\_works \nWHERE {?work wdt:P31 wd:Q226.& ?work wdt:P224 wd:Q17534.& ?predicate wdt:P4272 wd:Q23463.& FILTER(REGEXP(STR(?predicate), \"\\b(Venom)\\b\"))}"}, {"question": "How many spouses had Rama V (one of the former Kings of Siam)?", "gold_sparql": "SELECT (COUNT (DISTINCT ?sp) AS ?result) WHERE {wd:Q158861 wdt:P26 ?sp}", "generated_sparql": "SELECT COUNT(DISTINCT ?spouse) WHERE { ?person wd:P284 [ wd:P360 ?spouse ] }"}, {"question": "Does Switzerland have a place north of the Point (8.57 47.8)?", "gold_sparql": "ASK {wd:Q39 wdt:P1332 ?loc FILTER(?loc > \"Point(8.57 47.8)\"^^geo:wktLiteral)}", "generated_sparql": "SELECT COUNT(DISTINCT ?place) AS num_places\nWHERE {\n  ?place wdt:P11 wd:Q256.5.\n  ?place dbo:latitude ?latitude.\n  ?place dbo:longitude ?longitude.\n  FILTER(CONTAINS(?, 'Switzerland') && latitude > 47.8 && LONG(latitude) - LONG(8.57) > 0)\n}"}, {"question": "how many times has Giorgio Moroder won golden globe award?", "gold_sparql": "SELECT (COUNT (DISTINCT ?awards) AS ?result) WHERE {wd:Q312674 p:P166 ?awards. ?awards ps:P166/wdt:P31 wd:Q1011547}", "generated_sparql": "SELECT (COUNT(*) as goldens)\nFROM <http://dbpedia.org/ontology/> ?item \nWHERE {\n  ?item wdt:P31 wd:Q3118.\n  ?item wdt:P770 dbo:Wikipedia.\n  ?item wdt:P147 wdt:P369. # property P147 (\"awards\") has type P369 (\"Golden Globe Award\")\n  CONTAINS(str(?item), \"Golden Globe Award\")\n}"}, {"question": "How many Olympic Games has Kobe Bryant taken part in?", "gold_sparql": "SELECT (COUNT (DISTINCT ?ol) AS ?result) WHERE {wd:Q25369 wdt:P1344 ?ol. ?ol wdt:P31/wdt:P279 wd:Q5389}", "generated_sparql": "SELECT COUNT(*) as num_games\nWHERE {\n    :Bryant wdt:P31 [ wdt:P37 \"Olympic athlete\" ] .\n    :Bryant wdt:P82 ?games\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }"}, {"question": "How many times was Oskar Lafontaine elected Member of the Landtag of Saarland?", "gold_sparql": "SELECT (COUNT (DISTINCT ?s) AS ?result) WHERE {wd:Q110719 p:P39 ?s. ?s ps:P39 wd:Q18130478}", "generated_sparql": "SELECT COUNT(*) AS count \nWHERE { \n  ?person wdt:P15 wd:Q123958432.\n  FILTER(CONTAINS(STR(?person), \"Oskar Lafontaine\")).\n}"}, {"question": "How many wars did the Empire of Japan participate in?", "gold_sparql": "SELECT (COUNT (DISTINCT ?war) AS ?result) WHERE {wd:Q188712 wdt:P1344 ?war. ?war wdt:P31 wd:Q198}", "generated_sparql": "SELECT COUNT(*)\nWHERE {\n  <https://dbpedia.org/ontology/birthPlace/Japan>.\n  ?nome <https://dbpedia.org/ontology/conflict/WarWith>.\n  ?participant <https://dbpedia.org/ontology/conflict/Participant>.\n  FILTER (CONTAINS(str(?nome), 'World War II') AND str(?participant) = 'Empire of Japan')\n}"}, {"question": "How many women were amongst the founding members of \u201cThe Bridge\u201d (\u201cDie Br\u00fccke\u201d)?", "gold_sparql": "SELECT (COUNT (DISTINCT ?f) AS ?result) WHERE {wd:Q152778 wdt:P112 ?f. ?f wdt:P21 wd:Q6581072}", "generated_sparql": "SELECT COUNT(*) AS num_members \nWHERE { \n  ?br\u00fccke wdt:P849 wd:Q38948507. \n  SERVICE wikibase:label { bd:serviceParam wikibase:labelLanguage \"en\". }"}, {"question": "Who has a higher observed lifespan out of the common bottlenose dolphin and the brown bear?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P4214 ?ls. FILTER(?result IN (wd:Q174199, wd:Q36341))} ORDER BY DESC(?ls) LIMIT 1", "generated_sparql": "SELECT ?species ?lifespan \nWHERE {\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "What is TNFAIP1 ?", "gold_sparql": "SELECT ?result WHERE {wd:Q18032040 wdt:P31 ?result}", "generated_sparql": "SELECT ?s\nWHERE {\n  ?s wd:P31 wd:Q7249.\n  ?s wdt:P484 wd:Q1001.\n}"}, {"question": "How often did Naomi Novik win the nebula award?", "gold_sparql": "SELECT (COUNT(?award) AS ?result) WHERE {wd:Q242643 p:P166/ps:P166 ?award FILTER(?award = wd:Q194285)}", "generated_sparql": ""}, {"question": "How often did the Mongols try to invade Japan?", "gold_sparql": "SELECT (COUNT (DISTINCT ?time) AS ?result) WHERE {wd:Q208156 wdt:P585 ?time}", "generated_sparql": ""}, {"question": "How often was Naomi Novik nominated for a Hugo Award?", "gold_sparql": "SELECT (COUNT(?award) AS ?result) WHERE {wd:Q242643 p:P1411/ps:P1411 ?award FILTER(?award = wd:Q188914)}", "generated_sparql": "SELECT COUNT(*) as num\\_nominations\nFROM Wikidata:Nomination FOR wdt:P2753 Wikidata:Q10602 WHERE wdt:P2753/wdt:P180 > 0\nGROUP BY wdt:P2753/wdt:P180\nORDER BY num\\_nominations DESC\nLIMIT 1\n```python\nSELECT COUNT(*) as num_nominations\nFROM `Wikidata <http://dbpedia.org/ontology/wikiData:Nomination>` FOR (\n  SELECT ?item ?category WHERE {\n    ?item wdt:P2753 wdt:P180 ?category .\n  }"}, {"question": "How many years did the second oldest dog in the world live?", "gold_sparql": "SELECT ?result WHERE{?dog wdt:P31 wd:Q144. ?dog wdt:P569 ?db; wdt:P570 ?dd BIND((YEAR(?dd) - YEAR(?db)) AS ?result)} ORDER BY DESC(?result) LIMIT 1 OFFSET 1", "generated_sparql": ""}, {"question": "if someone died in 1969, is there any chance they heard of queen\u2019s music?", "gold_sparql": "ASK {wd:Q15862 wdt:P2031 ?start. FILTER(YEAR(?start) <= 1969)}", "generated_sparql": "SELECT ?s ?b ?m\nWHERE {\n  ?s wdt:P21 wd:Q126.       # death year\n  ?s wdt:P388 ?b.          # birth date\n  ?b wdt:P36 ?m.           # music genre\n  wdt:Q257 ?b wdt:P498 ?m   # Queen\n  BIND(YEAR(?b) AS ?d)      # extract birth year from birth date\n  FILTER(?d >= 1969)        # filter for birth years after 1969\n  FILTER(?d < 1970)        # filter for birth years before 1970\n}"}, {"question": "Is Dr. Pepper named after its inventor?", "gold_sparql": "ASK {wd:Q623561 wdt:P138 ?na; wdt:P61 ?inv. FILTER(?inv = ?na)}", "generated_sparql": "SELECT ?x ?y ?z WHERE {\n  ?x wdt:P140 wd:Q1296.\n  ?y wdt:P141 ?x.\n  ?y ?z ?x.\n}"}, {"question": "In how many movies did Carey Mulligan and Ryan Gosling star together?", "gold_sparql": "SELECT (COUNT(DISTINCT ?movie) AS ?result) WHERE {?movie wdt:P31 wd:Q11424; wdt:P161 wd:Q193815, wd:Q219655}", "generated_sparql": "SELECT COUNT(*) as num\nWHERE {\n  wdt:P31 wd:Q9553.  # actors\n  wdt:P32 [wd:P498 ?m].  # movies\n  wd:Q503 ?m.  # Carey Mulligan\n  wd:Q724 ?m.  # Ryan Gosling\n}"}, {"question": "in the country where ghost in the shell is born, who is the current head of the state?", "gold_sparql": "SELECT ?result WHERE {wd:Q92580 wdt:P495 ?country. ?country wdt:P35 ?result}", "generated_sparql": "SELECT COALESCE(label, \"No current head of state\")\nWHERE {\n  ?g :birthPlace ?p.Label. ?p.Language .\n  ?p :country ?j .\n  ?j wdt:P436 ?h .\n  SERVICE wikibase:label {\n    ?labelService wikibase:language \"en\" .\n    ?label ?labelService.\n  }"}, {"question": "How many rivers are in or next to the U.S. state where cage the elephant is from?", "gold_sparql": "SELECT (COUNT(DISTINCT ?bow) AS ?result) WHERE {wd:Q68061 wdt:P740/wdt:P131* ?state. ?state wdt:P31 wd:Q35657; wdt:P206 ?bow. ?bow wdt:P31 wd:Q4022}", "generated_sparql": ""}, {"question": "In which federal state is the Veltins brewery headquarter?", "gold_sparql": "SELECT ?result WHERE {wd:Q608350 wdt:P159 ?hql. ?hql wdt:P131* ?result. ?result wdt:P31 wd:Q1221156}", "generated_sparql": "SELECT DISTINCT ?state\nWHERE {\n  ?place dbp:wikiLabel \"Veltins brewery\".\n  ?place dbp:in ?state.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "In which stadium do the New York Yankees play?", "gold_sparql": "SELECT ?result WHERE {wd:Q213417 wdt:P115 ?result}", "generated_sparql": "SELECT ?stadium ?sport WHERE { ?city wdt:P31 wd:Quadrant. ?stadium wdt:P17 ?city. ?city wd:P31 wd:SportsTeam. ?sport wdt:P39 ?stadium. FILTER(REGEXP(STR(?stadium), '[Yy]ankees')) }"}, {"question": "In which countries is the Himalayas located?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q5451 wdt:P17 ?result}", "generated_sparql": "SELECT DISTINCT ?country ?countryLabel \nFROM {\n    SELECT ?country wdt:P31 ?mountainRange \n    FROM <http://dbpedia.org/ontology/geo>\n    WHERE { ?country wdt:P146 \"Himalayas\". \n           BIND(name(?mountainRange) AS ?countryLabel)\n    }"}, {"question": "Was Isfahan a capital in the year 934?", "gold_sparql": "ASK {wd:Q42053 p:P1376 ?ps. ?ps pq:P580 ?start; pq:P582 ?end. FILTER((YEAR(?start) < 934) && (YEAR(?end) > 934))}", "generated_sparql": "SELECT ?s\nWHERE {\n  ?s wdt:P1077 [ wdt:P499 ?w ] .\n  FILTER (CONTAINS(?w, \"934\")).\n  FILTER (CONTAINS(str(?s), \"Isfahan\")).\n}"}, {"question": "In how many countries has IKEA been established?", "gold_sparql": "SELECT (COUNT (DISTINCT ?c) AS ?result) WHERE {wd:Q1769361 wdt:P527 ?c. ?c p:P31/ps:P31 wd:Q6256}", "generated_sparql": "SELECT COUNT(label)\nWHERE {\n  ?c wdt:P31 wd:D003.  # IKEA\n  ?c wd:P439 \"Country\".\n}"}, {"question": "In which country did the United Fruit Company have their headquarters?", "gold_sparql": "SELECT ?result WHERE{wd:Q1771942 wdt:P159/wdt:P131* ?result. ?result wdt:P31 wd:Q6256}", "generated_sparql": "SELECT ?country WHERE { ?company wdt:P11 ?country }"}, {"question": "In how many countries is pysanka practiced?", "gold_sparql": "SELECT (COUNT (DISTINCT ?c) AS ?result) WHERE {wd:Q3233785 wdt:P17 ?c}", "generated_sparql": "SELECT COUNT(DISTINCT ?country) WHERE {\n  ?country wdt:P31 wd:Q53728.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "In which country is Oberirrach ?", "gold_sparql": "SELECT ?result WHERE {wd:Q98138090 wdt:P17 ?result}", "generated_sparql": "SELECT ?country WHERE {\n  <https://www.wikidata.org/entity/Q620777> ?country wdt:P31 <https://www.wikidata.org/entity/W0357>.\n}"}, {"question": "In which country was Spotify created?", "gold_sparql": "SELECT ?result WHERE {wd:Q689141 wdt:P495 ?result}", "generated_sparql": "SELECT ?c WHERE {\n  ?s wdt:P31 wd:Q157.\n  wdt:P127 wd:?c.\n  FILTER (?c = \"Sweden\")\n}"}, {"question": "What is the song Vogue by Madonna named after?", "gold_sparql": "SELECT ?result WHERE{wd:Q1128775 wdt:P175 wd:Q1744; wdt:P138 ?result}", "generated_sparql": "SELECT ?songName\nWHERE {\n  ?song wd:P31 wd:Q54184.\n  wd:P31 ?song wd:P970 wd:Q10175.\n  ?song wd:P434 ?name.\n}"}, {"question": "in which language does the united stated have the shortest short name?", "gold_sparql": "SELECT ?result WHERE {wd:Q30 wdt:P1813 ?name BIND(lang(?name) AS ?result)} ORDER BY ASC(strlen(?name)) LIMIT 1", "generated_sparql": "SELECT \n  wdt:language ?language\nWHERE \n  {\n    wd:short ?shortName .\n    wd:shortName wdt:shortFor wd:country ?countryId .\n    sp:P251 ?country wd:label ?countryLabel .\n    sp:P251 ?short wd:label ?languageLabel .\n    FILTER(LENGTH(CONCAT(' ', ?countryLabel, ': ', ?shortLabel)) < LENGTH(CONCAT(' ', ?languageLabel, ': ', ?shortLabel)))\n    FILTER(?country = <https://dbpedia.org/resource/United_States>)\n  }"}, {"question": "Does Bremerhaven's local dialing code start with 4?", "gold_sparql": "ASK {wd:Q2706 wdt:P473 ?code. FILTER regex(?code, \"^4\")}", "generated_sparql": "SELECT ?city ?hasDialingCode ?dialingCode\nWHERE {\n  ?city wdt:P31 wd:Q7. # Bremerhaven\n  ?city wdt:P134 ?dialingCode. # local dialing code\n  ?dialingCode str(startsWith(?dialingCode, \"4\"))\n}"}, {"question": "In how many movies was Johnny Depp casted in?", "gold_sparql": "SELECT (COUNT(DISTINCT ?result) AS ?resultCnt) WHERE{?result wdt:P31 wd:Q11424; wdt:P161 wd:Q37175}", "generated_sparql": "SELECT COUNT(*) AS numMovies\nWHERE {\n  ?o wdt:P31 wd:Q2154437. # Johnny Depp\n  ?o wdt:P31 wd:Q2827. # Movie\n  ?o wdt:P72 wd:Q1299171. # Cast\n}"}, {"question": "In which year did ABBA publish their album The Visitors ?", "gold_sparql": "SELECT ?result WHERE{wd:Q338553 wdt:P577 ?date. BIND(YEAR(?date) AS ?result)}", "generated_sparql": "SELECT YEAR(dbo:birthDay(dbr:ABBA)) AS \"abba_year\"\nWHERE \n{\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "In which year was the author of \u201cThe Vanishing Half\u201d born?", "gold_sparql": "SELECT ?result WHERE {wd:Q98476957 wdt:P50/wdt:P569 ?date. BIND(YEAR(?date) AS ?result)}", "generated_sparql": "SELECT bd:birthYear\nWHERE {\n  wd:P31 wikibase:Q1192.\n  wd:P364 bd:birthYear.\n}"}, {"question": "Is After Eight manufactured by Unilever?", "gold_sparql": "ASK {wd:Q388973 wdt:P176 wd:Q157062}", "generated_sparql": "SELECT * WHERE {\n  <http://dbpedia.org/ontology/prod/> <http://dbpedia.org/ontology/manufactures> <http://dbpedia.org/resource/After_Eight>.\n  SERVICE wik: { bd:serviceParam wik:serviceVersion 2.1.5 }"}, {"question": "Is ALDI also in Italy?", "gold_sparql": "ASK {wd:Q125054 wdt:P527/wdt:P17 wd:Q38}", "generated_sparql": "SELECT DISTINCT ?x\nWHERE {\n  { wd:P14 wd:P424 ?x . }"}, {"question": "is Isfahan a big city?", "gold_sparql": "ASK {wd:Q42053 wdt:P31 wd:Q1549591}", "generated_sparql": "SELECT (SERVICE 'http://dbpedia.org/service/label'\n        {bdbid: 'BDA-001-000'}"}, {"question": "Is math related to science ?", "gold_sparql": "ASK {wd:Q395 ?p [?p2 wd:Q336]}", "generated_sparql": "SELECT ?has ?hasLabel\nWHERE {\n  ?math wdt:P31 ?science\n}"}, {"question": "Is Python a kind of Programming languages?", "gold_sparql": "ASK {wd:Q28865 p:P31/ps:P31 wd:Q9143}", "generated_sparql": "SELECT COALESCE(\n  COALESCE((SELECT ?x WHERE {\n              ?x wdt:P879 wd:Q3061.\n              SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Is samurai champloo a piece of original work or an adaptation?", "gold_sparql": "SELECT ?result WHERE {wd:Q143276 wdt:P31/wdt:P279* ?result FILTER(?result IN (wd:Q104640197, wd:Q1213562))}", "generated_sparql": "SELECT ?title ?type WHERE {\n  ?title wdt:P176 [ wd:P31 wdt:Q36365540 ] .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }"}, {"question": "Was the first female chancellor in Germany ever married?", "gold_sparql": "ASK {{SELECT ?fc WHERE {wd:Q183 p:P6 ?ps. ?ps ps:P6 ?fc; pq:P580 ?st. ?fc wdt:P21 wd:Q6581072} ORDER BY ASC(?st) LIMIT 1} FILTER(EXISTS{?fc p:P26/ps:P26 ?sp})}", "generated_sparql": "SELECT ?c ?m\nWHERE {\n  ?c dbo:chancellorOf [ dbo:country dbr:'Germany' ] .\n  OPTIONAL { ?c dbo:maritalStatus wdt:single }"}, {"question": "Is the Mariana Trench deeper than Mount Everest is high (above sea level)?", "gold_sparql": "ASK {wd:Q510 wdt:P2044 ?d. wd:Q513 wdt:P2044 ?h. FILTER(?d + ?h < 0)}", "generated_sparql": "SELECT ?trench ?mountain ?depthTrench ?depthMountain\nWHERE {\n  ?trench wd:Q23362.\n  ?mountain wd:Q6282.\n  ?trench wdt:P31 wd:Q25608.   # Mariana Trench is a geographical location\n  ?trench wdt:P31 wd:Q9395.   # Mariana Trench is a geographical location\n  ?mountain wdt:P31 wd:Q19058.   # Mount Everest is a geographical location\n  ?mountain wdt:P31 wd:Q9295.   # Mount Everest is a geographical location\n  OPTIONAL {\n    ?depthTrench wdt:P87 ?depth.\n    ?depthTrench wdt:P170 ?maxDepth.\n    ?depthMountain wdt:P87 ?depth.\n  }"}, {"question": "Is the number of countries in Europe larger than that in Asia?", "gold_sparql": "ASK {{SELECT (COUNT (DISTINCT ?ac) AS ?acc) (COUNT (DISTINCT ?ec) AS ?ecc) WHERE {?ec p:P31/ps:P31 wd:Q6256; wdt:P30 wd:Q46. ?ac p:P31/ps:P31 wd:Q6256; wdt:P30 wd:Q48.}}FILTER(?ecc > ?acc)}", "generated_sparql": "SELECT ?x, COUNT(DISTINCT ?s.label) AS count_Europe, COUNT(DISTINCT ?a.label) AS count_Asia \nWHERE {\n    ?x wdt:P31 wd:Q8287.   # Europe\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Is the production company of samurai champloo still existing?", "gold_sparql": "ASK {wd:Q143276 wdt:P272 ?comp FILTER(NOT EXISTS{?comp wdt:P576 ?o})}", "generated_sparql": "SELECT *\nWHERE {\n  ?film wdt:P911 ?company.\n  ?company wdt:P1237 \"Samurai Champloo\".\n  FILTER(CONTAINS(?, \"is still existing\"))\n}"}, {"question": "is there female main character in hunter x hunter?", "gold_sparql": "ASK {wd:Q696071 wdt:P674 ?char. ?char wdt:P21 wd:Q6581072}", "generated_sparql": "SELECT ?x WHERE {\n  ?x wdt:P31 wd:Q178137.\n  wdt:P46 ?g.\n  FILTER (?g = \"Hunter\" && lang(?g) = \"en\")\n  FILTER (?x wdt:P884 ?g)\n  FILTER (?x wdt:P121 ?g)\n  FILTER (?x wdt:P374 ?g)\n  FILTER (?g = \"Hunter x Hunter\")\n  FILTER NOT EXISTS {\n    ?x wdt:P374 ?g\n    FILTER (?g = \"female\")\n  }"}, {"question": "Is water colorless?", "gold_sparql": "ASK {wd:Q283 wdt:P462 wd:Q11567495}", "generated_sparql": "SELECT ?x \nWHERE {\n  ?a wdt:P16 ?x .\n  FILTER(?, \"Water\").\n}"}, {"question": "Is Axel Rose a member of Guns N' Roses?", "gold_sparql": "ASK {wd:Q11885 wdt:P463 wd:Q11895}", "generated_sparql": "SELECT COUNT(*) AS numItems \nWHERE {\n  ?s wd:type wd:NamedIndividual;\n     dbp:member ?m .\n  ?s wd:name ?n.\n  ?n = \"Axel Rose\".\n  ?m = <http://dbpedia.org/resource/Guns_N_Roses>.\n}"}, {"question": "Is the capital of Iran bigger than that of Germany?", "gold_sparql": "ASK {wd:Q794 wdt:P36/wdt:P2046 ?a1. wd:Q183 wdt:P36/wdt:P2046 ?a2. FILTER(?a1 > ?a2)}", "generated_sparql": "SELECT ?a, ?b, ?sizeA, ?sizeB\nWHERE {\n   ?a = dbo:capitalOf ?countryA\n   ?b = dbo:capitalOf ?countryB\n   ?countryA = dbr:Iran\n   ?countryB = dbr:Germany\n   ?cityA = ?a ?sizeA\n   ?cityB = ?b ?sizeB\n   FILTER(?sizeA < ?sizeB)\n}"}, {"question": "Is the Weser longer than the Rhine?", "gold_sparql": "ASK{wd:Q1650 p:P2043/psn:P2043/wikibase:quantityAmount ?lenw. wd:Q584 p:P2043/psn:P2043/wikibase:quantityAmount ?lenr FILTER(?lenw > ?lenr)}", "generated_sparql": ""}, {"question": "Is Tony Blair taller than Tiger Woods?", "gold_sparql": "ASK {wd:Q9545 p:P2048/psn:P2048/wikibase:quantityAmount ?hb. wd:Q10993 p:P2048/psn:P2048/wikibase:quantityAmount ?hw FILTER(?hb > ?hw)}", "generated_sparql": "SELECT ?w1 ?w2 ?a WHERE {\n  ?w1 wd:P366 ?w2;\n  ?w1 wd:P41 ?name;\n  ?w2 wd:P41 ?name217;\n  FILTER (CONTAINS(STR(?name), \"Tony Blair\") && CONTAINS(STR(?name217), \"Tiger Woods\"))\n}"}, {"question": "Is Chicago located at Lake Michigan?", "gold_sparql": "ASK {wd:Q1297 wdt:P206 wd:Q1169}", "generated_sparql": "SELECT ?city ?location\nWHERE {\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Is the district of H\u00f6xter next to the district of Paderborn?", "gold_sparql": "ASK {wd:Q6228 wdt:P47 wd:Q6224}", "generated_sparql": "SELECT ?h ?p ?o  \nWHERE {\n  ?h wdt:P31 wd:District .\n  ?p wdt:P39 wd:District .\n  wd:District[\"en\", \"H\u00f6xter\"] wdt:Wdt10r :P39 wd:District[\"en\", \"Paderborn\"] .\n  FILTER (REGEXP(str(?h) -1, '.*H\u00f6xter.*'))\n}"}, {"question": "Are part of the Harz mountains in the district of Nordhausen?", "gold_sparql": "ASK {wd:Q4186 wdt:P131 wd:Q7858}", "generated_sparql": "SELECT ?P\nWHERE {\n  ?P wd:P1/wd:P30+ wd:Q15.\n  FILTER(CONTAINS(LOWER(str(?P)), 'harz mountains') AND EXISTS {\n    ?N wd:P1/dbp:contains ?N .\n    FILTER(CONTAINS(LOWER(str(?N)), 'nordhausen')\n  }"}, {"question": "How many people won the Nobel Prize in Literature or Physics since 2000?", "gold_sparql": "SELECT (COUNT (DISTINCT ?result) AS ?resultCnt) WHERE{?result wdt:P31 wd:Q5. ?result p:P166 ?ps. {?ps ps:P166 wd:Q37922} UNION {?ps ps:P166 wd:Q38104} ?ps pq:P585 ?time. FILTER(YEAR(?time) > 2000)}", "generated_sparql": ""}, {"question": "How many african-american people got a star on the Hollywood Walk of Fame?", "gold_sparql": "SELECT (COUNT (DISTINCT ?act) AS ?result) WHERE {?act wdt:P31 wd:Q5; wdt:P166 wd:Q17985761; wdt:P172 wd:Q49085}", "generated_sparql": "SELECT COUNT(*) ?count\nWHERE {\n  ?person wdt:P14 wd:Q240870.\n  ?person wikibase:star ?star.\n  ?star wdt:P31 wd:Q22531430.\n  FILTER(language(?person) = \"en\")\n}"}, {"question": "With how many countries does Australia share a border?", "gold_sparql": "SELECT (COUNT(DISTINCT ?country) AS ?result) WHERE {wd:Q408 wdt:P47 ?country. ?country p:P31/ps:P31 wd:Q6256}", "generated_sparql": "SELECT COUNT(*) as border_countries WHERE { wd:P1098 wd:P31 wd:Q544440. }"}, {"question": "How many female Chinese Empresses have there been?", "gold_sparql": "SELECT (COUNT (DISTINCT ?result) AS ?resultCnt) WHERE {?result wdt:P39 wd:Q268218; wdt:P21 wd:Q6581072}", "generated_sparql": ""}, {"question": "Of which political party was Joseph Beuys a member?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q153965 wdt:P102 ?result}", "generated_sparql": "SELECT ?party\nWHERE {\n    ?person wdt:P31 wd:Q84469.\n    FILTER(CONTAINS(str(?party), 'Joseph Beuys'))\n}"}, {"question": "In what year did the Hollywood Walk of Fame open?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q71719 wdt:P1619 ?year. BIND(YEAR(?year) AS ?result) }", "generated_sparql": "SELECT ?year\nWHERE {\n  wd:Q6: wdt:P31 wd:Q2373281.  # \"Hollywood Walk of Fame\"\n  wd:Q6: wdt:P411 ?year.  # \"opened\"\n}"}, {"question": "on which video streaming services can i watch hunter x hunter anime series?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q70209136 wdt:P750 ?result. ?result wdt:P31 wd:Q59152282 }", "generated_sparql": "SELECT DISTINCT ?service WHERE {\n  ?service wdt:P31 wdts:StreamingService.\n  SELECT ?service ?streamingPlatform WHERE {\n    :Hunter x Hunter wdt:P31 ?service.\n    ?service wdt:P517 ?streamingPlatform.\n  }"}, {"question": "People of what age belong to the Silent Generation ?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q3044693 wdt:P582 ?time. BIND(YEAR(NOW()) - YEAR(?time) AS ?result) }", "generated_sparql": ""}, {"question": "In what year did the district of H\u00f6xter come into existence?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q6228 wdt:P571 ?time. BIND(YEAR(?time) AS ?result)}", "generated_sparql": "SELECT ?year \nWHERE {\n  SERVICE wikibase:label {\n    bd:serviceParam wikibase:language \"en\".\n  }"}, {"question": "Is the Linux Foundation verified on Twitter?", "gold_sparql": "ASK{wd:Q858851 p:P2002/pq:P1552 wd:Q28378282}", "generated_sparql": "SELECT * \nWHERE {\n    ?org wdt:P31 wd:Q1037863.  # Linux Foundation\n    ?org wdt:P381 ?twitterId.  # The Linux Foundation on Twitter\n    FILTER(CONTAINS(?twitterId, \"[a-zA-Z0-9\\\\.]+@twitter\"))  # Check if an email address is present in Twitter ID\n}"}, {"question": "Were Angela Merkel and Tony Blair born in the same year?", "gold_sparql": "ASK {wd:Q567 wdt:P569 ?da. wd:Q9545 wdt:P569 ?dt. FILTER(YEAR(?dt) = YEAR(?da))}", "generated_sparql": "SELECT ?m ?b\nWHERE {\n  ?m wd:birthPlace ?b.\n  ?m wd:birthPlace ?b.\n  FILTER(regex(str(?m), \"Angela Merkel\", \"i\"))\n  FILTER(regex(str(?b), \"Tony Blair\", \"i\"))\n}"}, {"question": "Do more than 100000000 people speak Japanese?", "gold_sparql": "ASK {wd:Q5287 wdt:P1098 ?num. FILTER(?num > 100000000)}", "generated_sparql": "SELECT COUNT(DISTINCT ?person)\nFROM <http://dbpedia.org/ontology/> ?person\nWHERE {\n  ?person wd:label 'Japanese language'.\n  ?person bd:hasLanguage wd:languageTag 'ja'.\n}"}, {"question": "Tell me all the cast members of the film Red Notice directed by Rawson Marshall Thurber ?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q58815001 wdt:P57 wd:Q2745616; wdt:P161 ?result}", "generated_sparql": "SELECT ?s WHERE {\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "The first album of Jay Chou", "gold_sparql": "SELECT DISTINCT ?result WHERE{?result wdt:P31 wd:Q482994; wdt:P175 wd:Q238819; wdt:P577 ?date. } ORDER BY ASC(?date) LIMIT 1", "generated_sparql": "SELECT bd:label(b) AS label, wd:P179 wdt:P30 wdt:W10231 ?b\nWHERE {\n    ?b wdt:W10231 wdt:P179 wdt:W160 wd:W1257.\n    ?b bd:type ?x.\n    ?x wdt:W31 wd:Q658.\n    ?b bd:label ?label.\n}"}, {"question": "Through which countries does the Danube go?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q1653 wdt:P17 ?result}", "generated_sparql": "SELECT DISTINCT ?country\nWHERE {\n  ?river wd:P246 ?country.\n  ?river dbo:name ?river.\n  STRING(?river) = 'Danube'.\n}"}, {"question": "What do sperm whales mainly eat?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q81214 wdt:P1034 ?result}", "generated_sparql": "SELECT ?s ?sLabel ?p ?pLabel\nWHERE {\n?s wd:Q2011007 wdt:P31 [wd:P650 \"Eukaryotes\"] .\n?s wdt:P31 wd:Q218729.\n?s wdt:P31 wd:Q1863671.\n?p wd:Q2011007 wdt:P147.\n?p wd:P147 wd:Q11075.\n?p wd:Q11075 wd:Q204565.\n?p wd:P31 wd:Q6232.\n}"}, {"question": "Was Frida Kahlo a surrealist?", "gold_sparql": "ASK{wd:Q5588 wdt:P135 wd:Q39427}", "generated_sparql": "SELECT ?x ?y WHERE { wd:Q546 wdt:P748/wdt:P618+wdt:P31 ?x . ?x wdt:P618 ?y . }"}, {"question": "Was Funny Games and its remake directed by different persons?", "gold_sparql": "ASK{wd:Q696928 wdt:P57 ?dir. wd:Q951002 wdt:P57 ?dir2. FILTER(?dir != ?dir2)}", "generated_sparql": "SELECT ?film ?director1 ?director2 ?same\nWHERE {\n  OPTIONAL {\n    wd:P31 wd:Movie.\n  }"}, {"question": "Was Google founded by Bill Gates?", "gold_sparql": "ASK{wd:Q95 wdt:P112 wd:Q5284}", "generated_sparql": "SELECT *\nWHERE {\n   ?q wdt:P31 wd:Q369.\n   ?p wdt:P439 ?a.\n   FILTER(CONTAINS(?a, \"Bill Gates\"))\n}"}, {"question": "What is the second letter in the Greek alphabet?", "gold_sparql": "SELECT DISTINCT ?result WHERE{?fl wdt:P31 wd:Q19793459; wdt:P361 wd:Q8216. ?fl wdt:P156 ?result FILTER(NOT EXISTS{?fl wdt:P155 ?we})}", "generated_sparql": "SELECT ?letter WHERE {\n   ?item wdt:P277 ?value.\n   FILTER(CONTAINS(CONVERT_TITLE_TO_STRING(?item), 'Greek alphabet'))\n   FILTER(CONTAINS(CONVERT_TITLE_TO_STRING(?value), 'second letter'))\n   SELECT ?letter{\n       ?item <wdt:P584> ?letter.\n   }"}, {"question": "Was it the cancer that caused the death of Steve Jobs who was the CEO of Apple?", "gold_sparql": "ASK {wd:Q19837 wdt:P509/wdt:P279* wd:Q12078 }", "generated_sparql": "SELECT ?c ?m ?s ?t\nWHERE {\n  ?m wdt:WDT42. # cancer\n  ?s wdt:Q488361. # Steve Jobs\n  ?c wdt:Q615526. # CEO\n  ?s wdt:Q615526. # CEO\n  ?t wdt:P395. # died\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Was Shaquille O'Neal the teammate of Kobe Bryant in the year of 2000?", "gold_sparql": "ASK {wd:Q25369 p:P54 ?ps1. ?ps1 ps:P54 ?team; pq:P580 ?st1; pq:P582 ?et1. wd:Q169452 p:P54 ?ps2. ?ps2 ps:P54 ?team; pq:P580 ?st2; pq:P582 ?et2. FILTER(YEAR(?st1) <= 2000 && YEAR(?et1) >= 2000 && YEAR(?st2) <= 2000 && YEAR(?et2) >= 2000)}", "generated_sparql": "SELECT ?t.value AS ?team\r\nWHERE {\r\n  ?player wdt:P31 wd:Q1190668. # Shaquille O'Neal\r\n  ?player wdt:P279 * ?team. # teammate of\r\n  ?team wdt:P31 wd:Q3136060. # Kobe Bryant\r\n  FILTER(YEAR(?team.value) = 2000)\r\n}"}, {"question": "Was Shaquille O'Neal, as the basketball player, also an film actor?", "gold_sparql": "ASK {wd:Q169452 wdt:P106 wd:Q3665646, wd:Q10800557}", "generated_sparql": "asketball player, also an film actor?' from Wikidata. [/INST] To determine if Shaquille O'Neal, as a basketball player, is also a film actor in Wikidata, the following SPARQL query can be used:\n```vbnet\nSELECT ?basketballPlayer ?actor\nWHERE {\n    ?basketballPlayer wdt:P31 wd:Q2190789.    # shaquille o'neal\n    ?basketballPlayer wdt:P499 ?actor.    # has role\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Was the first album of the band Darkside released in 2012?", "gold_sparql": "ASK {?album wdt:P31 wd:Q482994; wdt:P175 wd:Q16954319; wdt:P577 ?date FILTER(NOT EXISTS{?album2 wdt:P31 wd:Q482994; wdt:P175 wd:Q16954319; wdt:P577 ?date2 FILTER(?date2 < ?date)} && YEAR(?date) = 2012)}", "generated_sparql": "SELECT ?b ?l ?y WHERE { ?b wdt:P467 ?l wdt:P807 ?y }"}, {"question": "What are the spin-offs of Breaking Bad?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1079 wdt:P2512 ?result}", "generated_sparql": "SELECT t.name, t.wikibase ?spinoff\nWHERE {\n  SELECT ?spinoff\n  FROM {\n    SELECT wdt:subject+'_'+str(wdt:P194?property) AS ?spinoff\n    FROM wikibase:list ?property WHERE { wikibase:mainsync ?property }"}, {"question": "Which river flows through the Grand Canyon?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q4022. wd:Q118841 wdt:P206 ?result}", "generated_sparql": "SELECT ?river\nWHERE {\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "What was the key event related to Salvador Dal\u00ed?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q5577 wdt:P793 ?result}", "generated_sparql": ""}, {"question": "Who passed the German Occupational Safety and Health Act?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?act wdt:P31 wd:Q1006079; wdt:P361 wd:Q629029; wdt:P1001 wd:Q183; wdt:P467 ?result}", "generated_sparql": "SELECT DISTINCT ?name WHERE {\n  @prefix dbo: <http://dbpedia.org/ontology/>\n  @prefix wdt: <http://www.w3.org/2000/07/meta-data-types#>\n  @prefix wdi: <http://www.w3.org/2013/04/wsurveyid/>\n  @prefix wdt: <http://www.w3.org/2000/07/meta-data-types#>\n  @prefix wdt: <http://www.w3.org/2000/07/meta-data-types#>\n  @prefix wdt: <http://www.w3.org/2000/07/meta-data-types#>\n    SELECT DISTINCT ?subject WHERE {\n      ?subject dbo:sameAs wdt:Q13446434.\n    }"}, {"question": "What are the German names of academic disciplines containing \u201clinguistik\u201d?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?disc wdt:P31 wd:Q11862829; rdfs:label ?result FILTER(langMatches(lang(?result),\"de\") && regex(?result,\"linguistik\"))}", "generated_sparql": "SELECT wdt:label\nFROM dbpedia_sparql_service.sparql\nWHERE {\n  ?s wdt:P17 wdt:W243.  # German\n  ?s wdt:P31 wdt:WD.  # Scholarly field/discipline\n  ?s wdt:P39 wdt:L802204.  # Linguistics\n}"}, {"question": "What are the names of the head of states of Germany and France ?", "gold_sparql": "SELECT ?result WHERE {{wd:Q183 wdt:P35 ?result} UNION {wd:Q142 wdt:P35 ?result}}", "generated_sparql": "SELECT ?state ?stateLabel\nWHERE {\n  ?state wdt:P31 wd:Q314.\n  ?state wdt:P455 ?headOfState.\n  ?headOfState wdt:P423 .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "What are the professions of John Lennon\u2019s sons?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?son wdt:P22 wd:Q1203; wdt:P31 wd:Q5; wdt:P106 ?result}", "generated_sparql": "SELECT ?profession WHERE {\n  ?person wdt:P31 wd:Q48.\n  ?person wdt:P480 ?profession.\n  FILTER(regex(str(?person), 'John Lennon\\.\\\\s*\\\\([,\\\\s]+(?:\\\\(\\\\s*Julia\\\\s*Lenon\\\\))?$', 'i'))\n}"}, {"question": "What are the titles of the Star Wars series movies?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?film wdt:P1476 ?result; wdt:P179 wd:Q22092344 FILTER(EXISTS{?film wdt:P31/wdt:P279* wd:Q11424})}", "generated_sparql": "SELECT ?title WHERE {\n       ?film wdt:P31 wd:Q10437673.    # Star Wars\n       ?film wdt:P314 ?object.         # series\n       ?film wdt:P431 ?object.      # movie\n       ?film wd:P147 ?title.\n}"}, {"question": "What came first: the TV show The Flintstones or the end of racial discrimination in voting in the US ?", "gold_sparql": "SELECT DISTINCT ?result WHERE{ BIND(IF(EXISTS{wd:Q201358 wdt:P580 ?date1. wd:Q1608064 wdt:P577 ?date2. FILTER(?date1 < ?date2)},wd:Q201358 , wd:Q1608064) AS ?result)}", "generated_sparql": "SELECT <dbo:startLabel>\nWHERE {\n  # Start of \"The Flintstones\"\n  ?flintstones wdt:P39 wd:Q1229537.\n\n  # End of racial discrimination in voting in the US\n  ?discrimination wdt:P424 wd:Q8991963.\n}"}, {"question": "What colors does the German national flag have?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q48160 wdt:P462 ?result}", "generated_sparql": ""}, {"question": "What did the suffragettes stand for?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q322170 wdt:P279/wdt:P425/wdt:P3712 ?result}", "generated_sparql": "SELECT ?x ?label\nWHERE {\n  ?x wdt:P31 wdt:Q65962;\n  dbo:about ?x;\n  dbo:birthPlace ?birthPlace;\n}"}, {"question": "What do you call a female form of an emperor in English?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q39018 wdt:P2521 ?result. FILTER(langMatches(lang(?result),\"en\"))}", "generated_sparql": "SELECT ?term WHERE {\n  ?o wdt:P21 wd:Q21 [ ?o wdt:P1x wd:Q21174924. ]\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en.\" }"}, {"question": "What event killed the most people in the years 1910 to 1920?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P1120 ?num; wdt:P580 ?st; wdt:P582 ?et. FILTER((EXISTS{?result wdt:P31/wdt:P279* wd:Q1190554}) &&(YEAR(?st) >= 1910) && (YEAR(?et) <= 1920))}ORDER BY DESC(?num) LIMIT 1", "generated_sparql": "SELECT ?event\nWHERE {\n  ?event wdt:P145 ?numberOfDeaths.\n  FILTER(year(?event) >= 1910 AND year(?event) <= 1920).\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Does the ATI Company still exist?", "gold_sparql": "ASK {FILTER(NOT EXISTS {wd:Q213849 wdt:P576 ?o})}", "generated_sparql": "SELECT * WHERE {\n    @prefix wd: <https://www.wikidata.org/>\n    @prefix wdb: <https://www.wikidata.org/prop/>\n    \n    SELECT COUNT(*) AS num_pages \n    WHERE {\n        ?page wd:P31 wd:Q5251422. --> ?company.\n                ?company wd:P31 wd:Q10636.\n    }"}, {"question": "What happened to the dinosaurs ?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q430 wdt:P793 ?result}", "generated_sparql": "SELECT ?s ?p WHERE {\n  ?s wdt:P132 ?p;\n  ?p wdt:P48 ?o;\n  ?o wdt:P57 wd:OWL:Thin.\n  FILTER(CONTAINS(str(?p), \"happened to the dinosaurs\"))\n}"}, {"question": "What instruments did Louis Armstrong play?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1779 wdt:P1303 ?result}", "generated_sparql": "Select `?instrument` where {\n    wd:Q92057 wd:P31 wd:Q20433775.\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "what did the author of the phrase: \"Alea iacta est\" die of?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q271723 wdt:P50/wdt:P509 ?result}", "generated_sparql": "SELECT ?author ?causeOfDeath\nWHERE {\n  ?author wd:Q7458748 ?causeOfDeath ;\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "What is the binary gender of the partner of Allen Ginsberg ?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q6711 wdt:P451/wdt:P21 ?result}", "generated_sparql": ""}, {"question": "What is the capital of the prefecture Tokyo ?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1490 wdt:P36 ?result}", "generated_sparql": "SELECT ?capital WHERE {\n  ?pref prefecture { serviceParam ?name ?value ?label { bd:serviceParam name ?name; bd:serviceParam value ?value; bd:serviceParam label ?label }"}, {"question": "What is the Chinese zodiac animal that follows the ox?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q79226802; wdt:P155 wd:Q599644}", "generated_sparql": "SELECT ?animal WHERE {\n  ?animal wdt:P43/wd ?predicate.\n  ?animal wdt:P43 ?predicate wd:P89 ?chinese_zodiac.\n}"}, {"question": "What is the combined total revenue of three largest Big Tech companies ordered by number of employees?", "gold_sparql": "SELECT (SUM(?rev) AS ?result) WHERE {{SELECT DISTINCT ?company WHERE {?company wdt:P361 wd:Q30748112. ?company wdt:P1128 ?num} ORDER BY DESC(?num) LIMIT 3} ?company p:P2139 ?ps. ?ps ps:P2139 ?rev; pq:P585 ?time. FILTER(NOT EXISTS{?company p:P2139/pq:P585 ?time2 FILTER(?time2 > ?time)})}", "generated_sparql": "SELECT SUM(wd:revenue) AS totalRevenue, wd:name AS company, wd:numEmployees AS employees\nFROM wikibase:labeledEntity\nJOIN wikibase:hasClaim\nWHERE {\n    wikibase:labeledEntity wd:Q496.\n    wd:hasClaim ?claim.\n    FILTER(CONTAINS(str(QUALITY(?claim))) && (POSITION(?claim) >= 'Wikibase Quality Filter', QUALITY(?claim)))\n    ?claim wd:P31 wd:Q1312.\n    ?claim wd:P431 \"Revenue (USD)\".\n    ?claim wd:P7 ?revenue.\n    ?claim wd:P435 ?employees.\n    FILTER(CONTAINS(str(QUALITY(?claim))) && (POSITION(?claim) >= 'Wikibase Quality Filter', QUALITY(?claim)))\n}"}, {"question": "What is the coordinate location of Shenzhen ?", "gold_sparql": "SELECT  DISTINCT ?result WHERE {wd:Q15174 wdt:P625 ?result}", "generated_sparql": "SELECT ?lat, ?lon\nWHERE {\n  ?s wd:P235 ?lat ?lon ;\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "What is the Erlangen program ?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q315296 wdt:P31 ?result}", "generated_sparql": "SELECT ?o ?oLabel WHERE {\n  @prefix : <http://dbpedia.org/resource/>\n  @prefix wdt: <http://dbpedia.org/ontology/>\n  @prefix wd: <http://www.w3.org/2000/01/rdf-schema#/>\n  {\n    wdt:P11 wd:Wikipedia.\n    ?o wdt:P31 [ wdt:Wikipedia wd:Q2130728. ].\n    ?o wd:P129 [ ?g wd:P31 { wd:P41 wd:Q8165459. }"}, {"question": "Did the Roland Corporation produce synthesizers?", "gold_sparql": "ASK {?result wdt:P31 wd:Q163829; wdt:P176 wd:Q848490}", "generated_sparql": "SELECT * WHERE {\n  ?w wdt:P119 wd:Q31325646. # Roland Corporation\n  wdt:P362 wd:Q34313803. # Synthesizer\n  FILTER(regex(?w, '^Roland'))\n}"}, {"question": "How many perople do the Port of Rotterdam employ?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1027807 wdt:P1128 ?result}", "generated_sparql": "SELECT COUNT(*) AS employees\nWHERE {\n  ?x wdt:P31 wd:Q112466.\n  ?x wdt:P31 wd:Q6058.\n  BIND (service:statements(?x) AS ?statements)\n  VALUES (? statements ?x's employee count 'str(?statements.value)).\n}"}, {"question": "what is the main subject of the manga \"your lie in april\": primary school, middle school or high school student?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q11419997 wdt:P921 ?result. FILTER(?result IN (wd:Q16003605, wd:Q16003532, wd:Q15360275))}", "generated_sparql": "SELECT ?s WHERE {\n  ?s wdt:P370 ?p.\n  ?p wdt:P495 ?o.\n  STRING(?p) = 'Manga'.\n  ?o ?a ?b FILTER (?a = 'your lie in april' && ?b IN ('primary school', 'middle school', 'high school student')).\n}"}, {"question": "What is the mother tongue of the author Chimamanda Ngozi Adichie ?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q230141 wdt:P103 ?result}", "generated_sparql": "SELECT ?m ?l\nWHERE {\n    ?m wdt:P403. ?l wdt:P157.\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"[en,de]\". }"}, {"question": "Who was the partner of Allen Ginsberg?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q6711 wdt:P451 ?result}", "generated_sparql": ""}, {"question": "What is the second game developed by Piranha Bytes?", "gold_sparql": "SELECT DISTINCT ?result WHERE{?result wdt:P178 wd:Q677273; wdt:P577 ?date} ORDER BY ASC(?date) OFFSET 1 LIMIT 1", "generated_sparql": "SELECT distinct ?game ?gameLabel WHERE {\n  ?x wdt:P31 wd:Game.\n  ?game wdt:P31 ?a.\n  ?x wdt:P31 wd:P12.\n  FILTER(CONTAINS(SUBSTRING_INDEX(?a,',',-1),'P246',''))\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "What is the TV-show that starred Rowan Atkinson , had 4 seasons and started in 1983?", "gold_sparql": "SELECT DISTINCT ?result WHERE{?result wdt:P31 wd:Q5398426; wdt:P161 wd:Q23760; wdt:P2437 ?season; wdt:P580 ?time FILTER((YEAR(?time) = 1983) && (?season = 4))}", "generated_sparql": "SELECT ?showTitle\nWHERE\n{\n  ?show wd:P31 wd:Q218753.\n  ?show wd:P36 ?startDate.\n  ?show wd:P35 ?numSeasons.\n  ?show wd:P186 ?rowanAtkinson.\n  FILTER(REGEXP(str(?startDate), \"^1983\"))\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "What is the english nickname of Ella Fitzgerald?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1768 wdt:P1449 ?result. FILTER(langMatches(lang(?result),\"en\"))}", "generated_sparql": "SELECT label WHERE {\n  ?p wdt:P246 [ rdfs:label ?l ] .\n  OPTIONAL {\n    ?l wdt:P459 [ wikibase:language \"en\" ] .\n  }"}, {"question": "What are the occupations of Kazuo Ishiguro\u2019s daughter?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q272855 wdt:P40 ?d. ?d wdt:P21 wd:Q6581072; wdt:P106 ?result}", "generated_sparql": "SELECT ?occupation\nWHERE\n{\n    wd:Q797678 wd:P131 ?occupation.\n}"}, {"question": "What are the occupations of Nat King Cole?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q137042 wdt:P106 ?result}", "generated_sparql": "SELECT DISTINCT ?occupation WHERE {\n    ?s wdt:P179 wd:Q2361.\n    FILTER(STR(?s) = \"Nat King Cole\")\n}"}, {"question": "what is the official language of iran?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q794 wdt:P37 ?result}", "generated_sparql": "SELECT ?language WHERE {\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "What is the population in Freiburg ?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q2833 wdt:P1082 ?result}", "generated_sparql": "SELECT population WHERE {\n  ?place wdt:P47 \"Freiburg\".\n  ?place wdt:P31 wd:City.\n  ?place wdt:P143 ?population.\n}"}, {"question": "What is the title of the 2020 released movie in which Carey Mulligan was the main actress?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?movie wdt:P31 wd:Q11424; wdt:P161 wd:Q219655; wdt:P577 ?time; wdt:P1476 ?result FILTER(YEAR(?time) = 2020)}", "generated_sparql": "SELECT ?title\nWHERE {\n  ?person wd:P31 wd:Q119230. # Carey Mulligan\n  ?movie wd:P31 wd:Q63008. # movie\n  ?movie wd:P279 ?releaseYear.\n  FILTER(?releaseYear = 2020)\n  ?movie wd:P1190 ?title\n}"}, {"question": "What does Ray-Ban produce primarily?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q653941 wdt:P1056 ?result}", "generated_sparql": "SELECT ?itemLabel WHERE {\n  ?item wdt:P31 wdt:Q5082.\n  ?item wdt:P921 ?productionLabel.\n  FILTER(regex(?itemLabel, \"Ray-Ban\", i))\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "What language did the famous king, who was also a student of Aristotle's , speak?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q868 wdt:P802 ?king. ?king wdt:P97 wd:Q12097; wdt:P1412 ?result}", "generated_sparql": "SELECT wd:name, wd:language\nWHERE {\n  @prefix wd: <https://www.wikidata.org/entity/> .\n  wd:Q2 wd:type wd:Person .\n  wd:Q2 wd:sameAs ?king .\n  wd:Q2+ wd:studiedBy wd:Q175 .\n  ?king wd:label ?label .\n  ?king wd:language ?lang\n}"}, {"question": "What language do they speak in Poland ?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q36 wdt:P2936 ?result}", "generated_sparql": "SELECT wdt:label\nFROM wikibase:LabelSet\nWHERE {\n  bd:serviceParam wikibase:language \"en\" .\n  FILTER(str(wd:label) LIKE \"%Poland%\")\n}"}, {"question": "How many different languages are spoken in West Europe?", "gold_sparql": "SELECT (COUNT (DISTINCT ?lan) AS ?result) WHERE {wd:Q27496 wdt:P527/wdt:P2936 ?lan}", "generated_sparql": "SELECT COUNT(DISTINCT ?language) AS num_languages\nWHERE {\n    ?person wdt:P31 wd:Q2184544.\n    ?person wdt:P432 ?language.\n    FILTER(CONTAINS(?language.value, 'en') && CONTAINS(?language.value, 'West') && !CONTAINS(?language.value, 'Arabic') && !CONTAINS(?language.value, 'Farsi') && !CONTAINS(?language.value, 'Afghan') &&\n              !CONTAINS(?language.value, 'Urdu') && !CONTAINS(?language.value, 'Indic') && !CONTAINS(?language.value, 'East') && !CONTAINS(?language.value, 'Uralic') && !CONTAINS(?language.value, 'Central'))\n}"}, {"question": "Is Germany bigger than Poland?", "gold_sparql": "ASK {wd:Q183 p:P2046/psn:P2046/wikibase:quantityAmount ?ag. wd:Q36 p:P2046/psn:P2046/wikibase:quantityAmount ?ap FILTER(?ag > ?ap)}", "generated_sparql": "SELECT ?a .\nWHERE {\n    ?r dbo:isCapitalOf ?a .\n    ?a dbo:hasPlaceName \"Germany\" .\n    ?a dbo:hasPlaceName \"Poland\" .\n    ?a dbo:hasArea ?s .\n    ?r dbo:isCapitalOf ?a .\n    FILTER(CONTAINS(?a, \"Wikidata\"))\n}"}, {"question": "What notes does a C major chord consist of?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q55706505 wdt:P527 ?result. ?result wdt:P31 wd:Q263478}", "generated_sparql": "SELECT ?note {\n ?note wdt:itemOf wdt:genre ?genre WHERE {\n   ?genre skos:inLanguage \"en\" .\n   ?genre wd:label \"Popular music\" .\n   SERVICE wikibase:label { bd:serviceParam dbpedia:language \"en\". }"}, {"question": "How many different occupations did/do spouses of winners of the Nobel Prize in Literature hold?", "gold_sparql": "SELECT (COUNT (DISTINCT ?occ) AS ?result) WHERE {?winner wdt:P166 wd:Q37922; wdt:P26/wdt:P106 ?occ}", "generated_sparql": "SELECT DISTINCT ?occupation\nWHERE {\n  ?prize WIN :hasWon [ :name \"Literature\" ] .\n  ?prize :hasSpouse [ ?spouse <http://dbpedia.org/resource/Person>. \n  ?spouse :occupation ?occupation .\n  ?prize :year <> 2021 .\n}"}, {"question": "How many other video games began the same year as Dead by Daylight?", "gold_sparql": "SELECT (COUNT (DISTINCT ?game) AS ?result) WHERE {?game wdt:P31/wdt:P279* wd:Q7889; wdt:P577 ?gameTime. wd:Q24514682 wdt:P577 ?dbdtime. FILTER((YEAR(?gameTime) = YEAR(?dbdtime)))}", "generated_sparql": "SELECT COUNT(DISTINCT gd:game) \nWHERE {\n  ?b dbo:birthYear ?year.\n  FILTER(?year = 2013).\n  ?b wdt:P31 wd:Game.\n}"}, {"question": "What other civilizations existed during the Aztecs ?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31/wdt:P279* wd:Q8432; wdt:P580 ?start; wdt:P582 ?end. wd:Q12542 wdt:P580 ?ast; wdt:P582 ?aet. FILTER(?start < ?aet && ?end > ?ast && ?result != wd:Q12542) }", "generated_sparql": "SELECT DISTINCT ?civ\nWHERE {\n  ?civ dbo:name \"Aztecs\".\n  ?civ wikibase:isSuccessorOf ?succ.\n  ?succ dbo:name \"Aztecs\" ^.\n  FILTER(?civ != \"Aztecs\")\n}"}, {"question": "What brand uses petroleum jelly?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P1056 wd:Q457239; wdt:P31/wdt:P279 wd:Q431289}", "generated_sparql": "SELECT DISTINCT ?brand WHERE {\n  ?brand wdt:P40 ?company.\n  ?brand wdt:P275 ?industry.\n  FILTER(CONTAINS(?brand, 'petroleum jelly')).\n  FILTER(CONTAINS(?industry, 'petroleum jelly')).\n  FILTER(CONTAINS(?company, 'petroleum jelly')).\n  SERVICE wikibase:label { bds:serviceParam wikibase:language 'en'. }"}, {"question": "How many other musical films were launched the same year as Grease?", "gold_sparql": "SELECT (COUNT (DISTINCT ?result) AS ?resultCnt) WHERE {?result wdt:P31/wdt:P279* wd:Q11424; wdt:P136 wd:Q842256; wdt:P577 ?date. wd:Q267721 wdt:P577 ?dateG FILTER((YEAR(?date)=YEAR(?dateG)) && (?result != wd:Q267721))}", "generated_sparql": "SELECT (COUNT(*) - 1) AS other_musical_films\r\nFROM wd:WikiData \r\nWHERE {\r\n  wd:P363 wd:P363._\r\n  wd:P19 wd:P19.6\r\n}"}, {"question": "Which creator of The OA also acted in it?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q19798744 wdt:P170 ?result; wdt:P161 ?result}", "generated_sparql": "SELECT DISTINCT ?creator ?creatorLabel\nWHERE {\n  ?oa wdt:P31 wd:Q1021.\n  ?oa wdt:P139 ?creator.\n  ?creator wdt:P31 wd:Q80.\n  ?creator wdt:P431 ?actor.\n  FILTER (CONTAINS(?actor, 'The OA') && CONTAINS(?actor, 'actor'))\n}"}, {"question": "What albums has Atif Aslam been on?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q482994; wdt:P175 wd:Q755830}", "generated_sparql": "SELECT DISTINCT ?x WHERE {\n  ?x wdt:P31 wd:Q628.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "What was Ada Lovelace\u2019s noble title?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q7259 wdt:P97 ?result}", "generated_sparql": "SELECT ?title WHERE {\n  ?person wdt:P31 wd:Q20235. \n  ?person wdt:P448 ?title.\n  FILTER(str(?title) == \"Ada Lovelace\".)\n}"}, {"question": "What was Janus the god of?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q167685 wdt:P2925 ?result}", "generated_sparql": "SELECT DISTINCT {\n wd:P31 ?x .\n  FILTER(CONTAINS(?x, \"Janus\"))\n}"}, {"question": "Who was the fellow Hobbit who was an enemy of Frodo?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q177329 wdt:P7047 ?result. ?result wdt:P31 wd:Q74359}", "generated_sparql": "SELECT ?fellowHobbit WHERE {\n  ?fellowHobbit wdt:P361 ?mainRole.\n  ?mainRole foaf:name ?name.\n  ?name wdt:P31 wd:Q6937688.\n  ?fellowHobbit wdt:P30 wd:Q3579433.\n}"}, {"question": "What was the last painting that Van Gogh painted?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q3305213; wdt:P170 wd:Q5582; wdt:P571 ?date} ORDER BY DESC(?date) LIMIT 1", "generated_sparql": "SELECT ?s ?p WHERE {\n  ?s wdt:P19 wd:Q307.\n}"}, {"question": "What was the main subject addressed in the Deep Purple song \u201cSmoke on the water\u201d?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q636399 wdt:P921 ?result}", "generated_sparql": "SELECT mainSubject WHERE {\n  ?s wdt:P31 wd:Q24103344. # Deep Purple\n  ?s wdt:P310 wd:Q5968554. # song\n  ?s wdt:P431 wd:Q111326750. # main subject\n  ?s wdt:P3991 wd:Q4212257. # music album\n  FILTER(CONTAINS(str(?s),'Smoke on the water')) # filter for the song title\n}"}, {"question": "When did the first sperm whales exist?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q81214 wdt:P580 ?result}", "generated_sparql": "SELECT ?s ?p ?o WHERE {\n  ?s wdt:P31 wd:Q191129.   # species\n  ?s wdt:P572 ?o.   # existence date\n}"}, {"question": "What year did the Berlin Wall fall?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q5086 wdt:P576 ?time BIND(YEAR(?time) AS ?result)}", "generated_sparql": "SELECT `?date`\nWHERE {\n  [[Berlin Wall]] wdt:P39 wd:Q292492.\n  ?date wdt:P313 ?year.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "What year was Riverdale first aired?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q23001951 wdt:P580 ?time. BIND(YEAR(?time) AS ?result)}", "generated_sparql": "SELECT year\nWHERE {\n  wd:P31 ?item.\n  wd:P360 ?releaseYear.\n  ?item wd:P31 wd:Q95454.\n  FILTER(REGEXP(concat(\"https://www.wikidata.org/entity/\", str(?item), \"/\"), \"Riverdale\", \".json$\"))\n  FILTER(REGEXP(\"release_year\", \"^\\\\d+\") ?releaseYear)\n}"}, {"question": "When did Allen Ginsberg die?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q6711 wdt:P570 ?result}", "generated_sparql": "SELECT ?x ?label \nWHERE {\n  ?x wdt:P31 wd:Q82838.  # Human\n  ?x wdt:P39 wd:Q463157.  # Male\n  ?x foaf:knows ?o.\n  ?o wdt:P31 wd:Q98149.  # Person\n  ?o wd:P497 ?d.\n  ?d wdt:P498 ?v.\n  ?v xsd:integer.\n  FILTER(?v=1997)\n  ?x wdt:P34 ?label\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "When did Ella Fitzgerald die?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1768 wdt:P570 ?result}", "generated_sparql": "SELECT ?d WHERE {\n   ?d wdt:P31 wikibase:Q15908.\n   ?d wdt:P464 ?date.\n   SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "when did human first start to bouldering?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q852989 wdt:P571 ?result}", "generated_sparql": "SELECT ?starting_date\nWHERE {\n  # Query statement about bouldering\n  ?bouldering dbpedia:relatedTo ?humans.\n  ?humans dbpedia:firstKnownYear ?starting_date\n  FILTER(contains(str(?starting_date), \"year\"))\n}"}, {"question": "When did Pakistan become independent?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q843 wdt:P571 ?result}", "generated_sparql": "SELECT ?date WHERE { ?country wdt:P31 wd:Q6283. ?date wdt:P148 [BDC 4231]. }"}, {"question": "When did Rumi die?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q43347 wdt:P570 ?result}", "generated_sparql": "SELECT ?a ?b ?c ?d ?e ?f\nWHERE {\n  ?a wdt:P102 ?b;\n  ?a ?c wdt:P572 ?d ?e ?f FILTER (CONTAINS(str(?c), 'Rumi') && CONTAINS(str(?d), 'died') && CONTAINS(str(?e), 'at') && CONTAINS(str(?f), 'a certain date'))\n}"}, {"question": "When did the brother of the author of Slaughterhouse Five die?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q265954 wdt:P50/wdt:P3373 ?bro. ?bro wdt:P21 wd:Q6581097; wdt:P570 ?result}", "generated_sparql": "SELECT DISTINCT ?birthdate ?age ?diedat\nWHERE {\n  ?author wdt:P39 wdt:P107 ?brother.\n  ?brother wdt:P147 ?birthdate.\n  ?author wdt:P107 ?brother.\n  ?brother wdt:P43 ?diedat.\n  ?brother wdt:P39 wdt:P127.\n  FILTER(?brother wd:label ?brother)\n}"}, {"question": "when was the creator of saturday night live born?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q13979 wdt:P170/wdt:P569 ?result}", "generated_sparql": "SELECT wdt:P39_31_4.value AS birthYear\nWHERE {\n  ?item wa:P1895 ?creator.\n  ?creator ?birth ?birthYear.\n  ?creator dbo:P39 wd:Q22684556.\n  ?item dbo:P39 wd:Q22684556.\n}"}, {"question": "Who was part of the Hambach Festival?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q551416 wdt:P710 ?result}", "generated_sparql": "SELECT DISTINCT ?a ?b\nWHERE {\n    ?a wdt:P279 wd:Q108316.\n    ?a ?b foaf:knows ?b .\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "When did The OA was first released?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q19798744 wdt:P580 ?result}", "generated_sparql": ""}, {"question": "How many casualties were a result of the Troubles?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q815436 wdt:P1120 ?result}", "generated_sparql": "SELECT COUNT(*) AS casualties\nWHERE {\n  ?item wdt:P362 ?casualties.\n  FILTER(str(?item) LIKE '%%Troubles%%')\n}"}, {"question": "When did the Weimar Republic start?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q41304 wdt:P571 ?result}", "generated_sparql": "SELECT ?start_time\nWHERE {\n  ?s wdt:P18 wdt:P31 ?x.\n  ?x wdt:P467 wdt:P138 \"Weimar Republic\".\n  ?s wdt:P39 ?t.\n  FILTER (?t < \"1918\"^^xsd:date).\n  MIN(?t) AS ?start_time\n}"}, {"question": "When did World War II officially end?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q362 wdt:P582 ?result}", "generated_sparql": "SELECT DATE(wdt:P146).[label] \nWHERE {\n  wd:Q6613 wdt:P146 wd:Q43918.\n}"}, {"question": "when is the first ironman world championship?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q1420480 wdt:P571 ?result}", "generated_sparql": "SELECT TIMESTAMP([dbo:P476 ^ \"Ironman World Championship\"].[wd:P126]).[dbo:P842 ?time].[dbo:P476 ?candidate] AS first_Ironman\nWHERE {\n    [dbo:P476 wd:P126]\n    SERVICE wikibase:label { bd:serviceParam wikibase:labelDatatype wikibase:wikiText }"}, {"question": "when was the magazine in which hunter x hunter is published established?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q696071 wdt:P1433 ?mag. ?mag wdt:P31/wdt:P279* wd:Q41298; wdt:P571 ?result}", "generated_sparql": ""}, {"question": "When the film Red Notice was released?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q58815001 wdt:P577 ?result}", "generated_sparql": "SELECT ?year\nWHERE {\n  ?film wd:P273 dbo:date.\n  ?film wd:P147 dbo:Red Notice.\n  SERVICE wikibase:label { bd:serviceParam dbpedia:language \"en\". }"}, {"question": "When was Cologne Cathedral built?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q4176 wdt:P571 ?result}", "generated_sparql": "SELECT ?date WHERE {\n  ?cathedral wdt:P458 ?date .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "What can be done against gout?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q133087 wdt:P2176 ?result}", "generated_sparql": "SELECT DISTINCT ?x WHERE {\n  ?x wdt:P31 wd:Q115275.\n  ?x wdt:P367 ?j.\n  STRING(?j) = \"can be done against gout\".\n}"}, {"question": "When was HIV first identified?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q15787 wdt:P575 ?result}", "generated_sparql": "SELECT year \nFROM wdt:P111 w\nWHERE {\n    w:P111 wdt:P136 dbp:57196.\n}"}, {"question": "When was the first article about Liquid State Machines published?", "gold_sparql": "SELECT DISTINCT ?result WHERE{?art wdt:P31/wdt:P279* wd:Q191067; wdt:P921 wd:Q6557482; wdt:P577 ?result} ORDER BY ASC(?result) LIMIT 1", "generated_sparql": "describes the concept of a chemical reaction being treated as an information flow process, the first article about it was published in July 2018. To find the date of publication of this article, you can use a SPARQL query like this:\n```graphql\nPREFIX dbo: <https://dbpedia.org/ontology/>\nPREFIX wik: <https://www.wikidata.org/entity/list/search.sparql>\n\nSELECT wik:revision.created\nWHERE {\n  wik:Entity wik:contains { bd:label \"Liquid State Machine\" }"}, {"question": "When was Marlene Dietrich born?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q4612 wdt:P569 ?result}", "generated_sparql": "asks for the birthdate of Marlene Dietrich, extracted from Wikidata:\n```less\nSELECT ?birthdate \nWHERE {\n  ?person wdt:P31 ?wd. \n  ?person wdt:P132 ?birthdate.\n  FILTER(CONTAINS(?wd, \"Marlene Dietrich\"))\n}"}, {"question": "When was Penicillin discovered?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q12190 wdt:P575 ?result}", "generated_sparql": "SELECT ?date DISGREGATE (?date ?value COUNT) WHERE {\n   ?discovery wd:P31 wikibase:Q1234.\n   ?discovery wd:P131 ?date.\n   SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "When was Rumi born?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q43347 wdt:P569 ?result}", "generated_sparql": "SELECT ?birthYear WHERE {\n    ?person wdt:P31 wd:Q95.\n    ?person wdt:P365 ?birthYear.\n}"}, {"question": "When was the beginning of Romanticism ?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q37068 wdt:P580 ?result}", "generated_sparql": "SELECT ?beginning WHERE {\n    ?beginning wdt:P31 wd:Q14.\n    ?beginning wdt:P571 \"Romanticism\".\n}"}, {"question": "When was the Echo Music Prize abolished?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q703237 wdt:P576 ?result}", "generated_sparql": "SELECT ?year WHERE {\n  ?prize wdt:P365 ?type;\n       wdt:P604 ?s;\n       wdt:P491 ?wdt.\n  FILTER RegExp('Echo Music Prize', i)\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "When was the first album of the American band Typhoon released?", "gold_sparql": "SELECT DISTINCT ?result WHERE{?alb wdt:P31 wd:Q482994; wdt:P175 wd:Q7861093; wdt:P577 ?result} ORDER BY ASC(?result) LIMIT 1", "generated_sparql": ""}, {"question": "When was the Hamburg Airport inaugurated?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q27706 wdt:P571 ?result}", "generated_sparql": "SELECT ?inauguration\nWHERE {\n  ?airport wdt:P431 wd:Q850077.* .\n  ?airport wdt:P473 ?inauguration.\n}"}, {"question": "When was the Hamburg S-Bahn officially opened?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q693956 wdt:P1619 ?result}", "generated_sparql": "SELECT ?timestamp \nWHERE {\n  wd:Q1662 wdt:P459 ?timestamp ;\n   wd:Q1662 https://en.wikipedia.org/wiki/S-Bahn_in_Hamburg_%28R-Bahn%29 ;\n   FILTER(lang(?timestamp)='en')\n}"}, {"question": "When was the jazz club Birdland in Hamburg founded?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q800176 wdt:P571 ?result}", "generated_sparql": "SELECT ?year WHERE {\n  ?place dbo:founded ?year .\n  {\n    SELECT ?place ?label WHERE {\n      dbo:Place/dbo:name ?label .\n      FILTER(?label = 'Birdland in Hamburg')\n    }"}, {"question": "When was the poem Howl written?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q1545259 wdt:P571 ?result}", "generated_sparql": "SELECT wd:label, wdt:value\nWHERE {\n  wd:label \"Howl\".\n  wdt:value ?date.\n  SERVICE wikibase:label {\n    bd:serviceParam wikibase:language \"en,de,es,fr,it,ja,ru,zh\".\n  }"}, {"question": "When was the university of Cambridge founded?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q35794 wdt:P571 ?result}", "generated_sparql": "SELECT ?x ?value\nWHERE {\n  ?x wdt:P31 wd:Q15042619.\n  wdt:P499 wdt:P31 ?x .\n  ?x wdt:P31 wd:Q27333.\n  ?x wdt:P499 wdt:P31 ?y .\n  ?y wdt:P31 ?z .\n  ?z wdt:P31 wd:Q89.\n  ?x wdt:P578 ?value.\n}"}, {"question": "When was the University of Hamburg founded?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q156725 wdt:P571 ?result}", "generated_sparql": "SELECT ?f ?x WHERE {\n  ?s wdt:P31 wd:Q11154.\n  ?s wdt:P469 ?t.\n  FILTER(regex(str(?t),'^(?:18|19)\\d{3}"}, {"question": "When was the University of Saskatchewan founded?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q1514848 wdt:P571 ?result}", "generated_sparql": "askatchewan founded?' from Wikidata. [/INST] SELECT `saskatchewan_university_of`.`foundingDate`\nWhere {\n  ?saskatchewan_university_of wdt:P437 ?foundingDate ;\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "When was the Vatican City created?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q237 wdt:P571 ?result}", "generated_sparql": "SELECT ?x ?xLabel WHERE {\n  ?x wd:P31 wd:Q1271159. # Vatican City\n  ?x wd:P301 ?p. # location\n  ?p wd:P31 ?o. # place name\n  ?o wd:P370 ?b. # birth place\n  ?b wd:P31 wd:Q124. # state or province\n  ?b wd:P373 \"1000 AD\".  # year\n}"}, {"question": "When was United Fruit Company founded?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q1771942 wdt:P571 ?result}", "generated_sparql": "SELECT ?foundingDate\nWHERE {\n  ?company wdt:P928 ?foundingDate.\n  {\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Where did Trotzky die?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q33391 wdt:P20 ?result}", "generated_sparql": "SELECT ?s ?o\nWHERE {\n    bd:P133 ?s ?o . #Trotzky died on ?o\n}"}, {"question": "Where are both The Call of the Wild and White Fang set, the most two famous works of Jack London?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q476871 wdt:P840 ?result. wd:Q152267 wdt:P840 ?result}", "generated_sparql": "SELECT ?title\nWHERE {\n  ?title wdt:P31 wd:Q2372868.   # Works by Jack London\n  ?title wdt:Q5247270.        # The Call of the Wild\n  OPTIONAL {\n    ?title wdt:P31 wd:Q5247337.  # White Fang\n  }"}, {"question": "Where did the Hambach Festival happen?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q551416 wdt:P276 ?result}", "generated_sparql": "SELECT ?type ?label WHERE {\n  ?festival wdt:P31 wdt:P114.\n  ?festival wdt:P112 ?location.\n  SERVICE wikibase:label {\n    typedData : {\n      ?label : {\n        @type      : xsd:string ,\n        @value     : lang(en)\n      }"}, {"question": "Where do the novels of the franchise The Lord of the Rings take place?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q15228 wdt:P840 ?result}", "generated_sparql": "SELECT ?placeLabel ?placeDescription\nWHERE {\n  :) The Lord of the Rings.\n  :) ?place wd:subCategory wd:category ?cat wd:instanceOf wd:Place.\n  ?cat wd:label \"The Lord of the Rings\".\n  ?place wd:description ?description.\n}"}, {"question": "Where does the Nutri-Score originate from?", "gold_sparql": "SELECT DISTINCT ?result WHERE{wd:Q46577569 wdt:P495 ?result}", "generated_sparql": "SELECT ?source WHERE {\n  ?s wdt:P31 wikibase:NutritionScore.\n  ?s wdt:P49 ?source.\n}"}, {"question": "Are there at least two winners of the Academy Award for Best Actress who have been educated at the same institution?", "gold_sparql": "ASK{?act wdt:P166 wd:Q103618; wdt:P69 ?result. ?act2 wdt:P166 wd:Q103618; wdt:P69 ?result FILTER(?act != ?act2)}", "generated_sparql": "SELECT COUNT(DISTINCT wd:Q1.label) AS number_of_winners\nWHERE \n{\n    # Filters for Academy Award for Best Actress\n    ?a wdt:P34 wd:Q167474.\n    \n    # Filters for education at the same institution\n    ?a wdt:P248 ?b.\n    ?b wdt:P439 ?institution.\n    FILTER(CONTAINS(LOWER(?institution), 'same institution')).\n\n    # Selects winners with distinct labels\n    SELECT ?a.label\n    WHERE \n    {\n        ?a wdt:P39 wd:Q112495.\n        SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Where was K-pop star Lisa Manoban born?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q26707663 wdt:P19 ?result}", "generated_sparql": "SELECT wd:birthPlace ?birthPlace WHERE {\n    wd:Q10463 wd:birthPlace ?birthPlace.\n    wd:Q610156 wd:birthPlace \"Seoul, South Korea\".\n}"}, {"question": "What is the highest point of Norway?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q20 wdt:P610 ?result}", "generated_sparql": "SELECT ?highestPoint ?elevation WHERE { \n   ?point wdt:P17 ?elevation ; \n   SERVICE wikibase:label { bd:serviceParam wikibase:language \"[EN,en]\". }"}, {"question": "Where did the psychedelic band \u201cKhruangbin\u201d form?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q54555985 wdt:P740 ?result}", "generated_sparql": "SELECT ?formation_location\nWHERE \n{\n  ?band wdt:P31 wd:Q146856.\n  ?band wdt:P420 wd:Q2418.\n  ?formation_location wdt:P979 wd:Q46222.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Where was Caesar murdered?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1048 wdt:P20 ?result}", "generated_sparql": "SELECT ?murderer ?murderLocation\nWHERE {\n  wd:query {{ \n    SELECT ?murderer ?murderLocation\n    WHERE {\n      ?o wd:Q28 ?murderer.\n      ?o dbo:deathPlace ?murderLocation.\n      FILTER(LANG(?o)='en')\n    }"}, {"question": "Where was Goethe\u2019s unmarried partner born ?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q5879 wdt:P451/wdt:P19 ?result}", "generated_sparql": "SELECT bd:birthPlace \nWHERE {\n  ?p dbp:birthPlace ?birthPlace .\n  ?p wd:P35 [ wd:P375 wd:Q1485 ].   # Goethe\n  ?p dbp:P743 wd:Q131751.   # Unmarried\n}"}, {"question": "Where was Roland Corporation founded?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q848490 wdt:P740 ?result}", "generated_sparql": "SELECT ?s ?p WHERE {\n  ?s wdt:P31 wd:Q22956158.   # Roland Corporation\n  ?s wdt:P447 ?o ?a ?b.   # Founded at\n  OPTIONAL {\n    ?o wdt:P31 wd:Q2296.   # at a company\n    ?o wdt:P448 ?t ?a ?b.   # on\n    ?t wdt:P449 ?y.   # at a date/time   \n  }"}, {"question": "Where was the author of The Catcher in the Rye born ?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q183883 wdt:P50/wdt:P19 ?result}", "generated_sparql": "SELECT ?birthPlace\nWHERE {\n ?book wdt:P31 wd:Q942.\n ?book wdt:P279 ?birthPlace.\n}"}, {"question": "Who developed the Erlangen program?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P800 wd:Q315296}", "generated_sparql": "SELECT ?person WHERE {\n  ?person wdt:P134 wd:Erlangen.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Which actor starring in Free Guy also starred in Deadpool?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q38685497 wdt:P161 ?result. wd:Q19347291 wdt:P161 ?result}", "generated_sparql": "SELECT distinct ?actor WHERE {\n  ?person wdt:P31 wd:Q2966. # actor\n  ?person wdt:P170 wd:Q47877. # Free Guy\n  OPTIONAL { ?person wdt:P170 wd:Q509498. # Deadpool\n}"}, {"question": "Which American presidents followed in their father\u2018s step and also became the president?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P39 wd:Q11696; wdt:P22/wdt:P39 wd:Q11696}", "generated_sparql": "SELECT ?president ?father\nWHERE {\n  ?father wdt:P192 ?president .\n  ?president wdt:P202 ?parent .\n}"}, {"question": "which animal can possibly live longer, panda or koala?", "gold_sparql": "SELECT DISTINCT ?result WHERE {BIND(IF(EXISTS{wd:Q33602 wdt:P4214 ?lp. wd:Q36101 wdt:P4214 ?lk FILTER(?lp > ?lk)},wd:Q33602,wd:Q36101)AS ?result)}", "generated_sparql": "SELECT ?a ?name ?max_lifespan\nWHERE {\n  ?a wdt:P3 [wdt:P175 ?p].\n  ?p wdt:P7 [wdt:P3 ?k].\n  ?k wdt:P3 ?x.\n  FILTER(x < 30)\n  ?a wdt:P3 ?y.\n  FILTER(y > 10)\n}"}, {"question": "Which archipelago has more islands: the Gal\u00e1pagos Islands or the Hawaiian Islands ?", "gold_sparql": "SELECT DISTINCT ?result WHERE {{SELECT (COUNT (DISTINCT ?isl) AS ?gn) WHERE{wd:Q38095 wdt:P527+ ?isl. ?isl wdt:P31/wdt:P279* wd:Q23442}}{SELECT (COUNT (DISTINCT ?isl) AS ?hn) WHERE{wd:Q192626 wdt:P527+ ?isl. ?isl wdt:P31/wdt:P279* wd:Q23442}} BIND(IF(?hn > ?gn, wd:Q192626, wd:Q38095) AS ?result)}", "generated_sparql": "SELECT ?archipelago WHERE {\n  ?archipelago wdt:P31 wd:Q48893.     # Gal\u00e1pagos Islands\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Which art movement was Yoko Ono part of?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q117012 wdt:P135 ?result. ?result wdt:P31 wd:Q968159 }", "generated_sparql": "SELECT ?label\nWHERE {\n  ?artist wdt:P31 wd:Q201.\n  ?artist wdt:P499 ?place.\n  FILTER(str(?label) LIKE '%ONO%' AND str(?place) LIKE '%LIVERPOOL%')\n}"}, {"question": "which band is created earlier, queen or pink floyd?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q15862 wdt:P571 ?q. wd:Q2306 wdt:P571 ?p. BIND(IF((?q < ?p), wd:Q15862, wd:Q2306 ) AS ?result)}", "generated_sparql": "SELECT b.name\nWHERE {\n  ?b wdt:P196 [ wd:P12 < [ wd:P486 \"Queen\" ] && wd:P486 \"Pink Floyd\" ] .\n}"}, {"question": "What caused Kobe Bryant's Death?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q25369 wdt:P509 ?result}", "generated_sparql": "SELECT *\nWHERE {\n  ?s db:type wd:Person .\n  ?s wd:P137 ?o .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }"}, {"question": "What are the opposites of zero?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q204 wdt:P461 ?result}", "generated_sparql": "asking for words that are antonyms of \"zero\"? I will provide a query for the latter case.\n\nSPARQL query to find words that are antonyms of \"zero\" in Wikidata:\n```php\nSELECT ?w WHERE {\n  w:P42 ?p ?v .\n  SERVICE wd:service {\n    bd:serviceParam wd:serviceParam_sparql \"SELECT distinct ?w WHERE { ?w wd:P42 ?p ?v . }"}, {"question": "Which businesses are founded by the person in charge of Tesla?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q478214 wdt:P169 ?found. ?result wdt:P112 ?found; wdt:P31/wdt:P279* wd:Q4830453}", "generated_sparql": "SELECT DISTINCT ?b ?bLabel\nWHERE { ?p hasFormal ?o .\n  ?o foaf:name ?oLabel .\n  ?o hasFormal ?f .\n  ?f foaf:name \"Elon Musk\" .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }"}, {"question": "Did Germany have a population growth of at least 1% since 2010?", "gold_sparql": "ASK {wd:Q183 p:P1082 ?ps10, ?psNew. ?ps10 pq:P585 ?t10; ps:P1082 ?p10. ?psNew pq:P585 ?tNew; ps:P1082 ?pNew BIND(((?pNew - ?p10) / ?p10) AS ?diff) FILTER((YEAR(?t10) = 2010) && NOT EXISTS{wd:Q183 p:P1082/pq:P585 ?tt FILTER(?tt > ?tNew)} && ?diff >= 0.01)}", "generated_sparql": "SELECT ?x WHERE {\n  ?x wdt:P1285 ?p.\n  ?x wdt:P31 wd:Q12. # Germany\n  ?p wdt:P31 wd:Q658. # population\n  ?p wdt:P37 wd:Q1. # growth rate\n  FILTER(?p >= 0.01) # filter for at least 1%\n}"}, {"question": "Which aircraft did Howard Hughes build?", "gold_sparql": "SELECT ?result WHERE {?result wdt:P31/wdt:P279* wd:Q11436; wdt:P178 wd:Q189081}", "generated_sparql": "SELECT ?aircraft WHERE {\n  ?aircraft wd:P31 wd:Q12811654.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Which country has more official languages: South Africa (\u200b\u200bQ258) or Ethiopia ?", "gold_sparql": "SELECT DISTINCT ?result WHERE {{SELECT (COUNT (DISTINCT ?lanS) AS ?lanSCount) WHERE {wd:Q258 wdt:P37 ?lanS}} {SELECT (COUNT (DISTINCT ?lanE) AS ?lanECount) WHERE {wd:Q115 wdt:P37 ?lanE}} BIND(IF(?lanSCount > ?lanECount, wd:Q258, wd:Q115) AS ?result)}", "generated_sparql": "SELECT \n  wd:label wd:language ?country,\n                                 \n  COUNT(*) ?num_languages \nFROM \n  wd:Wiki Dataset WHERE \n    wd:serviceParam wd:bases ?base ;\n                                 \n  OPTIONAL { ?country wd:P31 wd:Q258. }"}, {"question": "Is throat singing a tradition?", "gold_sparql": "ASK {wd:Q1067089 wdt:P31/wdt:P279* wd:Q82821}", "generated_sparql": "SELECT ?x WHERE {\n  ?x wdt:P479 wdt:P467 \"Throat singing\".\n}"}, {"question": "Which disease caused the death of Mark Twain?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q7245 wdt:P509 ?result. ?result wdt:P279* wd:Q12136}", "generated_sparql": "SELECT distinct ?disease WHERE {\n    ?person wdt:P31 wd:Q13548.\n    ?person wdt:P439 ?disease.\n    FILTER(REGEXP(?person, \"Mark Twain\", \"i\"))\n}"}, {"question": "Which diseases can be caused by smoking ?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q662860 wdt:P1542 ?result. ?result wdt:P279* wd:Q12136}", "generated_sparql": "SELECT ?disease ?cause\nWHERE {\n  ?disease wd:P364 ?cause.\n  FILTER(CONTAINS(?cause, 'caused by smoking'))\n}"}, {"question": "Which genre that Cage the Elephant belongs to has the fewest english characters?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q68061 wdt:P136 ?result. ?result rdfs:label ?label FILTER(langMatches(lang(?label),\"en\"))} ORDER BY ASC(strlen(?label)) LIMIT 1", "generated_sparql": "SELECT ?genre ?genreLabel ?charCount\nWHERE {\n    ?music wdt:genre ?genre.\n    ?genre dbo:name ?genreLabel.\n    LET (\n        ?genreLabel wdt:sort ?charCount\n        WHERE {\n            ?genre dbo:name ?genreLabel.\n            ?genre dbo:name ?genreName = \"Cage the Elephant\".\n    }"}, {"question": "Which takes less space? 1kg of lead or 1kg of iron.", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q708 wdt:P2054 ?dl. wd:Q677 wdt:P2054 ?di. BIND(IF(?dl >= ?di, wd:Q708, wd:Q677) AS ?result)}", "generated_sparql": "SELECT ?x\nWHERE {\n  ?x wdt:P107 wdt:P28 wd:Q108421466.\n  OPTIONAL {\n    ?x wdt:P29 wdt:P31 wdt:P31 wd:Q65529855.\n  }"}, {"question": "Which kingdom preceded the Thonburi Kingdom ?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1115291 wdt:P1365 ?result. ?result wdt:P122/wdt:P279* wd:Q7269}", "generated_sparql": "SELECT ?previous {\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "How many mountains are located in Germany?", "gold_sparql": "SELECT (COUNT (DISTINCT ?m) AS ?result) WHERE {?m wdt:P31 wd:Q8502; wdt:P17 wd:Q183}", "generated_sparql": "SELECT COUNT(*) AS num_mountains\nWHERE {\n  ?m wdt:P138 wd:Q116243985.\n}"}, {"question": "Which movements is the painting \u201cLes Demoiselles d'Avignon\u201d assigned to?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q910199 wdt:P135 ?result}", "generated_sparql": "SELECT DISTINCT ?movement WHERE {\n  ?painting wdt:P13 lbl:Les Demoiselles d'Avignon;\n  wdt:P204 ?movement .\n}"}, {"question": "Which movies belong to the Cornetto trilogy ?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q169604 wdt:P527 ?result}", "generated_sparql": "SELECT ?m WHERE {\n  ?m wdt:P14 wd:Q614077.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "During what event was the Four Policemen Council proposed?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q2945433 wdt:P607 ?result.}", "generated_sparql": "SELECT ?s ?l ?b WHERE { \n  {\n    SELECT ?s ?l \n    WHERE {\n      wd:S826 wd:P279 ?s .\n      wd:S826 wd:P31 wd:Q606.\n      FILTER(CONTAINS(STR(wd:P279), 'Four Policemen Council'))\n    }"}, {"question": "Which NBA teams have won the most seasons?", "gold_sparql": "SELECT DISTINCT ?result WHERE {{SELECT DISTINCT (COUNT(DISTINCT ?season) AS ?max) WHERE {?season wdt:P31 wd:Q27020041; wdt:P3450 wd:Q155223; wdt:P1346 ?result. ?result wdt:P31 wd:Q13393265} GROUP BY ?result ORDER BY DESC (?max) LIMIT 1} ?season wdt:P31 wd:Q27020041; wdt:P3450 wd:Q155223; wdt:P1346 ?result. ?result wdt:P31 wd:Q13393265.} GROUP BY ?result HAVING ((COUNT(DISTINCT ?season)) = MAX(?max))", "generated_sparql": "SELECT DISTINCT ?team ?wins\nWHERE {\n  ?team wdt:P31 wd:Q9.\n  ?team wdt:P866 ?wins.\n  FILTER(?wins >= 17)\n}"}, {"question": "Which of the dragons in Game of Thrones died?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31/wdt:P279* wd:Q30170627; wdt:P1441 wd:Q23572 FILTER(EXISTS{?result wdt:P20 _:ex})}", "generated_sparql": "SELECT ?s ?p WHERE {\nPREFIX qdw: <http://quora.wikidata.org/ontology/>\nPREFIX qbo: <http://quora.wikidata.org/bootstrap/>\n\nSELECT ?s ?p WHERE {\n\tqdw:Wikidata/Statement ?s qbo:wasAbout \"Game of Thrones\".\n    REGEXP(str(?s), '^.+\\\\b(dragon)\\\\b', \"case\") ?p ?c {\n\t?c wdt:P31 wdt:Q1442497.\n\t?s wdt:Wdt4289309 ?c.\n        SERVICE wikibase:label { bd:serviceParam wikibase:label language \"en\". }"}, {"question": "Which other movies by the director of Another Round also starred Mads Mikkelsen ?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q69303989 wdt:P57 ?dir. ?result wdt:P31 wd:Q11424; wdt:P57 ?dir; wdt:P161 wd:Q294647 FILTER(?result != wd:Q69303989)}", "generated_sparql": "SELECT DISTINCT ?t\n\nWHERE {\n\n<!-- Get the director for Another Round -->\n?t wdt:P430 wd:Q82749841.\n\n<!-- Get other movies by the director -->\nSELECT ?m WHERE {\n{\n?m wdt:P31 wdt:Q82369490.\n?m wdt:P430 ?t.\n}"}, {"question": "Which egyptian pyramid is the tallest?", "gold_sparql": "SELECT DISTINCT ?pyr WHERE {?pyr wdt:P31/wdt:P279* wd:Q12516; p:P2048/psn:P2048/wikibase:quantityAmount ?h; wdt:P17 wd:Q79 } ORDER BY DESC(?h) LIMIT 1", "generated_sparql": "SELECT DISTINCT ?b ?l ?w\nWHERE {\n  # Get all pyramid instances\n  ?b wdt:P31 wd:Q10382. # Pyramid\n  \n  # Filter pyramids to only include those from Egypt\n  FILTER(CONTAINS(?b, \"Egypt\"))\n  \n  # Sort pyramids by height in descending order (tallest first)\n  ORDER BY ?l DESC\n  \n  # Limit to only the tallest pyramid\n  LIMIT 1\n}"}, {"question": "What is the offical language of Taipei?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1867 wdt:P37 ?result}", "generated_sparql": "SELECT { ?lang ?name ?official_language\n  WHERE {\n    ?city wdt:P31 wikibase:City.\n    ?city wdt:P136 ?lang.\n    ?lang wd:P248 ?name.\n    ?lang wdt:P12387 ?official_language\n  }"}, {"question": "Which shows aired for the first time the same year as Saturday Night Live ?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q13979 wdt:P580 ?snl. ?result wdt:P31 wd:Q5398426; wdt:P580 ?start. FILTER(YEAR(?snl) = YEAR(?start) && ?result != wd:Q13979)}", "generated_sparql": "SELECT ?x ?y WHERE {\n  ?x wdt:P31 wd:Q6662.\n  ?x wdt:P344 ?y.\n  ?x wdt:P31 ?w, ?w wdt:P31 wd:Q29.\n  FILTER(YEAR(?y) = YEAR('1975-01-14') && YEAR(?x) = YEAR('1975'))\n}"}, {"question": "Which songs made up the album Fijaci\u00f3n Oral vol. 1 ?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P361 wd:Q828282; wdt:P31 ?o FILTER(?o IN (wd:Q105543609, wd:Q134556))}", "generated_sparql": "SELECT DISTINCT ?s WHERE {\n  ?s wdt:Q1157251 wdt:P140 ?o.\n  ?o wdt:P143 \"Fijaci\u00f3n Oral vol. 1\".\n}"}, {"question": "Which started first: impressionism or expressionism (art movements)?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q40415 wdt:P571 ?imp. wd:Q80113 wdt:P580 ?exp. BIND(IF(?imp < ?exp, wd:Q40415, wd:Q80113) AS ?result)}", "generated_sparql": "SELECT ?art_movement_1\nWHERE {\n  ?art_movement dbpedia-owl:label \"Impressionism\".\n  ?art_movement_2 dbpedia-owl:label \"Expressionism\".\n  ?art_movement_1 dbpid:isStartedBefore ?art_movement_2.\n  FILTER (LANGS(?art_movement_1) = \"en\")\n}"}, {"question": "which state inside USA is batman living in?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q2695156 wdt:P551/wdt:P131 ?result. ?result wdt:P31 wd:Q35657}", "generated_sparql": "SELECT ?state\nWHERE {\n    ?person wdt:P31 wd:Q2751.\n    ?person wdt:P31 wd:Q1911.\n    ?person wdt:P985 ?countries.\n    ?countries wdt:P37 wl:S80.\n    FILTER (regex(?countries, '\\b(USA)$', 'i')).\n    wd:Q2751 wdt:P470 ?state.\n}"}, {"question": "which swordfighter in the lord of the rings marry a half-elven and belong to rangers of the north?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P106 wd:Q11397897; wdt:P26/wdt:P31 wd:Q2035494; wdt:P172 wd:Q2292830}", "generated_sparql": "SELECT ?swordfighter WHERE {\n  ?swordfighter wdt:P11 ?half_elven.\n  ?swordfighter wdt:P31 wd:Q189012.\n  ?swordfighter wdt:P279 ?rangers_of_the_north.\n}"}, {"question": "Which teams participated in the 2020 UEFA Champions League Final ?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q46569648 wdt:P1923 ?result}", "generated_sparql": "SELECT DISTINCT ?team WHERE {\n  ?team wd:P31 wd:Q544.  # UEFA Champions League\n  ?team wd:P497 wd:Q73776.  # Year 2020\n}"}, {"question": "Which universities have more than 200000 students?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q3918; wdt:P2196 ?stu. FILTER(?stu > xsd:integer(\"200000\"))}", "generated_sparql": "SELECT ?university\nWHERE {\n  ?university wdt:P115 wdt:P31 wd:Q6994.\n  ?university wdt:P421 ?numberOfStudents.\n  FILTER(?numberOfStudents > 200000)\n}"}, {"question": "which university is established earlier, university of oxford or university of cambridge?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q34433 wdt:P571 ?inco. wd:Q35794 wdt:P571 ?incc BIND(IF((?inco < ?incc), wd:Q34433, wd:Q35794) AS ?result)}", "generated_sparql": "SELECT ?u1 ?u2 WHERE {\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Who developed WordNet?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q533822 wdt:P178 ?result}", "generated_sparql": "SELECT ?developer WHERE {\n  ?word wdt:P31 wd:Q607895.\n  wdt:P36 ?developer.\n}"}, {"question": "Who are the actresses in Portrait of a Lady on Fire?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q63246568 wdt:P161 ?result. ?result wdt:P21 wd:Q6581072}", "generated_sparql": "SELECT DISTINCT ?actor ?actorLabel WHERE {\n  wd:Q176424 wd:P31 wd:Q181490.\n  w:Q152919 wd:P43 ?actor.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Did Michael Jordan and Kobe Bryant play for the same team?", "gold_sparql": "ASK {wd:Q25369 wdt:P54 ?team. wd:Q41421 wdt:P54 ?team.}", "generated_sparql": "SELECT ?j ?b WHERE {\n  ?j wd:P31 wd:Q1438463.  # Michael Jordan\n  ?b wd:P31 wd:Q1438463.  # Kobe Bryant\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Who created the Turing machine?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q163310 wdt:P61 ?result}", "generated_sparql": "SELECT ?x ?label\nWHERE {\n    ?x wdt:P31 wd:Q7.\n    ?x dbo:inCollection ?c.\n    ?c dbo:about ?n.\n    {\n        SELECT (SAMPLE(STR(?n)) as ?n)\n        WHERE {\n            ?n dbo:name \"Turing Machine\".\n        }"}, {"question": "When was the Hambach Castle built?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q523286 wdt:P571 ?result}", "generated_sparql": "SELECT ?s ?p ?o WHERE {\r\n  ?s wd:Q463577.  # Hambach Castle\n  ?s wdt:P31 wd:Q1241.  # Castle\n  ?s wdt:P539 ?o.  # construction time\n  FILTER(Language(?o) = 'en')  # filter for English language\n}"}, {"question": "Who died at the North Pole?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q5; wdt:P20 wd:Q934}", "generated_sparql": "SELECT ?s WHERE { ?s wd:P874 wd:P879 \"North Pole\". }"}, {"question": "Who directed Anne with an E ?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q28091065 wdt:P57 ?result.}", "generated_sparql": "SELECT ?title .\nWHERE {\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Who wrote \"Prototypical Networks for Few-shot Learning\"?", "gold_sparql": "SELECT DISTINCT ?result WHERE {{wd:Q44649835 wdt:P50 ?result.} UNION {wd:Q44649835 wdt:P2093 ?result}}", "generated_sparql": "SELECT ?creator WHERE {\n  ?item wdt:P1078 wd:Q4530402.       # Prototypical Networks for Few-shot Learning\n  ?item wdt:P27 ?creator.            # the creator of the item\n}"}, {"question": "Who founded \u201cThe Blue Rider\u201d?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q117035 wdt:P112 ?result}", "generated_sparql": "SELECT {\n  ?founder wdt:P31 wb:BlueRiderGroup.\n  ?founder wdt:P379 wdt:AnnaIsabelleHillinger.\n  ?founder wdt:P480 wdt:1919-1922.\n ?founder wdt:P127 wd:Q11700187.\n}"}, {"question": "Who founded the Worpswede artist colony ?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q479361 wdt:P112 ?result}", "generated_sparql": "SELECT ?w ?l WHERE { \n  ?w wdt:P31 wd:Q1626945.  # Worpswede\n  ?w wdt:P439 ?o.  # Founded by\n  ?o wdt:P643 ?w.  # Art\n  OPTIONAL {\n    ?w wdt:P290 ?c.  # Residence\n    ?c wdt:P31 wd:Q53685.  # City\n  }"}, {"question": "Who is the author of \u201cConvenience Store Woman\u201d ?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q27863945 wdt:P50 ?result}", "generated_sparql": "SELECT ?author\nWHERE {\n  ?book wd:P31 wd:Q2257178.  # Convenience Store Woman\n  ?book wd:P432 ?author.  # Author of the book\n}"}, {"question": "Who is the soccer player with the most goals in their career?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P106 wd:Q937857; wdt:P6509 ?goals} ORDER BY DESC(?goals) LIMIT 1", "generated_sparql": "SELECT ?player ?goals\nWHERE {\n    ?player wd:P31 wd:Q954.\n    ?player wd:P468 ?goals.\n    ?player wd:Q253 ?team.\n    ?team wd:P539 wd:Q186.\n    ?team wd:P539 wd:Q490.\n    ?team wd:P539 wd:Q809.\n    ?player wd:P463 ?competition.\n    ?competition wd:P649 wd:Q428.\n}"}, {"question": "Who is the creator of the Dinosaurs tv show ?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1211977 wdt:P170 ?result}", "generated_sparql": "SELECT ?creator\nWHERE {\n  ?show wdt:P133 :Dinosaurs. # television show\n  ?show wdt:P405 ?creator. # creator\n}"}, {"question": "Who is the current president of the German Bundestag currently?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q154797 wdt:P488 ?result}", "generated_sparql": "SELECT ?president \nWHERE { \n  ?president wdt:P31 wd:Q162984.  # German Bundestag \n  ?president wdt:P429 wd:Q16352.  # Elected Member\n  ?president wdt:P407 [ wdt:P129 ?date ] ?date ?vote_count.  # Vote count\n  FILTER(STR(?date) LIKE '%2021%' AND STR(?vote_count) LIKE '%over half%') \n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Who is the most wealthy entrepreneur?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P2218 ?net; wdt:P106 wd:Q131524} ORDER BY DESC(?net) LIMIT 1", "generated_sparql": "SELECT ?person ?personLabel ?netWorth\nWHERE {\n    ?person wdt:P367/wildcard \"[ entrepreneurs ]\".\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Who is the oldest cast member of the Netflix show \u201cQueer Eye\u201d ?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q48817408 wdt:P161 ?result. ?result wdt:P569 ?time} ORDER BY ASC(?time) LIMIT 1", "generated_sparql": "SELECT DISTINCT ?person ?name\nWHERE {\n    ?person wdt:P31 wd:Q121. # Netflix show\n     ?person wdt:P360 ?age. # Age of the person\n     ?person wdt:P599 ?gender. # Gender of the person\n    FILTER(?age >= 30) # Only show cast members who are 30 or older\n\n     SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Who is the publisher of Smite ?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q2357719 wdt:P123 ?result}", "generated_sparql": "SELECT ?publisher\nWHERE {\n    ?publisher wd:Publisher.\n    ?publisher wd:Publisher/wdt:P42 wd:Q253. # Smite\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Who wrote the Erlangen program?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P800 wd:Q315296}", "generated_sparql": "SELECT wd:P536 ?writer WHERE {\n  ?person wdt:P536 wd:Q12217.\n  wd:Q12217 wd:P42 ?project.\n  wd:P31 ?project wikibase:ProfessionalProject.\n  wikibase:ProfessionalProject ?project wikibase:name ?projectName.\n}"}, {"question": "In which country is the Nanga Parbat located?", "gold_sparql": "SELECT DISTINCT ?result WHERE { wd:Q130736 wdt:P17 ?result. }", "generated_sparql": "SELECT ?country\nWHERE {\n  ?mountain wdt:P11 wd:Q1838.\n  ?mountain dbo:name \"Nanga Parbat\".\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "who produced Star Wars: Episode VI \u2013 Return of the Jedi?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q181803 wdt:P162 ?result}", "generated_sparql": "SELECT ?producer\nWHERE {\n  ?film wdt:P31 wd:Q863.  # Star Wars: Episode VI \u2013 Return of the Jedi\n  ?film wdt:P439 ?producer.  # director\n}"}, {"question": "Who was an actor in more movies, Daniel Day Lewis or Paul Dano ?", "gold_sparql": "SELECT DISTINCT ?result WHERE {{SELECT (COUNT (DISTINCT ?film) AS ?ddl) WHERE {?film wdt:P161 wd:Q166389; wdt:P31 wd:Q11424}} {SELECT (COUNT (DISTINCT ?film) AS ?pd) WHERE {?film wdt:P161 wd:Q343616; wdt:P31 wd:Q11424}} BIND(IF((?ddl > ?pd), wd:Q166389, wd:Q343616) AS ?result)}", "generated_sparql": "SELECT DISTINCT ?w.label\nWHERE {\n    ?w <- wd:Q589 wd:P31 wd:Q930264.    #Daniel Day-Lewis\n    OPTIONAL {\n        ?w <- wd:Q589 wd:P31 wd:Q423.      #Paul Dano\n    }"}, {"question": "For what literature prize was Simone de Beauvoir nominated?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q7197 wdt:P1411 ?result. ?result wdt:P31 wd:Q378427}", "generated_sparql": "SELECT ?p ?v ?l WHERE {\n  ?p wdt:P216 [ wd:value=Simone de Beauvoir ].\n  ?p wdt:P224 [ wd:value=Publishing Award ].\n  ?p wdt:P31 [ wd:value=Literature Prize ].\n  SERVICE wikibase:label { bd:serviceParam wikibase:language=\"en\". }"}, {"question": "What is the website of NPR's \u201cTiny Desk Concert\u201d?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q30588383 wdt:P856 ?result}", "generated_sparql": "SELECT wdt:P31 as prop\nWHERE {\n  wd:Q2530481 wdt:P31 wdt:WGBH.  # NPR\n  wd:Q7256483 wdt:P73 wd:Q1855257.  # Tiny Desk Concert\n  wd:Q1855257 wdt:P103 wd:Q8736.  # Website\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Who was the creator of Boo-Boo Bear ?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q2394280 wdt:P170 ?result}", "generated_sparql": "SELECT ?creator\nWHERE {\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Who was the creator of Unbreakable Kimmy Schmidt ?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q16889037 wdt:P170 ?result}", "generated_sparql": "SELECT ?person WHERE {\n  ?person dbp:created ?show .\n  ?show wdt:name ?title .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Who was the director of Llamas with Hats ?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q55621114 wdt:P57 ?result}", "generated_sparql": "SELECT ?director\nWHERE {\n  ?m wdt:P266 ?director.\n  ?m wdt:P267 wd:Q8530989.\n}"}, {"question": "Who founded the Roland Corporation?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q848490 wdt:P112 ?result}", "generated_sparql": "SELECT ?person WHERE {\n  ?person wdt:P31 wd:Q497227.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Who was the original actor who played Pinhead ?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q2518973 wdt:P175 ?result}", "generated_sparql": "SELECT ?actor ?label\nWHERE {\n  ?actor wdt:P31 wd:Q11262.\n  ?actor wdt:P490 ?pinhead.\n  SERVICE wikibase:label { bd:serviceParam wikibase:labelLanguage \"en\". }"}, {"question": "Who were the parents of Socrates ?", "gold_sparql": "SELECT DISTINCT ?result WHERE {{wd:Q913 wdt:P25 ?result} UNION {wd:Q913 wdt:P22 ?result}}", "generated_sparql": "SELECT DISTINCT ?person\nWHERE {\n  ?person wdt:P4 [wdt:P4 wd:Q46].\n  ?person wdt:P3 ?parent.\n  ?parent wdt:P4 wd:Q46.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Who wrote Anne of Green Gables ?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q565911 wdt:P50 ?result}", "generated_sparql": "SELECT ?author WHERE {\n    wikibase:item ?item wdt:P149 wikibase:item ?book.\n    wdt:P18 ?author ?book.\n    FILTER(CONTAINS(?author, 'Anne of Green Gables'))\n}"}, {"question": "Who wrote the poem Howl ?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1545259 wdt:P50 ?result}", "generated_sparql": "SELECT DISTINCT ?writer\nWHERE {\n  ?author wdt:P1 [ wd:P3 ?work ];\n  ?work wdt:P12 wd:Q66w;\n  wd:Q66w wdt:P36 wd:Q6539;\n  wd:Q6539 wdt:P3 [ wd:P270 wd:Q3396 ];\n  wd:Q3396 wdt:P4 [ wd:W64 wd:Q1018 ];\n  wd:Q1018 wdt:P31 wd:Q5041;\n  wd:Q5041 wdt:P1 [ wd:P448 wd:Q961 ];\n  wd:Q961 wdt:P11 [ wd:P10 wd:Q4360 ];\n  wd:Q4360 wdt:P5 [ wd:W64 wd:Q1008 ];\n  wd:Q1008 wdt:P64 [ wd:P59 wd:Q4913 ];\n  wd:Q4913 wdt:P9 [ wd:P4924 wd:Q20276 ];\n  wd:Q20276 wdt:P10 [ wd:P14 wd:Q22163 ];\n  wd:Q22163 wdt:P11 wd:P4875;\n  wd:Q4875 wdt:P5 [ wd:W64 wd:Q14889 ];\n  wd:Q14889 wdt:P4 [ wd:Q761 wd:Q8500 ];\n  wd:Q761 wdt:P1 [ wd:P27 wd:Q19508 ];\n  wd:Q19508 wdt:P12 wd:Q457973;\n  wd:Q457973 wdt:P22 wd:Q7448;\n  wd:Q7448 wdt:P31 [ wd:Q2148 wd:Q6005 ];\n  wd:Q2148 wdt:P49034\n  wd:Q6005 wdt:P49034\n  wd:Q49034 wdt:P48\n  wd:Q457973 wdt:P42 wd:Q2731;\n  wd:Q2731 wdt:P4 wd:Q761;\n  wd:Q761 wdt:P1 [ wd:P54 wd:Q8763 ];\n  wd:Q8763 wdt:P59 [ wd:P278 wd:Q4104 ];\n  wd:Q4104 wdt:P59 [ wd:P54 wd:Q8763 ];\n}"}, {"question": "Who's the author of The Hellbound Heart ?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q3521239 wdt:P50 ?result}", "generated_sparql": "SELECT wdt:P180 ?author WHERE {\n  wd:Q2248 (wdt:P180 ?author).\n}"}, {"question": "Whom did Clara Westhoff marry?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q462333 wdt:P26 ?result}", "generated_sparql": "SELECT ?label\nWHERE {\n  ?person wdt:P146 wd:Q1281553.\n  ?person dbp:maritalStatus ?maritalStatus.\n  SERVICE wikilink:info { bd:serviceParam wikibase:label \"Wikipedia\" }"}, {"question": "what is the oldest film festival?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P31 wd:Q220505; wdt:P571 ?inc FILTER(isLiteral(?inc))} ORDER BY ASC(?inc) LIMIT 1", "generated_sparql": "SELECT ?f.name ?f.label WHERE {\n  ?f wdt:P31 wd:Q13284936. # film festival\n  ?f wdt:P403 ?o. # film festival year\n  FILTER(?o <= YEAR(CURRENT-DATE))\n  SERVICE wikibase:label { blazer:language 'en' }"}, {"question": "When was Athens founded?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1524 wdt:P571 ?result}", "generated_sparql": "SELECT ?foundingYear\nWHERE {\n  wd:Category ?item wd:P31 wd:Q106521669.\n  ldp:describes ?item wd:P31 wd:Q107441574.\n  wd:P31 ?item wd:Q107441574.\n  wd:label ?item \u03b5 \"Athens\"@en.\n  wd:hasBegining ?item ?beginning\n  FILTER (contains(str(?beginning), \"Athens was founded on\"))\n  BIND (REGEXP_REPLACE(regexp_split(?beginning, \" \"), \"(.*Athens was founded on).*\", '\\1')) AS ?foundingYear.\n}"}, {"question": "which river is longer, the Seine or Elbe\uff1f", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1471 wdt:P2043 ?ls. wd:Q1644 wdt:P2043 ?le. BIND(IF((?ls > ?le), wd:Q1471, wd:Q1644) AS ?result)}", "generated_sparql": "SELECT ?r1, ?r2\nWHERE {\n    # River properties from Wikidata\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "which game is created earlier, super mario bros or Pac-Man?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q11168 wdt:P577 ?cm. wd:Q173626 wdt:P577 ?cp. BIND(IF((?cm < ?cp), wd:Q11168, wd:Q173626) AS ?result)}", "generated_sparql": ""}, {"question": "who is the youngested member in g-idle?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?result wdt:P463 wd:Q51885404; wdt:P569 ?date} ORDER BY DESC(?date) LIMIT 1", "generated_sparql": "SELECT ?person\nWHERE {\n  ?person wdt:P22 wd:Q44480.\n  MIN(?person wdt:P370 ?birthdate) ?birthdate.\n  MIN(?person wdt:P370 ?birthdate) ?youngest_birthdate .\n  ?person wdt:P370 ?youngest_birthdate.\n}"}, {"question": "who is older, Lionel Messi or Cristiano Ronaldo\uff1f", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q615 wdt:P569 ?number. wd:Q11571 wdt:P569 ?number2. BIND(IF(?number < ?number2, wd:Q615, wd:Q11571) AS ?result)}", "generated_sparql": "SELECT ?x ?y\nWHERE {\n  ?x wdt:P466 [\"name\"=\"Lionel Messi\"] .\n  ?y wdt:P466 [\"name\"=\"Cristiano Ronaldo\"] .\n  ?x wdt:P412 ?t .\n  ?y wdt:P412 ?t .\n  FILTER(regex(?t, \"\\d+(\\.\\d)?\"))\n}"}, {"question": "Is heidelberg university or university hamburg founded earlier?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q151510 wdt:P571 ?number. wd:Q156725 wdt:P571 ?number2. BIND(IF(?number < ?number2, wd:Q151510, wd:Q156725) AS ?result)}", "generated_sparql": "SELECT ?hei, ?uni, MAX(?created) AS max_created\nWHERE {\n  ?hei wdt:P31 wd:Q33.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "which forest is bigger, Amazon Rainforest or Congo Basin?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q177567 wdt:P2046 ?aa. wd:Q932289 wdt:P2046 ?ac. BIND(IF((?aa > ?ac), wd:Q177567, wd:Q932289) AS ?result)}", "generated_sparql": "SELECT ?label1 ?label2 \nWHERE {\n    SERVICE wikibase:label { bd:serviceParam wikibase:labelParameter \"en\". }"}, {"question": "Does Samsung Electronics or Apple have more employees?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q20718 wdt:P1128 ?se. wd:Q312 wdt:P1128 ?ae. BIND(IF((?se > ?ae), wd:Q20718, wd:Q312) AS ?result)}", "generated_sparql": "SELECT (COUNT(?p) as numOfSamsung) ?p WHERE {\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }"}, {"question": "which company is founded later, samsung or sony?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q20716 wdt:P571 ?sa. wd:Q41187 wdt:P571 ?so. BIND(IF((?sa > ?so), wd:Q20716, wd:Q41187) AS ?result)}", "generated_sparql": "SELECT DISTINCT ?company\nWHERE {\n    ?company wdt:P31 wd:Q12869.    # Samsung\n    ?company wdt:P31 wd:Q16438.    # Sony\n}"}, {"question": "who is taller, Lionel Messi or Cristiano Ronaldo\uff1f", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q615 wdt:P2048 ?number. wd:Q11571 wdt:P2048 ?number2. BIND(IF(?number > ?number2, wd:Q615, wd:Q11571) AS ?result)}", "generated_sparql": "SELECT ?messi ?heightMessi ?ronaldo ?heightRonaldo\nWHERE\n{\n  ?messi dbr:Q137467519 ;\n         foaf:name ?nameMessi ;\n         rdfs:type foaf:Person .\n  ?ronaldo dbr:Q12033027 ;\n         foaf:name ?nameRonaldo ;\n         rdfs:type foaf:Person .\n\n  ?messi dbo:height ?heightMessi.\n  ?ronaldo dbo:height ?heightRonaldo.\n\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }"}, {"question": "who has won more NBA awards, Michael Jordan or Kobe Bean Bryant\uff1f", "gold_sparql": "SELECT DISTINCT ?result WHERE {{SELECT (COUNT (DISTINCT ?number) AS ?mj) WHERE {wd:Q41421 p:P166/ps:P166 ?number.}} {SELECT (COUNT (DISTINCT ?number2) AS ?kb) WHERE {wd:Q25369 p:P166/ps:P166 ?number2.}}  BIND(IF(?mj > ?kb, wd:Q41421, wd:Q25369) AS ?result)}", "generated_sparql": "SELECT ?person ?awards_won\nWHERE {\n  ?person wdt:P31 wd:Q6025.\n  ?person wdt:P367 wd:Q27219.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Did Michael Jordan ever weigh more than Kobe Bean Bryant\uff1f", "gold_sparql": "ASK {wd:Q41421 p:P2067/psn:P2067/wikibase:quantityAmount ?mj. wd:Q25369 p:P2067/psn:P2067/wikibase:quantityAmount ?kb. BIND(IF(?mj > ?kb, wd:Q41421, wd:Q25369) AS ?result)}", "generated_sparql": "SELECT true() AS answer\nWHERE \n  { dbo:birthDay ?birthday. \n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "Who is older, Sebastian Vettel or Lewis Hamilton?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q42311 wdt:P569 ?bv. wd:Q9673 wdt:P569 ?bh. BIND(IF(?bv < ?bh, wd:Q42311, wd:Q9673) AS ?result)}", "generated_sparql": "SELECT ?vettel ?hamilton WHERE {\n  ?vettel wd:P31 wd:Q4713.\n  ?hamilton wd:P31 wd:Q4713.\n  ?vettel wd:P30 wd:Q11465360.\n  ?hamilton wd:P30 wd:Q11465363.\n  FILTER(CONTAINS(str(?vettel), \"Born\"))\n  FILTER(CONTAINS(str(?hamilton), \"Born\"))\n}"}, {"question": "which city is more populated, copenhagen or amsterdam?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1748 wdt:P1082 ?popc. wd:Q727 wdt:P1082 ?popa. BIND(IF((?popc > ?popa), wd:Q1748, wd:Q727) AS ?result)}", "generated_sparql": "SELECT DISTINCT ?city ?population\nWHERE {\n  ?city wd:P31 wd:Q108635. # Copenhagen\n  ?city wd:P31 wd:Q108845. # Amsterdam\n  \n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "How many things are part of the \"One Piece\" Franchise?", "gold_sparql": "SELECT (COUNT (DISTINCT ?part) AS ?result) WHERE {wd:Q673 wdt:P527 ?part}", "generated_sparql": "SELECT COUNT(*) AS num\nWHERE\n{\n   ?m wdt:P31 wd:Q2175412.\n   SERVICE wikibase:label { bd:serviceParam wikibase:labelLang \"en\". }"}, {"question": "How many fictional female swordfighters are there?", "gold_sparql": "SELECT (COUNT (DISTINCT ?sf) AS ?result) WHERE {?sf wdt:P31/wdt:P279* wd:Q95074; wdt:P106 wd:Q11397897; wdt:P21 wd:Q6581072}", "generated_sparql": "SELECT COUNT(*)\nWHERE {\n  ?s wdt:P31 wd:Q6284356. # Fictional character\n  ?s wdt:P431 wd:Q6393873. # Female\n  ?s wdt:P644 wd:Q53395351. # Swordfighter\n}"}, {"question": "which company started earlier, Black Diamond Equipment or la sportiva?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q2905359 wdt:P571 ?incbd. wd:Q3821214 wdt:P571 ?incls. BIND(IF((?incbd < ?incls), wd:Q2905359, wd:Q3821214) AS ?result)}", "generated_sparql": "SELECT \\{ {w:P4}"}, {"question": "which desert is bigger, sahara desert or arabian desert?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q6583 wdt:P2046 ?as. wd:Q208299 wdt:P2046 ?aa. BIND(IF((?as > ?aa), wd:Q6583, wd:Q208299) AS ?result)}", "generated_sparql": "SELECT ?desert ?size\nWHERE {\n  ?desert wdt:P1482 rdf:type <https://dbpedia.org/resource/Desert>.\n  ?desert wdt:P21 <wdt:Sahara_Desert>.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "who lives longer, series black or bellatrix Lestrange?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q713701 wdt:P570 ?ds. wd:Q1057918 wdt:P570 ?db. BIND(IF((?ds > ?db), wd:Q713701, wd:Q1057918) AS ?result)}", "generated_sparql": "SELECT ?x ?y\nWHERE {\n  ?x wd:P101 ?y.\n  FILTER(REGEXP(str(?x), 'Series Black', 'i'))\n  SERVICE wikibase:label { bd:serviceParam wikibase:language 'en'. }"}, {"question": "What is the area of the great lakes?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q7347 wdt:P2046 ?result}", "generated_sparql": "SELECT ?totalArea WHERE {\n  ?bodyOfWater wdt:P31 wd:Q6853383.  # Lake Michigan\n  ?bodyOfWater wdt:P31 wd:Q6853378.  # Lake Superior\n  ?bodyOfWater wdt:P31 wd:Q6853379.  # Lake Huron\n  ?bodyOfWater wdt:P31 wd:Q6853380.  # Lake Erie\n  ?bodyOfWater wdt:P31 wd:Q6853381.  # Lake Ontario\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "What is native name of the composer of the Japanese national anthem?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q17 wdt:P85/wdt:P86/wdt:P1559 ?result}", "generated_sparql": "SELECT ?composer\nWHERE {\n    SERVICE dbo:wiki {}"}, {"question": "Who is the founder of the capital of Vietnam?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q881 wdt:P36/wdt:P112 ?result}", "generated_sparql": "SELECT ?x WHERE {\n  ?x wdt:P31 wd:Q1088225.\n  ?x wdt:P380 ?city.\n  ?city wdt:P270 wd:Q9112.\n}"}, {"question": "Who is the manager of the operator of Neumayer III?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q7933 wdt:P137/wdt:P1037 ?result}", "generated_sparql": "SELECT wdt:P821 ?manager WHERE {\n  wd:Q4273580 wdt:P821 ?operator.\n  wd:Q4273580 wdt:P852 ?manager\n}"}, {"question": "How high is the mountain on which G\u00fcnther Messner died?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q195351 wdt:P20/wdt:P2044 ?result}", "generated_sparql": "SELECT ?mountain ?mountainLabel ?height ?mountainHeightLabel\nWHERE {\n  ?mountain wd:P21 wd:Q1011 @type wd:Mountain @label ?mountainLabel.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "What is the twitter name of Running Wild?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q163173 wdt:P740 ?result}", "generated_sparql": "SELECT ?twitterName\nWhere {\nSERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "How many times did the Italian national soccer team win the Fifa World Cup?", "gold_sparql": "SELECT (COUNT (DISTINCT ?win) AS ?result) WHERE {wd:Q676899 wdt:P2522 ?win. ?win wdt:P3450 wd:Q19317}", "generated_sparql": "SELECT COUNT(*) \nWHERE { \n    ?team wdt:P31 wd:Q98837.  # Italian national soccer team\n    ?team wdt:P431 wd:Q214097.  # FIFA World Cup\n    FILTER(LANG(?team) = 'en').  # Use only English labels\n}"}, {"question": "What is the area of the capital of Spitsbergen?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q25231 wdt:P36/wdt:P2046 ?result}", "generated_sparql": "SELECT ?value\nWHERE {\n  ?s wd:Q39 ?o.\n         wdt:P14 ?o.\n  FILTER(REGEXP(?s, \"Spitsbergen\"))\n          FILTER(REGEXP(?s, \"(Svalbard).*(\\bCapital\\b)\"))\n  VALUES(?value){?value wd:P31 wd:Q1176944.\n               wdt:P43 ?value.\n}"}, {"question": "What percentage of Andorra is covered with water?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q228 wdt:P2927 ?result}", "generated_sparql": "SELECT \n  (SUM(?a) / MAX(?b) * 100) AS percentage\nFROM \n  (SELECT ?a WHERE { ?a wd:label \"Andorra\". ?a wd:landform \"Island\". FILTER (CONTAINS(?a, \"Andorra\") && LCASE(?a) = \"andorra\") }"}, {"question": "How many countries are located around the euorpean Lake Constance?", "gold_sparql": "SELECT (COUNT (DISTINCT ?country) AS ?result) WHERE {wd:Q4127 wdt:P17 ?country. ?country wdt:P30 wd:Q46}", "generated_sparql": ""}, {"question": "With how many persons was Richard Burton married?", "gold_sparql": "SELECT (COUNT (DISTINCT ?sp) AS ?result) WHERE {wd:Q151973 wdt:P26 ?sp.}", "generated_sparql": "SELECT COUNT(DISTINCT ?person) \nWHERE {\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "At what coordinates was the \"Sender Teutoburger Wald\" erected?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q1717891 wdt:P625 ?result.}", "generated_sparql": "SELECT ?lat ?lon\nWHERE {\n  dbo:Q ?q .\n  dbo:s ?s .\n  SPARQL_CONTEXT {\n    dbo:q ?q .\n    dbo:s ?s .\n  }"}, {"question": "Where is the poet Alexander Pope buried?", "gold_sparql": "SELECT DISTINCT ?result WHERE {?poet wdt:P735 wd:Q923; wdt:P734 wd:Q15840785; wdt:P106 wd:Q49757; wdt:P119 ?result}", "generated_sparql": "SELECT ?b ?label\nWHERE {\n  ?b wdt:P11 wdt:P575 \"Alexander Pope\".\n  ?b wdt:P2048 ?x ?b wdt:P2047 ?Label.\n}"}, {"question": "In what country is the Kandahar-downhill?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q327818 wdt:P17 ?result}", "generated_sparql": "SELECT ?country \nWHERE {\n  ?place ?country ;\n  FILTER(REGEXP(LOWER(str(?place)), 'kandahar-downhill'))\n}"}, {"question": "Who founded the architectural firm who planned the Elbphilharmonie?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q673223 wdt:P84/wdt:P112 ?result}", "generated_sparql": "SELECT ?founder.label WHERE {\n  ?construction wdt:Q1111618. ?elbphilharmonie.\n  ?elbphilharmonie wdt:Q1112843. wdt:Q1112843 ?architecturalFirm.\n  ?architecturalFirm wikibase:P31 ?founder.\n  ?founder wikibase:P43 \"Architectural Firm Name\". # replace \"Architectural Firm Name\" with the actual name of the firm\n}"}, {"question": "Where are the founders of the band Metallica from?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q15920 wdt:P112/wdt:P19/wdt:P17 ?result}", "generated_sparql": "SELECT ?place\nWHERE {\n  ?band wdt:P31 wd:Q896.\n  ?band wdt:P4 > wd:Q31.\n  ?band wdt:P5 ?place.\n}"}, {"question": "Where does the Granny Smith apple variety come from?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q506040 wdt:P495 ?result}", "generated_sparql": "SELECT ?place\nWHERE {\n  ?item wdt:P42/wdt:P175 dbp:Apple.\n  ?item wdt:P134/dbp:GrannySmith.\n  ?item wdt:P46 dbp:Place.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"}, {"question": "What is the Fujiyama made of?", "gold_sparql": "SELECT DISTINCT ?result WHERE {wd:Q39231 wdt:P186 ?result}", "generated_sparql": "SELECT ?material\nWHERE {\n  ?thing wdt:P1686 ?material.\n  ?thing wikibase:label {\"en\":\"Fujiyama\"}"}]